<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="ru.yandex.qe.dispenser.ws"/>

    <import resource="webservice-ctx.xml"/>

    <import resource="quartz-jobs.xml"/>

    <aop:config proxy-target-class="true"/>

    <bean id="juggler" class="ru.yandex.qe.dispenser.standalone.MockJugglerApi"/>
    <bean id="tracker" class="ru.yandex.qe.dispenser.standalone.MockTrackerManager" primary="true"/>
    <bean id="abc" class="ru.yandex.qe.dispenser.standalone.MockAbcApi" primary="true"/>
    <bean id="mdsConfig" class="ru.yandex.qe.dispenser.standalone.MockMdsConfigApi"/>
    <bean id="staff" class="ru.yandex.qe.dispenser.standalone.MockStaff" primary="true"/>
    <bean id="d-api" class="ru.yandex.qe.dispenser.standalone.MockDApi" primary="true"/>
    <bean id="iam-api" class="ru.yandex.qe.dispenser.standalone.MockIAMApi" primary="true"/>
    <bean id="billing-api" class="ru.yandex.qe.dispenser.standalone.MockBillingApi" primary="true"/>
    <bean id="diMailSender" class="ru.yandex.qe.dispenser.standalone.MockEmailSender" primary="true">
        <property name="mailSender">
            <null/>
        </property>
        <property name="from" value="${r.y.q.d.d.d.n.EmailSender.from}"/>
    </bean>

    <bean id="hierarchyRequiredAspect" class="java.lang.Object" primary="true"/>

    <bean id="lotsManager" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.lots.LotsManager"/>
    </bean>

    <bean id="updateProjectMembers" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.abc.UpdateProjectMembers"/>
    </bean>

    <bean id="entityLifetimeManager" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.entity.EntityLifetimeManager"/>
    </bean>
    <bean id="requestManager" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.request.RequestManager"/>
    </bean>

    <bean id="notifier" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.notifications.NotificationManager"/>
    </bean>

    <bean id="projectTreeSyncTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.abc.ProjectTreeSyncTask"/>
    </bean>

    <bean id="quotaMaxAggregationJob" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.quota.QuotaMaxAggregationJob"/>
    </bean>

    <bean id="servicesOverCommitValueMetrics" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.ServicesOverCommitValueMetrics"/>
    </bean>

    <bean id="hierarchySupplier" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.hierarchy.CachingHierarchySupplier"/>
    </bean>

    <bean id="staffSyncTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.staff.StaffSyncTask"/>
    </bean>

    <bean id="staffCache" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.dao.person.StaffCache"/>
    </bean>

    <bean id="reCreateRequestTicketsTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.quota.request.ReCreateRequestTicketsTask"/>
    </bean>

    <bean id="distributedManager" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.distributed.DistributedManager"/>
    </bean>

    <bean id="mixedQuotaDao" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.dao.quota.MixedQuotaDao"/>
    </bean>

    <bean id="entityDao" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.dao.entity.InMemoryOnlyEntityDao"/>
    </bean>

    <bean id="quotaHistoryClearTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.history.QuotaHistoryClearTask"/>
    </bean>

    <bean id="quotaChangeRequestHistoryClearTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.domain.history.QuotaChangeRequestHistoryClearTask"/>
    </bean>

    <bean id="quotaChangeOwningCostRefreshTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.quota.request.owning_cost.QuotaChangeOwningCostRefreshTask"/>
    </bean>

    <bean id="campaignOwningCostRefreshTask" class="org.mockito.Mockito" factory-method="mock" primary="true">
        <constructor-arg value="ru.yandex.qe.dispenser.ws.quota.request.owning_cost.campaignOwningCost.CampaignOwningCostRefreshTask"/>
    </bean>

</beans>
