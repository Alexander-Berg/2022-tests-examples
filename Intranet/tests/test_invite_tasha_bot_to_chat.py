# coding: utf-8

from __future__ import unicode_literals

import mock
import pytest

from uhura.lib import tasha
from utils import handle_utterance


def test_cancel_invite(uid, tg_app):
    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    expected_message = '–ö–∞–∫ —Å–∫–∞–∂–µ—à—å!'
    handle_utterance(tg_app, uid, '–æ—Ç–º–µ–Ω–∞', expected_message)


def test_no_chats_slots(uid, tg_app):
    link = 'https://t.me/joinchat/Anc'
    with pytest.raises(ValueError, message='Chats slots overflow'),\
         mock.patch('uhura.lib.tasha.get_request'),\
         mock.patch('uhura.lib.tasha.get_tvm_service_headers'):
        tasha.invite_to_chat_by_link(link)

    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    expected_message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,ü§î –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
    handle_utterance(tg_app, uid, link, expected_message)


def test_network_error(uid, tg_app):
    link = 'https://t.me/joinchat/Anc'
    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    expected_message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,ü§î –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
    expected_url = 'https://tasha.test.yandex-team.ru/worftoolsbot/telegram/invitetochat/'
    expected_data = {'invite_link': link}
    with mock.patch('uhura.external.intranet.post_request') as pr_post, \
         mock.patch('uhura.lib.tasha.get_request') as pr_get, \
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['WorfToolsBot']
        pr_post.return_value = None
        handle_utterance(tg_app, uid, link, expected_message)
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=30, headers={})

        with pytest.raises(ValueError, message='failed to add any of bots'):
            tasha.invite_to_chat_by_link(link)


def test_success(uid, tg_app):
    link = 'https://t.me/joinchat/Anc'
    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    expected_message = '–£—Å–ø–µ—Ö! –ë–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ @TuvokToolsBot –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —á–∞—Ç ü§ì'
    expected_url = 'https://tasha.test.yandex-team.ru/tuvoktoolsbot/telegram/invitetochat/'
    expected_data = {'invite_link': link}
    with mock.patch('uhura.external.intranet.post_request') as pr_post,\
         mock.patch('uhura.lib.tasha.get_request') as pr_get,\
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TuvokToolsBot']
        pr_post.return_value = {'status': 'success'}
        handle_utterance(tg_app, uid, link, expected_message)
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=30, headers={})


def test_already_participant(uid, tg_app):
    link = 'https://t.me/joinchat/Anc'
    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    expected_message = '–û–¥–∏–Ω –∏–∑ –±–æ—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–∂–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ üëç'
    expected_url = 'https://tasha.test.yandex-team.ru/tuvoktoolsbot/telegram/invitetochat/'
    expected_data = {'invite_link': link}
    with mock.patch('uhura.external.intranet.post_request') as pr_post, \
         mock.patch('uhura.lib.tasha.get_request') as pr_get, \
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TuvokToolsBot']
        pr_post.return_value = {'status': 'already_participant'}
        handle_utterance(tg_app, uid, link, expected_message)
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=30, headers={})


def test_expired_link_or_banned(uid, tg_app):
    link = 'https://t.me/joinchat/Anc'
    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    expected_message = (
        'Invite-—Å—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ª–∏–±–æ @TuvokToolsBot –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏ '
        'invite-—Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, –∏ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ @TuvokToolsBot –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ (–∞ –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω, '
        '—Ä–∞–∑–±–∞–Ω—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞) –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'
    )
    expected_url = 'https://tasha.test.yandex-team.ru/tuvoktoolsbot/telegram/invitetochat/'
    expected_data = {'invite_link': link}
    with mock.patch('uhura.external.intranet.post_request') as pr_post, \
         mock.patch('uhura.lib.tasha.get_request') as pr_get, \
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TuvokToolsBot']
        pr_post.return_value = {'status': 'expired_link_or_banned'}
        handle_utterance(tg_app, uid, link, expected_message)
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=30, headers={})


@pytest.mark.parametrize('bots_banned', ['single', 'all'])
def test_create_chat_choose_min_not_overflow_bot(uid, tg_app, bots_banned):
    def tuvok_fails_response(url, data, timeout, **kwargs):
        if url == 'https://tasha.test.yandex-team.ru/tuvoktoolsbot/telegram/invitetochat/':
            return None
        else:
            return {'status': 'success'}

    # test success
    link = 'https://t.me/joinchat/Anc'
    expected_message = (
        '–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç/–∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏–∑ –±–æ—Ç–æ–≤ '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ—Ç–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è '
        '—ç—Ç–∏–º —á–∞—Ç–æ–º/–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç '
        '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    )
    handle_utterance(tg_app, uid, '–ø—Ä–∏–≥–ª–∞—Å–∏ –¢–∞—à—É –≤ —á–∞—Ç', expected_message, cancel_button=True)
    if bots_banned == 'single':
        expected_message = '–£—Å–ø–µ—Ö! –ë–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ @WorfToolsBot –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ —á–∞—Ç ü§ì'
        expected_url = 'https://tasha.test.yandex-team.ru/worftoolsbot/telegram/invitetochat/'
    else:
        expected_message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,ü§î –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
        expected_url = 'https://tasha.test.yandex-team.ru/paveltoolsbot/telegram/invitetochat/'
    expected_data = {'invite_link': link}
    with mock.patch('uhura.external.intranet.post_request') as pr_post, \
         mock.patch('uhura.lib.tasha.get_request') as pr_get, \
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TuvokToolsBot', 'WorfToolsBot', 'PavelToolsBot']
        if bots_banned == 'single':
            pr_post.side_effect = tuvok_fails_response
        else:
            pr_post.return_value = None
        handle_utterance(tg_app, uid, link, expected_message)

        assert pr_post.call_count == {'single': 2, 'all': 3}[bots_banned]

        pr_post.assert_called_with(expected_url, data=expected_data, timeout=30, headers={})
