# coding: utf-8

from __future__ import unicode_literals

import mock
import pytest

from utils import handle_utterance

CONFIRM_KEYBOARD = ['–î–∞', '–ù–µ—Ç']


def test_create_chat_success(uid, tg_app):
    # create chat test
    handle_utterance(tg_app, uid, '–°–æ–∑–¥–∞–π —á–∞—Ç  –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞', cancel_button=True)
    title = '1234'
    expected_message = (
        '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç "%s"? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π "–î–∞", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è '
        '–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –∑–∞ '
        '–∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    ) % title
    handle_utterance(tg_app, uid, title, expected_message, CONFIRM_KEYBOARD)
    expected_message = (
        '–Ø —Å–æ–∑–¥–∞–ª–∞ —á–∞—Ç "%s" –∏ —Å–¥–µ–ª–∞–ª–∞ —Ç–µ–±—è –≤ –Ω—ë–º –∞–¥–º–∏–Ω–æ–º.üòä –¢–µ–ø–µ—Ä—å –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ '
        '—á–∞—Ç–æ–≤.'
    ) % title
    expected_url = 'https://tasha.test.yandex-team.ru/tashatesttoolsbot/telegram/createchat/'
    expected_data = {
        'telegram_id': str(uid),
        'title': '1234',
        'telegram_username': 'UhuraAppBot',
    }
    with mock.patch('uhura.external.intranet.post_request') as pr_post,\
         mock.patch('uhura.lib.tasha.get_request') as pr_get,\
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TashaTestToolsBot']
        pr_post.return_value = {'status': 'success'}
        handle_utterance(tg_app, uid, '–î–∞', expected_message)
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=10, headers={})


@pytest.mark.parametrize('bots_banned', ['single', 'all'])
def test_create_chat_choose_min_not_overflow_bot(uid, tg_app, bots_banned):
    def tuvok_fails_response(url, data, timeout, **kwargs):
        if url == 'https://tasha.test.yandex-team.ru/tuvoktoolsbot/telegram/createchat/':
            return None
        else:
            return {'status': 'success'}
    # create chat test
    handle_utterance(tg_app, uid, '–°–æ–∑–¥–∞–π —á–∞—Ç  –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞', cancel_button=True)
    title = '1234'
    expected_message = (
        '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç "%s"? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π "–î–∞", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è '
        '–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –∑–∞ '
        '–∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    ) % title
    handle_utterance(tg_app, uid, title, expected_message, CONFIRM_KEYBOARD)
    if bots_banned == 'single':
        expected_message = (
            '–Ø —Å–æ–∑–¥–∞–ª–∞ —á–∞—Ç "%s" –∏ —Å–¥–µ–ª–∞–ª–∞ —Ç–µ–±—è –≤ –Ω—ë–º –∞–¥–º–∏–Ω–æ–º.üòä –¢–µ–ø–µ—Ä—å –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ç–≤–æ–µ–º —Å–ø–∏—Å–∫–µ '
            '—á–∞—Ç–æ–≤.'
        ) % title
    else:
        expected_message = '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,ü§î –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
    # bot with minimum of chats but not overflowed
    expected_url = 'https://tasha.test.yandex-team.ru/worftoolsbot/telegram/createchat/'
    expected_data = {
        'telegram_id': str(uid),
        'title': '1234',
        'telegram_username': 'UhuraAppBot',
    }
    with mock.patch('uhura.external.intranet.post_request') as pr_post, \
         mock.patch('uhura.lib.tasha.get_request') as pr_get, \
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TuvokToolsBot', 'WorfToolsBot']
        if bots_banned == 'single':
            pr_post.side_effect = tuvok_fails_response
        else:
            pr_post.return_value = None
        handle_utterance(tg_app, uid, '–î–∞', expected_message)
        assert pr_post.call_count == 2
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=10, headers={})


def test_create_chat_no_tasha_statistics(uid, tg_app):
    title = '1234'
    handle_utterance(tg_app, uid, '–°–æ–∑–¥–∞–π —á–∞—Ç  –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞', cancel_button=True)
    expected_message = (
        '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç "%s"? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π "–î–∞", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è '
        '–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –∑–∞ '
        '–∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    ) % title
    handle_utterance(tg_app, uid, title, expected_message, CONFIRM_KEYBOARD)
    expected_message = '–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,ü§î –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.'
    with mock.patch('uhura.lib.tasha.get_request') as pr_get,\
         mock.patch('uhura.lib.tasha.get_tvm_service_headers'):
        pr_get.return_value = ['TuvokToolsBot', 'WorfToolsBot']
        handle_utterance(tg_app, uid, '–î–∞', expected_message)


def test_do_not_create_chat(uid, tg_app):
    title = '12345'
    handle_utterance(tg_app, uid, '–°–æ–∑–¥–∞–π —á–∞—Ç  –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞', cancel_button=True)
    expected_message = (
        '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç "%s"? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π "–î–∞", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è '
        '–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –∑–∞ '
        '–∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
    ) % title
    handle_utterance(tg_app, uid, title, expected_message, CONFIRM_KEYBOARD)
    expected_message = '–ö–∞–∫ —Å–∫–∞–∂–µ—à—å!'
    handle_utterance(tg_app, uid, '–ù–µ—Ç', expected_message)


def test_privacy_error(uid, tg_app):
    # create chat test
    handle_utterance(tg_app, uid, '–°–æ–∑–¥–∞–π —á–∞—Ç  –ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '–í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞', cancel_button=True)
    title = '1234'
    expected_message = (
                           '–°–æ–∑–¥–∞—Ç—å —á–∞—Ç "%s"? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–∏–º–∞–π "–î–∞", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è '
                           '–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤, –∑–∞ '
                           '–∫–æ—Ç–æ—Ä—ã–º–∏ –±–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.'
                       ) % title
    handle_utterance(tg_app, uid, title, expected_message, CONFIRM_KEYBOARD)
    expected_message = (
                           '–£ —Ç–µ–±—è —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É —è –Ω–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ —á–∞—Ç. '
                           '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å–ª–∞–±—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç –µ—â–µ —Ä–∞–∑. '
                           '–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —á–∞—Ç –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω, —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ.'
                       )
    expected_url = 'https://tasha.test.yandex-team.ru/tashatesttoolsbot/telegram/createchat/'
    expected_data = {
        'telegram_id': str(uid),
        'title': '1234',
        'telegram_username': 'UhuraAppBot',
    }
    with mock.patch('uhura.external.intranet.post_request') as pr_post,\
         mock.patch('uhura.lib.tasha.get_request') as pr_get,\
         mock.patch('uhura.lib.tasha.get_tvm_service_headers') as tvm_mock:
        tvm_mock.return_value = {}
        pr_get.return_value = ['TashaTestToolsBot']
        pr_post.return_value = {'status': 'privacy_error'}
        handle_utterance(tg_app, uid, '–î–∞', expected_message)
        pr_post.assert_called_with(expected_url, data=expected_data, timeout=10, headers={})
