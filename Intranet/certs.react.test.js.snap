// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should contain a proper content 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getAction": [Function],
      "getActions": [Function],
      "getState": [Function],
      "isActionDispatched": [Function],
      "isActionTypeDispatched": [Function],
      "subscribe": [Function],
    }
  }
>
  <certs
    additionalFiltersKeys={
      Array [
        "a",
        "b",
      ]
    }
    expr="/certificates/:certId"
    filtersKeys={
      Array [
        "a",
      ]
    }
    getFilters={
      [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": Object {
              "ca_name": "ca_name",
              "common_name": "common_name",
              "status": "status",
              "type": "type",
              "user": "user",
            },
          },
          Object {
            "isThrow": false,
            "value": Object {
              "ca_name": "ca_name",
              "common_name": "common_name",
              "status": "status",
              "type": "type",
              "user": "user",
            },
          },
        ],
      }
    }
    path="/certificates/1"
  >
    <div
      className="certs"
      data-lego="react"
      style={Object {}}
    >
      <Connect(filters.container)
        additionalFiltersKeys={
          Array [
            "a",
            "b",
          ]
        }
        expr="/certificates/:certId"
        filtersKeys={
          Array [
            "a",
          ]
        }
        getFilters={
          [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Object {
                  "ca_name": "ca_name",
                  "common_name": "common_name",
                  "status": "status",
                  "type": "type",
                  "user": "user",
                },
              },
              Object {
                "isThrow": false,
                "value": Object {
                  "ca_name": "ca_name",
                  "common_name": "common_name",
                  "status": "status",
                  "type": "type",
                  "user": "user",
                },
              },
            ],
          }
        }
        key="filters"
        path="/certificates/1"
      >
        <filters.container
          additionalFiltersKeys={
            Array [
              "a",
              "b",
            ]
          }
          disableScroll={[Function]}
          enableScroll={[Function]}
          expr="/certificates/:certId"
          filterQueryStr={[Function]}
          filtersKeys={
            Array [
              "a",
            ]
          }
          getFilters={
            [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": Object {
                    "ca_name": "ca_name",
                    "common_name": "common_name",
                    "status": "status",
                    "type": "type",
                    "user": "user",
                  },
                },
                Object {
                  "isThrow": false,
                  "value": Object {
                    "ca_name": "ca_name",
                    "common_name": "common_name",
                    "status": "status",
                    "type": "type",
                    "user": "user",
                  },
                },
              ],
            }
          }
          path="/certificates/1"
          updateQueryStr={[Function]}
        >
          <filters
            additionalFiltersAppliedNum={0}
            filters={
              Object {
                "ca_name": "ca_name",
                "common_name": "common_name",
                "status": "status",
                "type": "type",
                "user": "user",
              }
            }
            getOnFilterChange={[Function]}
            isAdditionalFiltersVisible={false}
            onApplyClick={[Function]}
            onClearClick={[Function]}
            onToggleAdditionalFiltersClick={[Function]}
          >
            <div
              className="ta-component filters"
              data-lego="react"
              style={Object {}}
            >
              <filters__main
                additionalFiltersAppliedNum={0}
                filters={
                  Object {
                    "ca_name": "ca_name",
                    "common_name": "common_name",
                    "status": "status",
                    "type": "type",
                    "user": "user",
                  }
                }
                getOnFilterChange={[Function]}
                isAdditionalFiltersVisible={false}
                key="main"
                onApplyClick={[Function]}
                onClearClick={[Function]}
                onToggleAdditionalFiltersClick={[Function]}
              >
                <div
                  className="filters__main"
                  data-lego="react"
                  style={Object {}}
                >
                  <filters__filter
                    dataprovider={
                      Object {
                        "pathname": "/api/frontend/suggest/cert_types/",
                      }
                    }
                    key="filter-type"
                    onChange={[Function]}
                    placeholder="Тип"
                    quick={true}
                    single={true}
                    text=""
                    title=""
                    type="suggest"
                    value="type"
                  >
                    <div
                      className="filters__filter filters__filter_type_suggest filters__filter_quick"
                      data-lego="react"
                      style={Object {}}
                    >
                      <ta-suggest
                        dataprovider={
                          Object {
                            "pathname": "/api/frontend/suggest/cert_types/",
                          }
                        }
                        key="suggest"
                        mix={
                          Object {
                            "block": "filters",
                            "elem": "suggest-control",
                            "mods": Object {},
                          }
                        }
                        onChange={[Function]}
                        placeholder="Тип"
                        single={true}
                        size="m"
                        theme="normal"
                        value={
                          Array [
                            "type",
                          ]
                        }
                      >
                        <div
                          className="ta-component ta-suggest ta-suggest_size_m ta-suggest_load ta-suggest_single filters__suggest-control"
                          data-lego="react"
                          style={Object {}}
                        >
                          <ta-suggest-control
                            dataprovider={
                              Object {
                                "pathname": "/api/frontend/suggest/cert_types/",
                              }
                            }
                            empty={true}
                            fetchData={[Function]}
                            id="uniq1"
                            key="control"
                            mix={
                              Object {
                                "block": "ta-suggest",
                                "elem": "control",
                                "mods": Object {},
                              }
                            }
                            onChange={[Function]}
                            onSelect={[Function]}
                            placeholder="Тип"
                            single={true}
                            size="m"
                            theme="normal"
                            value={
                              Array [
                                "type",
                              ]
                            }
                          >
                            <textinput
                              attrs={
                                Object {
                                  "onClick": [Function],
                                  "onMouseDown": [Function],
                                  "ref": Object {
                                    "current": <span
                                      class="control textinput textinput_theme_normal textinput_view_classic textinput_size_m textinput_has-icon_yes textinput_has-clear_yes ta-suggest-control ta-suggest-control_size_m ta-suggest__control"
                                      data-lego="react"
                                    >
                                      <span
                                        class="icon icon_glyph_type-arrow icon_has-glyph_yes textinput__icon textinput__icon_side_right"
                                        data-lego="react"
                                      >
                                        <svg
                                          focusable="false"
                                          height="0"
                                          viewBox="0 0 13 8"
                                          width="0"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"
                                          />
                                        </svg>
                                      </span>
                                      <input
                                        autocomplete="off"
                                        class="textinput__control"
                                        data-lego="react"
                                        id="uniq1"
                                        placeholder="Тип"
                                        type="text"
                                        value=""
                                      />
                                      <span
                                        class="textinput__box"
                                        data-lego="react"
                                      />
                                      <span
                                        class="icon icon_type_cross icon_size_m textinput__clear textinput__clear_theme_normal textinput__icon"
                                        data-lego="react"
                                      />
                                      <div
                                        class="ta-component ta-loading-progress ta-loading-progress_progress ta-suggest-control__spin"
                                        data-lego="react"
                                      />
                                    </span>,
                                  },
                                }
                              }
                              autocomplete={false}
                              content={true}
                              hasClear={true}
                              iconRight={
                                <icon
                                  glyph="type-arrow"
                                />
                              }
                              id="uniq1"
                              innerRef={[Function]}
                              mix={
                                Array [
                                  Object {
                                    "block": "ta-suggest-control",
                                    "mods": Object {
                                      "__entities": Object {
                                        "focused": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "load": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "open": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "size": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                      },
                                      "focused": false,
                                      "load": false,
                                      "open": false,
                                      "size": "m",
                                    },
                                  },
                                  Object {
                                    "block": "ta-suggest",
                                    "elem": "control",
                                    "mods": Object {},
                                  },
                                ]
                              }
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Тип"
                              size="m"
                              text=""
                              theme="normal"
                              tone="default"
                              type="text"
                              view="classic"
                            >
                              <span
                                className="control textinput textinput_theme_normal textinput_view_classic textinput_size_m textinput_has-icon_yes textinput_has-clear_yes ta-suggest-control ta-suggest-control_size_m ta-suggest__control"
                                data-lego="react"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                style={Object {}}
                              >
                                <textinput__icon
                                  key="right"
                                  side="right"
                                >
                                  <icon
                                    glyph="type-arrow"
                                    mix={
                                      Array [
                                        Object {
                                          "block": "textinput",
                                          "elem": "icon",
                                          "mods": Object {
                                            "__entities": Object {
                                              "side": Object {
                                                "textinput$icon": true,
                                              },
                                            },
                                            "side": "right",
                                          },
                                        },
                                        undefined,
                                      ]
                                    }
                                  >
                                    <span
                                      className="icon icon_glyph_type-arrow icon_has-glyph_yes textinput__icon textinput__icon_side_right"
                                      data-lego="react"
                                      style={Object {}}
                                    >
                                      <svg
                                        focusable="false"
                                        height="0"
                                        viewBox="0 0 13 8"
                                        width="0"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"
                                        />
                                      </svg>
                                    </span>
                                  </icon>
                                </textinput__icon>
                                <textinput__control
                                  autoComplete="off"
                                  id="uniq1"
                                  innerRef={[Function]}
                                  key="control"
                                  onChange={[Function]}
                                  placeholder="Тип"
                                  type="text"
                                  value=""
                                >
                                  <input
                                    autoComplete="off"
                                    className="textinput__control"
                                    data-lego="react"
                                    id="uniq1"
                                    onChange={[Function]}
                                    placeholder="Тип"
                                    style={Object {}}
                                    type="text"
                                    value=""
                                  />
                                </textinput__control>
                                <textinput__box
                                  key="box"
                                >
                                  <span
                                    className="textinput__box"
                                    data-lego="react"
                                    style={Object {}}
                                  />
                                </textinput__box>
                                <textinput__clear
                                  key="clear"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  size="m"
                                  theme="normal"
                                  view="classic"
                                  visible=""
                                >
                                  <icon
                                    attrs={
                                      Object {
                                        "onBlur": [Function],
                                        "onClick": [Function],
                                        "onFocus": [Function],
                                        "onKeyDown": [Function],
                                        "onKeyUp": [Function],
                                        "onMouseDown": [Function],
                                        "onMouseEnter": [Function],
                                        "onMouseLeave": [Function],
                                        "onMouseUp": [Function],
                                      }
                                    }
                                    mix={
                                      Array [
                                        Object {
                                          "block": "textinput",
                                          "elem": "clear",
                                          "mods": Object {
                                            "__entities": Object {
                                              "disabled": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "focused": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "hovered": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "pressed": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "theme": Object {
                                                "textinput$clear": true,
                                              },
                                              "visible": Object {
                                                "textinput$clear": true,
                                              },
                                            },
                                            "disabled": false,
                                            "focused": false,
                                            "hovered": false,
                                            "pressed": false,
                                            "theme": "normal",
                                            "visible": false,
                                          },
                                        },
                                        Object {
                                          "block": "textinput",
                                          "elem": "icon",
                                          "mods": Object {},
                                        },
                                      ]
                                    }
                                    size="m"
                                    type="cross"
                                  >
                                    <span
                                      className="icon icon_type_cross icon_size_m textinput__clear textinput__clear_theme_normal textinput__icon"
                                      data-lego="react"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      style={Object {}}
                                    />
                                  </icon>
                                </textinput__clear>
                                <ta-loading-progress
                                  loadings={1}
                                  mix={
                                    Object {
                                      "block": "ta-suggest-control",
                                      "elem": "spin",
                                      "mods": Object {},
                                    }
                                  }
                                >
                                  <div
                                    className="ta-component ta-loading-progress ta-loading-progress_progress ta-suggest-control__spin"
                                    data-lego="react"
                                    style={Object {}}
                                  />
                                </ta-loading-progress>
                                <ta-suggest-control__popup
                                  data={Array []}
                                  getInputRef={[Function]}
                                  init={false}
                                  onCloseToListScrollEnd={[Function]}
                                  onItemSelect={[Function]}
                                  onOutsideClick={[Function]}
                                  open={false}
                                  size="m"
                                >
                                  <popup2
                                    anchor={[Function]}
                                    attrs={
                                      Object {
                                        "onMouseDown": [Function],
                                      }
                                    }
                                    autoclosable={true}
                                    directions={
                                      Array [
                                        "bottom-left",
                                        "top-left",
                                      ]
                                    }
                                    mainOffset={2}
                                    mix={
                                      Array [
                                        Object {
                                          "block": "ta-suggest-control",
                                          "elem": "popup",
                                          "mods": Object {
                                            "init": false,
                                            "size": "m",
                                          },
                                        },
                                        Object {
                                          "block": "uniq2",
                                          "mods": Object {},
                                        },
                                      ]
                                    }
                                    onAfterClose={[Function]}
                                    onAfterOpen={[Function]}
                                    onBeforeClose={[Function]}
                                    onBeforeOpen={[Function]}
                                    onOutsideClick={[Function]}
                                    secondaryOffset={0}
                                    tailOffset={0}
                                    target="anchor"
                                    theme="normal"
                                    view="classic"
                                    visible={false}
                                    zIndexGroupLevel={0}
                                  />
                                </ta-suggest-control__popup>
                              </span>
                            </textinput>
                          </ta-suggest-control>
                          <ta-suggest__footer
                            key="footer"
                            onClick={[Function]}
                            onItemDelete={[Function]}
                            values={Array []}
                          >
                            <div
                              className="ta-component ta-suggest__footer"
                              data-lego="react"
                              onMouseDown={[Function]}
                              style={Object {}}
                            />
                          </ta-suggest__footer>
                        </div>
                      </ta-suggest>
                    </div>
                  </filters__filter>
                  <filters__filter
                    dataprovider={
                      Object {
                        "pathname": "/api/frontend/suggest/statuses/",
                      }
                    }
                    key="filter-status"
                    onChange={[Function]}
                    placeholder="Статус"
                    quick={true}
                    single={true}
                    text=""
                    title=""
                    type="suggest"
                    value="status"
                  >
                    <div
                      className="filters__filter filters__filter_type_suggest filters__filter_quick"
                      data-lego="react"
                      style={Object {}}
                    >
                      <ta-suggest
                        dataprovider={
                          Object {
                            "pathname": "/api/frontend/suggest/statuses/",
                          }
                        }
                        key="suggest"
                        mix={
                          Object {
                            "block": "filters",
                            "elem": "suggest-control",
                            "mods": Object {},
                          }
                        }
                        onChange={[Function]}
                        placeholder="Статус"
                        single={true}
                        size="m"
                        theme="normal"
                        value={
                          Array [
                            "status",
                          ]
                        }
                      >
                        <div
                          className="ta-component ta-suggest ta-suggest_size_m ta-suggest_load ta-suggest_single filters__suggest-control"
                          data-lego="react"
                          style={Object {}}
                        >
                          <ta-suggest-control
                            dataprovider={
                              Object {
                                "pathname": "/api/frontend/suggest/statuses/",
                              }
                            }
                            empty={true}
                            fetchData={[Function]}
                            id="uniq3"
                            key="control"
                            mix={
                              Object {
                                "block": "ta-suggest",
                                "elem": "control",
                                "mods": Object {},
                              }
                            }
                            onChange={[Function]}
                            onSelect={[Function]}
                            placeholder="Статус"
                            single={true}
                            size="m"
                            theme="normal"
                            value={
                              Array [
                                "status",
                              ]
                            }
                          >
                            <textinput
                              attrs={
                                Object {
                                  "onClick": [Function],
                                  "onMouseDown": [Function],
                                  "ref": Object {
                                    "current": <span
                                      class="control textinput textinput_theme_normal textinput_view_classic textinput_size_m textinput_has-icon_yes textinput_has-clear_yes ta-suggest-control ta-suggest-control_size_m ta-suggest__control"
                                      data-lego="react"
                                    >
                                      <span
                                        class="icon icon_glyph_type-arrow icon_has-glyph_yes textinput__icon textinput__icon_side_right"
                                        data-lego="react"
                                      >
                                        <svg
                                          focusable="false"
                                          height="0"
                                          viewBox="0 0 13 8"
                                          width="0"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"
                                          />
                                        </svg>
                                      </span>
                                      <input
                                        autocomplete="off"
                                        class="textinput__control"
                                        data-lego="react"
                                        id="uniq3"
                                        placeholder="Статус"
                                        type="text"
                                        value=""
                                      />
                                      <span
                                        class="textinput__box"
                                        data-lego="react"
                                      />
                                      <span
                                        class="icon icon_type_cross icon_size_m textinput__clear textinput__clear_theme_normal textinput__icon"
                                        data-lego="react"
                                      />
                                      <div
                                        class="ta-component ta-loading-progress ta-loading-progress_progress ta-suggest-control__spin"
                                        data-lego="react"
                                      />
                                    </span>,
                                  },
                                }
                              }
                              autocomplete={false}
                              content={true}
                              hasClear={true}
                              iconRight={
                                <icon
                                  glyph="type-arrow"
                                />
                              }
                              id="uniq3"
                              innerRef={[Function]}
                              mix={
                                Array [
                                  Object {
                                    "block": "ta-suggest-control",
                                    "mods": Object {
                                      "__entities": Object {
                                        "focused": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "load": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "open": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "size": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                      },
                                      "focused": false,
                                      "load": false,
                                      "open": false,
                                      "size": "m",
                                    },
                                  },
                                  Object {
                                    "block": "ta-suggest",
                                    "elem": "control",
                                    "mods": Object {},
                                  },
                                ]
                              }
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Статус"
                              size="m"
                              text=""
                              theme="normal"
                              tone="default"
                              type="text"
                              view="classic"
                            >
                              <span
                                className="control textinput textinput_theme_normal textinput_view_classic textinput_size_m textinput_has-icon_yes textinput_has-clear_yes ta-suggest-control ta-suggest-control_size_m ta-suggest__control"
                                data-lego="react"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                style={Object {}}
                              >
                                <textinput__icon
                                  key="right"
                                  side="right"
                                >
                                  <icon
                                    glyph="type-arrow"
                                    mix={
                                      Array [
                                        Object {
                                          "block": "textinput",
                                          "elem": "icon",
                                          "mods": Object {
                                            "__entities": Object {
                                              "side": Object {
                                                "textinput$icon": true,
                                              },
                                            },
                                            "side": "right",
                                          },
                                        },
                                        undefined,
                                      ]
                                    }
                                  >
                                    <span
                                      className="icon icon_glyph_type-arrow icon_has-glyph_yes textinput__icon textinput__icon_side_right"
                                      data-lego="react"
                                      style={Object {}}
                                    >
                                      <svg
                                        focusable="false"
                                        height="0"
                                        viewBox="0 0 13 8"
                                        width="0"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"
                                        />
                                      </svg>
                                    </span>
                                  </icon>
                                </textinput__icon>
                                <textinput__control
                                  autoComplete="off"
                                  id="uniq3"
                                  innerRef={[Function]}
                                  key="control"
                                  onChange={[Function]}
                                  placeholder="Статус"
                                  type="text"
                                  value=""
                                >
                                  <input
                                    autoComplete="off"
                                    className="textinput__control"
                                    data-lego="react"
                                    id="uniq3"
                                    onChange={[Function]}
                                    placeholder="Статус"
                                    style={Object {}}
                                    type="text"
                                    value=""
                                  />
                                </textinput__control>
                                <textinput__box
                                  key="box"
                                >
                                  <span
                                    className="textinput__box"
                                    data-lego="react"
                                    style={Object {}}
                                  />
                                </textinput__box>
                                <textinput__clear
                                  key="clear"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  size="m"
                                  theme="normal"
                                  view="classic"
                                  visible=""
                                >
                                  <icon
                                    attrs={
                                      Object {
                                        "onBlur": [Function],
                                        "onClick": [Function],
                                        "onFocus": [Function],
                                        "onKeyDown": [Function],
                                        "onKeyUp": [Function],
                                        "onMouseDown": [Function],
                                        "onMouseEnter": [Function],
                                        "onMouseLeave": [Function],
                                        "onMouseUp": [Function],
                                      }
                                    }
                                    mix={
                                      Array [
                                        Object {
                                          "block": "textinput",
                                          "elem": "clear",
                                          "mods": Object {
                                            "__entities": Object {
                                              "disabled": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "focused": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "hovered": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "pressed": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "theme": Object {
                                                "textinput$clear": true,
                                              },
                                              "visible": Object {
                                                "textinput$clear": true,
                                              },
                                            },
                                            "disabled": false,
                                            "focused": false,
                                            "hovered": false,
                                            "pressed": false,
                                            "theme": "normal",
                                            "visible": false,
                                          },
                                        },
                                        Object {
                                          "block": "textinput",
                                          "elem": "icon",
                                          "mods": Object {},
                                        },
                                      ]
                                    }
                                    size="m"
                                    type="cross"
                                  >
                                    <span
                                      className="icon icon_type_cross icon_size_m textinput__clear textinput__clear_theme_normal textinput__icon"
                                      data-lego="react"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      style={Object {}}
                                    />
                                  </icon>
                                </textinput__clear>
                                <ta-loading-progress
                                  loadings={1}
                                  mix={
                                    Object {
                                      "block": "ta-suggest-control",
                                      "elem": "spin",
                                      "mods": Object {},
                                    }
                                  }
                                >
                                  <div
                                    className="ta-component ta-loading-progress ta-loading-progress_progress ta-suggest-control__spin"
                                    data-lego="react"
                                    style={Object {}}
                                  />
                                </ta-loading-progress>
                                <ta-suggest-control__popup
                                  data={Array []}
                                  getInputRef={[Function]}
                                  init={false}
                                  onCloseToListScrollEnd={[Function]}
                                  onItemSelect={[Function]}
                                  onOutsideClick={[Function]}
                                  open={false}
                                  size="m"
                                >
                                  <popup2
                                    anchor={[Function]}
                                    attrs={
                                      Object {
                                        "onMouseDown": [Function],
                                      }
                                    }
                                    autoclosable={true}
                                    directions={
                                      Array [
                                        "bottom-left",
                                        "top-left",
                                      ]
                                    }
                                    mainOffset={2}
                                    mix={
                                      Array [
                                        Object {
                                          "block": "ta-suggest-control",
                                          "elem": "popup",
                                          "mods": Object {
                                            "init": false,
                                            "size": "m",
                                          },
                                        },
                                        Object {
                                          "block": "uniq4",
                                          "mods": Object {},
                                        },
                                      ]
                                    }
                                    onAfterClose={[Function]}
                                    onAfterOpen={[Function]}
                                    onBeforeClose={[Function]}
                                    onBeforeOpen={[Function]}
                                    onOutsideClick={[Function]}
                                    secondaryOffset={0}
                                    tailOffset={0}
                                    target="anchor"
                                    theme="normal"
                                    view="classic"
                                    visible={false}
                                    zIndexGroupLevel={0}
                                  />
                                </ta-suggest-control__popup>
                              </span>
                            </textinput>
                          </ta-suggest-control>
                          <ta-suggest__footer
                            key="footer"
                            onClick={[Function]}
                            onItemDelete={[Function]}
                            values={Array []}
                          >
                            <div
                              className="ta-component ta-suggest__footer"
                              data-lego="react"
                              onMouseDown={[Function]}
                              style={Object {}}
                            />
                          </ta-suggest__footer>
                        </div>
                      </ta-suggest>
                    </div>
                  </filters__filter>
                  <filters__filter
                    dataprovider={
                      Object {
                        "pathname": "/api/frontend/suggest/users/",
                      }
                    }
                    key="filter-owner"
                    onChange={[Function]}
                    placeholder="Владелец"
                    quick={true}
                    single={true}
                    type="suggest"
                    value="user"
                  >
                    <div
                      className="filters__filter filters__filter_type_suggest filters__filter_quick"
                      data-lego="react"
                      style={Object {}}
                    >
                      <ta-suggest
                        dataprovider={
                          Object {
                            "pathname": "/api/frontend/suggest/users/",
                          }
                        }
                        key="suggest"
                        mix={
                          Object {
                            "block": "filters",
                            "elem": "suggest-control",
                            "mods": Object {},
                          }
                        }
                        onChange={[Function]}
                        placeholder="Владелец"
                        single={true}
                        size="m"
                        theme="normal"
                        value={
                          Array [
                            "user",
                          ]
                        }
                      >
                        <div
                          className="ta-component ta-suggest ta-suggest_size_m ta-suggest_load ta-suggest_single filters__suggest-control"
                          data-lego="react"
                          style={Object {}}
                        >
                          <ta-suggest-control
                            dataprovider={
                              Object {
                                "pathname": "/api/frontend/suggest/users/",
                              }
                            }
                            empty={true}
                            fetchData={[Function]}
                            id="uniq5"
                            key="control"
                            mix={
                              Object {
                                "block": "ta-suggest",
                                "elem": "control",
                                "mods": Object {},
                              }
                            }
                            onChange={[Function]}
                            onSelect={[Function]}
                            placeholder="Владелец"
                            single={true}
                            size="m"
                            theme="normal"
                            value={
                              Array [
                                "user",
                              ]
                            }
                          >
                            <textinput
                              attrs={
                                Object {
                                  "onClick": [Function],
                                  "onMouseDown": [Function],
                                  "ref": Object {
                                    "current": <span
                                      class="control textinput textinput_theme_normal textinput_view_classic textinput_size_m textinput_has-icon_yes textinput_has-clear_yes ta-suggest-control ta-suggest-control_size_m ta-suggest__control"
                                      data-lego="react"
                                    >
                                      <span
                                        class="icon icon_glyph_type-arrow icon_has-glyph_yes textinput__icon textinput__icon_side_right"
                                        data-lego="react"
                                      >
                                        <svg
                                          focusable="false"
                                          height="0"
                                          viewBox="0 0 13 8"
                                          width="0"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"
                                          />
                                        </svg>
                                      </span>
                                      <input
                                        autocomplete="off"
                                        class="textinput__control"
                                        data-lego="react"
                                        id="uniq5"
                                        placeholder="Владелец"
                                        type="text"
                                        value=""
                                      />
                                      <span
                                        class="textinput__box"
                                        data-lego="react"
                                      />
                                      <span
                                        class="icon icon_type_cross icon_size_m textinput__clear textinput__clear_theme_normal textinput__icon"
                                        data-lego="react"
                                      />
                                      <div
                                        class="ta-component ta-loading-progress ta-loading-progress_progress ta-suggest-control__spin"
                                        data-lego="react"
                                      />
                                    </span>,
                                  },
                                }
                              }
                              autocomplete={false}
                              content={true}
                              hasClear={true}
                              iconRight={
                                <icon
                                  glyph="type-arrow"
                                />
                              }
                              id="uniq5"
                              innerRef={[Function]}
                              mix={
                                Array [
                                  Object {
                                    "block": "ta-suggest-control",
                                    "mods": Object {
                                      "__entities": Object {
                                        "focused": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "load": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "open": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                        "size": Object {
                                          "ta-suggest-control$undefined": true,
                                        },
                                      },
                                      "focused": false,
                                      "load": false,
                                      "open": false,
                                      "size": "m",
                                    },
                                  },
                                  Object {
                                    "block": "ta-suggest",
                                    "elem": "control",
                                    "mods": Object {},
                                  },
                                ]
                              }
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              placeholder="Владелец"
                              size="m"
                              text=""
                              theme="normal"
                              tone="default"
                              type="text"
                              view="classic"
                            >
                              <span
                                className="control textinput textinput_theme_normal textinput_view_classic textinput_size_m textinput_has-icon_yes textinput_has-clear_yes ta-suggest-control ta-suggest-control_size_m ta-suggest__control"
                                data-lego="react"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                style={Object {}}
                              >
                                <textinput__icon
                                  key="right"
                                  side="right"
                                >
                                  <icon
                                    glyph="type-arrow"
                                    mix={
                                      Array [
                                        Object {
                                          "block": "textinput",
                                          "elem": "icon",
                                          "mods": Object {
                                            "__entities": Object {
                                              "side": Object {
                                                "textinput$icon": true,
                                              },
                                            },
                                            "side": "right",
                                          },
                                        },
                                        undefined,
                                      ]
                                    }
                                  >
                                    <span
                                      className="icon icon_glyph_type-arrow icon_has-glyph_yes textinput__icon textinput__icon_side_right"
                                      data-lego="react"
                                      style={Object {}}
                                    >
                                      <svg
                                        focusable="false"
                                        height="0"
                                        viewBox="0 0 13 8"
                                        width="0"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M11.3 1L6.5 5.7 1.7 1l-.7.7L6.5 7 12 1.7l-.7-.7z"
                                        />
                                      </svg>
                                    </span>
                                  </icon>
                                </textinput__icon>
                                <textinput__control
                                  autoComplete="off"
                                  id="uniq5"
                                  innerRef={[Function]}
                                  key="control"
                                  onChange={[Function]}
                                  placeholder="Владелец"
                                  type="text"
                                  value=""
                                >
                                  <input
                                    autoComplete="off"
                                    className="textinput__control"
                                    data-lego="react"
                                    id="uniq5"
                                    onChange={[Function]}
                                    placeholder="Владелец"
                                    style={Object {}}
                                    type="text"
                                    value=""
                                  />
                                </textinput__control>
                                <textinput__box
                                  key="box"
                                >
                                  <span
                                    className="textinput__box"
                                    data-lego="react"
                                    style={Object {}}
                                  />
                                </textinput__box>
                                <textinput__clear
                                  key="clear"
                                  onClick={[Function]}
                                  onMouseDown={[Function]}
                                  size="m"
                                  theme="normal"
                                  view="classic"
                                  visible=""
                                >
                                  <icon
                                    attrs={
                                      Object {
                                        "onBlur": [Function],
                                        "onClick": [Function],
                                        "onFocus": [Function],
                                        "onKeyDown": [Function],
                                        "onKeyUp": [Function],
                                        "onMouseDown": [Function],
                                        "onMouseEnter": [Function],
                                        "onMouseLeave": [Function],
                                        "onMouseUp": [Function],
                                      }
                                    }
                                    mix={
                                      Array [
                                        Object {
                                          "block": "textinput",
                                          "elem": "clear",
                                          "mods": Object {
                                            "__entities": Object {
                                              "disabled": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "focused": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "hovered": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "pressed": Object {
                                                "control$undefined": true,
                                                "textinput$clear": true,
                                              },
                                              "theme": Object {
                                                "textinput$clear": true,
                                              },
                                              "visible": Object {
                                                "textinput$clear": true,
                                              },
                                            },
                                            "disabled": false,
                                            "focused": false,
                                            "hovered": false,
                                            "pressed": false,
                                            "theme": "normal",
                                            "visible": false,
                                          },
                                        },
                                        Object {
                                          "block": "textinput",
                                          "elem": "icon",
                                          "mods": Object {},
                                        },
                                      ]
                                    }
                                    size="m"
                                    type="cross"
                                  >
                                    <span
                                      className="icon icon_type_cross icon_size_m textinput__clear textinput__clear_theme_normal textinput__icon"
                                      data-lego="react"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      style={Object {}}
                                    />
                                  </icon>
                                </textinput__clear>
                                <ta-loading-progress
                                  loadings={1}
                                  mix={
                                    Object {
                                      "block": "ta-suggest-control",
                                      "elem": "spin",
                                      "mods": Object {},
                                    }
                                  }
                                >
                                  <div
                                    className="ta-component ta-loading-progress ta-loading-progress_progress ta-suggest-control__spin"
                                    data-lego="react"
                                    style={Object {}}
                                  />
                                </ta-loading-progress>
                                <ta-suggest-control__popup
                                  data={Array []}
                                  getInputRef={[Function]}
                                  init={false}
                                  onCloseToListScrollEnd={[Function]}
                                  onItemSelect={[Function]}
                                  onOutsideClick={[Function]}
                                  open={false}
                                  size="m"
                                >
                                  <popup2
                                    anchor={[Function]}
                                    attrs={
                                      Object {
                                        "onMouseDown": [Function],
                                      }
                                    }
                                    autoclosable={true}
                                    directions={
                                      Array [
                                        "bottom-left",
                                        "top-left",
                                      ]
                                    }
                                    mainOffset={2}
                                    mix={
                                      Array [
                                        Object {
                                          "block": "ta-suggest-control",
                                          "elem": "popup",
                                          "mods": Object {
                                            "init": false,
                                            "size": "m",
                                          },
                                        },
                                        Object {
                                          "block": "uniq6",
                                          "mods": Object {},
                                        },
                                      ]
                                    }
                                    onAfterClose={[Function]}
                                    onAfterOpen={[Function]}
                                    onBeforeClose={[Function]}
                                    onBeforeOpen={[Function]}
                                    onOutsideClick={[Function]}
                                    secondaryOffset={0}
                                    tailOffset={0}
                                    target="anchor"
                                    theme="normal"
                                    view="classic"
                                    visible={false}
                                    zIndexGroupLevel={0}
                                  />
                                </ta-suggest-control__popup>
                              </span>
                            </textinput>
                          </ta-suggest-control>
                          <ta-suggest__footer
                            key="footer"
                            onClick={[Function]}
                            onItemDelete={[Function]}
                            values={Array []}
                          >
                            <div
                              className="ta-component ta-suggest__footer"
                              data-lego="react"
                              onMouseDown={[Function]}
                              style={Object {}}
                            />
                          </ta-suggest__footer>
                        </div>
                      </ta-suggest>
                    </div>
                  </filters__filter>
                  <filters__filter
                    key="filter-cn"
                    onChange={[Function]}
                    placeholder="Common name"
                    quick={true}
                    type="textinput"
                    value="common_name"
                  >
                    <div
                      className="filters__filter filters__filter_quick filters__filter_type_textinput"
                      data-lego="react"
                      style={Object {}}
                    >
                      <textinput
                        innerRef={[Function]}
                        key="textinput"
                        mix={
                          Object {
                            "block": "filters",
                            "elem": "textinput",
                            "mods": Object {},
                          }
                        }
                        onChange={[Function]}
                        placeholder="Common name"
                        size="m"
                        text="common_name"
                        theme="normal"
                        type="text"
                        view="classic"
                      >
                        <span
                          className="control textinput textinput_theme_normal textinput_view_classic textinput_size_m filters__textinput"
                          data-lego="react"
                          onBlur={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          style={Object {}}
                        >
                          <textinput__control
                            innerRef={[Function]}
                            key="control"
                            onChange={[Function]}
                            placeholder="Common name"
                            type="text"
                            value="common_name"
                          >
                            <input
                              className="textinput__control"
                              data-lego="react"
                              onChange={[Function]}
                              placeholder="Common name"
                              style={Object {}}
                              type="text"
                              value="common_name"
                            />
                          </textinput__control>
                          <textinput__box
                            key="box"
                          >
                            <span
                              className="textinput__box"
                              data-lego="react"
                              style={Object {}}
                            />
                          </textinput__box>
                        </span>
                      </textinput>
                    </div>
                  </filters__filter>
                  <button2
                    checked={false}
                    key="button"
                    mix={
                      Object {
                        "block": "filters",
                        "elem": "toggle-additional",
                        "mods": Object {},
                      }
                    }
                    onClick={[Function]}
                    size="m"
                    tabIndex={0}
                    theme="normal"
                    type="check"
                    view="classic"
                  >
                    <button
                      aria-disabled="false"
                      aria-pressed="false"
                      autoComplete="off"
                      className="control button2 button2_view_classic button2_size_m button2_theme_normal button2_type_check filters__toggle-additional"
                      data-lego="react"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyPress={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      onMouseUp={[Function]}
                      style={Object {}}
                      tabIndex={0}
                      type="button"
                    >
                      <button2__icon
                        key="icon-left"
                        side="left"
                        size="m"
                      >
                        <icon
                          mix={
                            Array [
                              Object {
                                "block": "filters",
                                "elem": "icon-filter",
                                "mods": Object {},
                              },
                              Object {
                                "block": "button2",
                                "elem": "icon",
                                "mods": Object {
                                  "side": "left",
                                },
                              },
                            ]
                          }
                          size="m"
                          type="filter"
                        >
                          <span
                            className="icon icon_type_filter icon_size_m filters__icon-filter button2__icon button2__icon_side_left"
                            data-lego="react"
                            style={Object {}}
                          />
                        </icon>
                      </button2__icon>
                      <button2__text
                        key="text"
                      >
                        <span
                          className="button2__text"
                          data-lego="react"
                          style={Object {}}
                        >
                          Фильтр
                        </span>
                      </button2__text>
                    </button>
                  </button2>
                </div>
              </filters__main>
            </div>
          </filters>
        </filters.container>
      </Connect(filters.container)>
      <Connect(certs-table.container)
        additionalFiltersKeys={
          Array [
            "a",
            "b",
          ]
        }
        expr="/certificates/:certId"
        filtersKeys={
          Array [
            "a",
          ]
        }
        getFilters={
          [MockFunction] {
            "calls": Array [
              Array [],
              Array [],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": Object {
                  "ca_name": "ca_name",
                  "common_name": "common_name",
                  "status": "status",
                  "type": "type",
                  "user": "user",
                },
              },
              Object {
                "isThrow": false,
                "value": Object {
                  "ca_name": "ca_name",
                  "common_name": "common_name",
                  "status": "status",
                  "type": "type",
                  "user": "user",
                },
              },
            ],
          }
        }
        key="certs-table"
        path="/certificates/1"
      >
        <certs-table.container
          activeCertId={null}
          additionalFiltersKeys={
            Array [
              "ca_name",
              "requester",
              "host",
              "serial_number",
              "abc_service",
            ]
          }
          certs={
            Object {
              "additionalFiltersName": Array [
                "ca_name",
                "requester",
                "host",
                "serial_number",
                "abc_service",
              ],
              "count": 0,
              "items": Array [],
              "mainFiltersName": Array [
                "type",
                "status",
                "user",
                "common_name",
              ],
              "page": 0,
              "perPage": 10,
            }
          }
          expr="/certificates/:certId"
          filterQueryStr={[Function]}
          filtersKeys={
            Array [
              "ca_name",
              "requester",
              "host",
              "serial_number",
              "abc_service",
              "type",
              "status",
              "user",
              "common_name",
            ]
          }
          getFilters={
            [MockFunction] {
              "calls": Array [
                Array [],
                Array [],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": Object {
                    "ca_name": "ca_name",
                    "common_name": "common_name",
                    "status": "status",
                    "type": "type",
                    "user": "user",
                  },
                },
                Object {
                  "isThrow": false,
                  "value": Object {
                    "ca_name": "ca_name",
                    "common_name": "common_name",
                    "status": "status",
                    "type": "type",
                    "user": "user",
                  },
                },
              ],
            }
          }
          mainFiltersKeys={
            Array [
              "type",
              "status",
              "user",
              "common_name",
            ]
          }
          numberOfPages={0}
          page="1"
          path="/certificates/1"
          requestCerts={[Function]}
          updateMatchStr={[Function]}
          updateQueryStr={[Function]}
        >
          <certs-table
            activeCertId={null}
            additionalFiltersKeys={
              Array [
                "ca_name",
                "requester",
                "host",
                "serial_number",
                "abc_service",
              ]
            }
            certs={
              Object {
                "additionalFiltersName": Array [
                  "ca_name",
                  "requester",
                  "host",
                  "serial_number",
                  "abc_service",
                ],
                "count": 0,
                "items": Array [],
                "mainFiltersName": Array [
                  "type",
                  "status",
                  "user",
                  "common_name",
                ],
                "page": 0,
                "perPage": 10,
              }
            }
            expr="/certificates/:certId"
            filterQueryStr={[Function]}
            filtersKeys={
              Array [
                "ca_name",
                "requester",
                "host",
                "serial_number",
                "abc_service",
                "type",
                "status",
                "user",
                "common_name",
              ]
            }
            getFilters={
              [MockFunction] {
                "calls": Array [
                  Array [],
                  Array [],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": Object {
                      "ca_name": "ca_name",
                      "common_name": "common_name",
                      "status": "status",
                      "type": "type",
                      "user": "user",
                    },
                  },
                  Object {
                    "isThrow": false,
                    "value": Object {
                      "ca_name": "ca_name",
                      "common_name": "common_name",
                      "status": "status",
                      "type": "type",
                      "user": "user",
                    },
                  },
                ],
              }
            }
            isFetching={false}
            mainFiltersKeys={
              Array [
                "type",
                "status",
                "user",
                "common_name",
              ]
            }
            numberOfPages={0}
            onPagerChange={[Function]}
            onTrClick={[Function]}
            page="1"
            path="/certificates/1"
            requestCerts={[Function]}
            updateMatchStr={[Function]}
            updateQueryStr={[Function]}
          >
            <table
              className="certs-table"
              data-lego="react"
              style={Object {}}
            >
              <certs-table__thead
                key="thead"
              >
                <thead
                  className="certs-table__thead"
                  data-lego="react"
                  style={Object {}}
                >
                  <tr>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Common name / серийный номер
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Тип
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        УЦ
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Пользователь
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Статус
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Запрошен
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Выдан
                      </th>
                    </certs-table__th>
                    <certs-table__th>
                      <th
                        className="certs-table__th"
                        data-lego="react"
                        style={Object {}}
                      >
                        Истекает
                      </th>
                    </certs-table__th>
                  </tr>
                </thead>
              </certs-table__thead>
              <certs-table__tbody
                activeCertId={null}
                additionalFiltersKeys={
                  Array [
                    "ca_name",
                    "requester",
                    "host",
                    "serial_number",
                    "abc_service",
                  ]
                }
                certs={
                  Object {
                    "additionalFiltersName": Array [
                      "ca_name",
                      "requester",
                      "host",
                      "serial_number",
                      "abc_service",
                    ],
                    "count": 0,
                    "items": Array [],
                    "mainFiltersName": Array [
                      "type",
                      "status",
                      "user",
                      "common_name",
                    ],
                    "page": 0,
                    "perPage": 10,
                  }
                }
                expr="/certificates/:certId"
                filterQueryStr={[Function]}
                filtersKeys={
                  Array [
                    "ca_name",
                    "requester",
                    "host",
                    "serial_number",
                    "abc_service",
                    "type",
                    "status",
                    "user",
                    "common_name",
                  ]
                }
                getFilters={
                  [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Object {
                          "ca_name": "ca_name",
                          "common_name": "common_name",
                          "status": "status",
                          "type": "type",
                          "user": "user",
                        },
                      },
                      Object {
                        "isThrow": false,
                        "value": Object {
                          "ca_name": "ca_name",
                          "common_name": "common_name",
                          "status": "status",
                          "type": "type",
                          "user": "user",
                        },
                      },
                    ],
                  }
                }
                isFetching={false}
                key="tbody"
                loading={false}
                mainFiltersKeys={
                  Array [
                    "type",
                    "status",
                    "user",
                    "common_name",
                  ]
                }
                no-data={true}
                numberOfPages={0}
                onPagerChange={[Function]}
                onTrClick={[Function]}
                page="1"
                path="/certificates/1"
                requestCerts={[Function]}
                updateMatchStr={[Function]}
                updateQueryStr={[Function]}
              >
                <tbody
                  className="certs-table__tbody certs-table__tbody_no-data"
                  data-lego="react"
                  style={Object {}}
                >
                  <tr
                    key="no-data"
                  >
                    <certs-table__td
                      colSpan={8}
                      type="no-data"
                    >
                      <td
                        className="certs-table__td certs-table__td_type_no-data"
                        colSpan={8}
                        data-lego="react"
                        style={Object {}}
                      >
                        Нет данных
                      </td>
                    </certs-table__td>
                  </tr>
                </tbody>
              </certs-table__tbody>
              <certs-table__tfoot
                activeCertId={null}
                additionalFiltersKeys={
                  Array [
                    "ca_name",
                    "requester",
                    "host",
                    "serial_number",
                    "abc_service",
                  ]
                }
                certs={
                  Object {
                    "additionalFiltersName": Array [
                      "ca_name",
                      "requester",
                      "host",
                      "serial_number",
                      "abc_service",
                    ],
                    "count": 0,
                    "items": Array [],
                    "mainFiltersName": Array [
                      "type",
                      "status",
                      "user",
                      "common_name",
                    ],
                    "page": 0,
                    "perPage": 10,
                  }
                }
                expr="/certificates/:certId"
                filterQueryStr={[Function]}
                filtersKeys={
                  Array [
                    "ca_name",
                    "requester",
                    "host",
                    "serial_number",
                    "abc_service",
                    "type",
                    "status",
                    "user",
                    "common_name",
                  ]
                }
                getFilters={
                  [MockFunction] {
                    "calls": Array [
                      Array [],
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": Object {
                          "ca_name": "ca_name",
                          "common_name": "common_name",
                          "status": "status",
                          "type": "type",
                          "user": "user",
                        },
                      },
                      Object {
                        "isThrow": false,
                        "value": Object {
                          "ca_name": "ca_name",
                          "common_name": "common_name",
                          "status": "status",
                          "type": "type",
                          "user": "user",
                        },
                      },
                    ],
                  }
                }
                isFetching={false}
                key="tfoot"
                mainFiltersKeys={
                  Array [
                    "type",
                    "status",
                    "user",
                    "common_name",
                  ]
                }
                numberOfPages={0}
                onPagerChange={[Function]}
                onTrClick={[Function]}
                page="1"
                path="/certificates/1"
                requestCerts={[Function]}
                updateMatchStr={[Function]}
                updateQueryStr={[Function]}
              >
                <tfoot
                  className="certs-table__tfoot"
                  data-lego="react"
                  style={Object {}}
                >
                  <tr>
                    <certs-table__td
                      activeCertId={null}
                      additionalFiltersKeys={
                        Array [
                          "ca_name",
                          "requester",
                          "host",
                          "serial_number",
                          "abc_service",
                        ]
                      }
                      certs={
                        Object {
                          "additionalFiltersName": Array [
                            "ca_name",
                            "requester",
                            "host",
                            "serial_number",
                            "abc_service",
                          ],
                          "count": 0,
                          "items": Array [],
                          "mainFiltersName": Array [
                            "type",
                            "status",
                            "user",
                            "common_name",
                          ],
                          "page": 0,
                          "perPage": 10,
                        }
                      }
                      colSpan={8}
                      expr="/certificates/:certId"
                      filterQueryStr={[Function]}
                      filtersKeys={
                        Array [
                          "ca_name",
                          "requester",
                          "host",
                          "serial_number",
                          "abc_service",
                          "type",
                          "status",
                          "user",
                          "common_name",
                        ]
                      }
                      getFilters={
                        [MockFunction] {
                          "calls": Array [
                            Array [],
                            Array [],
                          ],
                          "results": Array [
                            Object {
                              "isThrow": false,
                              "value": Object {
                                "ca_name": "ca_name",
                                "common_name": "common_name",
                                "status": "status",
                                "type": "type",
                                "user": "user",
                              },
                            },
                            Object {
                              "isThrow": false,
                              "value": Object {
                                "ca_name": "ca_name",
                                "common_name": "common_name",
                                "status": "status",
                                "type": "type",
                                "user": "user",
                              },
                            },
                          ],
                        }
                      }
                      isFetching={false}
                      mainFiltersKeys={
                        Array [
                          "type",
                          "status",
                          "user",
                          "common_name",
                        ]
                      }
                      numberOfPages={0}
                      onPagerChange={[Function]}
                      onTrClick={[Function]}
                      page="1"
                      path="/certificates/1"
                      requestCerts={[Function]}
                      type="foot"
                      updateMatchStr={[Function]}
                      updateQueryStr={[Function]}
                    >
                      <td
                        className="certs-table__td certs-table__td_type_foot"
                        colSpan={8}
                        data-lego="react"
                        style={Object {}}
                      />
                    </certs-table__td>
                  </tr>
                </tfoot>
              </certs-table__tfoot>
            </table>
          </certs-table>
        </certs-table.container>
      </Connect(certs-table.container)>
    </div>
  </certs>
</Provider>
`;
