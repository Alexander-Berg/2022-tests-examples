{
  "/-B/yandex_io/libs/appmetrica/proto/metrica.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/libs/appmetrica/proto/request_parameters.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/protos/AccountStorage.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/protos/FunctionalTests.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/protos/ModelObjects.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/protos/QuasarProto.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/protos/Storage.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/protos/YandexIO.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-B/yandex_io/scaffolding/proto/config.pb.cc": [
    "static void __cxx_global_var_init();"
  ],
  "/-S/contrib/deprecated/jsoncpp/src/lib_json/json_value.cpp": [
    "Value const& Value::null = Value::nullSingleton();",
    "Value const& Value::nullRef = Value::nullSingleton();"
  ],
  "/-S/contrib/libs/asio/include/asio/detail/call_stack.hpp": [
    "call_stack<Key, Value>::top_;"
  ],
  "/-S/contrib/libs/asio/include/asio/detail/posix_global.hpp": [
    "posix_global_impl<T> posix_global_impl<T>::instance_;"
  ],
  "/-S/contrib/libs/asio/include/asio/error.hpp": [
    "addrinfo_category ASIO_UNUSED_VARIABLE",
    "misc_category ASIO_UNUSED_VARIABLE",
    "netdb_category ASIO_UNUSED_VARIABLE",
    "system_category ASIO_UNUSED_VARIABLE"
  ],
  "/-S/contrib/libs/asio/include/asio/execution_context.hpp": [
    "service_id<Type> execution_context_service_base<Type>::id;"
  ],
  "/-S/contrib/libs/asio/include/asio/io_context.hpp": [
    "asio::detail::service_id<Type> service_base<Type>::id;"
  ],
  "/-S/contrib/libs/asio/include/asio/ssl/detail/openssl_init.hpp": [
    "openssl_init<Do_Init> openssl_init<Do_Init>::instance_;"
  ],
  "/-S/contrib/libs/asio/include/asio/ssl/error.hpp": [
    "ssl_category ASIO_UNUSED_VARIABLE",
    "stream_category ASIO_UNUSED_VARIABLE"
  ],
  "/-S/contrib/libs/cxxsupp/libcxx/include/__locale": [
    "template <class _CharT> locale::id collate<_CharT>::id;"
  ],
  "/-S/contrib/libs/cxxsupp/libcxx/include/locale": [
    "messages<_CharT>::id;",
    "money_get<_CharT, _InputIterator>::id;",
    "money_put<_CharT, _OutputIterator>::id;",
    "moneypunct<_CharT, _International>::id;",
    "num_get<_CharT, _InputIterator>::id;",
    "num_put<_CharT, _OutputIterator>::id;",
    "time_get<_CharT, _InputIterator>::id;",
    "time_put<_CharT, _OutputIterator>::id;"
  ],
  "/-S/contrib/libs/cxxsupp/libcxx/src/iostream.cpp": [
    "_LIBCPP_HIDDEN ios_base::Init __start_std_streams;"
  ],
  "/-S/contrib/libs/cxxsupp/libcxx/src/locale.cpp": [
    "locale::id codecvt<char, char, mbstate_t>::id;",
    "locale::id codecvt<char16_t, char, mbstate_t>::id;",
    "locale::id codecvt<char32_t, char, mbstate_t>::id;",
    "locale::id codecvt<wchar_t, char, mbstate_t>::id;",
    "locale::id ctype<char>::id;",
    "locale::id ctype<wchar_t>::id;",
    "locale::id numpunct< char  >::id;",
    "locale::id numpunct<wchar_t>::id;"
  ],
  "/-S/contrib/libs/cxxsupp/libcxxrt/exception.cc": [
    "} init_main_tls;"
  ],
  "/-S/contrib/libs/protobuf_std/src/google/protobuf/descriptor.cc": [
    "const Symbol kNullSymbol;"
  ],
  "/-S/contrib/libs/protobuf_std/src/google/protobuf/descriptor.pb.cc": [
    "static bool dynamic_init_dummy_google_2fprotobuf_2fdescriptor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fprotobuf_2fdescriptor_2eproto)), true);"
  ],
  "/-S/contrib/libs/protobuf_std/src/google/protobuf/stubs/status.cc": [
    "const Status Status::CANCELLED = Status(error::CANCELLED, \"\");",
    "const Status Status::OK = Status();",
    "const Status Status::UNKNOWN = Status(error::UNKNOWN, \"\");"
  ],
  "/-S/contrib/libs/protobuf_std/src/google/protobuf/stubs/structurally_valid.cc": [
    "InitDetector init_detector;"
  ],
  "/-S/contrib/libs/websocketpp/websocketpp/base64/base64.hpp": [
    "static std::string const base64_chars ="
  ],
  "/-S/contrib/libs/websocketpp/websocketpp/connection.hpp": [
    "static std::vector<int> const versions_supported = {0,7,8,13};"
  ],
  "/-S/contrib/libs/websocketpp/websocketpp/http/constants.hpp": [
    "static std::string const empty_header;"
  ],
  "/-S/contrib/restricted/boost/boost/date_time/date_names_put.hpp": [
    "std::locale::id date_names_put<Config, charT, OutputIterator>::id;"
  ],
  "/-S/contrib/restricted/boost/libs/program_options/src/convert.cpp": [
    "utf8_facet;"
  ],
  "/-S/contrib/restricted/boost/libs/program_options/src/value_semantic.cpp": [
    "BOOST_PROGRAM_OPTIONS_DECL std::string arg(\"arg\");"
  ],
  "/-S/library/cpp/cpuid_check/cpu_id_check.cpp": [
    "const static TBuildCpuChecker CheckCpuWeAreRunningOn INIT_PRIORITY(101) ;"
  ],
  "/-S/speechkit/core/src/speechkit/AudioProcessingMode.cpp": [
    "static const std::string s_echo_cancel = \"ECHO_CANCEL_AUDIO\";",
    "static const std::string s_pass = \"PASS_AUDIO\";"
  ],
  "/-S/speechkit/core/src/speechkit/Connection.cpp": [
    "Connection::SharedPtr Connection::s_instance = nullptr;"
  ],
  "/-S/speechkit/core/src/speechkit/Emotion.cpp": [
    "const Emotion Emotion::evil = Emotion(\"evil\");",
    "const Emotion Emotion::good = Emotion(\"good\");",
    "const Emotion Emotion::neutral = Emotion(\"neutral\");"
  ],
  "/-S/speechkit/core/src/speechkit/Language.cpp": [
    "const Language Language::english = Language(\"en-EN\");",
    "const Language Language::russian = Language(\"ru-RU\");",
    "const Language Language::turkish = Language(\"tr-TR\");",
    "const Language Language::ukrainian = Language(\"uk-UA\");"
  ],
  "/-S/speechkit/core/src/speechkit/Model.cpp": [
    "const Model Model::dialog = Model(\"dialog-general\", true);",
    "const Model Model::maps = Model(\"maps\", true);",
    "const Model Model::queries = Model(\"queries\", true);"
  ],
  "/-S/speechkit/core/src/speechkit/SoundBufferTag.cpp": [
    "const SoundBufferTag SoundBufferTag::empty = SoundBufferTag{\"\", \"\"};"
  ],
  "/-S/speechkit/core/src/speechkit/SoundFormat.cpp": [
    "static const std::string MIME_FORMAT_OPUS = \"audio/opus\";",
    "static const std::string MIME_FORMAT_PCM = \"audio/x-pcm\";",
    "static const std::string s_opus = \"opus\";",
    "static const std::string s_pcm = \"pcm\";",
    "static const std::string s_unknown = \"unknown\";"
  ],
  "/-S/speechkit/core/src/speechkit/SoundQuality.cpp": [
    "static const std::string s_high = \"High\";",
    "static const std::string s_low = \"Low\";",
    "static const std::string s_ultrahigh = \"UltraHigh\";",
    "static const std::string s_unknown = \"unknown\";"
  ],
  "/-S/speechkit/core/src/speechkit/Track.cpp": [
    "const Track Track::empty = Track(\"\", \"\", \"\", std::vector<Track::Artist>(), \"\");"
  ],
  "/-S/speechkit/core/src/speechkit/Voice.cpp": [
    "const Voice Voice::alyss = Voice(\"alyss\");",
    "const Voice Voice::ermil = Voice(\"ermil\");",
    "const Voice Voice::jane = Voice(\"jane\");",
    "const Voice Voice::oksana = Voice(\"oksana\");",
    "const Voice Voice::omazh = Voice(\"omazh\");",
    "const Voice Voice::shitova = Voice(\"shitova\");",
    "const Voice Voice::shitova_us = Voice(\"shitova.us\");",
    "const Voice Voice::zahar = Voice(\"zahar\");"
  ],
  "/-S/speechkit/core/src/speechkit/WebSocket.cpp": [
    "WebSocket::Builder::SharedConstPtr builder;"
  ],
  "/-S/speechkit/core/src/speechkit/factory/SpeechKitFactory.cpp": [
    "SpeechKitFactory::SharedConstPtr SpeechKitFactory::s_instance = nullptr;"
  ],
  "/-S/speechkit/core/src/speechkit/factory/SpeechKitInternalFactoryImpl.cpp": [
    "SpeechKitInternalFactory::SharedConstPtr SpeechKitInternalFactory::s_instance = nullptr;"
  ],
  "/-S/speechkit/core/src/speechkit/logdebug/Logger.cpp": [
    "Logger::SharedPtr instance = nullptr;"
  ],
  "/-S/speechkit/core/src/speechkit/logsound/SoundLoggerProcess.cpp": [
    "SoundLoggerInternal::SharedPtr instance;"
  ],
  "/-S/speechkit/core/src/speechkit/recognizer/RecognizerState.cpp": [
    "std::string statesStr[] = {"
  ],
  "/-S/speechkit/core/src/speechkit/voicedialog/VoiceServiceState.cpp": [
    "const std::string recognitionIsStarted { \"Recognizer is started\" };",
    "const std::string speechDetectedPhrase { \"speech_detected_by_server\" };"
  ],
  "/-S/speechkit/desktop/src/desktop/DnsCache.cpp": [
    "DnsCache::SharedPtr DnsCache::s_instance = nullptr;"
  ],
  "/-S/speechkit/linux/src/linux/LinuxAudioSource.cpp": [
    "std::condition_variable captureThreadCV;"
  ],
  "/-S/speechkit/linux/src/linux/LinuxPlatformInfo.cpp": [
    "static std::string defaultLinuxValue = \"Linux\";"
  ],
  "/-S/util/network/init.h": [
    "} NetworkInitializerObject;"
  ],
  "/-S/util/system/datetime.cpp": [
    "extern const bool HaveRdtscp = NX86::HaveRDTSCP();"
  ],
  "/-S/util/system/filemap.cpp": [
    "const TString TMemoryMapCommon::UnknownFileName(\"Unknown_file_name\");"
  ],
  "/-S/voicetech/spotter/embedded/contrib/eigen/blas/../Eigen/src/Core/util/IndexedViewHelper.h": [
    "static const Eigen::internal::all_t all;",
    "static const Symbolic::AddExpr<Symbolic::SymbolExpr<internal::symbolic_last_tag>,Symbolic::ValueExpr<Eigen::internal::FixedInt<1> > > end(last+fix<1>());",
    "static const Symbolic::SymbolExpr<internal::symbolic_last_tag> last;"
  ],
  "/-S/voicetech/spotter/embedded/contrib/eigen/blas/../Eigen/src/Core/util/IntegralConstant.h": [
    "static const internal::FixedInt<N> fix{};"
  ],
  "/-S/yandex_io/external_libs/datacratic/jml/arch/tick_counter.cc": [
    "} init;"
  ],
  "/-S/yandex_io/external_libs/datacratic/jml/utils/abort.cc": [
    "} staticState;"
  ],
  "/-S/yandex_io/external_libs/datacratic/soa/service/http_header.h": [
    "static const std::unordered_map<HttpVerb, std::string> VerbToString = {",
    "static const std::unordered_map<std::string, HttpVerb> StringToVerb = {"
  ],
  "/-S/yandex_io/external_libs/datacratic/soa/service/message_loop.cc": [
    "Logging::Category MessageLoopLogs::error(\"Message Loop Error\", print);",
    "Logging::Category MessageLoopLogs::print(\"Message Loop\");",
    "Logging::Category MessageLoopLogs::trace(\"Message Loop Trace\", print);",
    "Logging::Category MessageLoopLogs::warning(\"Message Loop Warning\", print);"
  ],
  "/-S/yandex_io/external_libs/datacratic/soa/service/transport.cc": [
    "ML::Env_Option<bool> DEBUG_TRANSPORTS(\"DEBUG_TRANSPORTS\", false);",
    "std::function<void (const char *, float)> onLatencyEvent;"
  ],
  "/-S/yandex_io/external_libs/datacratic/soa/types/date.cc": [
    "Date::epoch(boost::gregorian::date(1970, 1, 1));"
  ],
  "/-S/yandex_io/libs/audio_player/gstreamer/MixerdClient.cc": [
    "const std::string MixerdClient::CLIENT_SOCKET_PATH = \"/tmp/mixerd.client\";",
    "const std::string MixerdClient::SERVER_SOCKET_PATH = \"/tmp/mixerd.server\";"
  ],
  "/-S/yandex_io/libs/audio_player/gstreamer_init/GstreamerInit.cc": [
    "std::shared_ptr<GstreamerImpl> globalInstance;"
  ],
  "/-S/yandex_io/libs/base/Directives.cc": [
    "const std::unordered_set<std::string> Directives::DIRECTIVES  = {",
    "const std::unordered_set<std::string> Directives::EXPEDITE_DIRECTIVES  = {"
  ],
  "/-S/yandex_io/libs/base/utils.cc": [
    "const std::string base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\""
  ],
  "/-S/yandex_io/libs/bluetooth/gatt/GattPermission.cc": [
    "const std::array<std::string, static_cast<int>(GattPermission::MAX_VALUE) + 1> STRING_VALUES {"
  ],
  "/-S/yandex_io/libs/configuration/Configuration.cc": [
    "const static std::string PATTERNS = \"patterns\";"
  ],
  "/-S/yandex_io/libs/device/Device.cc": [
    "std::shared_mutex deviceMutex_;",
    "std::shared_ptr<Device> device_;"
  ],
  "/-S/yandex_io/libs/glagol_sdk/Connector.cc": [
    "const Json::Value Connector::GSDK_CONTEXT_JSON = getContextJson();",
    "const std::string Connector::GSDK_CONTEXT = quasar::jsonToString(GSDK_CONTEXT_JSON);",
    "const std::string Connector::GSDK_CONTEXT_IPV4 = quasar::jsonToString(getGlagolSdkIpv4MetricaContext());",
    "const std::string Connector::GSDK_CONTEXT_IPV6 = quasar::jsonToString(getGlagolSdkIpv6MetricaContext());"
  ],
  "/-S/yandex_io/libs/glagol_sdk/Connector.h": [
    "static const std::string LISTENS = \"LISTENS\";",
    "static const std::string LONG_LISTENING = \"LONG_LISTENING\";",
    "static const std::string NOT_LISTENS = \"NOT_LISTENS\";"
  ],
  "/-S/yandex_io/libs/setup_parser/WifiType.h": [
    "const std::string WIFI_TYPES[5] = {\"OPEN\", \"WEP\", \"WPA\", \"UNKNOWN\", \"NONE\"};"
  ],
  "/-S/yandex_io/libs/threading/Lifetime.cc": [
    "const Lifetime Lifetime::immortal;"
  ],
  "/-S/yandex_io/libs/websocket/WebsocketClient.cc": [
    "std::map<std::string, level> channelNameToAlevel = {",
    "std::map<std::string, level> channelNameToElevel = {"
  ],
  "/-S/yandex_io/modules/audio_input/broken_mic/BrokenMicConfigHandler.cc": [
    "const std::string BrokenMicConfigHandler::CONFIG_NAME = \"brokenMicDetector\";"
  ],
  "/-S/yandex_io/services/alarmd/AlarmEndpoint.cc": [
    "const std::string AlarmEndpoint::SERVICE_NAME = \"alarmd\";"
  ],
  "/-S/yandex_io/services/alarmd/QueuedAlarmPlayer.cc": [
    "const std::string QueuedAlarmPlayer::SERVICE_NAME = \"alarmd\";"
  ],
  "/-S/yandex_io/services/aliced/QuasarPhraseSpotterListener.cc": [
    "const std::map<std::string, std::string> recognizedPhraseToDirectiveMap = {"
  ],
  "/-S/yandex_io/services/aliced/SpeechkitEndpoint.cc": [
    "const std::set<UniProxyDirectiveName> SpeechkitEndpoint::ALLOWED_UNIPROXY_DIRECTIVES = {",
    "const std::string SpeechkitEndpoint::SERVICE_NAME = \"aliced\";"
  ],
  "/-S/yandex_io/services/aliced/audio_source/QuasarAudioSource2.cc": [
    "const SpeechKit::SoundInfo gSoundInfo = SpeechKit::SoundInfo(SoundFormat::PCM, 1, 16000, 2);"
  ],
  "/-S/yandex_io/services/authd/AuthEndpoint.cc": [
    "const std::string AuthEndpoint::SERVICE_NAME = \"authd\";"
  ],
  "/-S/yandex_io/services/ble_initd/BleEndpoint.cc": [
    "const std::string BleEndpoint::SERVICE_NAME = \"ble_initd\";"
  ],
  "/-S/yandex_io/services/brickd/BrickEndpoint.cc": [
    "const std::string BrickEndpoint::SERVICE_NAME = \"brickd\";"
  ],
  "/-S/yandex_io/services/external_commandsd/ExternalCommandsEndpoint.cc": [
    "const std::string ExternalCommandsEndpoint::SERVICE_NAME = \"external_commandsd\";"
  ],
  "/-S/yandex_io/services/firstrund/FirstRunEndpoint.cc": [
    "const std::string FirstRunEndpoint::SERVICE_NAME = \"firstrund\";"
  ],
  "/-S/yandex_io/services/iot/IotEndpoint.cc": [
    "const std::string IotEndpoint::SERVICE_NAME = \"iot\";"
  ],
  "/-S/yandex_io/services/mediad/MediaEndpoint.cc": [
    "const std::string MediaEndpoint::SERVICE_NAME = \"mediad\";"
  ],
  "/-S/yandex_io/services/mediad/PlaybackEndpoint.cc": [
    "const std::string PlaybackEndpoint::defaultGroup = \"default\";"
  ],
  "/-S/yandex_io/services/mediad/TcpDump.cc": [
    "static const std::string DEFAULT_PATH_TO_DUMP_FILE = \"/tmp/dump.pcap\";",
    "static const std::string DEFAULT_PCAP_FILTER ="
  ],
  "/-S/yandex_io/services/mediad/players/Player.h": [
    "const std::string DISLIKE = \"dislike\";",
    "const std::string LIKE = \"like\";",
    "const std::string NEXT = \"next\";",
    "const std::string PREVIOUS = \"previous\";"
  ],
  "/-S/yandex_io/services/mediad/players/yandexmusic/TrackDownloader.cc": [
    "const std::map<GstState, std::string> gstStateToString = {",
    "const std::map<HttpState, std::string> httpStateToString = {",
    "const std::string TRACK_DOWNLOADER_EVENT = \"TrackDownloader\";"
  ],
  "/-S/yandex_io/services/mediad/players/yandexradio/YandexRadioPlayer.cc": [
    "const std::string LETTERS_AND_DIGITS = \"0123456789abcdefghijklmnopqrstuvwxyz\";"
  ],
  "/-S/yandex_io/services/mediad/players/yandexradio2/YandexRadioPlayer2.cc": [
    "const std::string LETTERS_AND_DIGITS = \"0123456789abcdefghijklmnopqrstuvwxyz\";",
    "const std::string WHITE_NOISE_GROUP = \"white_noise\";"
  ],
  "/-S/yandex_io/metrica/metricad/AppMetricaEndpoint.cc": [
    "const std::string AppMetricaEndpoint::SERVICE_NAME = \"metricad\";"
  ],
  "/-S/yandex_io/metrica/monitor/metrics_collector/MetricsCollector.cc": [
    "const std::string MetricsCollectorBase::NetworkStatistics::DEFAULT_GATEWAY = \"00000000\";",
    "const std::string MetricsCollectorBase::NetworkStatistics::IFACES_STATS_FILENAME = \"/proc/net/dev\";",
    "const std::string MetricsCollectorBase::NetworkStatistics::INTERFACES_DIRECTORY = \"/sys/class/net\";",
    "const std::string MetricsCollectorBase::NetworkStatistics::OPERSTATE_FILENAME = \"operstate\";",
    "const std::string MetricsCollectorBase::NetworkStatistics::ROUTING_TABLE_FILENAME = \"/proc/net/route\";"
  ],
  "/-S/yandex_io/services/multiroomd/MultiroomCommon.cc": [
    "const std::string ROOM_ALL =\"__all__\";"
  ],
  "/-S/yandex_io/services/networkd/NetworkEndpoint.cc": [
    "const std::string NetworkEndpoint::SERVICE_NAME = \"networkd\";"
  ],
  "/-S/yandex_io/services/pilotd/PilotEndpoint.cc": [
    "const std::set<std::string> PilotEndpoint::BROADCAST_COMMANDS {",
    "const std::set<std::string> PilotEndpoint::LOCAL_COMMANDS = {",
    "const std::set<std::string> PilotEndpoint::MEDIA_COMMANDS {",
    "const std::set<std::string> PilotEndpoint::MUSIC_RADIO_CONTROL_COMMANDS {",
    "const std::set<std::string> PilotEndpoint::PLAYER_COMMAND_WITH_TYPE_PAYLOAD",
    "const std::set<std::string> PilotEndpoint::QUASAR_UI_COMMANDS {",
    "const std::set<std::string> PilotEndpoint::VOLUME_COMMANDS {",
    "const std::string PilotEndpoint::FOLLOWER = \"follower\";",
    "const std::string PilotEndpoint::LEADER = \"leader\";",
    "const std::string PilotEndpoint::SERVICE_NAME = \"pilotd\";"
  ],
  "/-S/yandex_io/services/pushd/PushEndpoint.cc": [
    "const std::string PushEndpoint::SERVICE_NAME = \"pushd\";"
  ],
  "/-S/yandex_io/services/pushd/XivaOperations.cc": [
    "const std::unordered_set<std::string> XivaOperations::DECLARED_XIVA_OPERATIONS  = {"
  ],
  "/-S/yandex_io/services/setupd/SetupEndpoint.cc": [
    "const std::string SetupEndpoint::SERVICE_NAME = \"setupd\";"
  ],
  "/-S/yandex_io/services/sound_initd/SoundInitEndpoint.cc": [
    "const std::string SoundInitEndpoint::SERVICE_NAME = \"sound_initd\";"
  ],
  "/-S/yandex_io/services/sound_initd/soundUtils.h": [
    "const GaloisField GALOIS_FIELD = GaloisField(0x13, 16, 1);"
  ],
  "/-S/yandex_io/services/stated/State.cc": [
    "const std::string State::SERVICE_NAME = \"stated\";"
  ],
  "/-S/yandex_io/services/syncd/SyncEndpoint.cc": [
    "const std::string SyncEndpoint::SERVICE_NAME = \"syncd\";"
  ],
  "/-S/yandex_io/services/testpoint/TestpointEndpoint.cpp": [
    "const std::string TestpointEndpoint::SERVICE_NAME = \"testpoint\";"
  ],
  "/-S/yandex_io/sdk/YandexIOSDK.cc": [
    "YandexIOSDK YandexIOSDK::instance;"
  ]
}
