[
    {
        "is_dynamic": false,
        "templates": [
            {
                "content": "{% set root_db = \"\/ssd\" %}\n{% set extra_args = \"\" %}{# vmesto OPT_ v Conf.local #}\n{% macro extra_defines() -%} {# extra_defines dobavljaetsja v nachalo gl. sekcii #}\n{%- endmacro %}\n{% macro extra_install_cmds() -%}\n{# extra_install_cmds dobavljaetsja v install_script, v nachale strok dolzhen byt' otstup #}\n{%- endmacro %}\n",
                "name": "ssd.jinja"
            },
            {
                "content": "{% set root_db = \"\/db\/bsconfig\" %}\n{% set extra_args = \"\" %}{# vmesto OPT_ v Conf.local #}\n{% macro extra_defines() -%} {# extra_defines dobavljaetsja v nachalo gl. sekcii #}\n{%- endmacro %}\n{% macro extra_install_cmds() -%}\n{# extra_install_cmds dobavljaetsja v install_script, v nachale strok dolzhen byt' otstup #}\n{%- endmacro %}\n",
                "name": "default.jinja"
            },
            {
                "content": "[pushclient]\nbinary = %(BSCONFIG_IDIR)s\/push-client-start\nbinary_state_dir = \/db\/bsconfig\/webstate\/%(BSCONFIG_INAME)s\/%(section)s\nconfig = %(BSCONFIG_IDIR)s\/push-client.conf\ndaemon_log = %(logs_dir)s\/current-log-%(section)s-%(BSCONFIG_IPORT)s\narguments = -c %(config)s -f\n\ninstall_script = set -x;\n    if [ -f %(config)s.tmpl ]\n    then\n        logbroker_=\"logbroker.yandex.net\"\n        identity_=\"refresh\"\n        tmp_config=%(config)s.tmpl\n        cp $tmp_config %(config)s\n        sed -i \"s|STATE_DIR|%(binary_state_dir)s|g\" %(config)s\n        sed -i \"s|PC_LOG_PATH|%(daemon_log)s|\" %(config)s\n        sed -i \"s|LOG_PATH|%(logs_dir)s|\" %(config)s\n        sed -i \"s|BSCONFIG_IPORT|%(BSCONFIG_IPORT)s|\" %(config)s\n        sed -i \"s|IDENTITY|${identity_}|\" %(config)s\n        sed -i \"s|LOGBROKER|${logbroker_}|\" %(config)s\n        mkdir -p %(binary_state_dir)s\n        ln -sf push-client %(binary)s || exit 1       \n    else\n        [ -f %(binary)s ] && rm %(binary)s\n        echo '#!\/bin\/sh\\nsleep infinity\\n' > %(binary)s\n        chmod 0755 %(binary)s\n    fi\n\nreopenlog_script = [ -e %(BSCONFIG_IDIR)s\/pids\/%(section)s ] && kill -TERM $(cat %(BSCONFIG_IDIR)s\/pids\/%(section)s)\n",
                "name": "misc.tmpl"
            }
        ],
        "local_path": "loop.conf",
        "layout": "{%- if \"itag_copy_on_ssd\" in instance.tags %}{%- import \"ssd.jinja\" as tpl with context %}\n{%- else %}{%- import \"default.jinja\" as tpl with context %}\n{%- endif %}\n[defaults]\nits_poll = 1\naction_stop_timeout = 600\n\n[base_saas]\n{{ tpl.extra_defines() }}\nbinary = %(BSCONFIG_IDIR)s\/rtyserver\nrename_binary = rtyserver-%(BSCONFIG_IPORT)s\nenv_match = ^ENV_(.*)$\nopt_match = ^OPT_(.*)$\nconfigs_suffix = %(CONFIGS_SUFFIX)s\nlogs_dir = \/usr\/local\/www\/logs\/\nbinary_state_dir = \/db\/bsconfig\/webstate\/%(BSCONFIG_INAME)s\/%(section)s\nroot_db_dir = {{ tpl.root_db }}\nrtindexdir = \/run\/shm\/rtwebcache\/%(BSCONFIG_INAME)s\nindexddir = %(root_db_dir)s\/webcache\/%(BSCONFIG_IHOST)s:%(BSCONFIG_IPORT)s\noldindex = \/db\/bsconfig\/webcache\/%(BSCONFIG_IHOST)s:%(BSCONFIG_IPORT)s\nconf_dir = %(BSCONFIG_IDIR)s\/configs\nconf_canon_dir = %(BSCONFIG_IDIR)s\/canon_configs\nconf_static_dir = %(BSCONFIG_IDIR)s\n\nprepare_script = set -ex;\n    tar xzf gdb_toolkit.tgz;\n    mkdir -p %(conf_dir)s;\n    mkdir -p %(conf_canon_dir)s;\n    for fpath in $(find %(conf_canon_dir)s\/ -type f); do\n        fn=\"$(basename $fpath)\";\n        if [ -e \"%(conf_static_dir)s\/$fn\" ]; then\n            fpath=\"%(conf_static_dir)s\/$fn\";\n        fi;\n        cp \"$fpath\" \"%(conf_dir)s\/$(basename $fn)\";\n    done\n\ninstall_script= set -x\n    mkdir -p %(root_db_dir)s\/webcache\n    # copy index from old path if exists\n    ( [ ! -d \"%(indexddir)s\" ] && [ -d \"%(oldindex)s\" ] ) && cp -rf %(oldindex)s %(indexddir)s\n    mkdir -p %(rtindexdir)s\/index\/project\n    mkdir -p %(indexddir)s\/index\/project\n    mkdir -p %(indexddir)s\/detach\n    if [ \"$(date --iso-8601=ns)\" \\< \"2020-03-26T13:00\" ]; then\n        rm -rf %(indexddir)s\/index\/project\/prep_*\n    fi\n    ln -fsn %(indexddir)s\/index\/project \/db\/BASE\/\n    ln -fs \/var\/log\/messages %(logs_dir)s\/messages\n    mkdir -p %(binary_state_dir)s\n    rm -f %(indexddir)s\/cleared_for_pq\n    rm %(binary_state_dir)s\/controller* || echo\n    {{ tpl.extra_install_cmds() }}\n    touch \/tmp\/rty_vm.lock\n    flock -w180 \/tmp\/rty_vm.lock vmtouch -ft %(binary)s %(BSCONFIG_IDIR)s\/models.archive || echo \"Flock timeout\"\n    echo `date --iso-8601=ns` Models preloaded\n\nrestart_script= set -x\n    mkdir -p %(rtindexdir)s\/index\/project\n    mkdir -p %(indexddir)s\/index\/project\n    mkdir -p %(indexddir)s\/detach\n    ln -fsn %(indexddir)s\/index\/project \/db\/BASE\/\n    mkdir -p %(BSCONFIG_IDIR)s\/configs\n    mkdir -p %(conf_dir)s;\n    mkdir -p %(conf_canon_dir)s;\n    if [ -x .\/restart_script.sh ]; then\n        export LOOP_SECTION=base_saas\n        export INDEX_DIRECTORY=%(indexddir)s\/index\/project\n        export STATE_ROOT=%(binary_state_dir)s\n        export LOGS_DIR=%(logs_dir)s\n        bash .\/restart_script.sh allow_nonrunnable,no_drop,restart_on_rt_fail\n    fi\n\nstop_script = set -ex;\n    cont=\"$((%(BSCONFIG_IPORT)s+3))\"\n    curl -s \"http:\/\/localhost:${cont}\/?command=shutdown&rigid_level=1\"\n\nreopenlog_script = set -ex;\n    cont=\"$((%(BSCONFIG_IPORT)s+3))\"\n    curl -s \"http:\/\/localhost:${cont}\/?command=reopenlog\"\n\nstatus_script = \n    export BSCONFIG_IDIR=\"%(BSCONFIG_IDIR)s\"\n    export BSCONFIG_IHOST=\"%(BSCONFIG_IHOST)s\"\n    export BSCONFIG_IPORT=\"%(BSCONFIG_IPORT)s\"\n    export BSCONFIG_ITAGS=\"%(BSCONFIG_ITAGS)s\"\n\n    sh .\/check_status.sh 43200\n\narguments =\n    %(conf_dir)s\/rtyserver.conf-%(configs_suffix)s\n    -E %(conf_dir)s\/environment-%(configs_suffix)s\n    -V LOG_POSTFIX=-%(BSCONFIG_IPORT)s\n    -V BasePort=%(BSCONFIG_IPORT)s\n    -P Server.IndexDir=%(indexddir)s\/index\/project\n    -P Server.ModulesConfig.Synchronizer.DetachPath=%(indexddir)s\/detach\n    -V LOG_PATH=%(logs_dir)s\n    -V BSCONFIG_IPORT=%(BSCONFIG_IPORT)s\n    -V INDEX_DIRECTORY=%(indexddir)s\/index\/project\n    -V RTINDEX_DIRECTORY=%(rtindexdir)s\/index\/project\n    -V DETACH_DIRECTORY=%(indexddir)s\/detach\n    -V JournalDir=%(logs_dir)s\n    -V STATIC_DATA_DIRECTORY=%(BSCONFIG_IDIR)s\/models\/models\n    -V CONFIG_PATH=%(conf_dir)s\n    -V STATE_ROOT=%(binary_state_dir)s\n    -V MODELS_PATH=%(BSCONFIG_IDIR)s\n    {{ tpl.extra_args }}\n\ndelay = 5\nkill_timeout = 10\nlimit_core = unlimited\ncoredump_probability = 100\nalways_coredump = yes\nterminate_timeout = 590\n\ncoredumps_format = coredump\nminidumps_push = 1\nminidumps_path = \/coredumps\nminidumps_service = %(NANNY_SERVICE_ID)s\nminidumps_aggregator = saas_aggregator\nminidumps_aggregator_url = http:\/\/saas-cores.n.yandex-team.ru\/corecomes\ncoredumps_gdb_stackwalk_timeout = 600\ncore_pattern = .*%(BSCONFIG_IPORT)s_%(NANNY_SERVICE_ID)s.*rtyserver.*\n\n{% include \"misc.tmpl\" %}"
    }
]
