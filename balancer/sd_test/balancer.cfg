log_dir = log_dir or "/logs";

sd_log = log_dir .. "/current-sdlog";
access_log = log_dir .. "/current-accesslog";
error_log = log_dir .. "/current-errorlog";

function create_sd_section(algo_name, options)
    clusters = {"sas-test", "sas", "man", "vla", "man-pre", "myt"};

    inner_sections = {} 

    for _, cluster in pairs(clusters) do
        balancer2 = {
            attempts = 3;
            sd = {
                endpoint_sets = {
                    { cluster_id = cluster; service_id = "chaos-service-slave";};
                };

                proxy_options = {
                    connect_timeout = "40ms";
                    backend_timeout = "100ms";
                };
            }
        };

        balancer2['sd'][algo_name] = options; 

        inner_sections[#inner_sections + 1] = {
            report = {
                uuid = algo_name .. "-" .. cluster;
                all_default_ranges=true; just_storage=false;
                events = { stats = "report";};
                balancer2 = balancer2;
            };
        };
    end

    return {
        match_fsm = { header = { name = "Balancing"; value = algo_name; }; };
        balancer2 = {
            attempts = 1;
            rr = inner_sections;
        };
    }
end

function create_main_regexp()
    algo = {
        rr = {};
        hashing = {};
        active = { request = "GET /ping HTTP/1.1\r\n\r\n"; delay = "10s"; };
        weighted2 = {};
    };

    regexp = {};

    for algo_name, algo_options in pairs(algo) do
        regexp[algo_name] = create_sd_section(algo_name, algo_options);
    end

        
    return regexp
end

port = port or 8080;

instance = {
        events = {
            stats = "report";
        };
    addrs = {
        { ip = "*"; port = port; };        
        { ip = "127.0.0.5"; port = port; };
    }; -- addrs
    admin_addrs = {
        { ip = "127.0.0.1"; port = port; };
    }; -- admin_addrs

    unistat = {
        addrs = {
          { ip = "*"; port = port + 2; };
        };
    };

    thread_mode = true;

    workers = 3; maxconn = 20000;
    config_tag = "description";
    sd = {
        host = "sd.yandex.net";
        port = "8080";
        request_timeout = "1s";
        cache_dir = "./cache";
        log = sd_log;
        update_frequency = "5s";
        client_name = "sd-balancer-test";
    };

    ipdispatch = {
        localhost = {
            ips = {"127.0.0.1"}; port = port;
            http = {
                maxlen = 8096; maxreq = 8096;
                admin = {};
            };
        };

        events = {
            stats = "report";
        };
        main = {
            ips = {"*", "127.0.0.5"}; port = port;
            errorlog = {
                log = error_log;
                http = {
                    events = {
                        stats = "report";
                    };

                    maxlen = 8096; maxreq = 8096;

                    accesslog = {
                        log = access_log;

                        report = {
                            uuid = "service_total";
                            all_default_ranges=true; just_storage=false;
                            events = { stats = "report";};

                            regexp = create_main_regexp();
                        };
                    };
                };
            }
        };
    };
}; -- instance
