# bsconfig defines following environment variables:
#
#   BSCONFIG_DBTOP
#   BSCONFIG_IDIR
#   BSCONFIG_IHOST
#   BSCONFIG_INAME
#   BSCONFIG_IPORT
#   BSCONFIG_ITAGS
#   BSCONFIG_REQUIRES_SHARDS
#   BSCONFIG_SHARDDIR
#   BSCONFIG_SHARDNAME
#   BSCONFIG_SHARDREPLICA
#
# also loop script has following variables pre-defined:
#   stdout
#   stderr
#   pid_file
#   state_dir (directory to store pid files and etc.)
#   type      (daemon, cron)
#   logs_dir
#   section   (config section)

[balancer]
always_coredump = False
coredump_probability = 100
limit_core = unlimited
binary = balancer
rename_binary = balancer-%(BSCONFIG_IPORT)s
arguments =  balancer.cfg -L -V DC=%(a_dc)s -V port=%(BSCONFIG_IPORT)s -V get_workers_provider=./dump_json_get_workers_provider.lua
terminate_timeout = 10
install_script  = set -x
    TARGET=/logs
    LINK_NAME=/place/db/www/logs
    ln -sT $TARGET $LINK_NAME || ([ -L $LINK_NAME ] && [ $(readlink $LINK_NAME) = $TARGET ])
    # [RUNTIMECLOUD-7224] temporary workaround for problem with unset mtu/mss
    default_gw="$(ip -6 route list | grep -oP 'default\ .*\K2a02:[:0-9a-f]+')"
    ipv6_service_addrs=""
    mtu=1450
    mss=1390
    if [ -e %(BSCONFIG_IDIR)s/dump.json ]; then
        ipv6_service_addrs="$(jq '.["container"]["constraints"]["slot.ip"]' %(BSCONFIG_IDIR)s/dump.json | grep -oP 'ip6tnl0\ \K2a02:[:0-9a-f]+')"
        mtu="$(jq '.["container"]["constraints"]["slot.net"]' %(BSCONFIG_IDIR)s/dump.json | grep -oP 'MTU\ ip6tnl0\ \K\d{4}')"
        mss=$((mtu - 60))
    fi

    if [ -n "${default_gw}" -a -n "${ipv6_service_addrs}" ]; then
        if [ "$(ip -6 ro li table 6010 | grep -c ${default_gw})" -eq 0 ]; then
            sudo ip -6 ro add default via "${default_gw}" dev veth mtu lock "${mtu}" advmss "${mss}" table 6010
        fi
        if [ "$(ip -6 ru li | grep -c ${ipv6_service_addrs})" -eq 0 ]; then
            sudo ip -6 rule add from "${ipv6_service_addrs}" lookup 6010 priority 16364
        fi
    fi
    # [RUNTIMECLOUD-7224] temporary workaround for problem with unset mtu/mss

    export -p | grep '^export AWACS_' > /dev/shm/env_save

    mkdir -p %(BSCONFIG_IDIR)s/data
    [ -e %(BSCONFIG_IDIR)s/config.lua ] && cp %(BSCONFIG_IDIR)s/config.lua %(BSCONFIG_IDIR)s/balancer.cfg

    if ls %(BSCONFIG_IDIR)s/secrets*/secrets.tgz 2>/dev/null; then
        [ -d /dev/shm/balancer/ ] || mkdir -p -m 755 /dev/shm/balancer/
        [ -d /place/db/www/logs/balancer ] || mkdir -p -m 755 /place/db/www/logs/balancer

        for item in %(BSCONFIG_IDIR)s/secrets*/secrets.tgz; do
            if tar -xf "${item}" -C /dev/shm/balancer/; then
                rm "${item}"
            fi
        done
        cp /dev/shm/balancer/allCAs-*.pem /place/db/www/logs/balancer/
        chmod 700 /dev/shm/balancer/priv
    fi

    [ -e %(BSCONFIG_IDIR)s/robots.txt ] && cp %(BSCONFIG_IDIR)s/robots.txt %(BSCONFIG_IDIR)s/data || true
    if [ -e /place/db/www/logs/balancer/reload_config.log ]; then
        sed -i "/%(NANNY_SERVICE_ID)s/d" /place/db/www/logs/balancer/reload_config.log
    fi

status_script = set -ex;
    if [ $(curl -so /dev/null -4 -w "%%{http_code}" http://localhost:%(BSCONFIG_IPORT)s/admin?action=version) -ne "200" ]; then
        echo "Balancer is down"
        exit 33
    fi

stop_script = set -x;
    echo "Stop balancer"
    curl -s4i "http://localhost:%(BSCONFIG_IPORT)s/admin?action=graceful_shutdown&timeout=40s&close_timeout=5s"
    true

reopenlog_script = set -x;
    echo "Reopenlog"
    curl -s4i "http://localhost:%(BSCONFIG_IPORT)s/admin?action=reopenlog"
    # RUNTIMECLOUD-6820
    sleep 10
    true

notify_script = set -x;
    if [ "$#" -eq "0" ]; then
        echo "$(date '+%%F %%T.%%N'): There are no arguments at all" >> iss_hook_notify.log
        exit 0
    fi

    check_dir() {
        test -d /place/db/www/logs/balancer || mkdir -p -m 755 /place/db/www/logs/balancer
        return 0
    }

    reload_config() {
        cp config.lua balancer.cfg.new

        . /dev/shm/env_save
        launch_args=$(pgrep -ofl balancer-%(BSCONFIG_IPORT)s| grep -oE '[[:graph:]]+=[[:graph:]]+')
        check_args=""
        reload_args=""
        if [ -n "${launch_args}" ]; then
            for i in ${launch_args}; do
                check_args="${check_args} -V ${i}"
                reload_args="${reload_args}&V_${i}"
            done
        else
            dc=$(echo "%(tags)s" | grep -oP 'a_dc_\K\w+')
            port="%(BSCONFIG_IPORT)s"
            check_args="-V DC=${dc} -V port=${port}"
            reload_args="&V_DC=${dc}&V_port=${port}"
        fi

        if eval ./balancer-%(BSCONFIG_IPORT)s -K balancer.cfg.new "${check_args}"; then
            echo "$(date '+%%F %%T.%%N'): Test of new configuration file for %(NANNY_SERVICE_ID)s service ended successfully; Reload ..." >> iss_hook_notify.log
            cp balancer.cfg balancer.cfg.old
            mv balancer.cfg.new balancer.cfg
            curl -s4i "http://127.0.0.1:%(BSCONFIG_IPORT)s/admin?action=reload_config&new_config_path=balancer.cfg${reload_args}" >> iss_hook_notify.log
            check_dir
            if [ -e /place/db/www/logs/balancer/reload_config.log ]; then
                sed -i "/%(NANNY_SERVICE_ID)s/d" /place/db/www/logs/balancer/reload_config.log
            fi
            return 0
        else
            echo "$(date '+%%F %%T.%%N'): Error! Test of new configuration file for %(NANNY_SERVICE_ID)s service is failed;" >> iss_hook_notify.log
            check_dir
            echo "ERROR: CONFIG FILE IS NOT RELOADED: %(NANNY_SERVICE_ID)s" >> /place/db/www/logs/balancer/reload_config.log
            # RUNTIMECLOUD-4197 Do not release "iss_hook_notify" if test of config file is failed
            return 1
        fi
    }

    for item in "${@}"; do
        action="$(echo ${item} | grep -oE '^(!|-|\+)')"
        file="$(echo ${item} | cut -d ${action} -f 2)"

        if [ "${action}" = "-" ]; then
            echo "$(date '+%%F %%T.%%N'): ${file} is gone; nothing todo; quit" >> iss_hook_notify.log
            exit 0
        fi

        case "${file}" in
            "config.lua")
                echo "$(date '+%%F %%T.%%N'): Recieved ${item}; Call reload_config func" >> iss_hook_notify.log
                reload_config
            ;;
            *)
                echo "$(date '+%%F %%T.%%N'): Unknown file" >> iss_hook_notify.log
            ;;
        esac
    done


[pushclient]
binary = push-client
rename_binary = wrap-%(section)s-%(BSCONFIG_IPORT)s
binary_state_dir = /place/db/www/logs/%(BSCONFIG_INAME)s/%(section)s
config = %(BSCONFIG_IDIR)s/push-client_real.conf
daemon_log = /place/db/www/logs/current-log-%(section)s-%(BSCONFIG_IPORT)s
arguments = -c %(config)s -f

install_script = set -x
    TARGET=/logs
    LINK_NAME=/place/db/www/logs
    ln -sT $TARGET $LINK_NAME || ([ -L $LINK_NAME ] && [ $(readlink $LINK_NAME) = $TARGET ])
    mkdir -p %(binary_state_dir)s

reopenlog_script = [ -e %(BSCONFIG_IDIR)s/pids/%(section)s ] && /bin/kill -TERM $(cat %(BSCONFIG_IDIR)s/pids/%(section)s)


[yasmsubagent]
binary = python
arguments = /usr/local/yasmagent/run.py --yasmutil-dir /usr/local/yasmagent/lib --type-conf-dir /usr/local/yasmagent/CONF --config /usr/local/yasmagent/agent.conf --subagent-mode --log-dir %(BSCONFIG_IDIR)s/subagent_logs --pid-file %(BSCONFIG_IDIR)s/yasmsubagent.pid --iss --disable-common --fg

[logrotate]
binary = bash
arguments = -c 'while true; do python -c "import random, time, datetime; now = datetime.datetime.now(); time_to_sleep = 60 * (10 - now.minute %% 10 + random.random()) - now.second ; print \"Waking up in\", now + datetime.timedelta(seconds=time_to_sleep); time.sleep(time_to_sleep)" && logrotate -v -s /logs/lograte.state /home/loadbase/logrotate.conf; done'
install_script = set -x
    chmod 0644 logrotate.conf
    mkdir -p /home/loadbase/
    TARGET=%(BSCONFIG_IDIR)s/logrotate.conf
    LINK_NAME=/home/loadbase/logrotate.conf
    cp $TARGET $LINK_NAME

[cachedaemon]
binary = cachedaemon
arguments = -p 8888 -v access_log_file=/logs/current-access_log-cached -v n_cpu=2 -v cache_dir=/logs/cached -v memory_limit=2G -v file_cache_size=10G cachedaemon.lua
install_script = set -x
    mkdir -p /logs/cached

reopenlog_script = set -x;
    echo "Reopenlog cached"
    curl -6i "http://localhost:8888/admin?action=reopenlog"
    true

stop_script = set -x;
    echo "Stop cached"
    curl -6i "http://localhost:8888/admin?action=shutdown"
    true

status_script = set -x;
    echo "Check instance"
    nc -6 -w5 -z localhost 8888 || false
    curl -6 --silent "http://localhost:8888/admin?action=version" || false

[defaults]
its_poll = 1
its_force_poll_timeout = 5
its_max_poll_timeout = 10
env_match = ^ENV_(.*)$
opt_match = ^OPT_(.*)$
