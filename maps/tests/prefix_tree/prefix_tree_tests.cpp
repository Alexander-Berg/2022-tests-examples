#include <library/cpp/testing/unittest/registar.h>
#include <library/cpp/testing/unittest/env.h>
#include <maps/analyzer/toolkit/bin/tracks_matcher/prefix_tree.h>
#include <sstream>
#include <iostream>

using TestTree = PrefixTree<std::string, int64_t>;
using TestTreeNode = TestTree::PrefixTreeNode;
using TestTreeNodePtr = TestTreeNode::PrefixTreeNodePtr;
using TestTreeNodeConstPtr = TestTreeNode::PrefixTreeNodeConstPtr;
using TestTreeNodeLink = TestTree::PrefixTreeNodeLink;
using TestTreeIntersection = TestTree::PrefixTreeIntersection;
using PathIterator = TestTreeNode::PathItems::const_iterator;

void addFirstPath(TestTree& tree) {
    TestTreeNode::PathItems route{0, 1, 2};
    tree.addPath(route.begin(), route.end(), "00");
}

void checkNode(
        const std::string& path,
        const TestTreeNodeConstPtr& node,
        size_t toNextNodeSize,
        size_t nextNodesSize,
        size_t pathEndsSize) {
    UNIT_ASSERT_VALUES_EQUAL_C(
        node->toNextNode().size(),
        toNextNodeSize,
        std::string("node path: ") + path);
    UNIT_ASSERT_VALUES_EQUAL_C(
        node->nextNodes().size(),
        nextNodesSize,
        std::string("node path: ") + path);
    UNIT_ASSERT_VALUES_EQUAL_C(
        node->pathEnds().size(),
        pathEndsSize,
        std::string("node path: ") + path);

}

std::string getPath(const TestTreeNodeLink& link) {
    std::stringstream s;
    for (auto i = link.treeNode->toNextNode().begin();
            i != link.pathItem; ++i) {
        s << " " << *i;
    }
    std::string result;
    if (auto parent = link.treeNode->parent()) {
        result = getPath({parent, parent->toNextNode().end()});
    }
    result += s.str();
    return result;
}

void checkTree(const TestTreeNodeConstPtr& node){
    size_t size = node->pathEnds().size();
    for (const auto& child : node->nextNodes()) {
        UNIT_ASSERT_VALUES_EQUAL_C(
            node.get(),
            child.second->parent().get(),
            "for path " << getPath({
                child.second,
                child.second->toNextNode().begin()}));
        checkTree(child.second);
        size += child.second->numberOfPathsPassingThrough();
    }
    UNIT_ASSERT_VALUES_EQUAL_C(
        size,
        node->numberOfPathsPassingThrough(),
        "for path " << getPath({
                node,
                node->toNextNode().begin()}));
    if (auto parent  = node->parent()) {
        UNIT_ASSERT_VALUES_EQUAL_C(
            parent->lengthOfPathBefore() + parent->toNextNode().size(),
            node->lengthOfPathBefore(),
            "for path " << getPath({
                    parent,
                    parent->toNextNode().begin()}));
    } else {
        UNIT_ASSERT_VALUES_EQUAL(
            0,
            node->lengthOfPathBefore());
    }
}

TestTreeNodeLink makeTreeNodeLink(
        const TestTreeNodePtr& node,
        size_t pathItemIndex) {
    return {
        node, node->toNextNode().begin() + pathItemIndex
    };
}

bool operator==(const TestTreeNodeLink& a, const TestTreeNodeLink& b) {
    return a.treeNode.get() == b.treeNode.get()
        && (a.pathItem - a.treeNode->toNextNode().begin())
            == (b.pathItem - b.treeNode->toNextNode().begin());
}

bool operator==(const TestTreeIntersection& a, const TestTreeIntersection& b) {
    return a.first == b.first && a.second == b.second;
}

Y_UNIT_TEST_SUITE(prefix_tree) {
    Y_UNIT_TEST(add_first) {
        TestTree tree;
        addFirstPath(tree);
        checkNode("0", tree.root(), 3, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(add_same) {
        TestTree tree;
        addFirstPath(tree);
        addFirstPath(tree);
        checkNode("0", tree.root(), 3, 0, 2);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(fork_at_begin) {
        TestTree tree;
        addFirstPath(tree);
        TestTreeNode::PathItems route{10, 11, 12};
        tree.addPath(route.begin(), route.end(), "11");
        addFirstPath(tree);
        checkNode("0", tree.root(), 0, 2, 0);
        checkNode("0/0", tree.root()->nextNodes().at(0), 3, 0, 2);
        checkNode("0/1", tree.root()->nextNodes().at(10), 3, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(fork_at_midle) {
        TestTree tree;
        addFirstPath(tree);
        TestTreeNode::PathItems route{0, 11, 12};
        tree.addPath(route.begin(), route.end(), "11");
        addFirstPath(tree);
        checkNode("0", tree.root(), 1, 2, 0);
        checkNode("0/0", tree.root()->nextNodes().at(1), 2, 0, 2);
        checkNode("0/1", tree.root()->nextNodes().at(11), 2, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(fork_at_end) {
        TestTree tree;
        addFirstPath(tree);
        TestTreeNode::PathItems route{0, 1, 12};
        tree.addPath(route.begin(), route.end(), "11");
        addFirstPath(tree);
        checkNode("0", tree.root(), 2, 2, 0);
        checkNode("0/0", tree.root()->nextNodes().at(2), 1, 0, 2);
        checkNode("0/1", tree.root()->nextNodes().at(12), 1, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(split_at_begin) {
        TestTree tree;
        addFirstPath(tree);
        TestTreeNode::PathItems route{0};
        tree.addPath(route.begin(), route.end(), "11");
        addFirstPath(tree);
        checkNode("0", tree.root(), 1, 1, 1);
        checkNode("0/0", tree.root()->nextNodes().at(1), 2, 0, 2);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(split_at_midle) {
        TestTree tree;
        addFirstPath(tree);
        TestTreeNode::PathItems route{0, 1};
        tree.addPath(route.begin(), route.end(), "11");
        addFirstPath(tree);
        checkNode("0", tree.root(), 2, 1, 1);
        checkNode("0/0", tree.root()->nextNodes().at(2), 1, 0, 2);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(add_long) {
        TestTree tree;
        addFirstPath(tree);
        TestTreeNode::PathItems route{0, 1, 2, 3};
        tree.addPath(route.begin(), route.end(), "11");
        addFirstPath(tree);
        checkNode("0", tree.root(), 3, 1, 2);
        checkNode("0/0", tree.root()->nextNodes().at(3), 1, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(add_longer) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{0, 1, 2, 3};
            tree.addPath(route.begin(), route.end(), "11");
        } {
            TestTreeNode::PathItems route{0, 1, 2, 3, 4};
            tree.addPath(route.begin(), route.end(), "11");
        }
        addFirstPath(tree);
        checkNode("0", tree.root(), 3, 1, 2);
        checkNode("0/0", tree.root()->nextNodes().at(3), 1, 1, 1);
        checkNode("0/0/0", tree.root()->nextNodes().at(3)->nextNodes().at(4), 1, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(add_two_longs) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{0, 1, 2, 3};
            tree.addPath(route.begin(), route.end(), "11");
        } {
            TestTreeNode::PathItems route{0, 1, 2, 13};
            tree.addPath(route.begin(), route.end(), "11");
        }
        addFirstPath(tree);
        checkNode("0", tree.root(), 3, 2, 2);
        checkNode("0/0", tree.root()->nextNodes().at(3), 1, 0, 1);
        checkNode("0/1", tree.root()->nextNodes().at(13), 1, 0, 1);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(search) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{0};
            tree.addPath(route.begin(), route.end(), "22");
        }
        {
            TestTreeNode::PathItems route{0, 1};
            tree.addPath(route.begin(), route.end(), "33");
        }
        {
            TestTreeNode::PathItems route{0, 11};
            tree.addPath(route.begin(), route.end(), "44");
        }
        addFirstPath(tree);
        std::vector<std::string> ids;
        TestTreeNode::PathItems track{0, 1, 2};
        tree.forSimilarPaths<PathIterator>(
            track.begin(),
            track.end(),
            [&](const std::string& id, PathIterator){
                ids.push_back(id);
            });
        UNIT_ASSERT_VALUES_EQUAL(ids.size(), 4);
        UNIT_ASSERT_VALUES_EQUAL(ids[0], "22");
        UNIT_ASSERT_VALUES_EQUAL(ids[1], "33");
        UNIT_ASSERT_VALUES_EQUAL(ids[2], "00");
        UNIT_ASSERT_VALUES_EQUAL(ids[3], "00");
        checkTree(tree.root());
    }

    Y_UNIT_TEST(skip) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{0};
            tree.addPath(route.begin(), route.end(), "22");
        }
        {
            TestTreeNode::PathItems route{0, 1};
            tree.addPath(route.begin(), route.end(), "33");
        }
        {
            TestTreeNode::PathItems route{0, 11};
            tree.addPath(route.begin(), route.end(), "44");
        }
        addFirstPath(tree);
        std::vector<std::string> ids;
        TestTreeNode::PathItems track{0, 2};
        tree.forSimilarPaths<PathIterator>(
            track.begin(),
            track.end(),
            [&](const std::string& id, PathIterator){
                ids.push_back(id);
            });
        UNIT_ASSERT_VALUES_EQUAL(ids.size(), 3);
        UNIT_ASSERT_VALUES_EQUAL(ids[0], "22");
        UNIT_ASSERT_VALUES_EQUAL(ids[1], "00");
        UNIT_ASSERT_VALUES_EQUAL(ids[2], "00");
        checkTree(tree.root());
    }

    Y_UNIT_TEST(max_skip) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{0, 1, 2, 3, 4, 5};
            tree.addPath(route.begin(), route.end(), "11");
        }
        addFirstPath(tree);
        std::vector<std::string> ids;
        TestTreeNode::PathItems track{0, 5};
        tree.forSimilarPaths<PathIterator>(
            track.begin(),
            track.end(),
            [&](const std::string& id, PathIterator){
                ids.push_back(id);
            },
            3);
        UNIT_ASSERT_VALUES_EQUAL(ids.size(), 0);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(build_path_item_index) {
        TestTree tree;
        {
            TestTreeNode::PathItems route{0, 1, 2, 1, 2, 3};
            tree.addPath(route.begin(), route.end(), "00");
        }
        {
            TestTreeNode::PathItems route{0, 1, 2, 1, 3};
            tree.addPath(route.begin(), route.end(), "11");
        }
        TestTree::PathItemIndex index = tree.buildPathItemIndex();
        UNIT_ASSERT_VALUES_EQUAL(index[0].size(), 1);
        UNIT_ASSERT_VALUES_EQUAL(index[0][0].treeNode.get(), tree.root().get());
        UNIT_ASSERT_VALUES_EQUAL(index[1].size(), 1);
        UNIT_ASSERT_VALUES_EQUAL(index[1][0].treeNode.get(), tree.root().get());
        UNIT_ASSERT_VALUES_EQUAL(index[2].size(), 1);
        UNIT_ASSERT_VALUES_EQUAL(index[2][0].treeNode.get(), tree.root().get());
        UNIT_ASSERT_VALUES_EQUAL(index[3].size(), 2);
        int i = 0;
        for (const auto& node : tree.root()->nextNodes()){
            UNIT_ASSERT_VALUES_EQUAL(index[3][i].treeNode.get(),
                node.second.get());
            ++i;
        }
        checkTree(tree.root());
    }

    Y_UNIT_TEST(intersections) {
        TestTree first;
        {
            TestTreeNode::PathItems route{-1, 1, 2, 1, 2, 3};
            first.addPath(route.begin(), route.end(), "0");
        }
        {
            TestTreeNode::PathItems route{-1, 1, 2, 1, 3};
            first.addPath(route.begin(), route.end(), "1");
        }
        {
            TestTreeNode::PathItems route{-2, 1, 2, 1, 3};
            first.addPath(route.begin(), route.end(), "2");
        }
        {
            TestTreeNode::PathItems route{-3, -4, 2, 1 , 3};
            first.addPath(route.begin(), route.end(), "3");
        }
        {
            TestTreeNode::PathItems route{-5, 3, 2, 1};
            first.addPath(route.begin(), route.end(), "4");
        }
        {
            TestTreeNode::PathItems route{-6, 1, 2, 3};
            first.addPath(route.begin(), route.end(), "5");
        }
        checkTree(first.root());
        TestTree second;
        {
            TestTreeNode::PathItems route{-1, 1, 2, 1, 2, 3};
            second.addPath(route.begin(), route.end(), "00");
        }
        {
            TestTreeNode::PathItems route{-1, 1, 2, 1, 3};
            second.addPath(route.begin(), route.end(), "01");
        }
        {
            TestTreeNode::PathItems route{-2, 1, 2, 1, 3};
            second.addPath(route.begin(), route.end(), "11");
        }
        checkTree(second.root());
        auto result = first.findAllIntersectionsWith(second);

        std::vector<TestTreeIntersection> expected {
            TestTreeIntersection{
                // -1   -1
                makeTreeNodeLink(first.root()->nextNodes().at(-1), 0),
                makeTreeNodeLink(second.root()->nextNodes().at(-1), 0)
            }, {
                // -2   -2
                makeTreeNodeLink(first.root()->nextNodes().at(-2), 0),
                makeTreeNodeLink(second.root()->nextNodes().at(-2), 0)
            }, {
                //  -1 1    -2 1
                makeTreeNodeLink(first.root()->nextNodes().at(-1), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-2), 1)
            }, {
                //  -2 1    -1 1
                makeTreeNodeLink(first.root()->nextNodes().at(-2), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-1), 1)
            }, {
                //  -3 -4 2    -1 1 2
                makeTreeNodeLink(first.root()->nextNodes().at(-3), 2),
                makeTreeNodeLink(second.root()->nextNodes().at(-1), 2)
            }, {
                //  -3 -4 2    -2 1 2
                makeTreeNodeLink(first.root()->nextNodes().at(-3), 2),
                makeTreeNodeLink(second.root()->nextNodes().at(-2), 2)
            }, {
                //  -5, 3   -1 1 2 1 2 3
                makeTreeNodeLink(first.root()->nextNodes().at(-5), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-1)->nextNodes().at(2), 1)
            }, {
                //  -5, 3   -1 1 2 1 3
                makeTreeNodeLink(first.root()->nextNodes().at(-5), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-1)->nextNodes().at(3), 0)
            }, {
                //  -5, 3  -2 1 2 1 3
                makeTreeNodeLink(first.root()->nextNodes().at(-5), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-2), 4)
            }, {
                //  -6, 1  -1 1
                makeTreeNodeLink(first.root()->nextNodes().at(-6), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-1), 1)
            }, {
                //  -6, 1  -2 1
                makeTreeNodeLink(first.root()->nextNodes().at(-6), 1),
                makeTreeNodeLink(second.root()->nextNodes().at(-2), 1)
            }
        };

        if (result.size() !=  expected.size()) {
            for (const auto& i : result) {
                std::cerr << " pair "
                    << getPath({i.first.treeNode, i.first.pathItem +1}) <<  " and "
                    << getPath({i.second.treeNode, i.second.pathItem +1}) << std::endl;
            }
        }
        UNIT_ASSERT_VALUES_EQUAL(result.size(), expected.size());

        for (const auto& i : result) {
            bool found = false;
            for (const auto& j : expected) {
                if (i == j) {
                    found = true;
                }
            }
            UNIT_ASSERT_C(
                found,
                "unexpected interseption " <<
                    getPath({i.first.treeNode, i.first.pathItem +1}) <<  " and " <<
                    getPath({i.second.treeNode, i.second.pathItem +1}));
        }
    }

    Y_UNIT_TEST(clear) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{0, 1, 2, 3};
            tree.addPath(route.begin(), route.end(), "11");
        } {
            TestTreeNode::PathItems route{0, 1, 2, 3, 4};
            tree.addPath(route.begin(), route.end(), "11");
        }
        addFirstPath(tree);
        checkNode("0", tree.root(), 3, 1, 2);
        checkNode("0/0", tree.root()->nextNodes().at(3), 1, 1, 1);
        checkNode("0/0/0", tree.root()->nextNodes().at(3)->nextNodes().at(4), 1, 0, 1);
        checkTree(tree.root());
        tree.clear();
        checkNode("0", tree.root(), 0, 0, 0);
        checkTree(tree.root());
    }

    Y_UNIT_TEST(find_prefix) {
        TestTree tree;
        addFirstPath(tree);
        {
            TestTreeNode::PathItems route{1, 2, 3};
            tree.addPath(route.begin(), route.end(), "11");
        } {
            TestTreeNode::PathItems route{0, 1, 3, 4, 5};
            tree.addPath(route.begin(), route.end(), "11");
        } {
            TestTreeNode::PathItems route{0, 1, 3};
            auto pos = tree.findPrefix(route.begin(), route.end());
            UNIT_ASSERT(pos);
            UNIT_ASSERT_VALUES_EQUAL(*pos->pathItem, 3);
            UNIT_ASSERT_VALUES_EQUAL(pos->treeNode.get(),
                tree.root()->nextNodes().at(0)->nextNodes().at(3).get());
        } {
            TestTreeNode::PathItems route{3, 1, 3};
            auto pos = tree.findPrefix(route.begin(), route.end());
            UNIT_ASSERT(!pos);
        }  {
            TestTreeNode::PathItems route{0, 1, 3, 5};
            auto pos = tree.findPrefix(route.begin(), route.end());
            UNIT_ASSERT(!pos);
        } {
            TestTreeNode::PathItems route{0, 1, 3, 4, 5, 6};
            auto pos = tree.findPrefix(route.begin(), route.end());
            UNIT_ASSERT(!pos);
        }
    }

    template<class Topology>
    Topology getTopologyFromRoot(
            const PrefixTree<std::string, uint64_t>::PrefixTreeNodeLink& pos,
            uint64_t first_edge_id) {
        Topology topology;
        auto parent = pos.treeNode->parent();
        while (parent) {
            for(auto i = parent->toNextNode().rbegin();
                    i != parent->toNextNode().rend(); ++i) {
                topology.push_back(*i);
            }
            parent = parent->parent();
        };
        topology.push_back(first_edge_id);
        std::reverse(topology.begin(), topology.end());
        for(auto i = pos.treeNode->toNextNode().begin();
                i != (pos.pathItem + 1); ++i) {
            topology.push_back(*i);
        }
        return topology;
    }

    Y_UNIT_TEST(long_test) {
        PrefixTree<std::string, uint64_t> routes;
        {
            PrefixTree<std::string, uint64_t>::PrefixTreeNode::PathItems route{
//1749095130298323587ULL,
/*804707446384598112ULL,
16505814952742644706ULL,
6431066164565226834ULL,
12369145006145972260ULL,
2452282310287810124ULL,
10484639375442947651ULL,
12611708459265200340ULL,
5167291044207083591ULL,
15580769952564604901ULL,
8215745536143645646ULL,
8215745536143645646ULL,
13396863897367343409ULL,
14875670180694173360ULL,
13414161976013315729ULL,
8039559048440291800ULL,
15841213643338901902ULL,
15841213643338901902ULL,
17072822551473556800ULL,
17072822551473556800ULL,
17072822551473556800ULL,*/
10863310905632598555ULL,
10239754711412582857ULL,
12675197504016011475ULL,
12675197504016011475ULL,
907378047816741498ULL,
15780713537706135546ULL,
12604687597739015081ULL,
7486436140557395790ULL,
10121377411912921661ULL,
16236018293247964060ULL,
17023406226937760789ULL,
3994000344122355531ULL,
6747324050885329402ULL,
9860586786150743066ULL,
14176253984940784734ULL,
13899714257307685744ULL,
13899714257307685744ULL,
15022058601468862438ULL,
17229734027439347709ULL,
3262252779511284355ULL,
10471502961553625234ULL,
14197302121412786401ULL,
6009183870206470573ULL,
8158670085343112707ULL,
10654625906423568055ULL,
1946311530794127501ULL,
7660970080342604792ULL,
4351754896398490998ULL,
3702030162491353718ULL,
7169887905157818109ULL,
7169887905157818109ULL,
1670265830288053037ULL,
4266174503624486192ULL,
4266174503624486192ULL,
4266174503624486192ULL,
16048833003376323033ULL,
16048833003376323033ULL,
16048833003376323033ULL,
8932258487441046903ULL,
8932258487441046903ULL,
8932258487441046903ULL,
8932258487441046903ULL,
8932258487441046903ULL,
8932258487441046903ULL,
8932258487441046903ULL,
8932258487441046903ULL,
4043433887730743071ULL,
14554419330346381598ULL,
13307706434097348576ULL,
334954739546999202ULL,
334954739546999202ULL,
6781225192786154063ULL,
9236975187076315281ULL,
15865814282344543405ULL,
10113401708227735000ULL,
12010209645833087216ULL,
15040334787995656313ULL,
16184283036447066495ULL,
8329975149648322118ULL,
13177730869733818088ULL,
5194941161645219238ULL,
3610165821783932563ULL,
7667619050688457934ULL,
1137005548513880012ULL,
17016098361069647823ULL,
8743098099748555927ULL,
4111142575199698700ULL,
12938716946385020789ULL,
8881908683917221689ULL,
16342844911470280719ULL,
12904977696015054981ULL,
2990214579978706086ULL,
224452298597116982ULL,
17733647005091949604ULL,
9059710563750884931ULL,
10500324688414062384ULL,
8346576599460462616ULL,
8346576599460462616ULL,
2339769670340821784ULL,
6028454019644769784ULL,
6028454019644769784ULL,
7175398714022624496ULL,
17550457264261482802ULL,
16400087452610026126ULL,
16016291225100197392ULL,
10918516794996018318ULL,
13827752313289860839ULL,
14745469075819789735ULL,
3362655019110568666ULL,
3362655019110568666ULL,
7267018638284846551ULL,
15109805556324520570ULL,
9179344917382789246ULL,
16361249587724933388ULL,
12613475960761757388ULL,
4664321843107573794ULL,
12118972624695229153ULL,
10637574252650200777ULL,
16752491525929115459ULL,
16752491525929115459ULL,
10703079627526084956ULL,
16438489480261467608ULL,
16348949478986889749ULL,
2397170799611535499ULL,
6136172922571709762ULL,
8745830767094480756ULL,
5541451191342228708ULL,
13624849412651815685ULL,
5381931431628005247ULL,
15749495704059153444ULL,
3581064122542067277ULL,
5988443038237006916ULL,
7303700343770737287ULL,
11857109745000662620ULL,
11857109745000662620ULL,
11857109745000662620ULL,
13625798732084318097ULL,
13625798732084318097ULL,
13625798732084318097ULL,
13625798732084318097ULL,
13625798732084318097ULL,
13625798732084318097ULL,
607236448494054067ULL,
13800886034337443446ULL,
171717903544151256ULL,
9533495693742528175ULL,
10577483339205588746ULL,
9260616156004913681ULL,
1708365676085483445ULL,
4153741063513870555ULL,
4153741063513870555ULL,
4153741063513870555ULL,
2528555955010425711ULL,
2528555955010425711ULL,
2528555955010425711ULL,
2528555955010425711ULL,
3998495872172820189ULL,
3998495872172820189ULL,
3998495872172820189ULL,
3998495872172820189ULL,
13420865809736233419ULL,
16523480782511536730ULL,
16523480782511536730ULL,
2027812587667794201ULL,
14740156567619194360ULL,
5010049636141121469ULL,
8690268604137284585ULL,
8690268604137284585ULL,
17263954928470192079ULL,
17263954928470192079ULL,
17263954928470192079ULL,
10169204025821435290ULL,
2711809713300033351ULL,
2711809713300033351ULL,
2711809713300033351ULL,
2711809713300033351ULL,
18384029280333011101ULL,
7066399645099592476ULL,
14003920371656187437ULL,
14003920371656187437ULL,
14003920371656187437ULL,
14003920371656187437ULL,
14003920371656187437ULL,
14003920371656187437ULL,
14674916680019513676ULL,
10978229253002046099ULL,
12636622707627120478ULL,
17631216815049756831ULL,
17631216815049756831ULL,
3541519254437894187ULL,
8104124021172364702ULL,
17485154509610497024ULL,
18073685988094673708ULL,
6619731971668489458ULL,
6619731971668489458ULL,
6619731971668489458ULL,
6619731971668489458ULL,
8425799682396736681ULL,
8425799682396736681ULL,
8425799682396736681ULL,
5932266073552207924ULL,
5932266073552207924ULL,
5932266073552207924ULL,
8362986781426296293ULL,
5727445311363100484ULL,
15671141918173971303ULL,
6594455627328397930ULL,
4041543895021695226ULL,
15483757250585438303ULL,
16631524002894821176ULL,
9431072312133288130ULL,
3792323001721906851ULL,
15278998734824232600ULL,
16204056094603822929ULL,
11814063515056859585ULL,
9323446872151852484ULL,
272982247627347531ULL
};
            routes.addPath(route.begin(), route.end(), "M1");
        }
        PrefixTree<std::string, uint64_t> tracks;
        {
            PrefixTree<std::string, uint64_t>::PrefixTreeNode::PathItems track{

//1749095130298323587ULL,
/*804707446384598112ULL,
16505814952742644706ULL,
6431066164565226834ULL,
12369145006145972260ULL,
2452282310287810124ULL,
10484639375442947651ULL,
12611708459265200340ULL,
5167291044207083591ULL,
15580769952564604901ULL,
8215745536143645646ULL,
8215745536143645646ULL,
13396863897367343409ULL,
14875670180694173360ULL,
13414161976013315729ULL,
8039559048440291800ULL,
15841213643338901902ULL,
15841213643338901902ULL,
17072822551473556800ULL,
17072822551473556800ULL,
17072822551473556800ULL,*/
16814313130469949838ULL,
18015686881401291261ULL,
18015686881401291261ULL,
1863072760802389607ULL,
1348765098677840500ULL,
11826435010232354893ULL,
950814067834956291ULL,
6694616692658291232ULL,
5982130887846601989ULL,
14811584396553651333ULL,
11274089861443505071ULL,
13737721443562350430ULL,
10876682185901634925ULL,
66522202897935744ULL,
7072500733473711296ULL,
6760912153673703584ULL,
11586819158038380794ULL,
13662056524370588124ULL,
13662056524370588124ULL,
13662056524370588124ULL,
13662056524370588124ULL,
13662056524370588124ULL,
13662056524370588124ULL,
5015432449094943139ULL,
16636187165450879576ULL,
16636187165450879576ULL,
12799325429854616734ULL,
8772075330313052697ULL,
16148308830144064675ULL,
16148308830144064675ULL,
17993147809182488936ULL,
7446465041552824860ULL,
2280681385433335973ULL,
15789673115206202836ULL,
228998571637655971ULL,
14481433638797292801ULL,
12059650102207116361ULL,
11560861856728894641ULL,
11560861856728894641ULL,
11560861856728894641ULL,
4984201756766289331ULL,
4618246414315553526ULL,
250162216398384204ULL,
10969971625412802308ULL,
17330474302852683188ULL,
16269563305507169128ULL,
15751783046870937545ULL,
15712430852092428397ULL,
6319777486569039066ULL,
11391706888631994905ULL,
13125041636226232885ULL,
17086521044694224923ULL,
17086521044694224923ULL,
17086521044694224923ULL,
17086521044694224923ULL,
17086521044694224923ULL,
5671230537681797054ULL,
750545300954979780ULL,
79744893319437095ULL,
13824058426901031552ULL,
7265321035856631375ULL,
15098492410998438839ULL,
9209099635115860048ULL,
8133015163210864079ULL,
17866728318718609825ULL,
10127080871014065015ULL,
102811189754511179ULL,
102811189754511179ULL,
11378773524963429534ULL,
10176671508163058132ULL,
5098909522005769195ULL,
5098909522005769195ULL,
5098909522005769195ULL,
17194617734654168398ULL,
7887884285669302149ULL,
4319024787914287453ULL,
3795158714782436048ULL,
3795158714782436048ULL,
2533044511317471273ULL,
17864066536202469722ULL,
17864066536202469722ULL,
17201990100540121536ULL,
2886806364996746575ULL,
10191172388260128293ULL,
9340850493780862327ULL,
7715018100819728576ULL,
3862827412396732830ULL,
6730603684319739935ULL,
6348551134369509511ULL,
16528983679462438485ULL,
16774761049674291786ULL,
17933226403595557077ULL,
2242125457861511623ULL,
2242125457861511623ULL,
14780024142680202934ULL,
14780024142680202934ULL,
14835656624539209071ULL,
14115920098362629917ULL,
14115920098362629917ULL,
46101850844109322ULL,
46101850844109322ULL,
46101850844109322ULL,
16422657865529058765ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
1649589686738882398ULL,
3887596671651988845ULL,
17614382592477248798ULL,
1788216451098942300ULL,
1788216451098942300ULL,
3754328244236711898ULL,
3754328244236711898ULL,
15764087142416680924ULL,
15764087142416680924ULL,
15764087142416680924ULL,
15764087142416680924ULL,
18033780942045329010ULL,
10232330112593386112ULL,
582335200095469213ULL,
582335200095469213ULL,
582335200095469213ULL,
5701519691695151534ULL,
5701519691695151534ULL,
5701519691695151534ULL,
5701519691695151534ULL,
12351799178791419057ULL,
9683499383127576288ULL,
9683499383127576288ULL,
9683499383127576288ULL,
9683499383127576288ULL,
9683499383127576288ULL,
6740943367561972386ULL,
6740943367561972386ULL,
18304978156520376415ULL,
18304978156520376415ULL,
18304978156520376415ULL,
7779425226922504357ULL,
7779425226922504357ULL,
7779425226922504357ULL,
4809425765768131333ULL,
3453185145664969863ULL,
3453185145664969863ULL,
3069934599600659993ULL,
4084042392728569466ULL,
14146005962527680564ULL,
13402540116408735119ULL,
3754099965566365493ULL,
14757674877766047660ULL,
17434154596995910926ULL,
839518444993682469ULL,
2519387258015638797ULL,
11364862925939444249ULL,
4269595851291531098ULL,
10524400709965117645ULL,
6122763755554642463ULL,
6122763755554642463ULL,
916248153461032877ULL,
14929392865560677092ULL,
14929392865560677092ULL,
14929392865560677092ULL,
14929392865560677092ULL,
11525740106029466166ULL,
11525740106029466166ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
14003752971101041550ULL,
8368476341868226852ULL,
8368476341868226852ULL,
8368476341868226852ULL,
8368476341868226852ULL,
14842497401356988641ULL,
3152324314107824037ULL,
17023007662975371847ULL,
6133709502802123666ULL,
12830819804269882487ULL,
7917447135708860252ULL,
12518770651708035766ULL,
13924798474060062459ULL,
15168633709812466885ULL,
5752697608803672411ULL,
15455503329044461024ULL,
12626905829998749502ULL,
7433464910915442896ULL,
3330533787614412983ULL,
7957701862227643701ULL,
12519259159667631025ULL,
15689385123718777021ULL,
14342058704161650951ULL,
691575995118297281ULL,
3750889276674601496ULL,
8716569924749144025ULL,
8552187049673253002ULL,
8552187049673253002ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
5821173088160455703ULL,
789656521252565432ULL,
1385049585766948991ULL,
7623899429178919733ULL,
7623899429178919733ULL,
3897696088877518629ULL,
1446313589562660823ULL,
1446313589562660823ULL,
13071886895203871335ULL,
13071886895203871335ULL,
13071886895203871335ULL,
13071886895203871335ULL,
13071886895203871335ULL,
5857417206651935470ULL,
5857417206651935470ULL,
8958801902740714600ULL,
8958801902740714600ULL,
8958801902740714600ULL,
8958801902740714600ULL,
8958801902740714600ULL,
8958801902740714600ULL,
8958801902740714600ULL,
8958801902740714600ULL,
5701519691695151534ULL,
5701519691695151534ULL,
5701519691695151534ULL,
5701519691695151534ULL,
12351799178791419057ULL,
9683499383127576288ULL,
9683499383127576288ULL,
9683499383127576288ULL,
9683499383127576288ULL,
9683499383127576288ULL,
6740943367561972386ULL,
6740943367561972386ULL,
18304978156520376415ULL,
18304978156520376415ULL,
18304978156520376415ULL,
7779425226922504357ULL,
7779425226922504357ULL,
7779425226922504357ULL,
4809425765768131333ULL,
3453185145664969863ULL,
3453185145664969863ULL,
3069934599600659993ULL,
4084042392728569466ULL,
14146005962527680564ULL,
13402540116408735119ULL,
3754099965566365493ULL,
14757674877766047660ULL,
17434154596995910926ULL,
839518444993682469ULL,
2519387258015638797ULL,
11364862925939444249ULL,
4269595851291531098ULL,
10524400709965117645ULL,
6122763755554642463ULL,
6122763755554642463ULL,
916248153461032877ULL,
14929392865560677092ULL,
14929392865560677092ULL,
14929392865560677092ULL,
14929392865560677092ULL,
11525740106029466166ULL,
11525740106029466166ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
5584265193850809755ULL,
14003752971101041550ULL,
8090640320158595637ULL,
13620862449393459677ULL,
10090439920547320251ULL,
14515034943246505005ULL,
12377181175054091194ULL,
13412344999464943403ULL,
6906691780200698591ULL,
7840157466606549316ULL,
11266848309559962020ULL,
8110057612032182472ULL,
7824700189508088528ULL,
15075213508615111968ULL,
11557788708000482889ULL,
16605606745910431972ULL,
4902322096012645218ULL,
1677000882316019421ULL,
17825883722974699637ULL,
9248440642971180757ULL,
3292501164823093510ULL,
11203470904018382308ULL,
5743600285361360835ULL,
5009666627860103111ULL,
16840784017978015394ULL,
9546803174919231501ULL,
2331032288503716056ULL,
739180579554632136ULL,
3802375737855905483ULL,
10274404312108362152ULL,
15764035244369594512ULL,
8832931912607191092ULL,
8832931912607191092ULL,
9694747138599300073ULL,
18248546815560728364ULL,
13739317568085168117ULL,
13739317568085168117ULL,
2560442801575998669ULL,
9618664023135922481ULL,
7925516597713458457ULL,
16597960636572113808ULL,
2027812587667794201ULL,
14740156567619194360ULL,
5010049636141121469ULL,
3996942816781344990ULL,
3996942816781344990ULL,
10630570040260892932ULL,
8790423608380072753ULL,
6940138969303113597ULL,
6169911744396074477ULL,
11133516839338249033ULL,
7806196772992845360ULL,
2695951277002040543ULL,
6959563634863434944ULL,
18291488669478922003ULL,
6639222361467202747ULL,
6639222361467202747ULL,
11006865578825140922ULL,
11006865578825140922ULL,
3870889108113443534ULL,
3870889108113443534ULL,
3870889108113443534ULL,
2256795768221668970ULL,
4785747647761686613ULL,
15368145073791855937ULL,
17623465035220641624ULL,
14887978757727752544ULL,
14887978757727752544ULL,
15211317705499306963ULL,
10620353413567595509ULL,
13514953427087383341ULL,
10520868294635364189ULL,
221553841466042113ULL,
221553841466042113ULL,
221553841466042113ULL,
11476710320086429886ULL,
11476710320086429886ULL,
727069624238461371ULL,
727069624238461371ULL,
13268412900690605616ULL,
12800797335012519569ULL,
1482860963679307194ULL,
16854753284319072256ULL,
4980953755670177035ULL,
10897698863299143920ULL,
12415806664015131066ULL,
10242540011461737787ULL,
268690310528301648ULL,
12885391682597639374ULL,
11580594210305347599ULL,
15478457522077077768ULL,
13370186906363862780ULL,
17375827645935738549ULL,
3911069757743469193ULL,
13882102096660165730ULL,
16217520058810179171ULL,
12798618132372547207ULL,
8106764122614756106ULL,
2843917024630052737ULL,
11948766456585897895ULL,
6401459291619328476ULL,
2728041841513271607ULL,
16849258757170668054ULL,
9244096163907195656ULL,
5749069287712434001ULL,
5749069287712434001ULL,
3731712822390326154ULL,
17014906885692729810ULL,
15079938688913785467ULL,
15079938688913785467ULL,
14332411092360647022ULL,
8963787475822247782ULL,
6657404241530394732ULL,
6657404241530394732ULL,
6657404241530394732ULL,
6657404241530394732ULL,
6657404241530394732ULL,
15304673150834500579ULL,
15304673150834500579ULL,
6342942541171729725ULL,
11956469329431061391ULL,
8731668937431160523ULL,
7299699810740287038ULL,
5649355519236634146ULL,
5649355519236634146ULL,
5649355519236634146ULL,
3047464821160788196ULL,
3047464821160788196ULL,
3047464821160788196ULL,
3047464821160788196ULL,
5909042346697141363ULL,
5909042346697141363ULL,
8028733003065720701ULL,
8028733003065720701ULL,
8028733003065720701ULL,
8028733003065720701ULL,
8028733003065720701ULL,
8028733003065720701ULL,
8028733003065720701ULL,
3517427999550916759ULL,
1586813165785640419ULL,
4225636587847419894ULL,
6618298981853332239ULL,
2325668216595033313ULL,
11242954394023732390ULL,
17772455642157687237ULL,
483681792757978050ULL,
13087779552633273680ULL,
5208778713498491953ULL,
3092028751610266606ULL,
14024925756119818899ULL,
4442016376459896959ULL,
4442016376459896959ULL,
11864335786610297336ULL,
17606729067146272683ULL,
17606729067146272683ULL,
17606729067146272683ULL,
475823315306786411ULL,
6009869675457969439ULL,
17332415726694093734ULL,
15646294894958013730ULL,
15206344960753473764ULL,
1359902631911291829ULL,
6259329316908752841ULL,
6259329316908752841ULL,
6259329316908752841ULL,
8785875146750757734ULL,
8785875146750757734ULL,
8785875146750757734ULL,
8785875146750757734ULL,
8785875146750757734ULL,
6346980049082409608ULL,
12800827042642420103ULL,
15552634174341410216ULL,
14650940394794508283ULL,
14466644295370636355ULL,
12720766195696570567ULL,
16650882980436129320ULL,
3395069603819204627ULL,
3395069603819204627ULL,
16369050866920029159ULL,
4631321929917614552ULL,
15178212423869803006ULL,
12175748975048371300ULL,
5356520503679802075ULL,
5356520503679802075ULL,
5356520503679802075ULL,
2658822899851992463ULL,
2658822899851992463ULL,
2658822899851992463ULL,
5500598922601883723ULL,
5674605040960745352ULL,
7587121712513024957ULL,
3303110425668588302ULL,
1768617675178869526ULL,
1768617675178869526ULL,
1768617675178869526ULL,
1768617675178869526ULL,
14091556842329323022ULL,
14091556842329323022ULL,
14091556842329323022ULL,
18255989193645477656ULL,
18255989193645477656ULL,
12694339104926961202ULL,
12053384570146643209ULL,
17921951467559242136ULL,
7612048921100384ULL,
7612048921100384ULL,
7612048921100384ULL,
7612048921100384ULL,
18032526222481722337ULL,
18032526222481722337ULL,
8342051077158913564ULL,
8342051077158913564ULL,
8342051077158913564ULL,
14974181667028639076ULL,
11356433883382623168ULL,
11356433883382623168ULL,
11356433883382623168ULL,
11356433883382623168ULL,
11356433883382623168ULL,
11356433883382623168ULL,
17954340004692836773ULL,
17954340004692836773ULL,
17954340004692836773ULL,
17954340004692836773ULL,
17954340004692836773ULL,
5701519691695151534ULL,
5701519691695151534ULL,
5701519691695151534ULL,
12351799178791419057ULL,
10625588267566329175ULL,
17524577499925159295ULL,
14501156426662349924ULL,
14501156426662349924ULL,
14501156426662349924ULL,
14501156426662349924ULL,
2757282383831957517ULL,
2757282383831957517ULL,
5196204990792540441ULL,
2448820681051193115ULL,
6265678438900379988ULL,
10196307639560783852ULL,
5905530385418543153ULL,
4408047337166681678ULL,
4705799311082125276ULL,
11369954888745898246ULL,
7612048921100384ULL,
7612048921100384ULL,
7612048921100384ULL,
7612048921100384ULL,
18032526222481722337ULL,
18032526222481722337ULL,
8342051077158913564ULL,
8342051077158913564ULL,
8342051077158913564ULL,
14974181667028639076ULL,
4498752042556972171ULL,
2138360691868786667ULL,
14710286278839317728ULL,
1940309707284341249ULL,
4625661011267534300ULL,
9966083300122858379ULL,
9966083300122858379ULL,
9966083300122858379ULL,
9966083300122858379ULL,
914062077157829688ULL,
914062077157829688ULL,
914062077157829688ULL,
914062077157829688ULL,
914062077157829688ULL,
914062077157829688ULL,
914062077157829688ULL,
148599698497085386ULL,
5314051581110692050ULL,
5314051581110692050ULL,
3524191374544054992ULL,
3524191374544054992ULL,
3524191374544054992ULL,
3524191374544054992ULL,
2695723295113292431ULL,
16121011254159945896ULL,
16121011254159945896ULL,
9763015201200476386ULL,
13816270836800348566ULL,
12864323803386022054ULL,
6544464405638021028ULL,
1817410357491817127ULL,
3869418479220812034ULL,
9248590792195925114ULL,
1118312721286384174ULL,
6791218412299551922ULL,
16584985116872757494ULL,
8839318977331795723ULL,
6377931836611808158ULL,
10883960414571144416ULL,
5033380624299010823ULL,
5478297120959375210ULL,
5746752699291094188ULL,
9184097306815290550ULL,
3335352610644773161ULL,
17005292674871610090ULL,
12100519684395246524ULL,
14494738304567795873ULL,
9689989533952079721ULL,
5640546086723638503ULL,
1600324082526714986ULL,
1031430141060918983ULL,
10923174307855688677ULL,
5996840816726307781ULL,
7457205799873575922ULL,
13958147012564287672ULL,
16587423396663900863ULL,
7930323158144399390ULL,
1892426441562571436ULL,
11261547038896126094ULL,
11261547038896126094ULL,
11261547038896126094ULL,
11261547038896126094ULL,
11261547038896126094ULL,
18159389800303004645ULL,
6479983297053644299ULL,
7145383509247961514ULL,
7145383509247961514ULL,
7145383509247961514ULL,
7145383509247961514ULL,
7145383509247961514ULL,
6340276578753490013ULL,
8600593336232736756ULL,
8600593336232736756ULL,
8600593336232736756ULL,
8600593336232736756ULL,
8600593336232736756ULL,
8600593336232736756ULL,
8600593336232736756ULL,
18109783665679328960ULL,
8567450439946481436ULL,
8567450439946481436ULL,
8567450439946481436ULL,
8567450439946481436ULL,
18366527140509840037ULL,
2443776587586377224ULL,
15890277356768910897ULL,
3132915714693733040ULL,
5014099971917717267ULL,
16265265944259469407ULL,
18052676823914379986ULL,
16473753684017822807ULL,
17366526749534327745ULL,
5465622118451347428ULL,
10978851804118851288ULL,
5850757979518512624ULL,
14688286852524074092ULL,
8717588934522132785ULL,
3752205719042006418ULL,
11685753442222435489ULL,
13864913409627710145ULL,
509483249966255148ULL,
8357862269430626204ULL,
2241196774652272430ULL,
15966119409431080421ULL,
15966119409431080421ULL,
15966119409431080421ULL,
15966119409431080421ULL,
15966119409431080421ULL,
15966119409431080421ULL,
3010119584392383766ULL,
3010119584392383766ULL,
3010119584392383766ULL,
3010119584392383766ULL,
3010119584392383766ULL,
4951487546866922968ULL,
17156118180980816482ULL,
13929440394825475294ULL,
4217419875851713015ULL,
2954086851655884257ULL,
5157746398969436681ULL,
6167531395201640005ULL,
6167531395201640005ULL,
9643470874786910063ULL,
5333329210760983444ULL,
5333329210760983444ULL,
10077681816398394408ULL,
10077681816398394408ULL,
10077681816398394408ULL,
9627293597695620342ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
6807976886184625301ULL,
2775434023688208194ULL,
4962905278079028941ULL,
4962905278079028941ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
14049389332344565377ULL,
18187028469773872931ULL,
5782494997047365321ULL,
5782494997047365321ULL,
5782494997047365321ULL,
5782494997047365321ULL,
5782494997047365321ULL,
5782494997047365321ULL,
5782494997047365321ULL,
10440599264124492747ULL,
4066228051110646655ULL,
11816377635317475700ULL,
6445549227647343577ULL,
453238155486463778ULL,
14209763543089835252ULL,
9340676383040971409ULL,
1980897763894746069ULL,
11488163583835724953ULL,
13541876045911276592ULL,
14150022211354050587ULL,
62294402914819211ULL,
5955862027139668111ULL,
15585789181437975430ULL,
15585789181437975430ULL,
15585789181437975430ULL,
14797601284742560373ULL,
14797601284742560373ULL,
14797601284742560373ULL,
14797601284742560373ULL,
8779876088645344776ULL,
8779876088645344776ULL,
8779876088645344776ULL,
14425669346905498156ULL,
14463626128699561451ULL,
14463626128699561451ULL,
14463626128699561451ULL,
14463626128699561451ULL,
14463626128699561451ULL,
13691097697905922923ULL,
13691097697905922923ULL,
13691097697905922923ULL,
13691097697905922923ULL,
3884639539662728434ULL,
3884639539662728434ULL,
11981336691352335295ULL,
11981336691352335295ULL,
11981336691352335295ULL,
11981336691352335295ULL,
11981336691352335295ULL,
11981336691352335295ULL,
17748421410100494956ULL,
6696069535045436548ULL,
17076631655870575279ULL,
17076631655870575279ULL,
655635607866267456ULL,
655635607866267456ULL,
15729474703191220660ULL,
15729474703191220660ULL,
13511168886377464866ULL,
13511168886377464866ULL,
13511168886377464866ULL,
13511168886377464866ULL,
15745506066732494688ULL,
2191046592262523111ULL,
3605761357327577481ULL,
15004992306047470611ULL,
8056930354436046870ULL,
10131184105910467746ULL,
2370020186771793144ULL,
4735877757442455482ULL,
14090770572392138607ULL,
5801594122201427798ULL,
10305478436171470569ULL,
2501543195952572362ULL,
10310965212320592061ULL,
4508674878051163996ULL,
13391203832253752305ULL,
9321423522372691615ULL,
800797166448611138ULL,
800797166448611138ULL,
1491863016634207172ULL,
1491863016634207172ULL,
1491863016634207172ULL,
1491863016634207172ULL,
9345485243166532232ULL,
12316794934406614478ULL,
454836698121689539ULL,
2908325683049018194ULL,
11508395954950902250ULL,
2015746577460514787ULL,
2822769037685512136ULL,
14471778537239764808ULL,
8207690394315285618ULL,
8207690394315285618ULL,
8207690394315285618ULL,
8207690394315285618ULL,
8207690394315285618ULL,
3940851269064232094ULL,
4427573349418310722ULL,
4281103586671605999ULL,
12864104694334466448ULL,
13932068012788067770ULL,
2769532804231539728ULL,
2628200955592062429ULL,
2628200955592062429ULL,
17004927203066279944ULL,
17004927203066279944ULL,
17004927203066279944ULL,
17004927203066279944ULL,
17004927203066279944ULL,
8327585259309548974ULL,
14277309095379279424ULL,
14277309095379279424ULL,
14277309095379279424ULL,
14277309095379279424ULL,
14277309095379279424ULL,
14283011721436271560ULL,
14283011721436271560ULL,
1999125828205386022ULL,
1999125828205386022ULL,
1999125828205386022ULL,
16406111005749087188ULL,
16406111005749087188ULL,
16406111005749087188ULL,
16406111005749087188ULL,
16406111005749087188ULL,
16406111005749087188ULL,
15375027862276496010ULL,
15843224559417034026ULL,
10010138986339694823ULL,
13896998574476324249ULL,
9668562445637624354ULL,
8451387080446769558ULL,
2655024984818130721ULL,
12818343297252693032ULL,
1300605939115631440ULL,
16904172576107659653ULL,
18435978838104642794ULL,
4774906853539135977ULL,
16793496401437167812ULL,
2150375262520124333ULL,
5838500301942197090ULL,
551163868207303634ULL,
11952786855701988560ULL,
1839240339178181953ULL,
18403184146184427287ULL,
7505925431397218284ULL,
5545754848131680059ULL,
8982142620590074289ULL,
2340488156376157388ULL,
159199625519524714ULL,
2270890561686111917ULL,
16150900047612401768ULL,
16150900047612401768ULL,
16150900047612401768ULL,
16150900047612401768ULL,
16150900047612401768ULL,
16150900047612401768ULL,
16150900047612401768ULL,
16150900047612401768ULL,
4662294533666425837ULL,
4662294533666425837ULL,
4662294533666425837ULL,
17622774454685797695ULL,
17622774454685797695ULL,
17622774454685797695ULL,
16164930528462039852ULL,
16164930528462039852ULL,
16164930528462039852ULL,
5526045360517697847ULL,
5526045360517697847ULL,
5526045360517697847ULL,
148963225846257568ULL,
148963225846257568ULL,
148963225846257568ULL,
148963225846257568ULL,
148963225846257568ULL,
148963225846257568ULL,
148963225846257568ULL,
17625195270705240696ULL,
17625195270705240696ULL,
17625195270705240696ULL,
17625195270705240696ULL,
17625195270705240696ULL,
9217457289281494465ULL,
15177267783535617541ULL,
7692227974427054401ULL,
5955929768783513530ULL,
11913577077487229166ULL,
11913577077487229166ULL,
11913577077487229166ULL,
11913577077487229166ULL,
11913577077487229166ULL,
11913577077487229166ULL,
18366710469352562182ULL,
3639860519298394154ULL,
17265739444710902900ULL,
532546822948560405ULL,
2973858892995394014ULL,
12387272626762487054ULL,
14433808302541170325ULL,
14308364269811309617ULL,
14308364269811309617ULL,
14308364269811309617ULL,
14308364269811309617ULL,
14308364269811309617ULL,
14308364269811309617ULL,
14308364269811309617ULL,
6849691685136464087ULL,
12836690973644589668ULL,
5023386790038406868ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
9896420440384435197ULL,
17081044537131491428ULL,
5109741370458308250ULL,
5109741370458308250ULL,
5109741370458308250ULL,
12315044194466300390ULL,
13740985097357284088ULL,
7473318461859755892ULL,
10809776091068142690ULL,
11871383128124537285ULL,
3163269225028794381ULL,
5414408742619161727ULL,
13899744060312121864ULL,
7421598580967300781ULL,
15146427877389035242ULL,
15146427877389035242ULL,
15146427877389035242ULL,
14969717130932072619ULL,
14551150534065635761ULL,
14551150534065635761ULL,
14551150534065635761ULL,
14551150534065635761ULL,
14551150534065635761ULL,
14551150534065635761ULL,
3362177779840994686ULL,
11217207453821351527ULL,
4113084407559744511ULL,
3007547861194856010ULL,
3007547861194856010ULL,
3007547861194856010ULL,
11024001625824285128ULL,
11024001625824285128ULL,
8325455246530425525ULL,
313038858264021092ULL,
17949424954740972164ULL,
14232811929703385227ULL,
12291350425013616140ULL,
6056386538573979910ULL,
7839408027061194492ULL,
18125211928322168434ULL,
8943587614849622020ULL,
13517995215950445778ULL,
17572312845231248940ULL,
16049117112063456667ULL,
16049117112063456667ULL,
16049117112063456667ULL,
16049117112063456667ULL,
18422203957908693883ULL,
18422203957908693883ULL,
5873732898454067482ULL,
5873732898454067482ULL,
1812020456058569917ULL,
3338663143690753216ULL,
16141969812893517232ULL,
11244335764195762956ULL,
8183748755670391341ULL,
9536588995710624568ULL,
18172628981182243842ULL,
14879920992177711998ULL,
13463011037088521957ULL,
15564455817163844967ULL,
5018905325098371181ULL,
15601695600530145957ULL,
595688441280921661ULL,
6510353199894377366ULL,
6905799860061287140ULL,
4612975731736155797ULL,
3496971591515219556ULL,
3496971591515219556ULL,
3496971591515219556ULL,
3496971591515219556ULL,
8444661481932127330ULL,
9429859617294688874ULL,
4485575992334883810ULL,
4485575992334883810ULL,
1903606109114212305ULL,
16189692868892900034ULL,
6857594484636307210ULL,
12513447293826957334ULL,
13666345713801430483ULL,
11160819706490684267ULL,
15550074751668443377ULL,
9098667278250064924ULL,
15363648476636563029ULL,
17752503392617525926ULL,
10033401260547662420ULL,
4434160649575944325ULL,
12663963899354469758ULL,
17898926536181166398ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
4706952033008776278ULL,
15421961908644901929ULL,
9771149033122488260ULL,
8905798486708116414ULL,
14219800574562422319ULL,
2163308735844630637ULL,
12544536639834010157ULL,
3815441478213544948ULL,
2920846220489694799ULL,
1407330355841707006ULL,
3449459950631609342ULL,
15115776746391294761ULL,
15115776746391294761ULL,
3384347983432277877ULL,
14474555471535465961ULL,
14474555471535465961ULL,
11873040219268462436ULL,
11873040219268462436ULL,
2289391385691626368ULL,
2289391385691626368ULL,
14687697207688091131ULL,
1169838109153215134ULL,
9825535151362340030ULL,
4729512253711539551ULL,
16503629716806910910ULL,
16503629716806910910ULL,
13828901171898155064ULL,
7593735097761644299ULL,
6584052159125329972ULL,
16128484433976245189ULL,
11676670670388172219ULL,
1070071840990194571ULL,
1827384139256534944ULL,
7783629499162014223ULL,
7408552232696683911ULL,
9254441259026220131ULL,
1240493756068806060ULL,
10366394315501604631ULL,
664685269453960388ULL,
11047281528397159130ULL,
8924066702638989157ULL,
2769650249690538178ULL,
5200026914696901945ULL,
11539802324746927877ULL,
14967021376869812362ULL,
14967021376869812362ULL,
15738334964003601706ULL,
9309551187532412115ULL,
15899311743885537891ULL,
15899311743885537891ULL,
8487827112765316621ULL,
8487827112765316621ULL,
8487827112765316621ULL,
11134376837783773656ULL,
11134376837783773656ULL,
7300456970100563953ULL,
7300456970100563953ULL,
7300456970100563953ULL,
7300456970100563953ULL,
9770624063120358686ULL,
9770624063120358686ULL,
9770624063120358686ULL,
9770624063120358686ULL,
14291448549878327356ULL,
14996978943483162171ULL,
14996978943483162171ULL,
14996978943483162171ULL,
14996978943483162171ULL,
14996978943483162171ULL,
14996978943483162171ULL,
16054863063688801022ULL,
8414680634720776650ULL,
7033896379110210508ULL,
9633815131763081391ULL,
14014438964166640868ULL,
12219455293792118612ULL,
12219455293792118612ULL,
12219455293792118612ULL,
12219455293792118612ULL,
5116769063593201630ULL,
5116769063593201630ULL,
15482661719087528552ULL,
15482661719087528552ULL,
17740053845314552759ULL,
17740053845314552759ULL,
17740053845314552759ULL,
17740053845314552759ULL,
2570580189633513490ULL,
2570580189633513490ULL,
2570580189633513490ULL,
111380301149317098ULL,
111380301149317098ULL,
8988178495016927060ULL,
13478421556834074524ULL,
13478421556834074524ULL,
12530303519911096163ULL,
3849042410327127984ULL,
3667321133036239626ULL,
7461117675346557895ULL,
9622161160534648164ULL,
1750160325228685503ULL,
14120691539738793202ULL,
8849092595575291791ULL,
2462644036080710611ULL,
4288147058853126860ULL,
10749142935243160941ULL,
9738449987110881910ULL,
11278148541255897982ULL,
15781620899041089676ULL,
15781620899041089676ULL,
15781620899041089676ULL,
8102133203513894630ULL,
9719255059512709419ULL,
13416209100098780281ULL,
1332263222892453553ULL,
14061215700055303050ULL,
16499795667984027507ULL,
14782189206970194143ULL,
900118197778642431ULL,
900118197778642431ULL,
5697508743105176023ULL,
5697508743105176023ULL,
5697508743105176023ULL,
5697508743105176023ULL,
5697508743105176023ULL,
5697508743105176023ULL,
5697508743105176023ULL,
5697508743105176023ULL,
1929596498615307166ULL,
7024945628750924015ULL,
11586753584791461221ULL,
3924912642070679944ULL,
3411105543977012135ULL,
14195414134239860251ULL,
15627667858502112448ULL,
1984000080111916457ULL,
13158500700636175544ULL,
13158500700636175544ULL,
13158500700636175544ULL,
311764971933707798ULL,
311764971933707798ULL,
311764971933707798ULL,
311764971933707798ULL,
311764971933707798ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
16437463611254703091ULL,
5799859559169159656ULL,
3448576039744824098ULL,
3448576039744824098ULL,
3448576039744824098ULL,
3448576039744824098ULL,
13643148813349146891ULL,
13643148813349146891ULL,
13643148813349146891ULL,
13643148813349146891ULL,
13643148813349146891ULL,
13643148813349146891ULL,
13643148813349146891ULL,
11186530667046948823ULL,
10968279453741841786ULL,
3104988245008698622ULL,
3104988245008698622ULL,
7326783346130286415ULL,
628502801793261612ULL,
18149767119217088438ULL,
2312823666888965526ULL,
10517044594242587962ULL,
14591898985589431525ULL,
14591898985589431525ULL,
2664594156769891776ULL,
2664594156769891776ULL,
12014275774871380011ULL,
5309135155527665223ULL,
4839878527876841938ULL,
4839878527876841938ULL,
4839878527876841938ULL,
13123239430910566542ULL,
8069680848441000637ULL,
9159981361440089486ULL,
3963204022527814114ULL,
17769413373440327164ULL,
9821771957347469502ULL,
9821771957347469502ULL,
9821771957347469502ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
15172186094574278921ULL,
164892139512258629ULL,
2563668861703483586ULL,
14524740706685092301ULL,
17693789819054702000ULL,
13703440241226593868ULL,
17392283426510427534ULL,
16454450932313628734ULL,
455236753446110997ULL,
16122073649077479662ULL,
16122073649077479662ULL,
3223102715636199679ULL,
12797033460011801942ULL,
10819898617695443395ULL,
9562968778563416206ULL,
9562968778563416206ULL,
742878475933477787ULL,
11204290789138718452ULL,
7113147763512201959ULL,
7113147763512201959ULL,
13914476768999796910ULL,
21574775407447843ULL,
18097166256461809083ULL,
4781345810647553783ULL,
15783915575905700498ULL,
13621518040442197370ULL,
1232336351632330500ULL,
16753419683622142553ULL,
17337639959434140289ULL,
409640110579231593ULL,
8305438832236478630ULL,
618207107739356557ULL,
8082474803527892887ULL,
5729708672103480082ULL,
18252212590227418493ULL,
909771613137368007ULL,
959678182680758027ULL,
959678182680758027ULL,
14570837659935350346ULL,
3084382284560201005ULL,
3084382284560201005ULL,
3084382284560201005ULL,
1822964432761337435ULL,
1822964432761337435ULL,
9660136942844651303ULL,
9660136942844651303ULL,
9660136942844651303ULL,
9498260766563594033ULL,
9498260766563594033ULL,
9498260766563594033ULL,
9498260766563594033ULL,
9498260766563594033ULL,
11446908318871987170ULL,
41805843437918701ULL,
4484083471159214304ULL,
15600978949269175296ULL,
5411189540542053236ULL,
2398319591465239011ULL,
4489327500524337626ULL,
1893575545454599165ULL,
12675023131811124860ULL,
11742296163542251212ULL,
8316987805293564568ULL,
16668821411463096579ULL,
6843348668448813926ULL,
849310524156115164ULL,
15331619371922189114ULL,
12145532154917480854ULL,
9740625382466480610ULL,
918822705147115593ULL,
1704445756605277129ULL,
8126835921082873729ULL,
10811630369635153478ULL,
4524180013935912504ULL,
17238961334335438349ULL,
7568816436994431243ULL,
15698385282432025209ULL,
13619966110417240367ULL,
9985799046946078489ULL,
2625388699009583142ULL,
2722618716577785538ULL,
9900106530484161473ULL,
3800282665864100734ULL,
12622609215449152509ULL,
3654534078871872806ULL,
6200938008542541320ULL,
12089372815448027305ULL,
13940551039548710438ULL,
9763067066671972676ULL,
6700788810862066577ULL,
17427370054530405258ULL,
16365709846509556800ULL,
14810083918695983166ULL,
13498586203465754758ULL,
7574415987469280707ULL,
7408470178732239767ULL,
12749647697417487900ULL,
17401337576569725234ULL,
14215012844591562105ULL,
7907747390667332893ULL,
6771284758536003928ULL,
17990637867567591853ULL,
438035100917461440ULL,
7109335764214044180ULL,
14961413954406429465ULL,
14961413954406429465ULL,
14961413954406429465ULL,
14961413954406429465ULL,
8568064468263415488ULL,
8568064468263415488ULL,
17980201475337888463ULL,
17980201475337888463ULL,
17980201475337888463ULL,
17980201475337888463ULL,
17980201475337888463ULL,
17980201475337888463ULL,
17980201475337888463ULL,
3125410378895954204ULL

};
            tracks.addPath(track.begin(), track.end(), "111");
        }
        for (const auto& interseption :
                tracks.findAllIntersectionsWith(routes)) {
            const auto& trackPos = interseption.first;
            Y_VERIFY(trackPos.treeNode);
            if (trackPos.treeNode->numberOfPathsPassingThrough() < 1) {
                Cerr << "less 1" << Endl;
                continue;
            }
            const auto& routePos = interseption.second;
            Y_VERIFY(routePos.treeNode);

            std::vector<uint64_t> ur = getTopologyFromRoot<std::vector<uint64_t>>(
                routePos,
                17072822551473556800ULL
            );
            Cerr << "ur size" << ur.size() << Endl;
            Cerr <<  ur.back() << Endl;


            std::vector<uint64_t> t = getTopologyFromRoot<std::vector<uint64_t>>(
                trackPos,
                17072822551473556800ULL
            );
            Cerr << "t size" << t.size() << Endl;

            PrefixTree<std::string, uint64_t>::forAllSubPaths(
                routePos.treeNode,
                [&](const std::string& id){
                    Cerr << "for route " << id << Endl;
                });




        }
    }

}
