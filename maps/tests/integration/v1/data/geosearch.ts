export default {
    feedback: Buffer.from(
        // tslint:disable-next-line:ter-max-len
        '',
        'base64'
    ),
    reviews: Buffer.from(
        // tslint:disable-next-line:ter-max-len
        '',
        'base64'
    ),
    impressions: {
        ru: Buffer.from(
            // tslint:disable-next-line:ter-max-len
            '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',
            'base64'
        ),
        ruUll: Buffer.from(
            // tslint:disable-next-line:ter-max-len
            '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',
            'base64'
        ),
        en: Buffer.from(
            // tslint:disable-next-line:ter-max-len
            'Ci4KLAoGeWFuZGV4EiIKIAoGWWFuZGV4EhZodHRwczovL3d3dy55YW5kZXguY29tEtsJCqwE8gGoBAo1CgVlbXB0eRABGAAqKAoSCTPABdkyhkJAEfr4nYndt0tAEhIJCv8a94MWQ0ARjvgd3AAGTEAYASooChIJVgVyokDLQkARJiRnm3rdS0ASEgnBBn4ztctCQBEXAgwNvN1LQDrfAaIB2wEKBwoFZW1wdHkQARgBKh0KCG9wZW5fMjRoEg1vcGVuIDI0IGhvdXJzGgAwASoTCgdoYXNfdXJsEgRzaXRlGgAwASo0ChZwYXltZW50X2J5X2NyZWRpdF9jYXJkEhZwYXltZW50IGJ5IGNyZWRpdCBjYXJkGgAwASoXCgV3aV9maRIKZnJlZSB3aS1maRoAMAEqGAoIb3Blbl9ub3cSCG9wZW4gbm93GgAwASoXCghjYXJfcGFyaxIHcGFya2luZxoAMAEqFgoJaGFzX3Bob3RvEgVwaG90bxoAMAGiBt8BCAISjAFaQUFBQUFnQkVBQWFLQW9TQ1FBQUFBQUFrSFpBRVFBQUFBQUFvR1pBRWhJSkFBQUFBQUFBOEw4UkFBQUFBQUFBOEw4aUFnQUJLQUF3QVRpUzM5aUx5Tm5JKzhJQlFQNy8vLy8vLy8vLy93RklBVlhOek13K1dBQnFBSEFBblFITnpNdzlvQUVBcUFFQRolMTU0MTY4MjE5MTM1NTg4Ni0xNjY5NTU5NTA2LXZsYTEtNTczNyIlMTU0MTY4MjE5MTM1NTg4Ni0xNjY5NTU5NTA2LXZsYTEtNTczNzKpBQqGA6oBggMKCjEwNDcwMDg2NzgSD1JveWFsIEpvcmRhbmlhbhqiAQorUnVzc2lhLCBNb3Njb3csIEtvbXNvbW9sc2t5IEF2ZW51ZSwgMTQvMdC6MhIGMTE5MDM0GgJSVSIKCgZSdXNzaWEQACIeChpUc2VudHJhbG55IGZlZGVyYWxueSBva3J1ZxACIgoKBk1vc2NvdxACIgoKBk1vc2NvdxAEIhYKEktvbXNvbW9sc2t5IEF2ZW51ZRAGIgsKBzE0LzHQujIQByI3CghBaXJsaW5lcxoMaWQ6MTg0MTA4MTA1ogYcChAIARIMcHJvZmVzc2lvbmFsEghhaXJsaW5lc0ICCABaGgoQCg5odHRwOi8vcmouY29tLxABIgRzZWxmggEPUm95YWwgSm9yZGFuaWFuigE6ChsKDXVudXN1YWxfaG91cnMSCjIwMTgtMTEtMDQKGwoNdW51c3VhbF9ob3VycxIKMjAxOC0xMS0wNaIGFQjerQcaD3JveWFsX2pvcmRhbmlhbgokygchCh8KHXltYXBzYm0xOi8vb3JnP29pZD0xMDQ3MDA4Njc4CkKaAz8IARI7CjlnZXQtYWx0YXkvMTAwNzY0Ny8yYTAwMDAwMTYyMzhlMzZlMmNkZDcxODM4YTM3MGEwYjY5ODgvJXMKLfoBKgooZEhsd1pUMWlhWHBtYVc1a1pYSTdhV1E5TVRBME56QXdPRFkzT0E9PRIPUm95YWwgSm9yZGFuaWFuGitSdXNzaWEsIE1vc2NvdywgS29tc29tb2xza3kgQXZlbnVlLCAxNC8x0LoyIigKEgmDqixl9MpCQBEBK01rT91LQBISCQXorXABzEJAERnCOTzn3UtAKhQKEgmM+E7MestCQBG8OzJWm91LQDoHI3lhbmRleA==',
            'base64'
        )
    }
};
