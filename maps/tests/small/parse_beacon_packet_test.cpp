#include <maps/indoor/long-tasks/src/radiomap-evaluation-cron-job/lib/impl/utils.h>

#include <library/cpp/testing/gmock_in_unittest/gmock.h>
#include <library/cpp/testing/unittest/registar.h>

namespace maps::mirc::radiomap_evaluator::tests {
using namespace ::testing;

struct BeaconTestData
{
    std::vector<uint8_t> packet;
    std::optional<std::string> beaconId;
};

Y_UNIT_TEST_SUITE() {

Y_UNIT_TEST(render_builtin_templated_configs) {

    std::vector<BeaconTestData> data;
    data.push_back(BeaconTestData{
        { 0x02, 0x01, 0x06, 0x1A, 0xFF, 0x4C, 0x00, 0x02,
          0x15, 0xB9, 0x40, 0x7F, 0x30, 0xF5, 0xF8, 0x46,
          0x6E, 0xAF, 0xF9, 0x25, 0x55, 0x6B, 0x57, 0xFE,
          0x6D, 0x9B, 0x32, 0x7A, 0x51, 0xB3, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        "B9407F30-F5F8-466E-AFF9-25556B57FE6D,39730,31313"
    });

    data.push_back(BeaconTestData{
        { 0x02, 0x01, 0x06, 0x1A, 0xFF, 0x4C, 0x00, 0x02,
          0x15, 0xF7, 0x82, 0x6D, 0xA6, 0x4F, 0xA2, 0x4E,
          0x98, 0x80, 0x24, 0xBC, 0x5B, 0x71, 0xE0, 0x89,
          0x3E, 0xAE, 0xBD, 0x07, 0xBC, 0xB3, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        "F7826DA6-4FA2-4E98-8024-BC5B71E0893E,44733,1980"
    });

    data.push_back(BeaconTestData{
        { 0x02, 0x01, 0x06, 0x1A, 0xFF, 0x4C, 0x00, 0x02,
          0x15, 0x2F, 0x23, 0x44, 0x54, 0xCF, 0x6D, 0x4A,
          0x0F, 0xAD, 0xF2, 0xF4, 0x91, 0x1B, 0xA9, 0xFF,
          0xA6, 0x00, 0x04, 0x00, 0x05, 0xB4, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        "2F234454-CF6D-4A0F-ADF2-F4911BA9FFA6,4,5"
    });


    data.push_back(BeaconTestData{
        { 0x02, 0x01, 0x1E, 0x0A, 0xFF, 0x75, 0x00, 0x01,
          0x00, 0x02, 0x00, 0x01, 0x02, 0x02, 0x03, 0x19,
          0xC0, 0x00, 0x1E, 0x09, 0x47, 0x61, 0x6C, 0x61,
          0x78, 0x79, 0x20, 0x57, 0x61, 0x74, 0x63, 0x68,
          0x20, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x32,
          0x28, 0x37, 0x42, 0x34, 0x33, 0x29, 0x20, 0x4C,
          0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
        std::nullopt
    });

    data.push_back(BeaconTestData{
        { 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
          0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x33, 0x33,
          0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
          0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
          0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55,
          0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
        },
        std::nullopt
    });

    for (const auto& beacon: data) {
        auto result = parseBeaconPacket(std::string(reinterpret_cast<const char*>(beacon.packet.data()), beacon.packet.size()));
        ASSERT_EQ(result, beacon.beaconId);
    }
}

} // suite
} // aps::mirc::radiomap_evaluator::tests
