A console application to run guidance regression test

Each test is described by   2 files:
* test config: *.pb.test (JSON)
* track: *.pb (offline recording)

The track includes:
* road graph tiles
* location events
* set/reset route events

By default application use mock clocks.  It work fine now. 
But it's a trick so some mistakes are possible.
Use a real time clock for get details about real guidance behavior

build: gradle tapp@darwin
For run test using: app test.pb.test

It's possible run test without test config (only with track file).
See detail help for using.


============ Config file format ============

Each json config file follows the following format. Usually you don't have to
modify it manually, these files are generated by Guidance Debugger.

    {
        "track": "98-1.pb",
        "info": {
            "road graph version": "12.62.1",
            "mapkit": "11.273.0"
        },
        "expected_events_list": [
            {
                "type": "routelost",
                "interval": { "start" : 1456831339, "duration" : 34 }
            },
            {
                "type": "routelost",
                "interval": { "start" : 1456831374, "duration" : 12 }
            }
        ],
        "test_should_fail": true
    }

* "track" (required): the file with track recorded track.
* "info" (required): record metadata, that is, road graph and mapkit versions.
* "expected_events_list": list of expected route events. Supported events are
    "RouteLost", "RouteFinished", "ReturnOnRoute" (case insensitive). Each
    event must be followed by an interval (in seconds) when it is expexted.
* "expected_event": if only one event is expected and no timestamp is needed,
    the simplified format is possible:
        "expected_event": "routelost"
* "test_should_fail": should be true if the test is known not to pass. Needed
    by guidance unit tests.
