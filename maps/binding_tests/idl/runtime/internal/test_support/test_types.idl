objc_infix TestSupport;

// @internal
enum TestEnum {
    First,
    Second,
    Third
}

// @internal
bitfield enum TestBitfieldEnum {
    One = 1,
    Two = One << 1,
    Four = Two << 1,
    Eight = Four << 1
}

// @internal
struct TestStructure {
    bool b;
    string text;
    optional string optionalText;
    vector<int> intVector;
    time_interval interval;
    abs_timestamp timestamp;
}

// @internal
lite struct LiteTestStructure {
    bool b;
    string text;
    optional string optionalText;
    time_interval interval;
    abs_timestamp timestamp;
}

// @internal
options struct OptionsTestStructure {
    optional bool b;
    optional string text;
    optional time_interval interval;
    optional abs_timestamp timestamp;
}

// @internal
struct FullTestStructure {
    bool b;
    optional bool ob;
    vector<bool> vb;
    vector<optional bool> vob;
    dictionary<string, bool> db;
    dictionary<string, optional bool> dob;

    int i;
    optional int oi;
    vector<bool> vi;
    vector<optional bool> voi;
    dictionary<string, bool> di;
    dictionary<string, optional bool> doi;

    uint ui;
    optional uint oui;
    vector<bool> vui;
    vector<optional bool> voui;
    dictionary<string, bool> dui;
    dictionary<string, optional bool> doui;

    int64 i64;
    optional int64 oi64;
    vector<bool> vi64;
    vector<optional bool> voi64;
    dictionary<string, bool> di64;
    dictionary<string, optional bool> doi64;

    float fl;
    optional float ofl;
    vector<bool> vfl;
    vector<optional bool> vofl;
    dictionary<string, bool> dfl;
    dictionary<string, optional bool> dofl;

    double d;
    optional double od;
    vector<bool> vd;
    vector<optional bool> vod;
    dictionary<string, bool> dd;
    dictionary<string, optional bool> dod;

    string s;
    optional string os;
    vector<bool> vs;
    vector<optional bool> vos;
    dictionary<string, bool> ds;
    dictionary<string, optional bool> dos;

    time_interval ti;
    optional time_interval oti;
    vector<bool> vti;
    vector<optional bool> voti;
    dictionary<string, bool> dti;
    dictionary<string, optional bool> doti;

    abs_timestamp at;
    optional abs_timestamp oat;
    vector<bool> vat;
    vector<optional bool> voat;
    dictionary<string, bool> dat;
    dictionary<string, optional bool> doat;

    rel_timestamp rt;
    optional rel_timestamp ort;
    vector<bool> vrt;
    vector<optional bool> vort;
    dictionary<string, bool> drt;
    dictionary<string, optional bool> dort;

    bytes by;
    optional bytes oby;

    color c;
    optional color oc;
    vector<color> vc;
    vector<optional color> voc;
    dictionary<string, color> dc;
    dictionary<string, optional color> doc;

    point p;
    optional point op;
    vector<point> vp;
    vector<optional point> vop;
    dictionary<string, point> dp;
    dictionary<string, optional point> dop;

    TestEnum e;
    optional TestEnum oe;
    vector<TestEnum> ve;
    vector<optional TestEnum> voe;
    dictionary<string, TestEnum> de;
    dictionary<string, optional TestEnum> doe;

    TestBitfieldEnum be;
    optional TestBitfieldEnum obe;
    vector<TestBitfieldEnum> vbe;
    vector<optional TestBitfieldEnum> vobe;
    dictionary<string, TestBitfieldEnum> dbe;
    dictionary<string, optional TestBitfieldEnum> dobe;

    TestStructure ts;
    optional TestStructure ots;
    vector<TestStructure> vts;
    vector<optional TestStructure> vots;
    dictionary<string, TestStructure> dts;
    dictionary<string, optional TestStructure> dots;

    LiteTestStructure lts;
    optional LiteTestStructure olts;
    vector<LiteTestStructure> vlts;
    vector<optional LiteTestStructure> volts;
    dictionary<string, LiteTestStructure> dlts;
    dictionary<string, optional LiteTestStructure> dolts;

    OptionsTestStructure opts;
    optional OptionsTestStructure oopts;
    vector<OptionsTestStructure> vopts;
    vector<optional OptionsTestStructure> voopts;
    dictionary<string, OptionsTestStructure> dopts;
    dictionary<string, optional OptionsTestStructure> doopts;
}

// @internal
lite struct FullLiteTestStructure {
    bool b;
    optional bool ob;

    int i;
    optional int oi;

    uint ui;
    optional uint oui;

    int64 i64;
    optional int64 oi64;

    float fl;
    optional float ofl;

    double d;
    optional double od;

    string s;
    optional string os;

    time_interval ti;
    optional time_interval oti;

    abs_timestamp at;
    optional abs_timestamp oat;

    rel_timestamp rt;
    optional rel_timestamp ort;

    bytes by;
    optional bytes oby;

    color c;
    optional color oc;

    point p;
    optional point op;

    TestEnum e;
    optional TestEnum oe;

    TestBitfieldEnum be;
    optional TestBitfieldEnum obe;
}

// @internal
options struct FullOptionsTestStructure {
    optional bool b;
    optional int i;
    optional uint ui;
    optional int64 i64;
    optional float fl;
    optional double d;
    optional string s;
    optional time_interval ti;
    optional abs_timestamp at;
    optional rel_timestamp rt;
    optional bytes by;
    optional color c;
    optional point p;
    optional TestEnum e;
    optional TestBitfieldEnum be;
}
