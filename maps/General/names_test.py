from maps.poi.pylibs.util.names import (
    cast_abbreviations_to_lowercase,
    is_name_renderable,
    make_poi_names,
    remove_extra_symbols
)

from maps.poi.pylibs.util.names import (
    NamesChecker,
    NamesStorage
)


def test_remove_extra_symbols():
    assert remove_extra_symbols('  –í–¢–ë,   –±–∞–Ω–∫–æ–º–∞—Ç  ') == '–í–¢–ë'
    assert remove_extra_symbols('VTB, bankomat') == 'VTB'
    assert remove_extra_symbols('–ö–∞–∫–∞—è-—Ç–æ   –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, ATM') == '–ö–∞–∫–∞—è-—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'
    assert remove_extra_symbols('–ö–∏—Ç–∞–ø—Ö–∞–Ω”ô, –±–∏—â–±–∞—Ä–º–∞–∫') == '–ö–∏—Ç–∞–ø—Ö–∞–Ω”ô, –±–∏—â–±–∞—Ä–º–∞–∫'


def test_is_name_renderable():
    assert is_name_renderable('–°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞')
    assert not is_name_renderable('–†–∏–º—Å–∫–æ-–ö–∞—Ç–æ–ª–∏—á–µ—Å–∫–∏–π —Ö—Ä–∞–º —É—Å–ø–µ–Ω–∏—è –ë–æ–∂–∏–µ–π –º–∞—Ç–µ—Ä–∏')
    assert is_name_renderable('–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ # 47')
    assert not is_name_renderable('–ú–µ—Å—Ç–æ –∫–ª–∏–∑–º—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è')
    assert not is_name_renderable('–õ—ã–≤–æ–∞–≤—Ç–ª–≤–∞–æ—Ç–ª–æ–∞–≤—Ç–≤–æ–∞–≤–ª–æ–æ–∞–ª–≤–∞–≤ —Å–æ–ª–≤—Ç—Å—Ç—Å—Ç—Å—Å—Ç—Å—Ç—Å—Ç—Å—Ç—Å—Ç—Å –∞—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ—Ñ–∫–∫–∫–∫')
    assert is_name_renderable("–ö–∞–º'—è–Ω–æ—è—Ä—É–∑—å–∫–∞ —Å—ñ–ª—å—Å—å–∫–∞ —Ä–∞–¥–∞")
    assert not is_name_renderable('Stikuti≈Üas Hoodi≈Ü≈°. üà≤üà≥„äô')
    assert not is_name_renderable('◊û◊ï◊ñ◊ô◊ê◊ï◊ü ◊û◊ï◊¢◊¶◊™ ◊î◊¢◊ù ◊ï◊û◊ô◊†◊î◊ú◊™◊î')
    assert is_name_renderable('◊ì◊ô◊ñ◊†◊í◊ï◊£ ◊°◊†◊ò◊®')


def test_cast_abbreviations_to_lowercase():
    assert cast_abbreviations_to_lowercase('–¶–ù–ò–ò–° –ß–õ–•') == '–¶–ù–ò–ò–° –ß–õ–•'
    assert cast_abbreviations_to_lowercase('–ö–û–ú–ü–ê–ù–ò–Ø ZiGaZaGa') == '–ö–æ–º–ø–∞–Ω–∏—è ZiGaZaGa'
    assert cast_abbreviations_to_lowercase('–ö–∞–º–∞–∑–¶–ù–ò–ò–õ–ó–¢') == '–ö–∞–º–∞–∑–¶–ù–ò–ò–õ–ó–¢'
    assert cast_abbreviations_to_lowercase('–ö–û–†–ê–ë–õ–ò –õ–ê–í–ò–†–û–í–ê–õ–∏') == '–ö–æ—Ä–∞–±–ª–∏ –õ–ê–í–ò–†–û–í–ê–õ–∏'


def test_make_poi_names():
    names = {
        'ru': '–°–ë–ï–†–ë–ê–ù–ö –≥. –ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫, –±–∞–Ω–∫–æ–º–∞—Ç',
        'en': 'ùó†ùó∂ùó† ùó•ùóòùóûùóüùóîùó† Dijital',
        'es': 'Iglesia de Nuestra Se√±ora de la Asunci√≥n',
        'uk': '–°–î–Æ–°–®–û–† # 123',
        'tr': 'Ramazanoƒülu MESLEKI'
    }
    assert make_poi_names(names) == {
        'ru': '–°–±–µ—Ä–±–∞–Ω–∫ –≥. –ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫',
        'uk': '–°–î–Æ–°–®–û–† # 123',
        'tr': 'Ramazanoƒülu Mesleki'
    }


def test_has_stop_words():
    checker = NamesChecker()

    assert not checker.has_stop_words('–ú–∏—Ä–æ–≤—ã–µ –ê–≤—Ç–æ—à–∏–Ω—ã')
    assert not checker.has_stop_words('–ö–ª–∏–Ω–∏–Ω–≥–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è')
    assert not checker.has_stop_words('–≠–º–º–∞–Ω—É—ç–ª—å, –±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ –±–æ–≥–æ–≤')
    assert not checker.has_stop_words('–ú—É–∑–µ–π –ó–µ–Ω—Ç—ã –ú–∞—É—Ä–∏–Ω–∏')
    assert not checker.has_stop_words('–ö–∏–≥–∏–Ω—Å–∫–∏–π –ø–∏—â–µ–∫–æ–º–±–∏–Ω–∞—Ç')

    assert checker.has_stop_words('–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Timebox')
    assert checker.has_stop_words('–§–æ—Ç–æ–≥—Ä–∞—Ñ –ê–Ω–¥—Ä–µ–π –í–æ–µ–≤–æ–¥–∏–Ω')
    assert checker.has_stop_words('–ü—Å–∏—Ö–æ–ª–æ–≥ –ö–∞—Ä—Ç–∞—à–æ–≤–∞ –ò.–ê.')
    assert checker.has_stop_words('–ñ–ö –ú–æ—Ä—Å–∫–∏–µ –∫–∞–º–Ω–∏')
    assert checker.has_stop_words('–ß–∞—Å—Ç–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä –ì–µ–Ω–Ω–∞–¥–∏–π')
    assert checker.has_stop_words('–õ—É–±–µ–Ω—Å–∫–æ-–û—Ä–∂–∏—Ü–∫–∏–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –≤–æ–µ–Ω–Ω—ã–π –∫–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç')
    assert checker.has_stop_words('–°–ª–æ–Ω–∏–º—Å–∫–∏–π –†–∞–π–æ–Ω–Ω—ã–π –û—Ç–¥–µ–ª –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–ì–ë –†–ë –ø–æ –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏')
    assert checker.has_stop_words('–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')
    assert checker.has_stop_words('–Æ–≥–∞–≤—Ç–æ—Ä–µ–º–æ–Ω—Ç, –ò–ü')


def test_is_fio():
    checker = NamesChecker()

    assert not checker.is_fio('–ú–∞–º–æ–Ω—Ç–æ–≤')
    assert not checker.is_fio('–ú—É–∑–µ–π –í.–ì. –ö–æ—Ä–æ–ª–µ–Ω–∫–æ')
    assert not checker.is_fio('–î–æ–º-–ú—É–∑–µ–π –î.–ê. –ö—É–Ω–∞–µ–≤–∞')

    assert checker.is_fio('–ú–æ—Ä–¥–≤–µ—Å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ò–º–µ–Ω–∏ –í. –§. –†–æ–º–∞–Ω–æ–≤–∞')
    assert checker.is_fio('–ê—É–¥–∏—Ç–æ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –ó–∞—Ö–∞—Ä–µ–≤–∏—á –ü. –ì.')
    assert checker.is_fio('–†–∏—ç–ª—Ç–æ—Ä –ò.–ò. –ì–æ—Ä–±–∞—á–µ–≤')
    assert checker.is_fio('–ü—Å–∏—Ö–æ–ª–æ–≥ –ò.–ò. –ì–æ—Ä–±–∞—á–µ–≤')


def test_extra_org():
    checker = NamesChecker()

    assert checker.is_valid_extra_org_name('–Ø–Ω–¥–µ–∫—Å', None, '–Ø–Ω–¥–µ–∫—Å')
    assert checker.is_valid_extra_org_name('–í–¢–ë', '–í–¢–ë', '–í–¢–ë')

    assert not checker.is_valid_extra_org_name('$$$–ö–∞–∑–∏–Ω–æ$$$', None, '$$$–ö–∞–∑–∏–Ω–æ$$$')

    assert not checker.is_valid_extra_org_name(
        '–ö–∞–∫–æ–µ-—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º–Ω–µ —Å–∏–ª—å–Ω–æ –ª–µ–Ω—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å', None, None)
    assert not checker.is_valid_extra_org_name(
        '–û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –Ω–æ—Ä–º',
        '–ê –≤–æ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø—Ä–∏–¥—É–º—ã–≤–∞–ª –∫–∞–∫–æ–π-—Ç–æ —Å–æ—á–∏–Ω—è–ª–∫–∏–Ω –∏ –≤—Å–µ –ø–æ—à–ª–æ –ø–æ –∫–æ—à–µ—á–∫–µ',
        None
    )
    assert not checker.is_valid_extra_org_name('–ê—Ä–∫–∞—à–∞', '–ò–ü', '–ò–ü')

    assert checker.is_valid_extra_org_name(
        '–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ Ozon.ru', 'Ozon.ru', 'Ozon.ru')
    assert not checker.is_valid_extra_org_name(
        '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Ozon.ru', None, '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Ozon.ru')
    assert not checker.is_valid_extra_org_name(
        '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω Ozon.ru', None, '–ò–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω Ozon.ru')

    assert not checker.is_valid_extra_org_name('GoldHorse, –º–∞–≥–∞–∑–∏–Ω', None, 'GoldHorse, –º–∞–≥–∞–∑–∏–Ω')
    assert not checker.is_valid_extra_org_name('–í—ã–µ–∑–¥–Ω–æ–π –Ω–∞—Ä–∫–æ–ª–æ–≥', None, '–í—ã–µ–∑–¥–Ω–æ–π –Ω–∞—Ä–∫–æ–ª–æ–≥')


def test_names_storage():
    storage = NamesStorage()

    assert storage.try_add({'ru': '–ö–∞–ª–∏–Ω–∫–∞-–°—Ç–æ–∫–º–∞–Ω–Ω'})
    assert not storage.try_add({'ru': '–ú–∞–≥–∞–∑–∏–Ω –ö–∞–ª–∏–Ω–∫–∞ –°—Ç–æ–∫–º–∞–Ω–Ω'})
    assert storage.try_add({'ru': '–ö–∞–ª–∏–Ω–∫–∞-–ú–∞–ª–∏–Ω–∫–∞'})

    assert storage.try_add({'ru': '–°–® 193'})
    assert not storage.try_add({'ru': '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ ‚Ññ 193'})
    assert storage.try_add({'ru': '–°—Ä–µ–¥–Ω—è—è —à–∫–æ–ª–∞ ‚Ññ 194'})

    assert storage.try_add({'ru': '–ê–ø—Ç–µ–∫–∞ –ê–ë–ö'})
    assert storage.try_add({'ru': '–ê–ø—Ç–µ–∫–∞ –ë–µ–ª—Ñ–∞—Ä–º–∞—Ü–∏—è'})
    assert not storage.try_add({'ru': '–ê–ø—Ç–µ–∫–∞'})

    assert storage.try_add({'ru': '–ê–ª—å—Ñ–∞–±–∞–Ω–∫'})
    assert not storage.try_add({'ru': '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫'})
    assert not storage.try_add({'ru': '–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫'})

    assert storage.try_add({'ru': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–π–æ–Ω–∞'})
    assert not storage.try_add({'ru': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ò—Å—Ç—Ä–∏–Ω—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞'})
