<?php
namespace lib5\tests\unit\classes\Helpers;
use \lib5\classes\Helpers\StatsD;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-22 at 12:40:09.
 */
class StatsDTest extends \PHPUnit_Framework_TestCase
{
    use \Xpmock\TestCaseTrait;

    /**
     * @var StatsD
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = $this->mock('\lib5\classes\Helpers\StatsD')
            ->connect(new \lib5\classes\StatsD\Connection\InMemory)
            ->new();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->reconnect();
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::getClient
     */
    public function testGetClient()
    {
        static::assertNull($this->object->this()->client, __LINE__);
        static::assertNull($this->object->this()->connection, __LINE__);
        static::assertInstanceOf('\lib5\classes\StatsD\Client\AbstractClient', $this->object->getClient(), __LINE__);
        static::assertNotNull($this->object->this()->client, __LINE__);
        static::assertNotNull($this->object->this()->connection, __LINE__);
    }

    /**
     * @depends testGetClient
     * @covers lib5\classes\Helpers\StatsD::reconnect
     */
    public function testReconnect()
    {
        $this->object->getClient();
        static::assertNotNull($this->object->this()->client, __LINE__);
        static::assertNotNull($this->object->this()->connection, __LINE__);
        $this->object->reconnect();
        static::assertNull($this->object->this()->client, __LINE__);
        static::assertNull($this->object->this()->connection, __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::increment
     */
    public function testIncrement()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);

        $this->object->increment('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('c php.trololo.value 1', $messages[0], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::decrement
     */
    public function testDecrement()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);

        $this->object->decrement('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('c php.trololo.value -1', $messages[0], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::count
     */
    public function testCount()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);

        $this->object->count('trololo', 10);
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('c php.trololo.value 10', $messages[0], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::rate
     */
    public function testRate()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);

        $this->object->rate('trololo', 10);
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('m php.trololo.value 10', $messages[0], __LINE__);

        $this->object->rate('trololo2');
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(2, $messages, __LINE__);
        static::assertContains('m php.trololo2.value 1', $messages[1], __LINE__);

    }

    /**
     * @covers lib5\classes\Helpers\StatsD::getGlobalNamespace
     * @covers lib5\classes\Helpers\StatsD::setGlobalNamespace
     */
    public function testGetGlobalNamespace()
    {
        $name = $this->object->getGlobalNamespace();
        static::assertEquals($this->object->this()->_getNamespace(), $name, __LINE__);
        $this->object->setGlobalNamespace('trololo');
        $name = $this->object->getGlobalNamespace();
        static::assertEquals('trololo', $name, __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::getCurrentNamespace
     */
    public function testSetGetCurrentNamespace()
    {
        $name = $this->object->getCurrentNamespace();
        static::assertEquals($this->object->this()->_getNamespace(), $name, __LINE__);
        $this->object->setNamespacePrefix('trololo');
        $name = $this->object->getCurrentNamespace();
        static::assertStringStartsWith($this->object->this()->_getNamespace(), $name, __LINE__);
        static::assertContains('trololo', $name, __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::timing
     */
    public function testTiming()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);
        $this->object->timing('trololo', 10);
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('t php.trololo.value 10', $messages[0], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::startTimer
     */
    public function testStartTimer()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);
        $this->object->startTimer('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);
    }

    /**
     * @depends testStartTimer
     * @covers lib5\classes\Helpers\StatsD::stopTimer
     */
    public function testStopTimer()
    {
        $this->object->getClient();
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);
        $this->object->startTimer('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);
        $this->object->stopTimer('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('t php.trololo.value', $messages[0], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::time
     */
    public function testTime()
    {
        $this->object->time('trololo', function () {
            usleep(2000);
        });

        $messages = $this->object->this()->connection->getMessages();
        static::assertCount(1, $messages, __LINE__);
        static::assertContains('t php.trololo.value 2', $messages[0], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::startMemoryProfile
     */
    public function testStartMemoryProfile()
    {
        $this->object->startMemoryProfile('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertEmpty($messages, __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::stopMemoryProfile
     */
    public function testStopMemoryProfile()
    {
        $this->object->startMemoryProfile('trololo');
        $this->object->stopMemoryProfile('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertContains('t php.trololo.memory ', $messages[0], __LINE__);
        preg_match('/t php.trololo.value (\d{1,10})/', $messages[0], $matches);
        static::assertGreaterThanOrEqual(0, $matches[1], __LINE__);
    }

    /**
     * @covers lib5\classes\Helpers\StatsD::memory
     */
    public function testMemory()
    {
        $mem = memory_get_peak_usage();
        $this->object->memory('trololo');
        $messages = $this->object->this()->connection->getMessages();
        static::assertContains('t php.trololo.memory ', $messages[0], __LINE__);
        preg_match('/t php.trololo.memory (\d{1,10})/', $messages[0], $matches);
        static::assertGreaterThanOrEqual($mem, $matches[1], __LINE__);
    }

    /**
     */
    public function testFilterKey()
    {
        $key = '!@#$%^&*()_+=-0987654321.asd.QWE/zxcv\VBNM|?><<5tgG~"\'QWE';
        static::assertEquals('0987654321_asd_QWE.zxcv.VBNM.5tgG.QWE', $this->object->filterKey($key, '_'), __LINE__);
        static::assertEquals('0987654321.asd.QWE.zxcv.VBNM.5tgG.QWE', $this->object->filterKey($key), __LINE__);
    }
}
