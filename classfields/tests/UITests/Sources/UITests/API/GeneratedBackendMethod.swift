// Весь код ниже генерируется автоматически, не вносите изменения вручную
import XCTest
import Foundation
import SwiftProtobuf
import AutoRuProtoModels

class EndpointBuilder {
    fileprivate let server: StubServer
    fileprivate let path: String

    fileprivate init(_ server: StubServer, _ path: String) {
        self.server = server
        self.path = path
    }
}

struct StubEndpointQueryParameter: EndpointQueryParameter {
    var queryRepresentation: String { fatalError("Unimplemented") }
}

struct StubProtobufMessage: SwiftProtobuf.Message {
    static var protoMessageName: String { fatalError("Unimplemented") }

    var unknownFields: UnknownStorage

    init() { unknownFields = .init() }

    mutating func decodeMessage<D>(decoder: inout D) throws where D: Decoder { fatalError("Unimplemented") }

    func traverse<V>(visitor: inout V) throws where V: Visitor { fatalError("Unimplemented") }

    func isEqualTo(message: Message) -> Bool { fatalError("Unimplemented") }
}

enum PublicAPI {
    final class Auth: EndpointBuilder {
        final class Login: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_LoginParameters, Auto_Api_LoginResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_LoginParameters, Auto_Api_LoginResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_LoginParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_LoginParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_LoginParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_LoginParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_LoginParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_LoginParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /auth/login
            var post: Post { .init(server, path) }
        }

        final class LoginOrAddSocial: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_SocialLoginParameters, Vertis_Passport_SocialLoginResult>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters, Vertis_Passport_SocialLoginResult>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_SocialLoginParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_SocialLoginParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_SocialLoginParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /auth/login-or-add-social
            var post: Post { .init(server, path) }
        }

        final class LoginOrRegister: EndpointBuilder {
            final class Post {
                enum QueryParameter: EndpointQueryParameter {
                    case context(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .context(let value): return "context=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_LoginOrRegisterParameters, Auto_Api_LoginOrRegisterResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Vertis_Passport_LoginOrRegisterParameters, Auto_Api_LoginOrRegisterResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_LoginOrRegisterParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Vertis_Passport_LoginOrRegisterParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_LoginOrRegisterParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Vertis_Passport_LoginOrRegisterParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_LoginOrRegisterParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Vertis_Passport_LoginOrRegisterParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /auth/login-or-register
            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
        }

        final class LoginOrRegisterYandex: EndpointBuilder {
            final class Post {
                enum QueryParameter: EndpointQueryParameter {
                    case forceMatchedCredentials(Bool)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .forceMatchedCredentials(let value): return "force_matched_credentials=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Vertis_Passport_YandexAuthResult>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Passport_YandexAuthResult>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /auth/login-or-register-yandex
            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
        }

        final class LoginSocial: EndpointBuilder {
            final class AuthUri: EndpointBuilder {
                final class Provider: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case platform(String)
                            case redirectPath(String)
                            case regionId(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .platform(let value): return "platform=\(value)"
                                case .redirectPath(let value): return "redirectPath=\(value)"
                                case .regionId(let value): return "regionId=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Vertis_Passport_SocialProviderAuthUriResult>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Passport_SocialProviderAuthUriResult>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /auth/login-social/auth-uri/{provider}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /auth/login-social/auth-uri/{provider}
                func provider(_ provider: String) -> Provider { .init(server, path + "/\(provider)") }
            }

            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_SocialLoginParameters, Vertis_Passport_SocialLoginResult>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters, Vertis_Passport_SocialLoginResult>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_SocialLoginParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_SocialLoginParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_SocialLoginParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_SocialLoginParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /auth/login-social/auth-uri
            var authUri: AuthUri { .init(server, path + "/auth-uri") }

            /// method: POST /auth/login-social
            var post: Post { .init(server, path) }
        }

        /// path: /auth/login
        var login: Login { .init(server, path + "/login") }

        /// path: /auth/login-or-add-social
        var loginOrAddSocial: LoginOrAddSocial { .init(server, path + "/login-or-add-social") }

        /// path: /auth/login-or-register
        var loginOrRegister: LoginOrRegister { .init(server, path + "/login-or-register") }

        /// path: /auth/login-or-register-yandex
        var loginOrRegisterYandex: LoginOrRegisterYandex { .init(server, path + "/login-or-register-yandex") }

        /// path: /auth/login-social
        var loginSocial: LoginSocial { .init(server, path + "/login-social") }
    }

    final class Autoparts: EndpointBuilder {
        final class OfferId: EndpointBuilder {
            final class Complaints: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_ComplaintRequest, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_ComplaintRequest, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_ComplaintRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_ComplaintRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_ComplaintRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_ComplaintRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_ComplaintRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_ComplaintRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /autoparts/{offer_id}/complaints
                var post: Post { .init(server, path) }
            }

            /// path: /autoparts/{offer_id}/complaints
            var complaints: Complaints { .init(server, path + "/complaints") }
        }

        /// path: /autoparts/{offer_id}
        func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
    }

    final class Autoservices: EndpointBuilder {
        final class StoId: EndpointBuilder {
            final class Complaints: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_ComplaintRequest, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_ComplaintRequest, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_ComplaintRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_ComplaintRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_ComplaintRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_ComplaintRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_ComplaintRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_ComplaintRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /autoservices/{sto_id}/complaints
                var post: Post { .init(server, path) }
            }

            /// path: /autoservices/{sto_id}/complaints
            var complaints: Complaints { .init(server, path + "/complaints") }
        }

        /// path: /autoservices/{sto_id}
        func stoId(_ stoId: String) -> StoId { .init(server, path + "/\(stoId)") }
    }

    final class Billing: EndpointBuilder {
        enum SalesmanDomainParam: CustomStringConvertible {
            case autoservices
            case autoru
            case concierge
            case _unknown(String)

            var description: String {
                switch self {
                case .autoservices: return "autoservices"
                case .autoru: return "autoru"
                case .concierge: return "concierge"
                case ._unknown(let value): return value
                }
            }
        }

        final class SalesmanDomain: EndpointBuilder {
            final class Payment: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case ticketId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .ticketId(let value): return "ticket_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Billing_PaymentStatusResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Billing_PaymentStatusResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Init: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Billing_InitPaymentRequest, Auto_Api_Billing_InitPaymentResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_InitPaymentRequest, Auto_Api_Billing_InitPaymentResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Billing_InitPaymentRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_InitPaymentRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Billing_InitPaymentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_InitPaymentRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Billing_InitPaymentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_InitPaymentRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /billing/{salesmanDomain}/payment/init
                    var post: Post { .init(server, path) }
                }

                final class Process: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Billing_ProcessPaymentRequest, Auto_Api_Billing_ProcessPaymentResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest, Auto_Api_Billing_ProcessPaymentResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Billing_ProcessPaymentRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Billing_ProcessPaymentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Billing_ProcessPaymentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /billing/{salesmanDomain}/payment/process
                    var post: Post { .init(server, path) }
                }

                final class Start: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Billing_ProcessPaymentRequest, Auto_Api_Billing_StartPaymentResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest, Auto_Api_Billing_StartPaymentResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Billing_ProcessPaymentRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Billing_ProcessPaymentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Billing_ProcessPaymentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_ProcessPaymentRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /billing/{salesmanDomain}/payment/start
                    var post: Post { .init(server, path) }
                }

                /// method: GET /billing/{salesmanDomain}/payment
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                /// path: /billing/{salesmanDomain}/payment/init
                var `init`: Init { .init(server, path + "/init") }

                /// path: /billing/{salesmanDomain}/payment/process
                var process: Process { .init(server, path + "/process") }

                /// path: /billing/{salesmanDomain}/payment/start
                var start: Start { .init(server, path + "/start") }
            }

            final class TiedCards: EndpointBuilder {
                final class Delete {
                    enum QueryParameter: EndpointQueryParameter {
                        case cardId(String)
                        case paymentSystemId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .cardId(let value): return "card_id=\(value)"
                            case .paymentSystemId(let value): return "payment_system_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Billing_TiedCardsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Billing_TiedCardsResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case paymentSystemId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .paymentSystemId(let value): return "payment_system_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Billing_TiedCardsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Billing_TiedCardsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /billing/{salesmanDomain}/tied-cards
                func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }

                /// method: GET /billing/{salesmanDomain}/tied-cards
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /billing/{salesmanDomain}/payment
            var payment: Payment { .init(server, path + "/payment") }

            /// path: /billing/{salesmanDomain}/tied-cards
            var tiedCards: TiedCards { .init(server, path + "/tied-cards") }
        }

        final class Schedules: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class OfferId: EndpointBuilder {
                    final class Product: EndpointBuilder {
                        final class Delete {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_Billing_Schedules_ScheduleActionResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Billing_Schedules_ScheduleActionResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        final class Put {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_Billing_Schedules_ScheduleRequest, Auto_Api_Billing_Schedules_ScheduleActionResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_Schedules_ScheduleRequest, Auto_Api_Billing_Schedules_ScheduleActionResponse>(
                                    responseCode: ._200,
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_Billing_Schedules_ScheduleRequest, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Billing_Schedules_ScheduleRequest, Response>(
                                    responseCode: status,
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_Billing_Schedules_ScheduleRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_Schedules_ScheduleRequest>(
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_Billing_Schedules_ScheduleRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Billing_Schedules_ScheduleRequest>(
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: DELETE /billing/schedules/{category}/{offerId}/{product}
                        var delete: Delete { .init(server, path) }

                        /// method: PUT /billing/schedules/{category}/{offerId}/{product}
                        var put: Put { .init(server, path) }
                    }

                    /// path: /billing/schedules/{category}/{offerId}/{product}
                    func product(_ product: String) -> Product { .init(server, path + "/\(product)") }
                }

                /// path: /billing/schedules/{category}/{offerId}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
            }

            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case offerId([String])
                    case product([String])
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .offerId(let value): return value.map({ "offer_id=\($0)" }).joined(separator: "&")
                        case .product(let value): return value.map({ "product=\($0)" }).joined(separator: "&")
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_Billing_Schedules_ScheduleResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Billing_Schedules_ScheduleResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /billing/schedules/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// method: GET /billing/schedules
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class Services: EndpointBuilder {
            final class Discount: EndpointBuilder {
                final class Category: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Salesman_User_DiscountResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Salesman_User_DiscountResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /billing/services/discount/{category}
                    var get: Get { .init(server, path) }
                }

                /// path: /billing/services/discount/{category}
                func category(_ category: String) -> Category { .init(server, path + "/\(category)") }
            }

            /// path: /billing/services/discount
            var discount: Discount { .init(server, path + "/discount") }
        }

        final class Subscriptions: EndpointBuilder {
            final class Product: EndpointBuilder {
                final class Price: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case category(String)
                            case domain(String)
                            case geoId(Int)
                            case offerId(String)
                            case section(String)
                            case size(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .category(let value): return "category=\(value)"
                                case .domain(let value): return "domain=\(value)"
                                case .geoId(let value): return "geoId=\(value)"
                                case .offerId(let value): return "offerId=\(value)"
                                case .section(let value): return "section=\(value)"
                                case .size(let value): return "size=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Salesman_User_ProductPrice>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Salesman_User_ProductPrice>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /billing/subscriptions/{product}/price
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Prices: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case domain(String)
                            case offerId(String)
                            case vinOrLicensePlate(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .domain(let value): return "domain=\(value)"
                                case .offerId(let value): return "offerId=\(value)"
                                case .vinOrLicensePlate(let value): return "vin_or_license_plate=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Salesman_User_ProductPrices>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Salesman_User_ProductPrices>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /billing/subscriptions/{product}/prices
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /billing/subscriptions/{product}/price
                var price: Price { .init(server, path + "/price") }

                /// path: /billing/subscriptions/{product}/prices
                var prices: Prices { .init(server, path + "/prices") }
            }

            /// path: /billing/subscriptions/{product}
            func product(_ product: String) -> Product { .init(server, path + "/\(product)") }
        }

        /// path: /billing/{salesmanDomain}
        func salesmanDomain(_ salesmanDomain: SalesmanDomainParam) -> SalesmanDomain { .init(server, path + "/\(salesmanDomain)") }

        /// path: /billing/schedules
        var schedules: Schedules { .init(server, path + "/schedules") }

        /// path: /billing/services
        var services: Services { .init(server, path + "/services") }

        /// path: /billing/subscriptions
        var subscriptions: Subscriptions { .init(server, path + "/subscriptions") }
    }

    final class Booking: EndpointBuilder {
        final class Terms: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class OfferId: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Booking_Api_GetBookingTermsResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Booking_Api_GetBookingTermsResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /booking/terms/{category}/{offerId}
                    var get: Get { .init(server, path) }
                }

                /// path: /booking/terms/{category}/{offerId}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
            }

            /// path: /booking/terms/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        /// path: /booking/terms
        var terms: Terms { .init(server, path + "/terms") }
    }

    final class C2bAuction: EndpointBuilder {
        final class Application: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class ApplicationId: EndpointBuilder {
                final class AcceptPreOffers: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_C2b_Reception_AcceptPreOffersResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_C2b_Reception_AcceptPreOffersResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/application/{applicationId}/accept_pre_offers
                    var post: Post { .init(server, path) }
                }

                final class Close: EndpointBuilder {
                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case dropOfferDraft(Bool)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .dropOfferDraft(let value): return "drop_offer_draft=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/application/{applicationId}/close
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_C2b_Reception_GetApplicationResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_C2b_Reception_GetApplicationResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class SetStatus: EndpointBuilder {
                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case status(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .status(let value): return "status=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/application/{applicationId}/set_status
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                /// path: /c2b-auction/application/{applicationId}/accept_pre_offers
                var acceptPreOffers: AcceptPreOffers { .init(server, path + "/accept_pre_offers") }

                /// path: /c2b-auction/application/{applicationId}/close
                var close: Close { .init(server, path + "/close") }

                /// method: GET /c2b-auction/application/{applicationId}
                var get: Get { .init(server, path) }

                /// path: /c2b-auction/application/{applicationId}/set_status
                var setStatus: SetStatus { .init(server, path + "/set_status") }
            }

            final class Category: EndpointBuilder {
                final class DraftId: EndpointBuilder {
                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case inspectDate(String)
                            case inspectTime(String)
                            case phoneNumber(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .inspectDate(let value): return "inspect_date=\(value)"
                                case .inspectTime(let value): return "inspect_time=\(value)"
                                case .phoneNumber(let value): return "phone_number=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_C2b_InspectPlace, Auto_Api_C2BApplicationCreateResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_C2b_InspectPlace, Auto_Api_C2BApplicationCreateResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_C2b_InspectPlace, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_C2b_InspectPlace, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_C2b_InspectPlace, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_C2b_InspectPlace>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_C2b_InspectPlace, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_C2b_InspectPlace>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/application/{category}/{draftId}
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                final class OfferId: EndpointBuilder {
                    final class Offer: EndpointBuilder {
                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case inspectDate(String)
                                case inspectTime(String)
                                case phoneNumber(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .inspectDate(let value): return "inspect_date=\(value)"
                                    case .inspectTime(let value): return "inspect_time=\(value)"
                                    case .phoneNumber(let value): return "phone_number=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_C2b_InspectPlace, Auto_Api_C2BApplicationCreateResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_C2b_InspectPlace, Auto_Api_C2BApplicationCreateResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_C2b_InspectPlace, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_C2b_InspectPlace, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_C2b_InspectPlace, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_C2b_InspectPlace>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_C2b_InspectPlace, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_C2b_InspectPlace>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /c2b-auction/application/{category}/{offerId}/offer
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    /// path: /c2b-auction/application/{category}/{offerId}/offer
                    var offer: Offer { .init(server, path + "/offer") }
                }

                /// path: /c2b-auction/application/{category}/{draftId}
                func draftId(_ draftId: String) -> DraftId { .init(server, path + "/\(draftId)") }

                /// path: /c2b-auction/application/{category}/{offerId}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
            }

            final class List: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_C2b_Reception_ListApplicationsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_C2b_Reception_ListApplicationsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /c2b-auction/application/list
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class MobileTexts: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_C2BGetMobileTextsResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_C2BGetMobileTextsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /c2b-auction/application/mobile_texts
                var get: Get { .init(server, path) }
            }

            /// path: /c2b-auction/application/{applicationId}
            func applicationId(_ applicationId: Int) -> ApplicationId { .init(server, path + "/\(applicationId)") }

            /// path: /c2b-auction/application/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// path: /c2b-auction/application/list
            var list: List { .init(server, path + "/list") }

            /// path: /c2b-auction/application/mobile_texts
            var mobileTexts: MobileTexts { .init(server, path + "/mobile_texts") }
        }

        final class Carp: EndpointBuilder {
            final class ApplicationId: EndpointBuilder {
                final class Close: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/carp/{applicationId}/close
                    var post: Post { .init(server, path) }
                }

                /// path: /c2b-auction/carp/{applicationId}/close
                var close: Close { .init(server, path + "/close") }
            }

            /// path: /c2b-auction/carp/{applicationId}
            func applicationId(_ applicationId: Int) -> ApplicationId { .init(server, path + "/\(applicationId)") }
        }

        final class Lots: EndpointBuilder {
            final class LotId: EndpointBuilder {
                final class ConfirmDeal: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/lots/{lotId}/confirm_deal
                    var post: Post { .init(server, path) }
                }

                final class FinishDeal: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /c2b-auction/lots/{lotId}/finish_deal
                    var post: Post { .init(server, path) }
                }

                /// path: /c2b-auction/lots/{lotId}/confirm_deal
                var confirmDeal: ConfirmDeal { .init(server, path + "/confirm_deal") }

                /// path: /c2b-auction/lots/{lotId}/finish_deal
                var finishDeal: FinishDeal { .init(server, path + "/finish_deal") }
            }

            /// path: /c2b-auction/lots/{lotId}
            func lotId(_ lotId: Int) -> LotId { .init(server, path + "/\(lotId)") }
        }

        /// path: /c2b-auction/application
        var application: Application { .init(server, path + "/application") }

        /// path: /c2b-auction/carp
        var carp: Carp { .init(server, path + "/carp") }

        /// path: /c2b-auction/lots
        var lots: Lots { .init(server, path + "/lots") }
    }

    final class Carfax: EndpointBuilder {
        final class BoughtReports: EndpointBuilder {
            final class ByOrders: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case createdFrom(String)
                        case createdTo(String)
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .createdFrom(let value): return "created_from=\(value)"
                            case .createdTo(let value): return "created_to=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RawBoughtReportsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RawBoughtReportsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /carfax/bought-reports/by-orders
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Raw: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case createdFrom(String)
                        case createdTo(String)
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .createdFrom(let value): return "created_from=\(value)"
                            case .createdTo(let value): return "created_to=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RawBoughtReportsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RawBoughtReportsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /carfax/bought-reports/raw
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /carfax/bought-reports/by-orders
            var byOrders: ByOrders { .init(server, path + "/by-orders") }

            /// path: /carfax/bought-reports/raw
            var raw: Raw { .init(server, path + "/raw") }
        }

        final class Offer: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case all
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case .all: return "all"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class OfferID: EndpointBuilder {
                    final class Raw: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case decrementQuota(Bool)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .decrementQuota(let value): return "decrement_quota=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_RawVinReportResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RawVinReportResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /carfax/offer/{category}/{offerID}/raw
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    /// path: /carfax/offer/{category}/{offerID}/raw
                    var raw: Raw { .init(server, path + "/raw") }
                }

                /// path: /carfax/offer/{category}/{offerID}
                func offerID(_ offerID: String) -> OfferID { .init(server, path + "/\(offerID)") }
            }

            /// path: /carfax/offer/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        final class Report: EndpointBuilder {
            final class Raw: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case decrementQuota(Bool)
                        case vinOrLicensePlate(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .decrementQuota(let value): return "decrement_quota=\(value)"
                            case .vinOrLicensePlate(let value): return "vin_or_license_plate=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RawVinReportResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RawVinReportResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /carfax/report/raw
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /carfax/report/raw
            var raw: Raw { .init(server, path + "/raw") }
        }

        final class User: EndpointBuilder {
            final class Comment: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case blockId(String)
                        case vin(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .blockId(let value): return "block_id=\(value)"
                            case .vin(let value): return "vin=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Comments_VinReportCommentResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Vin_Comments_VinReportCommentResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class PhotoUploadUrl: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Comments_CommentPhotoUploadUrlResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Comments_CommentPhotoUploadUrlResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /carfax/user/comment/photo_upload_url
                    var get: Get { .init(server, path) }
                }

                final class Put {
                    enum QueryParameter: EndpointQueryParameter {
                        case vin(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .vin(let value): return "vin=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Vin_Comments_AddVinReportCommentRequest, Auto_Api_Vin_Comments_VinReportCommentAddResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Vin_Comments_AddVinReportCommentRequest, Auto_Api_Vin_Comments_VinReportCommentAddResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Vin_Comments_AddVinReportCommentRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Vin_Comments_AddVinReportCommentRequest, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Vin_Comments_AddVinReportCommentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Vin_Comments_AddVinReportCommentRequest>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Vin_Comments_AddVinReportCommentRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Vin_Comments_AddVinReportCommentRequest>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /carfax/user/comment
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                /// path: /carfax/user/comment/photo_upload_url
                var photoUploadUrl: PhotoUploadUrl { .init(server, path + "/photo_upload_url") }

                /// method: PUT /carfax/user/comment
                func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
            }

            /// path: /carfax/user/comment
            var comment: Comment { .init(server, path + "/comment") }
        }

        /// path: /carfax/bought-reports
        var boughtReports: BoughtReports { .init(server, path + "/bought-reports") }

        /// path: /carfax/offer
        var offer: Offer { .init(server, path + "/offer") }

        /// path: /carfax/report
        var report: Report { .init(server, path + "/report") }

        /// path: /carfax/user
        var user: User { .init(server, path + "/user") }
    }

    final class Chat: EndpointBuilder {
        final class Aggregator: EndpointBuilder {
            final class Delete {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .delete,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .delete,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .delete,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .delete,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: DELETE /chat/aggregator
            var delete: Delete { .init(server, path) }
        }

        final class Bot: EndpointBuilder {
            final class Vibiralshik: EndpointBuilder {
                final class StartCheckup: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case offerLink(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .offerLink(let value): return "offer-link=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_RoomResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RoomResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /chat/bot/vibiralshik/start-checkup
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /chat/bot/vibiralshik/start-checkup
                var startCheckup: StartCheckup { .init(server, path + "/start-checkup") }
            }

            /// path: /chat/bot/vibiralshik
            var vibiralshik: Vibiralshik { .init(server, path + "/vibiralshik") }
        }

        final class Event: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_Chat_ChatEvent>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Chat_ChatEvent>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /chat/event
            var get: Get { .init(server, path) }
        }

        final class Message: EndpointBuilder {
            final class Bootstrap: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case providedId(String)
                        case roomId(String)
                        case withTechSupportUpload(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .providedId(let value): return "provided_id=\(value)"
                            case .roomId(let value): return "room_id=\(value)"
                            case .withTechSupportUpload(let value): return "with_tech_support_upload=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_BootstrapMessageResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_BootstrapMessageResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /chat/message/bootstrap
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case asc(Bool)
                    case count(Int)
                    case from(String)
                    case roomId(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .asc(let value): return "asc=\(value)"
                        case .count(let value): return "count=\(value)"
                        case .from(let value): return "from=\(value)"
                        case .roomId(let value): return "room_id=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_MessageListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_MessageListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_SendMessageRequest, Auto_Api_MessageResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SendMessageRequest, Auto_Api_MessageResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_SendMessageRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SendMessageRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_SendMessageRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SendMessageRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_SendMessageRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SendMessageRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Spam: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case asc(Bool)
                        case count(Int)
                        case from(String)
                        case roomId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .asc(let value): return "asc=\(value)"
                            case .count(let value): return "count=\(value)"
                            case .from(let value): return "from=\(value)"
                            case .roomId(let value): return "room_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_MessageListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_MessageListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /chat/message/spam
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Unread: EndpointBuilder {
                final class Delete {
                    enum QueryParameter: EndpointQueryParameter {
                        case roomId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .roomId(let value): return "room_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /chat/message/unread
                func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }
            }

            final class UserSpam: EndpointBuilder {
                final class Put {
                    enum QueryParameter: EndpointQueryParameter {
                        case comment(String)
                        case messageId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .comment(let value): return "comment=\(value)"
                            case .messageId(let value): return "message_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: PUT /chat/message/user-spam
                func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
            }

            /// path: /chat/message/bootstrap
            var bootstrap: Bootstrap { .init(server, path + "/bootstrap") }

            /// method: GET /chat/message
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

            /// method: POST /chat/message
            var post: Post { .init(server, path) }

            /// path: /chat/message/spam
            var spam: Spam { .init(server, path + "/spam") }

            /// path: /chat/message/unread
            var unread: Unread { .init(server, path + "/unread") }

            /// path: /chat/message/user-spam
            var userSpam: UserSpam { .init(server, path + "/user-spam") }
        }

        final class Room: EndpointBuilder {
            final class ById: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case id([String])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .id(let value): return value.map({ "id=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RoomListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RoomListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /chat/room/by-id
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_RoomListingResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_RoomListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Id: EndpointBuilder {
                final class Block: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/room/{id}/block
                    var put: Put { .init(server, path) }
                }

                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RoomResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_RoomResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Me: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /chat/room/{id}/me
                    var delete: Delete { .init(server, path) }
                }

                final class Mute: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/room/{id}/mute
                    var put: Put { .init(server, path) }
                }

                final class Open: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/room/{id}/open
                    var put: Put { .init(server, path) }
                }

                final class Typing: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/room/{id}/typing
                    var put: Put { .init(server, path) }
                }

                final class Unblock: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/room/{id}/unblock
                    var put: Put { .init(server, path) }
                }

                final class Unmute: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/room/{id}/unmute
                    var put: Put { .init(server, path) }
                }

                /// path: /chat/room/{id}/block
                var block: Block { .init(server, path + "/block") }

                /// method: GET /chat/room/{id}
                var get: Get { .init(server, path) }

                /// path: /chat/room/{id}/me
                var me: Me { .init(server, path + "/me") }

                /// path: /chat/room/{id}/mute
                var mute: Mute { .init(server, path + "/mute") }

                /// path: /chat/room/{id}/open
                var open: Open { .init(server, path + "/open") }

                /// path: /chat/room/{id}/typing
                var typing: Typing { .init(server, path + "/typing") }

                /// path: /chat/room/{id}/unblock
                var unblock: Unblock { .init(server, path + "/unblock") }

                /// path: /chat/room/{id}/unmute
                var unmute: Unmute { .init(server, path + "/unmute") }
            }

            final class Light: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RoomListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_RoomListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /chat/room/light
                var get: Get { .init(server, path) }
            }

            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_CreateRoomRequest, Auto_Api_RoomResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_CreateRoomRequest, Auto_Api_RoomResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_CreateRoomRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_CreateRoomRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_CreateRoomRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_CreateRoomRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_CreateRoomRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_CreateRoomRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class TechSupport: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_RoomResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_RoomResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /chat/room/tech-support
                var get: Get { .init(server, path) }
            }

            /// path: /chat/room/by-id
            var byId: ById { .init(server, path + "/by-id") }

            /// method: GET /chat/room
            var get: Get { .init(server, path) }

            /// path: /chat/room/{id}
            func id(_ id: String) -> Id { .init(server, path + "/\(id)") }

            /// path: /chat/room/light
            var light: Light { .init(server, path + "/light") }

            /// method: POST /chat/room
            var post: Post { .init(server, path) }

            /// path: /chat/room/tech-support
            var techSupport: TechSupport { .init(server, path + "/tech-support") }
        }

        final class TechSupport: EndpointBuilder {
            final class Poll: EndpointBuilder {
                final class Hash: EndpointBuilder {
                    final class Put {
                        enum QueryParameter: EndpointQueryParameter {
                            case rating(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .rating(let value): return "rating=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_TechSupportPollResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_TechSupportPollResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /chat/tech-support/poll/{hash}
                    func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
                }

                /// path: /chat/tech-support/poll/{hash}
                func hash(_ hash: String) -> Hash { .init(server, path + "/\(hash)") }
            }

            /// path: /chat/tech-support/poll
            var poll: Poll { .init(server, path + "/poll") }
        }

        /// path: /chat/aggregator
        var aggregator: Aggregator { .init(server, path + "/aggregator") }

        /// path: /chat/bot
        var bot: Bot { .init(server, path + "/bot") }

        /// path: /chat/event
        var event: Event { .init(server, path + "/event") }

        /// path: /chat/message
        var message: Message { .init(server, path + "/message") }

        /// path: /chat/room
        var room: Room { .init(server, path + "/room") }

        /// path: /chat/tech-support
        var techSupport: TechSupport { .init(server, path + "/tech-support") }
    }

    final class Cme: EndpointBuilder {
        final class Promocode: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_PromocodeListing>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PromocodeListing>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /cme/promocode
            var get: Get { .init(server, path) }
        }

        /// path: /cme/promocode
        var promocode: Promocode { .init(server, path + "/promocode") }
    }

    final class Comments: EndpointBuilder {
        enum TopicGroupParam: CustomStringConvertible {
            case article
            case review
            case _unknown(String)

            var description: String {
                switch self {
                case .article: return "article"
                case .review: return "review"
                case ._unknown(let value): return value
                }
            }
        }

        final class TopicGroup: EndpointBuilder {
            final class TopicId: EndpointBuilder {
                final class CommentId: EndpointBuilder {
                    final class Complain: EndpointBuilder {
                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case message(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .message(let value): return "message=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /comments/{topicGroup}/{topicId}/{commentId}/complain
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// path: /comments/{topicGroup}/{topicId}/{commentId}/complain
                    var complain: Complain { .init(server, path + "/complain") }

                    /// method: DELETE /comments/{topicGroup}/{topicId}/{commentId}
                    var delete: Delete { .init(server, path) }
                }

                /// path: /comments/{topicGroup}/{topicId}/{commentId}
                func commentId(_ commentId: String) -> CommentId { .init(server, path + "/\(commentId)") }
            }

            /// path: /comments/{topicGroup}/{topicId}
            func topicId(_ topicId: String) -> TopicId { .init(server, path + "/\(topicId)") }
        }

        /// path: /comments/{topicGroup}
        func topicGroup(_ topicGroup: TopicGroupParam) -> TopicGroup { .init(server, path + "/\(topicGroup)") }
    }

    final class Dealer: EndpointBuilder {
        final class Agency: EndpointBuilder {
            final class AgencyId: EndpointBuilder {
                final class Put {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: PUT /dealer/agency/{agency_id}
                var put: Put { .init(server, path) }
            }

            /// path: /dealer/agency/{agency_id}
            func agencyId(_ agencyId: Int) -> AgencyId { .init(server, path + "/\(agencyId)") }
        }

        final class Auction: EndpointBuilder {
            final class Cars: EndpointBuilder {
                final class Used: EndpointBuilder {
                    final class PromoCampaign: EndpointBuilder {
                        final class CampaignId: EndpointBuilder {
                            final class Activate: EndpointBuilder {
                                final class Put {
                                    fileprivate let server: StubServer
                                    fileprivate let path: String

                                    fileprivate init(_ server: StubServer, _ path: String) {
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                            responseCode: ._200,
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<StubProtobufMessage, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                            responseCode: status,
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            checker: nil,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            checker: nil,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                /// method: PUT /dealer/auction/cars/used/promo-campaign/{campaign_id}/activate
                                var put: Put { .init(server, path) }
                            }

                            final class Delete {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            final class Pause: EndpointBuilder {
                                final class Put {
                                    fileprivate let server: StubServer
                                    fileprivate let path: String

                                    fileprivate init(_ server: StubServer, _ path: String) {
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                            responseCode: ._200,
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<StubProtobufMessage, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                            responseCode: status,
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            checker: nil,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            checker: nil,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                /// method: PUT /dealer/auction/cars/used/promo-campaign/{campaign_id}/pause
                                var put: Put { .init(server, path) }
                            }

                            /// path: /dealer/auction/cars/used/promo-campaign/{campaign_id}/activate
                            var activate: Activate { .init(server, path + "/activate") }

                            /// method: DELETE /dealer/auction/cars/used/promo-campaign/{campaign_id}
                            var delete: Delete { .init(server, path) }

                            /// path: /dealer/auction/cars/used/promo-campaign/{campaign_id}/pause
                            var pause: Pause { .init(server, path + "/pause") }
                        }

                        /// path: /dealer/auction/cars/used/promo-campaign/{campaign_id}
                        func campaignId(_ campaignId: Int) -> CampaignId { .init(server, path + "/\(campaignId)") }
                    }

                    /// path: /dealer/auction/cars/used/promo-campaign
                    var promoCampaign: PromoCampaign { .init(server, path + "/promo-campaign") }
                }

                /// path: /dealer/auction/cars/used
                var used: Used { .init(server, path + "/used") }
            }

            final class Offer: EndpointBuilder {
                final class OfferId: EndpointBuilder {
                    final class CurrentState: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_DealerCallsAuction_AuctionCurrentState>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_DealerCallsAuction_AuctionCurrentState>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /dealer/auction/offer/{offer_id}/current-state
                        var get: Get { .init(server, path) }
                    }

                    /// path: /dealer/auction/offer/{offer_id}/current-state
                    var currentState: CurrentState { .init(server, path + "/current-state") }
                }

                /// path: /dealer/auction/offer/{offer_id}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
            }

            /// path: /dealer/auction/cars
            var cars: Cars { .init(server, path + "/cars") }

            /// path: /dealer/auction/offer
            var offer: Offer { .init(server, path + "/offer") }
        }

        final class CallRecord: EndpointBuilder {
            final class RecordId: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case paid(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .paid(let value): return "paid=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /dealer/call-record/{recordId}
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /dealer/call-record/{recordId}
            func recordId(_ recordId: String) -> RecordId { .init(server, path + "/\(recordId)") }
        }

        final class Campaign: EndpointBuilder {
            final class Product: EndpointBuilder {
                final class Product: EndpointBuilder {
                    final class Activate: EndpointBuilder {
                        final class Put {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: PUT /dealer/campaign/product/{product}/activate
                        var put: Put { .init(server, path) }
                    }

                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// path: /dealer/campaign/product/{product}/activate
                    var activate: Activate { .init(server, path + "/activate") }

                    /// method: DELETE /dealer/campaign/product/{product}
                    var delete: Delete { .init(server, path) }

                    /// method: POST /dealer/campaign/product/{product}
                    var post: Post { .init(server, path) }
                }

                /// path: /dealer/campaign/product/{product}
                func product(_ product: String) -> Product { .init(server, path + "/\(product)") }
            }

            /// path: /dealer/campaign/product
            var product: Product { .init(server, path + "/product") }
        }

        final class Campaigns: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_Campaigns>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Campaigns>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /dealer/campaigns
            var get: Get { .init(server, path) }
        }

        final class ExpensesReport: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case collectorTimeoutSeconds(Int)
                    case fromDate(String)
                    case toDate(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .collectorTimeoutSeconds(let value): return "collector_timeout_seconds=\(value)"
                        case .fromDate(let value): return "from_date=\(value)"
                        case .toDate(let value): return "to_date=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok<Response: SwiftProtobuf.Message>(
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /dealer/expenses-report
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class Multiposting: EndpointBuilder {
            enum ClassifiedParam: CustomStringConvertible {
                case autoru
                case avito
                case drom
                case _unknown(String)

                var description: String {
                    switch self {
                    case .autoru: return "autoru"
                    case .avito: return "avito"
                    case .drom: return "drom"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Classified: EndpointBuilder {
                final class Secret: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /dealer/multiposting/{classified}/secret
                    var delete: Delete { .init(server, path) }
                }

                /// path: /dealer/multiposting/{classified}/secret
                var secret: Secret { .init(server, path + "/secret") }
            }

            /// path: /dealer/multiposting/{classified}
            func classified(_ classified: ClassifiedParam) -> Classified { .init(server, path + "/\(classified)") }
        }

        final class Phones: EndpointBuilder {
            final class Redirects: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case confirmedStatus(String)
                        case originalPhone(String)
                        case page(Int)
                        case pageSize(Int)
                        case platform(String)
                        case redirectPhone(String)
                        case withOffers(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .confirmedStatus(let value): return "confirmed_status=\(value)"
                            case .originalPhone(let value): return "original_phone=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .platform(let value): return "platform=\(value)"
                            case .redirectPhone(let value): return "redirect_phone=\(value)"
                            case .withOffers(let value): return "with_offers=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Cabinet_DealerPhones>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Cabinet_DealerPhones>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /dealer/phones/redirects
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Whitelist: EndpointBuilder {
                final class Available: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok<Response: SwiftProtobuf.Message>(
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /dealer/phones/whitelist/available
                    var post: Post { .init(server, path) }
                }

                final class EntriesLeft: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Google_Protobuf_Int32Value>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Google_Protobuf_Int32Value>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /dealer/phones/whitelist/entries-left
                    var post: Post { .init(server, path) }
                }

                /// path: /dealer/phones/whitelist/available
                var available: Available { .init(server, path + "/available") }

                /// path: /dealer/phones/whitelist/entries-left
                var entriesLeft: EntriesLeft { .init(server, path + "/entries-left") }
            }

            /// path: /dealer/phones/redirects
            var redirects: Redirects { .init(server, path + "/redirects") }

            /// path: /dealer/phones/whitelist
            var whitelist: Whitelist { .init(server, path + "/whitelist") }
        }

        final class TradeInSubscription: EndpointBuilder {
            final class StrictCategory: EndpointBuilder {
                final class Put {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_SavedSearchCreateParams, Auto_Api_SavedSearchResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams, Auto_Api_SavedSearchResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_SavedSearchCreateParams, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_SavedSearchCreateParams, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_SavedSearchCreateParams, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: PUT /dealer/trade-in-subscription/{strictCategory}
                var put: Put { .init(server, path) }
            }

            final class SubscriptionId: EndpointBuilder {
                final class Delete {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /dealer/trade-in-subscription/{subscriptionId}
                var delete: Delete { .init(server, path) }
            }

            /// path: /dealer/trade-in-subscription/{strictCategory}
            func strictCategory(_ strictCategory: String) -> StrictCategory { .init(server, path + "/\(strictCategory)") }

            /// path: /dealer/trade-in-subscription/{subscriptionId}
            func subscriptionId(_ subscriptionId: String) -> SubscriptionId { .init(server, path + "/\(subscriptionId)") }
        }

        final class TradeInSubscriptions: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SavedSearchesListing>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SavedSearchesListing>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /dealer/trade-in-subscriptions
            var get: Get { .init(server, path) }
        }

        final class User: EndpointBuilder {
            final class UserId: EndpointBuilder {
                final class Delete {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /dealer/user/{user_id}
                var delete: Delete { .init(server, path) }
            }

            /// path: /dealer/user/{user_id}
            func userId(_ userId: Int) -> UserId { .init(server, path + "/\(userId)") }
        }

        final class Users: EndpointBuilder {
            final class Group: EndpointBuilder {
                final class GroupId: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Cabinet_Group, Auto_Cabinet_Group>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Cabinet_Group, Auto_Cabinet_Group>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Cabinet_Group, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Cabinet_Group, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Cabinet_Group, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Cabinet_Group>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Cabinet_Group, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Cabinet_Group>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /dealer/users/group/{group_id}
                    var delete: Delete { .init(server, path) }

                    /// method: PUT /dealer/users/group/{group_id}
                    var put: Put { .init(server, path) }
                }

                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Cabinet_Group, Auto_Cabinet_Group>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Cabinet_Group, Auto_Cabinet_Group>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Cabinet_Group, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Cabinet_Group, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Cabinet_Group, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Cabinet_Group>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Cabinet_Group, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Cabinet_Group>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// path: /dealer/users/group/{group_id}
                func groupId(_ groupId: String) -> GroupId { .init(server, path + "/\(groupId)") }

                /// method: POST /dealer/users/group
                var post: Post { .init(server, path) }
            }

            /// path: /dealer/users/group
            var group: Group { .init(server, path + "/group") }
        }

        /// path: /dealer/agency
        var agency: Agency { .init(server, path + "/agency") }

        /// path: /dealer/auction
        var auction: Auction { .init(server, path + "/auction") }

        /// path: /dealer/call-record
        var callRecord: CallRecord { .init(server, path + "/call-record") }

        /// path: /dealer/campaign
        var campaign: Campaign { .init(server, path + "/campaign") }

        /// path: /dealer/campaigns
        var campaigns: Campaigns { .init(server, path + "/campaigns") }

        /// path: /dealer/expenses-report
        var expensesReport: ExpensesReport { .init(server, path + "/expenses-report") }

        /// path: /dealer/multiposting
        var multiposting: Multiposting { .init(server, path + "/multiposting") }

        /// path: /dealer/phones
        var phones: Phones { .init(server, path + "/phones") }

        /// path: /dealer/trade-in-subscription
        var tradeInSubscription: TradeInSubscription { .init(server, path + "/trade-in-subscription") }

        /// path: /dealer/trade-in-subscriptions
        var tradeInSubscriptions: TradeInSubscriptions { .init(server, path + "/trade-in-subscriptions") }

        /// path: /dealer/user
        var user: User { .init(server, path + "/user") }

        /// path: /dealer/users
        var users: Users { .init(server, path + "/users") }
    }

    final class PromoLanding: EndpointBuilder {
        final class Cars: EndpointBuilder {
            final class Electro: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case geoRadius(Int)
                        case rid([Int])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .geoRadius(let value): return "geo_radius=\(value)"
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_AggregatedPromoLandingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_AggregatedPromoLandingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /promo-landing/cars/electro
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /promo-landing/cars/electro
            var electro: Electro { .init(server, path + "/electro") }
        }

        /// path: /promo-landing/cars
        var cars: Cars { .init(server, path + "/cars") }
    }

    final class Events: EndpointBuilder {
        final class Facts: EndpointBuilder {
            enum EventCategoryParam: CustomStringConvertible {
                case offer
                case user
                case _unknown(String)

                var description: String {
                    switch self {
                    case .offer: return "offer"
                    case .user: return "user"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class EventCategory: EndpointBuilder {
                enum EventTypeParam: CustomStringConvertible {
                    case create
                    case update
                    case delete
                    case auth
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .create: return "create"
                        case .update: return "update"
                        case .delete: return "delete"
                        case .auth: return "auth"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class EventType: EndpointBuilder {
                    final class Put {
                        enum QueryParameter: EndpointQueryParameter {
                            case id(String)
                            case phone([String])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .id(let value): return "id=\(value)"
                                case .phone(let value): return value.map({ "phone=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /events/facts/{event-category}/{event-type}
                    func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
                }

                /// path: /events/facts/{event-category}/{event-type}
                func eventType(_ eventType: EventTypeParam) -> EventType { .init(server, path + "/\(eventType)") }
            }

            /// path: /events/facts/{event-category}
            func eventCategory(_ eventCategory: EventCategoryParam) -> EventCategory { .init(server, path + "/\(eventCategory)") }
        }

        final class Log: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_EventsReportRequest, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_EventsReportRequest, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_EventsReportRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_EventsReportRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_EventsReportRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_EventsReportRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_EventsReportRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_EventsReportRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /events/log
            var post: Post { .init(server, path) }
        }

        /// path: /events/facts
        var facts: Facts { .init(server, path + "/facts") }

        /// path: /events/log
        var log: Log { .init(server, path + "/log") }
    }

    final class Features: EndpointBuilder {
        final class Name: EndpointBuilder {
            final class Put {
                enum QueryParameter: EndpointQueryParameter {
                    case comment(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .comment(let value): return "comment=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .put,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .put,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .put,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .put,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: PUT /features/{name}
            func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
        }

        /// path: /features/{name}
        func name(_ name: String) -> Name { .init(server, path + "/\(name)") }
    }

    final class Feedback: EndpointBuilder {
        final class Send: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_Feedback_EmailFeedbackRequest, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Feedback_EmailFeedbackRequest, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_Feedback_EmailFeedbackRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Feedback_EmailFeedbackRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_Feedback_EmailFeedbackRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Feedback_EmailFeedbackRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_Feedback_EmailFeedbackRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Feedback_EmailFeedbackRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /feedback/send
            var post: Post { .init(server, path) }
        }

        /// path: /feedback/send
        var send: Send { .init(server, path + "/send") }
    }

    final class Feeds: EndpointBuilder {
        final class Settings: EndpointBuilder {
            final class Cars: EndpointBuilder {
                enum SectionParam: CustomStringConvertible {
                    case USED
                    case NEW
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .USED: return "USED"
                        case .NEW: return "NEW"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class Section: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /feeds/settings/cars/{section}
                    var delete: Delete { .init(server, path) }
                }

                /// path: /feeds/settings/cars/{section}
                func section(_ section: SectionParam) -> Section { .init(server, path + "/\(section)") }
            }

            final class Moto: EndpointBuilder {
                enum MotoCategoryParam: CustomStringConvertible {
                    case ATV
                    case MOTORCYCLE
                    case SCOOTERS
                    case SNOWMOBILE
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .ATV: return "ATV"
                        case .MOTORCYCLE: return "MOTORCYCLE"
                        case .SCOOTERS: return "SCOOTERS"
                        case .SNOWMOBILE: return "SNOWMOBILE"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class MotoCategory: EndpointBuilder {
                    enum SectionParam: CustomStringConvertible {
                        case USED
                        case NEW
                        case _unknown(String)

                        var description: String {
                            switch self {
                            case .USED: return "USED"
                            case .NEW: return "NEW"
                            case ._unknown(let value): return value
                            }
                        }
                    }

                    final class Section: EndpointBuilder {
                        final class Delete {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: DELETE /feeds/settings/moto/{moto_category}/{section}
                        var delete: Delete { .init(server, path) }
                    }

                    /// path: /feeds/settings/moto/{moto_category}/{section}
                    func section(_ section: SectionParam) -> Section { .init(server, path + "/\(section)") }
                }

                /// path: /feeds/settings/moto/{moto_category}
                func motoCategory(_ motoCategory: MotoCategoryParam) -> MotoCategory { .init(server, path + "/\(motoCategory)") }
            }

            final class Trucks: EndpointBuilder {
                enum TrucksCategoryParam: CustomStringConvertible {
                    case TRUCK
                    case LCV
                    case TRAILER
                    case SWAP_BODY
                    case BUS
                    case ARTIC
                    case AGRICULTURAL
                    case CONSTRUCTION
                    case AUTOLOADER
                    case CRANE
                    case DREDGE
                    case BULLDOZERS
                    case CRANE_HYDRAULICS
                    case MUNICIPAL
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .TRUCK: return "TRUCK"
                        case .LCV: return "LCV"
                        case .TRAILER: return "TRAILER"
                        case .SWAP_BODY: return "SWAP_BODY"
                        case .BUS: return "BUS"
                        case .ARTIC: return "ARTIC"
                        case .AGRICULTURAL: return "AGRICULTURAL"
                        case .CONSTRUCTION: return "CONSTRUCTION"
                        case .AUTOLOADER: return "AUTOLOADER"
                        case .CRANE: return "CRANE"
                        case .DREDGE: return "DREDGE"
                        case .BULLDOZERS: return "BULLDOZERS"
                        case .CRANE_HYDRAULICS: return "CRANE_HYDRAULICS"
                        case .MUNICIPAL: return "MUNICIPAL"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class TrucksCategory: EndpointBuilder {
                    enum SectionParam: CustomStringConvertible {
                        case USED
                        case NEW
                        case _unknown(String)

                        var description: String {
                            switch self {
                            case .USED: return "USED"
                            case .NEW: return "NEW"
                            case ._unknown(let value): return value
                            }
                        }
                    }

                    final class Section: EndpointBuilder {
                        final class Delete {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: DELETE /feeds/settings/trucks/{trucks_category}/{section}
                        var delete: Delete { .init(server, path) }
                    }

                    /// path: /feeds/settings/trucks/{trucks_category}/{section}
                    func section(_ section: SectionParam) -> Section { .init(server, path + "/\(section)") }
                }

                /// path: /feeds/settings/trucks/{trucks_category}
                func trucksCategory(_ trucksCategory: TrucksCategoryParam) -> TrucksCategory { .init(server, path + "/\(trucksCategory)") }
            }

            /// path: /feeds/settings/cars
            var cars: Cars { .init(server, path + "/cars") }

            /// path: /feeds/settings/moto
            var moto: Moto { .init(server, path + "/moto") }

            /// path: /feeds/settings/trucks
            var trucks: Trucks { .init(server, path + "/trucks") }
        }

        /// path: /feeds/settings
        var settings: Settings { .init(server, path + "/settings") }
    }

    final class Garage: EndpointBuilder {
        final class Card: EndpointBuilder {
            final class CardId: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_GetCardResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_GetCardResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Report: EndpointBuilder {
                    final class Raw: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case decrementQuota(Bool)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .decrementQuota(let value): return "decrement_quota=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_RawVinReportResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_RawVinReportResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_RawVinReportResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_RawVinReportResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /garage/card/{cardId}/report/raw
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                        /// method: POST /garage/card/{cardId}/report/raw
                        var post: Post { .init(server, path) }
                    }

                    /// path: /garage/card/{cardId}/report/raw
                    var raw: Raw { .init(server, path + "/raw") }
                }

                /// method: GET /garage/card/{cardId}
                var get: Get { .init(server, path) }

                /// path: /garage/card/{cardId}/report
                var report: Report { .init(server, path + "/report") }
            }

            /// path: /garage/card/{cardId}
            func cardId(_ cardId: String) -> CardId { .init(server, path + "/\(cardId)") }
        }

        final class Landing: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case targetPromoIds([String])
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .targetPromoIds(let value): return value.map({ "target_promo_ids=\($0)" }).joined(separator: "&")
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_Landing>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_Landing>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /garage/landing
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class User: EndpointBuilder {
            final class Card: EndpointBuilder {
                final class Article: EndpointBuilder {
                    final class ArticleId: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_CreateCardResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_CreateCardResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /garage/user/card/article/{article_id}
                        var get: Get { .init(server, path) }
                    }

                    /// path: /garage/user/card/article/{article_id}
                    func articleId(_ articleId: String) -> ArticleId { .init(server, path + "/\(articleId)") }
                }

                final class CardId: EndpointBuilder {
                    final class ChangeType: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_Vin_Garage_ChangeCardTypeRequest, Auto_Api_Vin_Garage_ChangeCardTypeResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_ChangeCardTypeRequest, Auto_Api_Vin_Garage_ChangeCardTypeResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_Vin_Garage_ChangeCardTypeRequest, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_ChangeCardTypeRequest, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_Vin_Garage_ChangeCardTypeRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_ChangeCardTypeRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_Vin_Garage_ChangeCardTypeRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_ChangeCardTypeRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /garage/user/card/{cardId}/change_type
                        var post: Post { .init(server, path) }
                    }

                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_DeleteCardResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_DeleteCardResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case targetPromoIds([String])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .targetPromoIds(let value): return value.map({ "target_promo_ids=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_GetCardResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_GetCardResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Vin_Garage_UpdateCardRequest, Auto_Api_Vin_Garage_UpdateCardResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_UpdateCardRequest, Auto_Api_Vin_Garage_UpdateCardResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Vin_Garage_UpdateCardRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_UpdateCardRequest, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Vin_Garage_UpdateCardRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_UpdateCardRequest>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Vin_Garage_UpdateCardRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_UpdateCardRequest>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// path: /garage/user/card/{cardId}/change_type
                    var changeType: ChangeType { .init(server, path + "/change_type") }

                    /// method: DELETE /garage/user/card/{cardId}
                    var delete: Delete { .init(server, path) }

                    /// method: GET /garage/user/card/{cardId}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                    /// method: PUT /garage/user/card/{cardId}
                    var put: Put { .init(server, path) }
                }

                final class Identifier: EndpointBuilder {
                    final class Identifier: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_Vin_Garage_CreateCardByIdentifierRequest, Auto_Api_Vin_Garage_CreateCardResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardByIdentifierRequest, Auto_Api_Vin_Garage_CreateCardResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_Vin_Garage_CreateCardByIdentifierRequest, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardByIdentifierRequest, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_Vin_Garage_CreateCardByIdentifierRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardByIdentifierRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_Vin_Garage_CreateCardByIdentifierRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardByIdentifierRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /garage/user/card/identifier/{identifier}
                        var post: Post { .init(server, path) }
                    }

                    /// path: /garage/user/card/identifier/{identifier}
                    func identifier(_ identifier: String) -> Identifier { .init(server, path + "/\(identifier)") }
                }

                final class Offer: EndpointBuilder {
                    final class OfferId: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_CreateCardResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_CreateCardResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /garage/user/card/offer/{offer_id}
                        var post: Post { .init(server, path) }
                    }

                    /// path: /garage/user/card/offer/{offer_id}
                    func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
                }

                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Vin_Garage_CreateCardRequest, Auto_Api_Vin_Garage_CreateCardResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardRequest, Auto_Api_Vin_Garage_CreateCardResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Vin_Garage_CreateCardRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Vin_Garage_CreateCardRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Vin_Garage_CreateCardRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_CreateCardRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// path: /garage/user/card/article
                var article: Article { .init(server, path + "/article") }

                /// path: /garage/user/card/{cardId}
                func cardId(_ cardId: String) -> CardId { .init(server, path + "/\(cardId)") }

                /// path: /garage/user/card/identifier
                var identifier: Identifier { .init(server, path + "/identifier") }

                /// path: /garage/user/card/offer
                var offer: Offer { .init(server, path + "/offer") }

                /// method: POST /garage/user/card
                var post: Post { .init(server, path) }
            }

            final class Cards: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Vin_Garage_GetListingRequest, Auto_Api_Vin_Garage_GetListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_GetListingRequest, Auto_Api_Vin_Garage_GetListingResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Vin_Garage_GetListingRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Vin_Garage_GetListingRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Vin_Garage_GetListingRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_GetListingRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Vin_Garage_GetListingRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Vin_Garage_GetListingRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /garage/user/cards
                var post: Post { .init(server, path) }
            }

            final class Media: EndpointBuilder {
                final class UploadUrl: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case uploadDataType(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .uploadDataType(let value): return "upload_data_type=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_GarageUploadResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_GarageUploadResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /garage/user/media/upload_url
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /garage/user/media/upload_url
                var uploadUrl: UploadUrl { .init(server, path + "/upload_url") }
            }

            final class Promos: EndpointBuilder {
                final class AcquirePromocode: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_GarageAcquirePromocodeResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_GarageAcquirePromocodeResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /garage/user/promos/acquire_promocode
                    var post: Post { .init(server, path) }
                }

                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case page(Int)
                        case pageSize(Int)
                        case targetPromoIds([String])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .targetPromoIds(let value): return value.map({ "target_promo_ids=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_GetPromoPartnersResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_GetPromoPartnersResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// path: /garage/user/promos/acquire_promocode
                var acquirePromocode: AcquirePromocode { .init(server, path + "/acquire_promocode") }

                /// method: GET /garage/user/promos
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class VehicleInfo: EndpointBuilder {
                final class Identifier: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Vin_Garage_GetVehicleInfoResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Vin_Garage_GetVehicleInfoResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /garage/user/vehicle_info/{identifier}
                    var get: Get { .init(server, path) }
                }

                /// path: /garage/user/vehicle_info/{identifier}
                func identifier(_ identifier: String) -> Identifier { .init(server, path + "/\(identifier)") }
            }

            /// path: /garage/user/card
            var card: Card { .init(server, path + "/card") }

            /// path: /garage/user/cards
            var cards: Cards { .init(server, path + "/cards") }

            /// path: /garage/user/media
            var media: Media { .init(server, path + "/media") }

            /// path: /garage/user/promos
            var promos: Promos { .init(server, path + "/promos") }

            /// path: /garage/user/vehicle_info
            var vehicleInfo: VehicleInfo { .init(server, path + "/vehicle_info") }
        }

        /// path: /garage/card
        var card: Card { .init(server, path + "/card") }

        /// path: /garage/landing
        var landing: Landing { .init(server, path + "/landing") }

        /// path: /garage/user
        var user: User { .init(server, path + "/user") }
    }

    final class Geo: EndpointBuilder {
        final class RegionId: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_GeoSuggestResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_GeoSuggestResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /geo/{regionId}
            var get: Get { .init(server, path) }
        }

        final class Suggest: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case lat(Double)
                    case letters(String)
                    case lon(Double)
                    case onlyCities(Bool)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .lat(let value): return "lat=\(value)"
                        case .letters(let value): return "letters=\(value)"
                        case .lon(let value): return "lon=\(value)"
                        case .onlyCities(let value): return "only_cities=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_GeoSuggestResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_GeoSuggestResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /geo/suggest
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /geo/{regionId}
        func regionId(_ regionId: String) -> RegionId { .init(server, path + "/\(regionId)") }

        /// path: /geo/suggest
        var suggest: Suggest { .init(server, path + "/suggest") }
    }

    final class Device: EndpointBuilder {
        final class DeeplinkParse: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case link(String)
                    case type(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .link(let value): return "link=\(value)"
                        case .type(let value): return "type=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_DeeplinkParseResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_DeeplinkParseResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /device/deeplink-parse
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class Hello: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_HelloRequest, Auto_Api_HelloResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_HelloRequest, Auto_Api_HelloResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_HelloRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_HelloRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_HelloRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_HelloRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_HelloRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_HelloRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /device/hello
            var post: Post { .init(server, path) }
        }

        final class Init: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_HelloRequest, Auto_Api_HelloResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_HelloRequest, Auto_Api_HelloResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_HelloRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_HelloRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_HelloRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_HelloRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_HelloRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_HelloRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /device/init
            var post: Post { .init(server, path) }
        }

        final class PushToken: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_SavePushTokenRequest, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SavePushTokenRequest, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_SavePushTokenRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SavePushTokenRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_SavePushTokenRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SavePushTokenRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_SavePushTokenRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SavePushTokenRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /device/push-token
            var post: Post { .init(server, path) }
        }

        final class Subscriptions: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_DeviceSubscriptionsResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DeviceSubscriptionsResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Name: EndpointBuilder {
                final class Delete {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /device/subscriptions/{name}
                var delete: Delete { .init(server, path) }

                /// method: POST /device/subscriptions/{name}
                var post: Post { .init(server, path) }
            }

            /// method: GET /device/subscriptions
            var get: Get { .init(server, path) }

            /// path: /device/subscriptions/{name}
            func name(_ name: String) -> Name { .init(server, path + "/\(name)") }
        }

        final class Websocket: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SecretSignResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SecretSignResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /device/websocket
            var get: Get { .init(server, path) }
        }

        /// path: /device/deeplink-parse
        var deeplinkParse: DeeplinkParse { .init(server, path + "/deeplink-parse") }

        /// path: /device/hello
        var hello: Hello { .init(server, path + "/hello") }

        /// path: /device/init
        var `init`: Init { .init(server, path + "/init") }

        /// path: /device/push-token
        var pushToken: PushToken { .init(server, path + "/push-token") }

        /// path: /device/subscriptions
        var subscriptions: Subscriptions { .init(server, path + "/subscriptions") }

        /// path: /device/websocket
        var websocket: Websocket { .init(server, path + "/websocket") }
    }

    final class Unsubscribe: EndpointBuilder {
        final class Subscription: EndpointBuilder {
            final class Put {
                enum QueryParameter: EndpointQueryParameter {
                    case token(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .token(let value): return "token=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .put,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .put,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .put,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .put,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: PUT /unsubscribe/subscription
            func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
        }

        /// path: /unsubscribe/subscription
        var subscription: Subscription { .init(server, path + "/subscription") }
    }

    final class History: EndpointBuilder {
        final class Last: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case trucks
                case moto
                case all
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .trucks: return "trucks"
                    case .moto: return "moto"
                    case .all: return "all"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_HistoryListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_HistoryListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /history/last/{category}
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /history/last/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        /// path: /history/last
        var last: Last { .init(server, path + "/last") }
    }

    final class Lenta: EndpointBuilder {
        final class DeleteSubscription: EndpointBuilder {
            final class Delete {
                enum QueryParameter: EndpointQueryParameter {
                    case userId(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .userId(let value): return "user_id=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .delete,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .delete,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .delete,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .delete,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: DELETE /lenta/delete-subscription
            func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }
        }

        /// path: /lenta/delete-subscription
        var deleteSubscription: DeleteSubscription { .init(server, path + "/delete-subscription") }
    }

    final class Magazine: EndpointBuilder {
        final class Articles: EndpointBuilder {
            final class Count: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case category([String])
                        case mark(String)
                        case model(String)
                        case superGenId(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .category(let value): return value.map({ "category=\($0)" }).joined(separator: "&")
                            case .mark(let value): return "mark=\(value)"
                            case .model(let value): return "model=\(value)"
                            case .superGenId(let value): return "super_gen_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /magazine/articles/count
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Snippets: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case category([String])
                        case mark(String)
                        case model(String)
                        case page(Int)
                        case pageSize(Int)
                        case sort(String)
                        case superGenId([Int])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .category(let value): return value.map({ "category=\($0)" }).joined(separator: "&")
                            case .mark(let value): return "mark=\(value)"
                            case .model(let value): return "model=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .sort(let value): return "sort=\(value)"
                            case .superGenId(let value): return value.map({ "super_gen_id=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_MagazineArticleSnippetListResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_MagazineArticleSnippetListResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /magazine/articles/snippets
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /magazine/articles/count
            var count: Count { .init(server, path + "/count") }

            /// path: /magazine/articles/snippets
            var snippets: Snippets { .init(server, path + "/snippets") }
        }

        /// path: /magazine/articles
        var articles: Articles { .init(server, path + "/articles") }
    }

    final class MatchApplications: EndpointBuilder {
        final class Post {
            fileprivate let server: StubServer
            fileprivate let path: String

            fileprivate init(_ server: StubServer, _ path: String) {
                self.server = server
                self.path = path
            }

            func ok(
                mock: MockSource<Ru_Auto_MatchMaker_MatchApplication, Auto_Api_MatchApplicationCreateResponse>
            ) {
                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Ru_Auto_MatchMaker_MatchApplication, Auto_Api_MatchApplicationCreateResponse>(
                    responseCode: ._200,
                    method: .post,
                    path: path,
                    parameters: nil,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func error<Response: SwiftProtobuf.Message>(
                status: HTTPResponseStatus = ._400,
                mock: MockSource<Ru_Auto_MatchMaker_MatchApplication, Response>
            ) {
                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Ru_Auto_MatchMaker_MatchApplication, Response>(
                    responseCode: status,
                    method: .post,
                    path: path,
                    parameters: nil,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func expect(
                checker: ((Ru_Auto_MatchMaker_MatchApplication, Int) -> ExpectationCheckerVerdict)? = nil
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Ru_Auto_MatchMaker_MatchApplication>(
                    method: .post,
                    path: path,
                    parameters: nil,
                    checker: checker,
                    isInverted: false
                )
                return expectation.make(with: server)
            }

            func notExpect(
                checker: ((Ru_Auto_MatchMaker_MatchApplication, Int) -> ExpectationCheckerVerdict)? = nil
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Ru_Auto_MatchMaker_MatchApplication>(
                    method: .post,
                    path: path,
                    parameters: nil,
                    checker: checker,
                    isInverted: true
                )
                return expectation.make(with: server)
            }
        }

        /// method: POST /match-applications
        var post: Post { .init(server, path) }
    }

    final class Notification: EndpointBuilder {
        final class MarkAllRead: EndpointBuilder {
            final class Put {
                enum QueryParameter: EndpointQueryParameter {
                    case topic(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .topic(let value): return "topic=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .put,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .put,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .put,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .put,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: PUT /notification/mark-all-read
            func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
        }

        /// path: /notification/mark-all-read
        var markAllRead: MarkAllRead { .init(server, path + "/mark-all-read") }
    }

    final class Offer: EndpointBuilder {
        enum CategoryParam: CustomStringConvertible {
            case cars
            case moto
            case trucks
            case _unknown(String)

            var description: String {
                switch self {
                case .cars: return "cars"
                case .moto: return "moto"
                case .trucks: return "trucks"
                case ._unknown(let value): return value
                }
            }
        }

        final class Category: EndpointBuilder {
            final class OfferID: EndpointBuilder {
                final class CallsStats: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_CallsStatsResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_CallsStatsResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/calls-stats
                    var get: Get { .init(server, path) }
                }

                final class Complaints: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_ComplaintRequest, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_ComplaintRequest, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_ComplaintRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_ComplaintRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_ComplaintRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_ComplaintRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_ComplaintRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_ComplaintRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /offer/{category}/{offerID}/complaints
                    var post: Post { .init(server, path) }
                }

                final class Delivery: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_DeliveryInfo, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_DeliveryInfo, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_DeliveryInfo, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_DeliveryInfo, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_DeliveryInfo, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_DeliveryInfo>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_DeliveryInfo, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_DeliveryInfo>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /offer/{category}/{offerID}/delivery
                    var delete: Delete { .init(server, path) }

                    /// method: PUT /offer/{category}/{offerID}/delivery
                    var put: Put { .init(server, path) }
                }

                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Notifications: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_StatsNotificationResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_StatsNotificationResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/notifications
                    var get: Get { .init(server, path) }
                }

                final class Phones: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_PhoneResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhoneResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/phones
                    var get: Get { .init(server, path) }
                }

                final class RegisterCallback: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Callback_PhoneCallbackRequest, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Callback_PhoneCallbackRequest, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Callback_PhoneCallbackRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Callback_PhoneCallbackRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Callback_PhoneCallbackRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Callback_PhoneCallbackRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Callback_PhoneCallbackRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Callback_PhoneCallbackRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /offer/{category}/{offerID}/register-callback
                    var post: Post { .init(server, path) }
                }

                final class Related: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case geoRadius(Int)
                            case rid([Int])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .geoRadius(let value): return "geo_radius=\(value)"
                                case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/related
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Room: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_RoomResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_RoomResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/room
                    var get: Get { .init(server, path) }
                }

                final class Specials: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case geoRadius(Int)
                            case rid([Int])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .geoRadius(let value): return "geo_radius=\(value)"
                                case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/specials
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Stats: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_DailyCountersResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DailyCountersResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /offer/{category}/{offerID}/stats
                    var get: Get { .init(server, path) }
                }

                final class TradeIn: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Cabinet_TradeInRequestForm, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Cabinet_TradeInRequestForm, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Cabinet_TradeInRequestForm, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Cabinet_TradeInRequestForm, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Cabinet_TradeInRequestForm, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Cabinet_TradeInRequestForm>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Cabinet_TradeInRequestForm, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Cabinet_TradeInRequestForm>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /offer/{category}/{offerID}/trade-in
                    var post: Post { .init(server, path) }
                }

                /// path: /offer/{category}/{offerID}/calls-stats
                var callsStats: CallsStats { .init(server, path + "/calls-stats") }

                /// path: /offer/{category}/{offerID}/complaints
                var complaints: Complaints { .init(server, path + "/complaints") }

                /// path: /offer/{category}/{offerID}/delivery
                var delivery: Delivery { .init(server, path + "/delivery") }

                /// method: GET /offer/{category}/{offerID}
                var get: Get { .init(server, path) }

                /// path: /offer/{category}/{offerID}/notifications
                var notifications: Notifications { .init(server, path + "/notifications") }

                /// path: /offer/{category}/{offerID}/phones
                var phones: Phones { .init(server, path + "/phones") }

                /// path: /offer/{category}/{offerID}/register-callback
                var registerCallback: RegisterCallback { .init(server, path + "/register-callback") }

                /// path: /offer/{category}/{offerID}/related
                var related: Related { .init(server, path + "/related") }

                /// path: /offer/{category}/{offerID}/room
                var room: Room { .init(server, path + "/room") }

                /// path: /offer/{category}/{offerID}/specials
                var specials: Specials { .init(server, path + "/specials") }

                /// path: /offer/{category}/{offerID}/stats
                var stats: Stats { .init(server, path + "/stats") }

                /// path: /offer/{category}/{offerID}/trade-in
                var tradeIn: TradeIn { .init(server, path + "/trade-in") }
            }

            /// path: /offer/{category}/{offerID}
            func offerID(_ offerID: String) -> OfferID { .init(server, path + "/\(offerID)") }
        }

        /// path: /offer/{category}
        func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
    }

    final class Panorama: EndpointBuilder {
        final class Interior: EndpointBuilder {
            final class PanoramaId: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_InteriorPanoramaResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_InteriorPanoramaResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Poi: EndpointBuilder {
                    final class PoiId: EndpointBuilder {
                        final class Delete {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: DELETE /panorama/interior/{panorama_id}/poi/{poi_id}
                        var delete: Delete { .init(server, path) }
                    }

                    final class Upload: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case poiId(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .poiId(let value): return "poi_id=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Uploader_SignResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Uploader_SignResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /panorama/interior/{panorama_id}/poi/upload
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    /// path: /panorama/interior/{panorama_id}/poi/{poi_id}
                    func poiId(_ poiId: String) -> PoiId { .init(server, path + "/\(poiId)") }

                    /// path: /panorama/interior/{panorama_id}/poi/upload
                    var upload: Upload { .init(server, path + "/upload") }
                }

                /// method: GET /panorama/interior/{panorama_id}
                var get: Get { .init(server, path) }

                /// path: /panorama/interior/{panorama_id}/poi
                var poi: Poi { .init(server, path + "/poi") }
            }

            final class Upload: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Uploader_SignResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Uploader_SignResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /panorama/interior/upload
                var get: Get { .init(server, path) }
            }

            /// path: /panorama/interior/{panorama_id}
            func panoramaId(_ panoramaId: String) -> PanoramaId { .init(server, path + "/\(panoramaId)") }

            /// path: /panorama/interior/upload
            var upload: Upload { .init(server, path + "/upload") }
        }

        final class PanoramaId: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_PanoramaResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PanoramaResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Metadata: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Panoramas_Metadata, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Panoramas_Metadata, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Panoramas_Metadata, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Panoramas_Metadata, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Panoramas_Metadata, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Panoramas_Metadata>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Panoramas_Metadata, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Panoramas_Metadata>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /panorama/{panorama_id}/metadata
                var post: Post { .init(server, path) }
            }

            final class Poi: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ExteriorPanoramaPoiResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ExteriorPanoramaPoiResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class PoiId: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Panoramas_ExteriorPoi, Auto_Panoramas_ExteriorPoi>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi, Auto_Panoramas_ExteriorPoi>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Panoramas_ExteriorPoi, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Panoramas_ExteriorPoi, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Panoramas_ExteriorPoi, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /panorama/{panorama_id}/poi/{poi_id}
                    var delete: Delete { .init(server, path) }

                    /// method: PUT /panorama/{panorama_id}/poi/{poi_id}
                    var put: Put { .init(server, path) }
                }

                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Panoramas_ExteriorPoi, Auto_Panoramas_ExteriorPoi>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi, Auto_Panoramas_ExteriorPoi>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Panoramas_ExteriorPoi, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Panoramas_ExteriorPoi, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Panoramas_ExteriorPoi, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Panoramas_ExteriorPoi>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Upload: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case poiId(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .poiId(let value): return "poi_id=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Uploader_SignResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Uploader_SignResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /panorama/{panorama_id}/poi/upload
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// method: GET /panorama/{panorama_id}/poi
                var get: Get { .init(server, path) }

                /// path: /panorama/{panorama_id}/poi/{poi_id}
                func poiId(_ poiId: String) -> PoiId { .init(server, path + "/\(poiId)") }

                /// method: POST /panorama/{panorama_id}/poi
                var post: Post { .init(server, path) }

                /// path: /panorama/{panorama_id}/poi/upload
                var upload: Upload { .init(server, path + "/upload") }
            }

            /// method: GET /panorama/{panorama_id}
            var get: Get { .init(server, path) }

            /// path: /panorama/{panorama_id}/metadata
            var metadata: Metadata { .init(server, path + "/metadata") }

            /// path: /panorama/{panorama_id}/poi
            var poi: Poi { .init(server, path + "/poi") }
        }

        final class Upload: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Uploader_SignResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Uploader_SignResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /panorama/upload
            var get: Get { .init(server, path) }
        }

        /// path: /panorama/interior
        var interior: Interior { .init(server, path + "/interior") }

        /// path: /panorama/{panorama_id}
        func panoramaId(_ panoramaId: String) -> PanoramaId { .init(server, path + "/\(panoramaId)") }

        /// path: /panorama/upload
        var upload: Upload { .init(server, path + "/upload") }
    }

    final class Parsing: EndpointBuilder {
        final class CreateDraft: EndpointBuilder {
            final class Post {
                enum QueryParameter: EndpointQueryParameter {
                    case url(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .url(let value): return "url=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_DraftResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_DraftResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /parsing/create-draft
            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
        }

        final class Hash: EndpointBuilder {
            final class LoginOrRegisterOwner: EndpointBuilder {
                final class Post {
                    enum QueryParameter: EndpointQueryParameter {
                        case phone(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .phone(let value): return "phone=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Vertis_Passport_LoginResult>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Passport_LoginResult>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /parsing/{hash}/login-or-register-owner
                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
            }

            final class RejectReason: EndpointBuilder {
                final class Put {
                    enum QueryParameter: EndpointQueryParameter {
                        case reason(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .reason(let value): return "reason=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: PUT /parsing/{hash}/reject-reason
                func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
            }

            final class ToDraft: EndpointBuilder {
                final class Post {
                    enum QueryParameter: EndpointQueryParameter {
                        case phone(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .phone(let value): return "phone=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_DraftResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_DraftResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /parsing/{hash}/to-draft
                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
            }

            /// path: /parsing/{hash}/login-or-register-owner
            var loginOrRegisterOwner: LoginOrRegisterOwner { .init(server, path + "/login-or-register-owner") }

            /// path: /parsing/{hash}/reject-reason
            var rejectReason: RejectReason { .init(server, path + "/reject-reason") }

            /// path: /parsing/{hash}/to-draft
            var toDraft: ToDraft { .init(server, path + "/to-draft") }
        }

        /// path: /parsing/create-draft
        var createDraft: CreateDraft { .init(server, path + "/create-draft") }

        /// path: /parsing/{hash}
        func hash(_ hash: String) -> Hash { .init(server, path + "/\(hash)") }
    }

    final class Personalization: EndpointBuilder {
        final class GetPersonalizedOffersFeed: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case page(Int)
                    case pageSize(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /personalization/get-personalized-offers-feed
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class GetRecommendedOffers: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case doNotAddLastViewed(String)
                    case geoId(Int)
                    case maxOffersCount(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .doNotAddLastViewed(let value): return "do_not_add_last_viewed=\(value)"
                        case .geoId(let value): return "geo_id=\(value)"
                        case .maxOffersCount(let value): return "max_offers_count=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_Offer>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Offer>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /personalization/get-recommended-offers
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class GetRecommendedOffersFeed: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case geoId(Int)
                    case maxOffersCount(Int)
                    case pageNum(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .geoId(let value): return "geo_id=\(value)"
                        case .maxOffersCount(let value): return "max_offers_count=\(value)"
                        case .pageNum(let value): return "page_num=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_Offer>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Offer>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /personalization/get-recommended-offers-feed
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /personalization/get-personalized-offers-feed
        var getPersonalizedOffersFeed: GetPersonalizedOffersFeed { .init(server, path + "/get-personalized-offers-feed") }

        /// path: /personalization/get-recommended-offers
        var getRecommendedOffers: GetRecommendedOffers { .init(server, path + "/get-recommended-offers") }

        /// path: /personalization/get-recommended-offers-feed
        var getRecommendedOffersFeed: GetRecommendedOffersFeed { .init(server, path + "/get-recommended-offers-feed") }
    }

    final class Photos: EndpointBuilder {
        final class RawPhoto: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case sign(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .sign(let value): return "sign=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok<Response: SwiftProtobuf.Message>(
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /photos/raw-photo
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /photos/raw-photo
        var rawPhoto: RawPhoto { .init(server, path + "/raw-photo") }
    }

    final class Products: EndpointBuilder {
        final class Post {
            fileprivate let server: StubServer
            fileprivate let path: String

            fileprivate init(_ server: StubServer, _ path: String) {
                self.server = server
                self.path = path
            }

            func ok(
                mock: MockSource<Auto_Application_Application, Auto_Api_SuccessResponse>
            ) {
                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Application_Application, Auto_Api_SuccessResponse>(
                    responseCode: ._200,
                    method: .post,
                    path: path,
                    parameters: nil,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func error<Response: SwiftProtobuf.Message>(
                status: HTTPResponseStatus = ._400,
                mock: MockSource<Auto_Application_Application, Response>
            ) {
                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Application_Application, Response>(
                    responseCode: status,
                    method: .post,
                    path: path,
                    parameters: nil,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func expect(
                checker: ((Auto_Application_Application, Int) -> ExpectationCheckerVerdict)? = nil
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Application_Application>(
                    method: .post,
                    path: path,
                    parameters: nil,
                    checker: checker,
                    isInverted: false
                )
                return expectation.make(with: server)
            }

            func notExpect(
                checker: ((Auto_Application_Application, Int) -> ExpectationCheckerVerdict)? = nil
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Application_Application>(
                    method: .post,
                    path: path,
                    parameters: nil,
                    checker: checker,
                    isInverted: true
                )
                return expectation.make(with: server)
            }
        }

        /// method: POST /products
        var post: Post { .init(server, path) }
    }

    final class Promocode: EndpointBuilder {
        final class Listing: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_PromocodeListing>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PromocodeListing>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /promocode/listing
            var get: Get { .init(server, path) }
        }

        final class Promocode: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_PromocodeActivationRequest, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_PromocodeActivationRequest, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_PromocodeActivationRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_PromocodeActivationRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_PromocodeActivationRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_PromocodeActivationRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_PromocodeActivationRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_PromocodeActivationRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /promocode/{promocode}
            var post: Post { .init(server, path) }
        }

        /// path: /promocode/listing
        var listing: Listing { .init(server, path + "/listing") }

        /// path: /promocode/{promocode}
        func promocode(_ promocode: String) -> Promocode { .init(server, path + "/\(promocode)") }
    }

    final class Recalls: EndpointBuilder {
        final class UserCards: EndpointBuilder {
            final class CardId: EndpointBuilder {
                final class Delete {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Subscription: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /recalls/user-cards/{card_id}/subscription
                    var delete: Delete { .init(server, path) }

                    /// method: PUT /recalls/user-cards/{card_id}/subscription
                    var put: Put { .init(server, path) }
                }

                /// method: DELETE /recalls/user-cards/{card_id}
                var delete: Delete { .init(server, path) }

                /// path: /recalls/user-cards/{card_id}/subscription
                var subscription: Subscription { .init(server, path + "/subscription") }
            }

            /// path: /recalls/user-cards/{card_id}
            func cardId(_ cardId: String) -> CardId { .init(server, path + "/\(cardId)") }
        }

        /// path: /recalls/user-cards
        var userCards: UserCards { .init(server, path + "/user-cards") }
    }

    final class Reference: EndpointBuilder {
        final class Catalog: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Cars: EndpointBuilder {
                final class AllOptions: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Searcher_Filters_EquipmentFiltersResultMessage>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Searcher_Filters_EquipmentFiltersResultMessage>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reference/catalog/cars/all-options
                    var get: Get { .init(server, path) }
                }

                final class Configurations: EndpointBuilder {
                    final class Gallery: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case complectationId(String)
                                case configurationId(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .complectationId(let value): return "complectation_id=\(value)"
                                    case .configurationId(let value): return "configuration_id=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_CatalogResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_CatalogResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reference/catalog/cars/configurations/gallery
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    final class Subtree: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case configurationId([String])
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .configurationId(let value): return value.map({ "configuration_id=\($0)" }).joined(separator: "&")
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_CatalogResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_CatalogResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reference/catalog/cars/configurations/subtree
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    /// path: /reference/catalog/cars/configurations/gallery
                    var gallery: Gallery { .init(server, path + "/gallery") }

                    /// path: /reference/catalog/cars/configurations/subtree
                    var subtree: Subtree { .init(server, path + "/subtree") }
                }

                final class ParseOptions: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Ru_Auto_Catalog_DescriptionParseRequest, Auto_Api_OfferDescriptionParseResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Ru_Auto_Catalog_DescriptionParseRequest, Auto_Api_OfferDescriptionParseResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Ru_Auto_Catalog_DescriptionParseRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Ru_Auto_Catalog_DescriptionParseRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Ru_Auto_Catalog_DescriptionParseRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Ru_Auto_Catalog_DescriptionParseRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Ru_Auto_Catalog_DescriptionParseRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Ru_Auto_Catalog_DescriptionParseRequest>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /reference/catalog/cars/parse-options
                    var post: Post { .init(server, path) }
                }

                final class TechInfo: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case techParamId(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .techParamId(let value): return "tech_param_id=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_HumanTechInfoResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_HumanTechInfoResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reference/catalog/cars/tech-info
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /reference/catalog/cars/all-options
                var allOptions: AllOptions { .init(server, path + "/all-options") }

                /// path: /reference/catalog/cars/configurations
                var configurations: Configurations { .init(server, path + "/configurations") }

                /// path: /reference/catalog/cars/parse-options
                var parseOptions: ParseOptions { .init(server, path + "/parse-options") }

                /// path: /reference/catalog/cars/tech-info
                var techInfo: TechInfo { .init(server, path + "/tech-info") }
            }

            final class Category: EndpointBuilder {
                final class Complectations: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case mark(String)
                            case model(String)
                            case onlyIds(String)
                            case techParamId(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .mark(let value): return "mark=\(value)"
                                case .model(let value): return "model=\(value)"
                                case .onlyIds(let value): return "only_ids=\(value)"
                                case .techParamId(let value): return "tech_param_id=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_CatalogEntityList>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_CatalogEntityList>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reference/catalog/{category}/complectations
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Dictionaries: EndpointBuilder {
                    enum FormatParam: CustomStringConvertible {
                        case v1
                        case v2
                        case _unknown(String)

                        var description: String {
                            switch self {
                            case .v1: return "v1"
                            case .v2: return "v2"
                            case ._unknown(let value): return value
                            }
                        }
                    }

                    final class Format: EndpointBuilder {
                        enum DictionaryParam: CustomStringConvertible {
                            case atv_type
                            case body_type
                            case brakes
                            case bus_type
                            case cabin
                            case cabin_suspension
                            case chassis_suspension
                            case cylinder_amount
                            case cylinder_order
                            case drive
                            case engine
                            case engine_type
                            case petrol_type
                            case equipment
                            case euro_class
                            case gear
                            case light_truck_type
                            case moto_category
                            case moto_type
                            case saddle_height
                            case snowmobile_type
                            case steering_wheel
                            case stroke_amount
                            case suspension
                            case swap_body_type
                            case trailer_type
                            case transmission
                            case truck_category
                            case truck_type
                            case wheel_drive
                            case color_hex
                            case message_presets
                            case message_hello_presets
                            case seller_message_presets
                            case seller_message_hello_presets
                            case car_type
                            case damage_type
                            case agricultural_type
                            case construction_type
                            case autoloader_type
                            case dredge_type
                            case bulldozer_type
                            case municipal_type
                            case _unknown(String)

                            var description: String {
                                switch self {
                                case .atv_type: return "atv_type"
                                case .body_type: return "body_type"
                                case .brakes: return "brakes"
                                case .bus_type: return "bus_type"
                                case .cabin: return "cabin"
                                case .cabin_suspension: return "cabin_suspension"
                                case .chassis_suspension: return "chassis_suspension"
                                case .cylinder_amount: return "cylinder_amount"
                                case .cylinder_order: return "cylinder_order"
                                case .drive: return "drive"
                                case .engine: return "engine"
                                case .engine_type: return "engine_type"
                                case .petrol_type: return "petrol_type"
                                case .equipment: return "equipment"
                                case .euro_class: return "euro_class"
                                case .gear: return "gear"
                                case .light_truck_type: return "light_truck_type"
                                case .moto_category: return "moto_category"
                                case .moto_type: return "moto_type"
                                case .saddle_height: return "saddle_height"
                                case .snowmobile_type: return "snowmobile_type"
                                case .steering_wheel: return "steering_wheel"
                                case .stroke_amount: return "stroke_amount"
                                case .suspension: return "suspension"
                                case .swap_body_type: return "swap_body_type"
                                case .trailer_type: return "trailer_type"
                                case .transmission: return "transmission"
                                case .truck_category: return "truck_category"
                                case .truck_type: return "truck_type"
                                case .wheel_drive: return "wheel_drive"
                                case .color_hex: return "color_hex"
                                case .message_presets: return "message_presets"
                                case .message_hello_presets: return "message_hello_presets"
                                case .seller_message_presets: return "seller_message_presets"
                                case .seller_message_hello_presets: return "seller_message_hello_presets"
                                case .car_type: return "car_type"
                                case .damage_type: return "damage_type"
                                case .agricultural_type: return "agricultural_type"
                                case .construction_type: return "construction_type"
                                case .autoloader_type: return "autoloader_type"
                                case .dredge_type: return "dredge_type"
                                case .bulldozer_type: return "bulldozer_type"
                                case .municipal_type: return "municipal_type"
                                case ._unknown(let value): return value
                                }
                            }
                        }

                        final class Dictionary: EndpointBuilder {
                            final class Get {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_DictionaryResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DictionaryResponse>(
                                        responseCode: ._200,
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: GET /reference/catalog/{category}/dictionaries/{format}/{dictionary}
                            var get: Get { .init(server, path) }
                        }

                        /// path: /reference/catalog/{category}/dictionaries/{format}/{dictionary}
                        func dictionary(_ dictionary: DictionaryParam) -> Dictionary { .init(server, path + "/\(dictionary)") }
                    }

                    /// path: /reference/catalog/{category}/dictionaries/{format}
                    func format(_ format: FormatParam) -> Format { .init(server, path + "/\(format)") }
                }

                final class Suggest: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case bodyType(String)
                            case engineType([String])
                            case gearType([String])
                            case mark(String)
                            case model(String)
                            case superGenId(String)
                            case techParamId(String)
                            case transmission([String])
                            case year(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .bodyType(let value): return "body_type=\(value)"
                                case .engineType(let value): return value.map({ "engine_type=\($0)" }).joined(separator: "&")
                                case .gearType(let value): return value.map({ "gear_type=\($0)" }).joined(separator: "&")
                                case .mark(let value): return "mark=\(value)"
                                case .model(let value): return "model=\(value)"
                                case .superGenId(let value): return "super_gen_id=\(value)"
                                case .techParamId(let value): return "tech_param_id=\(value)"
                                case .transmission(let value): return value.map({ "transmission=\($0)" }).joined(separator: "&")
                                case .year(let value): return "year=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_CarSuggestResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_CarSuggestResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reference/catalog/{category}/suggest
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /reference/catalog/{category}/complectations
                var complectations: Complectations { .init(server, path + "/complectations") }

                /// path: /reference/catalog/{category}/dictionaries
                var dictionaries: Dictionaries { .init(server, path + "/dictionaries") }

                /// path: /reference/catalog/{category}/suggest
                var suggest: Suggest { .init(server, path + "/suggest") }
            }

            final class Tags: EndpointBuilder {
                enum FormatParam: CustomStringConvertible {
                    case v1
                    case v2
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .v1: return "v1"
                        case .v2: return "v2"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class Format: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case stateGroup(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .stateGroup(let value): return "state_group=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_DictionaryResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_DictionaryResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reference/catalog/tags/{format}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /reference/catalog/tags/{format}
                func format(_ format: FormatParam) -> Format { .init(server, path + "/\(format)") }
            }

            /// path: /reference/catalog/cars
            var cars: Cars { .init(server, path + "/cars") }

            /// path: /reference/catalog/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// path: /reference/catalog/tags
            var tags: Tags { .init(server, path + "/tags") }
        }

        /// path: /reference/catalog
        var catalog: Catalog { .init(server, path + "/catalog") }
    }

    final class Reviews: EndpointBuilder {
        enum SubjectParam: CustomStringConvertible {
            case auto
            case sto
            case _unknown(String)

            var description: String {
                switch self {
                case .auto: return "auto"
                case .sto: return "sto"
                case ._unknown(let value): return value
                }
            }
        }

        final class Subject: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case CARS
                case TRUCKS
                case MOTO
                case _unknown(String)

                var description: String {
                    switch self {
                    case .CARS: return "CARS"
                    case .TRUCKS: return "TRUCKS"
                    case .MOTO: return "MOTO"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class AnonDraft: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /reviews/{subject}/anon-draft
                var get: Get { .init(server, path) }
            }

            final class Category: EndpointBuilder {
                final class Counter: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case mark(String)
                            case model(String)
                            case subCategory(String)
                            case superGen(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .mark(let value): return "mark=\(value)"
                                case .model(let value): return "model=\(value)"
                                case .subCategory(let value): return "sub_category=\(value)"
                                case .superGen(let value): return "super_gen=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reviews/{subject}/{category}/counter
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Offer: EndpointBuilder {
                    final class OfferId: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case campaign(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .campaign(let value): return "campaign=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_ReviewResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_ReviewResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reviews/{subject}/{category}/offer/{offerId}
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    /// path: /reviews/{subject}/{category}/offer/{offerId}
                    func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
                }

                final class Rating: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case mark(String)
                            case model(String)
                            case superGen(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .mark(let value): return "mark=\(value)"
                                case .model(let value): return "model=\(value)"
                                case .superGen(let value): return "super_gen=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_ReviewsRatingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_ReviewsRatingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reviews/{subject}/{category}/rating
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /reviews/{subject}/{category}/counter
                var counter: Counter { .init(server, path + "/counter") }

                /// path: /reviews/{subject}/{category}/offer
                var offer: Offer { .init(server, path + "/offer") }

                /// path: /reviews/{subject}/{category}/rating
                var rating: Rating { .init(server, path + "/rating") }
            }

            final class Draft: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /reviews/{subject}/draft
                var get: Get { .init(server, path) }
            }

            final class Features: EndpointBuilder {
                enum CategoryParam: CustomStringConvertible {
                    case CARS
                    case MOTO
                    case TRUCKS
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .CARS: return "CARS"
                        case .MOTO: return "MOTO"
                        case .TRUCKS: return "TRUCKS"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class Category: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case mark(String)
                            case model(String)
                            case superGen(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .mark(let value): return "mark=\(value)"
                                case .model(let value): return "model=\(value)"
                                case .superGen(let value): return "super_gen=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_FeaturesResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_FeaturesResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Snippet: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case feature(String)
                                case mark(String)
                                case model(String)
                                case superGen(Int)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .feature(let value): return "feature=\(value)"
                                    case .mark(let value): return "mark=\(value)"
                                    case .model(let value): return "model=\(value)"
                                    case .superGen(let value): return "super_gen=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_FeatureSnippetResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_FeatureSnippetResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reviews/{subject}/features/{category}/snippet
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    /// method: GET /reviews/{subject}/features/{category}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                    /// path: /reviews/{subject}/features/{category}/snippet
                    var snippet: Snippet { .init(server, path + "/snippet") }
                }

                /// path: /reviews/{subject}/features/{category}
                func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
            }

            final class Listing: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case bodyType(String)
                        case category(String)
                        case engineType([String])
                        case excludeOfferId(String)
                        case mark(String)
                        case model(String)
                        case page(Int)
                        case pageSize(Int)
                        case photo(Bool)
                        case sort(String)
                        case subCategory(String)
                        case superGen([Int])
                        case techParamId([Int])
                        case transmission([String])
                        case userId(String)
                        case yearFrom(Int)
                        case yearTo(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .bodyType(let value): return "body_type=\(value)"
                            case .category(let value): return "category=\(value)"
                            case .engineType(let value): return value.map({ "engine_type=\($0)" }).joined(separator: "&")
                            case .excludeOfferId(let value): return "exclude_offer_id=\(value)"
                            case .mark(let value): return "mark=\(value)"
                            case .model(let value): return "model=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .photo(let value): return "photo=\(value)"
                            case .sort(let value): return "sort=\(value)"
                            case .subCategory(let value): return "sub_category=\(value)"
                            case .superGen(let value): return value.map({ "super_gen=\($0)" }).joined(separator: "&")
                            case .techParamId(let value): return value.map({ "tech_param_id=\($0)" }).joined(separator: "&")
                            case .transmission(let value): return value.map({ "transmission=\($0)" }).joined(separator: "&")
                            case .userId(let value): return "user_id=\(value)"
                            case .yearFrom(let value): return "year_from=\(value)"
                            case .yearTo(let value): return "year_to=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /reviews/{subject}/listing
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Photo: EndpointBuilder {
                final class UploadUrl: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_ReviewUploadUrlResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewUploadUrlResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reviews/{subject}/photo/upload_url
                    var get: Get { .init(server, path) }
                }

                /// path: /reviews/{subject}/photo/upload_url
                var uploadUrl: UploadUrl { .init(server, path + "/upload_url") }
            }

            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_Review, Auto_Api_ReviewSaveResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Review, Auto_Api_ReviewSaveResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_Review, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Review, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_Review, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Review>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_Review, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Review>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Presets: EndpointBuilder {
                final class Category: EndpointBuilder {
                    final class Popular: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reviews/{subject}/presets/{category}/popular
                        var get: Get { .init(server, path) }
                    }

                    final class Recent: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reviews/{subject}/presets/{category}/recent
                        var get: Get { .init(server, path) }
                    }

                    final class TopLike: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reviews/{subject}/presets/{category}/top-like
                        var get: Get { .init(server, path) }
                    }

                    final class Weekly: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /reviews/{subject}/presets/{category}/weekly
                        var get: Get { .init(server, path) }
                    }

                    /// path: /reviews/{subject}/presets/{category}/popular
                    var popular: Popular { .init(server, path + "/popular") }

                    /// path: /reviews/{subject}/presets/{category}/recent
                    var recent: Recent { .init(server, path + "/recent") }

                    /// path: /reviews/{subject}/presets/{category}/top-like
                    var topLike: TopLike { .init(server, path + "/top-like") }

                    /// path: /reviews/{subject}/presets/{category}/weekly
                    var weekly: Weekly { .init(server, path + "/weekly") }
                }

                /// path: /reviews/{subject}/presets/{category}
                func category(_ category: String) -> Category { .init(server, path + "/\(category)") }
            }

            final class ReviewId: EndpointBuilder {
                final class Comments: EndpointBuilder {
                    final class CommentId: EndpointBuilder {
                        final class Complain: EndpointBuilder {
                            final class Post {
                                enum QueryParameter: EndpointQueryParameter {
                                    case message(String)
                                    case _unknown(String, String)

                                    var queryRepresentation: String {
                                        switch self {
                                        case .message(let value): return "message=\(value)"
                                        case ._unknown(let key, let value): return "\(key)=\(value)"
                                        }
                                    }
                                }

                                fileprivate let server: StubServer
                                fileprivate let path: String
                                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                    self.parameters = parameters
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .post,
                                        path: path,
                                        parameters: parameters,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .post,
                                        path: path,
                                        parameters: parameters,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                        method: .post,
                                        path: path,
                                        parameters: parameters,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                        method: .post,
                                        path: path,
                                        parameters: parameters,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: POST /reviews/{subject}/{reviewId}/comments/{commentId}/complain
                            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                        }

                        final class Delete {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// path: /reviews/{subject}/{reviewId}/comments/{commentId}/complain
                        var complain: Complain { .init(server, path + "/complain") }

                        /// method: DELETE /reviews/{subject}/{reviewId}/comments/{commentId}
                        var delete: Delete { .init(server, path) }
                    }

                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case page(Int)
                            case pageSize(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .page(let value): return "page=\(value)"
                                case .pageSize(let value): return "page_size=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_CommentListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_CommentListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// path: /reviews/{subject}/{reviewId}/comments/{commentId}
                    func commentId(_ commentId: String) -> CommentId { .init(server, path + "/\(commentId)") }

                    /// method: GET /reviews/{subject}/{reviewId}/comments
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Delete {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewDeleteResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewDeleteResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Opinion: EndpointBuilder {
                    enum OpinionParam: CustomStringConvertible {
                        case like
                        case dislike
                        case _unknown(String)

                        var description: String {
                            switch self {
                            case .like: return "like"
                            case .dislike: return "dislike"
                            case ._unknown(let value): return value
                            }
                        }
                    }

                    final class Opinion: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /reviews/{subject}/{reviewId}/opinion/{opinion}
                        var post: Post { .init(server, path) }
                    }

                    /// path: /reviews/{subject}/{reviewId}/opinion/{opinion}
                    func opinion(_ opinion: OpinionParam) -> Opinion { .init(server, path + "/\(opinion)") }
                }

                final class Put {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Review, Auto_Api_ReviewSaveResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Review, Auto_Api_ReviewSaveResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Review, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Review, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Review, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Review>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Review, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Review>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// path: /reviews/{subject}/{reviewId}/comments
                var comments: Comments { .init(server, path + "/comments") }

                /// method: DELETE /reviews/{subject}/{reviewId}
                var delete: Delete { .init(server, path) }

                /// method: GET /reviews/{subject}/{reviewId}
                var get: Get { .init(server, path) }

                /// path: /reviews/{subject}/{reviewId}/opinion
                var opinion: Opinion { .init(server, path + "/opinion") }

                /// method: PUT /reviews/{subject}/{reviewId}
                var put: Put { .init(server, path) }
            }

            final class Suggest: EndpointBuilder {
                final class Useful: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_ReviewUploadUrlResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewUploadUrlResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /reviews/{subject}/suggest/useful
                    var get: Get { .init(server, path) }
                }

                /// path: /reviews/{subject}/suggest/useful
                var useful: Useful { .init(server, path + "/useful") }
            }

            final class Summary: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewsSummaryResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewsSummaryResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /reviews/{subject}/summary
                var get: Get { .init(server, path) }
            }

            /// path: /reviews/{subject}/anon-draft
            var anonDraft: AnonDraft { .init(server, path + "/anon-draft") }

            /// path: /reviews/{subject}/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// path: /reviews/{subject}/draft
            var draft: Draft { .init(server, path + "/draft") }

            /// path: /reviews/{subject}/features
            var features: Features { .init(server, path + "/features") }

            /// path: /reviews/{subject}/listing
            var listing: Listing { .init(server, path + "/listing") }

            /// path: /reviews/{subject}/photo
            var photo: Photo { .init(server, path + "/photo") }

            /// method: POST /reviews/{subject}
            var post: Post { .init(server, path) }

            /// path: /reviews/{subject}/presets
            var presets: Presets { .init(server, path + "/presets") }

            /// path: /reviews/{subject}/{reviewId}
            func reviewId(_ reviewId: String) -> ReviewId { .init(server, path + "/\(reviewId)") }

            /// path: /reviews/{subject}/suggest
            var suggest: Suggest { .init(server, path + "/suggest") }

            /// path: /reviews/{subject}/summary
            var summary: Summary { .init(server, path + "/summary") }
        }

        /// path: /reviews/{subject}
        func subject(_ subject: SubjectParam) -> Subject { .init(server, path + "/\(subject)") }
    }

    final class SafeDeal: EndpointBuilder {
        final class Deal: EndpointBuilder {
            final class Create: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_SafeDeal_Api.DealCreateRequest, Vertis_SafeDeal_Api.DealResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_SafeDeal_Api.DealCreateRequest, Vertis_SafeDeal_Api.DealResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_SafeDeal_Api.DealCreateRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_SafeDeal_Api.DealCreateRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_SafeDeal_Api.DealCreateRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_SafeDeal_Api.DealCreateRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_SafeDeal_Api.DealCreateRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_SafeDeal_Api.DealCreateRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /safe-deal/deal/create
                var post: Post { .init(server, path) }
            }

            final class Get: EndpointBuilder {
                final class DealId: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case withOffers(Bool)
                            case withPersonProfiles(Bool)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .withOffers(let value): return "with_offers=\(value)"
                                case .withPersonProfiles(let value): return "with_person_profiles=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SafeDeal_RichDealResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SafeDeal_RichDealResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /safe-deal/deal/get/{deal_id}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /safe-deal/deal/get/{deal_id}
                func dealId(_ dealId: String) -> DealId { .init(server, path + "/\(dealId)") }
            }

            final class List: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case dealNumber(Double)
                        case offerIds(String)
                        case page(Int)
                        case pageSize(Int)
                        case party(String)
                        case states(String)
                        case steps(String)
                        case withOffers(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .dealNumber(let value): return "deal_number=\(value)"
                            case .offerIds(let value): return "offer_ids=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .party(let value): return "party=\(value)"
                            case .states(let value): return "states=\(value)"
                            case .steps(let value): return "steps=\(value)"
                            case .withOffers(let value): return "with_offers=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SafeDeal_RichDealListResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SafeDeal_RichDealListResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /safe-deal/deal/list
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Update: EndpointBuilder {
                final class DealId: EndpointBuilder {
                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case withRollback(Bool)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .withRollback(let value): return "with_rollback=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Vertis_SafeDeal_Api.DealUpdateRequest, Vertis_SafeDeal_Api.DealResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Vertis_SafeDeal_Api.DealUpdateRequest, Vertis_SafeDeal_Api.DealResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Vertis_SafeDeal_Api.DealUpdateRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Vertis_SafeDeal_Api.DealUpdateRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Vertis_SafeDeal_Api.DealUpdateRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Vertis_SafeDeal_Api.DealUpdateRequest>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Vertis_SafeDeal_Api.DealUpdateRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Vertis_SafeDeal_Api.DealUpdateRequest>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /safe-deal/deal/update/{deal_id}
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                /// path: /safe-deal/deal/update/{deal_id}
                func dealId(_ dealId: String) -> DealId { .init(server, path + "/\(dealId)") }
            }

            /// path: /safe-deal/deal/create
            var create: Create { .init(server, path + "/create") }

            /// path: /safe-deal/deal/get
            var get: Get { .init(server, path + "/get") }

            /// path: /safe-deal/deal/list
            var list: List { .init(server, path + "/list") }

            /// path: /safe-deal/deal/update
            var update: Update { .init(server, path + "/update") }
        }

        /// path: /safe-deal/deal
        var deal: Deal { .init(server, path + "/deal") }
    }

    final class Salon: EndpointBuilder {
        final class ByDealerId: EndpointBuilder {
            final class DealerId: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SalonResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SalonResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /salon/by-dealer-id/{dealerId}
                var get: Get { .init(server, path) }
            }

            /// path: /salon/by-dealer-id/{dealerId}
            func dealerId(_ dealerId: String) -> DealerId { .init(server, path + "/\(dealerId)") }
        }

        final class Code: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SalonResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SalonResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Phones: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case category(String)
                        case section(String)
                        case tag(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .category(let value): return "category=\(value)"
                            case .section(let value): return "section=\(value)"
                            case .tag(let value): return "tag=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Cabinet_DealerPhones>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Cabinet_DealerPhones>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /salon/{code}/phones
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// method: GET /salon/{code}
            var get: Get { .init(server, path) }

            /// path: /salon/{code}/phones
            var phones: Phones { .init(server, path + "/phones") }
        }

        final class SalonID: EndpointBuilder {
            final class RegisterCallback: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Callback_SalonPhoneCallbackRequest, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Callback_SalonPhoneCallbackRequest, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Callback_SalonPhoneCallbackRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Callback_SalonPhoneCallbackRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Callback_SalonPhoneCallbackRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Callback_SalonPhoneCallbackRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Callback_SalonPhoneCallbackRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Callback_SalonPhoneCallbackRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /salon/{salonID}/register-callback
                var post: Post { .init(server, path) }
            }

            /// path: /salon/{salonID}/register-callback
            var registerCallback: RegisterCallback { .init(server, path + "/register-callback") }
        }

        /// path: /salon/by-dealer-id
        var byDealerId: ByDealerId { .init(server, path + "/by-dealer-id") }

        /// path: /salon/{code}
        func code(_ code: String) -> Code { .init(server, path + "/\(code)") }

        /// path: /salon/{salonID}
        func salonID(_ salonID: String) -> SalonID { .init(server, path + "/\(salonID)") }
    }

    final class Search: EndpointBuilder {
        enum CategoryParam: CustomStringConvertible {
            case cars
            case moto
            case trucks
            case _unknown(String)

            var description: String {
                switch self {
                case .cars: return "cars"
                case .moto: return "moto"
                case .trucks: return "trucks"
                case ._unknown(let value): return value
                }
            }
        }

        final class Cars: EndpointBuilder {
            final class Breadcrumbs: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case bcLookup([String])
                        case rid([Int])
                        case state([String])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .bcLookup(let value): return value.map({ "bc_lookup=\($0)" }).joined(separator: "&")
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_BreadcrumbsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_BreadcrumbsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/cars/breadcrumbs
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Count: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/cars/count
                var get: Get { .init(server, path) }
            }

            final class EquipmentFilters: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case markModelNameplate([String])
                        case onlyImportant(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .markModelNameplate(let value): return value.map({ "mark_model_nameplate=\($0)" }).joined(separator: "&")
                            case .onlyImportant(let value): return "only_important=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/cars/equipment-filters
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case accelerationFrom(Int)
                    case accelerationTo(Int)
                    case armoredStatus(String)
                    case bodyTypeGroup([String])
                    case catalogEquipment(String)
                    case catalogFilter([String])
                    case clearanceFrom(Int)
                    case clearanceTo(Int)
                    case color([String])
                    case complectationId([String])
                    case complectationName([String])
                    case configurationId(Int)
                    case context(String)
                    case creationDateFrom(Int)
                    case creationDateTo(Int)
                    case creditGroup([String])
                    case currency(String)
                    case customsStateGroup(String)
                    case damageGroup([String])
                    case dealerId(String)
                    case dealerNetId(String)
                    case dealerOrgType([Int])
                    case dealerShowcase(Bool)
                    case displacementFrom(Int)
                    case displacementTo(Int)
                    case engineGroup([String])
                    case engineType([String])
                    case exchangeGroup(String)
                    case excludeCatalogFilter([String])
                    case expFlags([String])
                    case feedingType([String])
                    case freshDateFrom(Int)
                    case freshDateTo(Int)
                    case fuelRateFrom(Double)
                    case fuelRateTo(Double)
                    case gearType([String])
                    case geoRadius(Int)
                    case groupBy([String])
                    case hasImage(Bool)
                    case inStock(String)
                    case isClear(String)
                    case kmAgeFrom(Int)
                    case kmAgeTo(Int)
                    case markModelNameplate([String])
                    case offerGrouping(String)
                    case onlyNds(Bool)
                    case ownersCountGroup(String)
                    case owningTimeGroup(String)
                    case page(Int)
                    case pageSize(Int)
                    case pinnedOfferId(String)
                    case powerFrom(Int)
                    case powerTo(Int)
                    case priceFrom(Int)
                    case priceTo(Int)
                    case ptsStatus(Int)
                    case rid([Int])
                    case searchTag([String])
                    case seatsGroup(String)
                    case sellerGroup(String)
                    case sort(String)
                    case state([String])
                    case stateGroup(String)
                    case steeringWheel(String)
                    case techParamId([String])
                    case topDays(String)
                    case transmission([String])
                    case trunkVolumeFrom(Int)
                    case trunkVolumeTo(Int)
                    case withBookingAllowed(String)
                    case withDelivery(String)
                    case withRevoked(String)
                    case withWarranty(Bool)
                    case yearFrom(Int)
                    case yearTo(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .accelerationFrom(let value): return "acceleration_from=\(value)"
                        case .accelerationTo(let value): return "acceleration_to=\(value)"
                        case .armoredStatus(let value): return "armored_status=\(value)"
                        case .bodyTypeGroup(let value): return value.map({ "body_type_group=\($0)" }).joined(separator: "&")
                        case .catalogEquipment(let value): return "catalog_equipment=\(value)"
                        case .catalogFilter(let value): return value.map({ "catalog_filter=\($0)" }).joined(separator: "&")
                        case .clearanceFrom(let value): return "clearance_from=\(value)"
                        case .clearanceTo(let value): return "clearance_to=\(value)"
                        case .color(let value): return value.map({ "color=\($0)" }).joined(separator: "&")
                        case .complectationId(let value): return value.map({ "complectation_id=\($0)" }).joined(separator: "&")
                        case .complectationName(let value): return value.map({ "complectation_name=\($0)" }).joined(separator: "&")
                        case .configurationId(let value): return "configuration_id=\(value)"
                        case .context(let value): return "context=\(value)"
                        case .creationDateFrom(let value): return "creation_date_from=\(value)"
                        case .creationDateTo(let value): return "creation_date_to=\(value)"
                        case .creditGroup(let value): return value.map({ "credit_group=\($0)" }).joined(separator: "&")
                        case .currency(let value): return "currency=\(value)"
                        case .customsStateGroup(let value): return "customs_state_group=\(value)"
                        case .damageGroup(let value): return value.map({ "damage_group=\($0)" }).joined(separator: "&")
                        case .dealerId(let value): return "dealer_id=\(value)"
                        case .dealerNetId(let value): return "dealer_net_id=\(value)"
                        case .dealerOrgType(let value): return value.map({ "dealer_org_type=\($0)" }).joined(separator: "&")
                        case .dealerShowcase(let value): return "dealer_showcase=\(value)"
                        case .displacementFrom(let value): return "displacement_from=\(value)"
                        case .displacementTo(let value): return "displacement_to=\(value)"
                        case .engineGroup(let value): return value.map({ "engine_group=\($0)" }).joined(separator: "&")
                        case .engineType(let value): return value.map({ "engine_type=\($0)" }).joined(separator: "&")
                        case .exchangeGroup(let value): return "exchange_group=\(value)"
                        case .excludeCatalogFilter(let value): return value.map({ "exclude_catalog_filter=\($0)" }).joined(separator: "&")
                        case .expFlags(let value): return value.map({ "exp_flags=\($0)" }).joined(separator: "&")
                        case .feedingType(let value): return value.map({ "feeding_type=\($0)" }).joined(separator: "&")
                        case .freshDateFrom(let value): return "fresh_date_from=\(value)"
                        case .freshDateTo(let value): return "fresh_date_to=\(value)"
                        case .fuelRateFrom(let value): return "fuel_rate_from=\(value)"
                        case .fuelRateTo(let value): return "fuel_rate_to=\(value)"
                        case .gearType(let value): return value.map({ "gear_type=\($0)" }).joined(separator: "&")
                        case .geoRadius(let value): return "geo_radius=\(value)"
                        case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                        case .hasImage(let value): return "has_image=\(value)"
                        case .inStock(let value): return "in_stock=\(value)"
                        case .isClear(let value): return "is_clear=\(value)"
                        case .kmAgeFrom(let value): return "km_age_from=\(value)"
                        case .kmAgeTo(let value): return "km_age_to=\(value)"
                        case .markModelNameplate(let value): return value.map({ "mark_model_nameplate=\($0)" }).joined(separator: "&")
                        case .offerGrouping(let value): return "offer_grouping=\(value)"
                        case .onlyNds(let value): return "only_nds=\(value)"
                        case .ownersCountGroup(let value): return "owners_count_group=\(value)"
                        case .owningTimeGroup(let value): return "owning_time_group=\(value)"
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case .pinnedOfferId(let value): return "pinned_offer_id=\(value)"
                        case .powerFrom(let value): return "power_from=\(value)"
                        case .powerTo(let value): return "power_to=\(value)"
                        case .priceFrom(let value): return "price_from=\(value)"
                        case .priceTo(let value): return "price_to=\(value)"
                        case .ptsStatus(let value): return "pts_status=\(value)"
                        case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                        case .searchTag(let value): return value.map({ "search_tag=\($0)" }).joined(separator: "&")
                        case .seatsGroup(let value): return "seats_group=\(value)"
                        case .sellerGroup(let value): return "seller_group=\(value)"
                        case .sort(let value): return "sort=\(value)"
                        case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                        case .stateGroup(let value): return "state_group=\(value)"
                        case .steeringWheel(let value): return "steering_wheel=\(value)"
                        case .techParamId(let value): return value.map({ "tech_param_id=\($0)" }).joined(separator: "&")
                        case .topDays(let value): return "top_days=\(value)"
                        case .transmission(let value): return value.map({ "transmission=\($0)" }).joined(separator: "&")
                        case .trunkVolumeFrom(let value): return "trunk_volume_from=\(value)"
                        case .trunkVolumeTo(let value): return "trunk_volume_to=\(value)"
                        case .withBookingAllowed(let value): return "with_booking_allowed=\(value)"
                        case .withDelivery(let value): return "with_delivery=\(value)"
                        case .withRevoked(let value): return "with_revoked=\(value)"
                        case .withWarranty(let value): return "with_warranty=\(value)"
                        case .yearFrom(let value): return "year_from=\(value)"
                        case .yearTo(let value): return "year_to=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Histogram: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case complectationId(Int)
                        case configurationId(Int)
                        case mark(String)
                        case model(String)
                        case nCount(Int)
                        case rid(Int)
                        case techParamId(Int)
                        case year(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .complectationId(let value): return "complectation_id=\(value)"
                            case .configurationId(let value): return "configuration_id=\(value)"
                            case .mark(let value): return "mark=\(value)"
                            case .model(let value): return "model=\(value)"
                            case .nCount(let value): return "n_count=\(value)"
                            case .rid(let value): return "rid=\(value)"
                            case .techParamId(let value): return "tech_param_id=\(value)"
                            case .year(let value): return "year=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_PriceHistogramResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_PriceHistogramResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/cars/histogram
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class NewCard: EndpointBuilder {
                final class Related: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case groupingId(String)
                            case page(Int)
                            case pageSize(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .groupingId(let value): return "grouping_id=\(value)"
                                case .page(let value): return "page=\(value)"
                                case .pageSize(let value): return "page_size=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case page(Int)
                            case pageSize(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .page(let value): return "page=\(value)"
                                case .pageSize(let value): return "page_size=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /search/cars/new-card/related
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                    /// method: POST /search/cars/new-card/related
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                /// path: /search/cars/new-card/related
                var related: Related { .init(server, path + "/related") }
            }

            final class Post {
                enum QueryParameter: EndpointQueryParameter {
                    case context(String)
                    case groupBy([String])
                    case page(Int)
                    case pageSize(Int)
                    case sort(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .context(let value): return "context=\(value)"
                        case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case .sort(let value): return "sort=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Statistics: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case accelerationFrom(Int)
                        case accelerationTo(Int)
                        case armoredStatus(String)
                        case bodyTypeGroup([String])
                        case catalogEquipment(String)
                        case catalogFilter([String])
                        case clearanceFrom(Int)
                        case clearanceTo(Int)
                        case color([String])
                        case complectationId([String])
                        case complectationName([String])
                        case configurationId(Int)
                        case creationDateFrom(Int)
                        case creationDateTo(Int)
                        case creditGroup([String])
                        case currency(String)
                        case customsStateGroup(String)
                        case damageGroup([String])
                        case dealerId(String)
                        case dealerNetId(String)
                        case dealerOrgType([Int])
                        case dealerShowcase(Bool)
                        case displacementFrom(Int)
                        case displacementTo(Int)
                        case engineGroup([String])
                        case engineType([String])
                        case exchangeGroup(String)
                        case excludeCatalogFilter([String])
                        case expFlags([String])
                        case feedingType([String])
                        case freshDateFrom(Int)
                        case freshDateTo(Int)
                        case fuelRateFrom(Double)
                        case fuelRateTo(Double)
                        case gearType([String])
                        case geoRadius(Int)
                        case groupBy([String])
                        case hasImage(Bool)
                        case inStock(String)
                        case isClear(String)
                        case kmAgeFrom(Int)
                        case kmAgeTo(Int)
                        case markModelNameplate([String])
                        case offerGrouping(String)
                        case onlyNds(Bool)
                        case ownersCountGroup(String)
                        case owningTimeGroup(String)
                        case page(Int)
                        case pageSize(Int)
                        case pinnedOfferId(String)
                        case powerFrom(Int)
                        case powerTo(Int)
                        case priceFrom(Int)
                        case priceTo(Int)
                        case ptsStatus(Int)
                        case rid([Int])
                        case searchTag([String])
                        case seatsGroup(String)
                        case sellerGroup(String)
                        case sort(String)
                        case state([String])
                        case stateGroup(String)
                        case steeringWheel(String)
                        case techParamId([String])
                        case topDays(String)
                        case transmission([String])
                        case trunkVolumeFrom(Int)
                        case trunkVolumeTo(Int)
                        case withBookingAllowed(String)
                        case withDelivery(String)
                        case withRevoked(String)
                        case withWarranty(Bool)
                        case yearFrom(Int)
                        case yearTo(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .accelerationFrom(let value): return "acceleration_from=\(value)"
                            case .accelerationTo(let value): return "acceleration_to=\(value)"
                            case .armoredStatus(let value): return "armored_status=\(value)"
                            case .bodyTypeGroup(let value): return value.map({ "body_type_group=\($0)" }).joined(separator: "&")
                            case .catalogEquipment(let value): return "catalog_equipment=\(value)"
                            case .catalogFilter(let value): return value.map({ "catalog_filter=\($0)" }).joined(separator: "&")
                            case .clearanceFrom(let value): return "clearance_from=\(value)"
                            case .clearanceTo(let value): return "clearance_to=\(value)"
                            case .color(let value): return value.map({ "color=\($0)" }).joined(separator: "&")
                            case .complectationId(let value): return value.map({ "complectation_id=\($0)" }).joined(separator: "&")
                            case .complectationName(let value): return value.map({ "complectation_name=\($0)" }).joined(separator: "&")
                            case .configurationId(let value): return "configuration_id=\(value)"
                            case .creationDateFrom(let value): return "creation_date_from=\(value)"
                            case .creationDateTo(let value): return "creation_date_to=\(value)"
                            case .creditGroup(let value): return value.map({ "credit_group=\($0)" }).joined(separator: "&")
                            case .currency(let value): return "currency=\(value)"
                            case .customsStateGroup(let value): return "customs_state_group=\(value)"
                            case .damageGroup(let value): return value.map({ "damage_group=\($0)" }).joined(separator: "&")
                            case .dealerId(let value): return "dealer_id=\(value)"
                            case .dealerNetId(let value): return "dealer_net_id=\(value)"
                            case .dealerOrgType(let value): return value.map({ "dealer_org_type=\($0)" }).joined(separator: "&")
                            case .dealerShowcase(let value): return "dealer_showcase=\(value)"
                            case .displacementFrom(let value): return "displacement_from=\(value)"
                            case .displacementTo(let value): return "displacement_to=\(value)"
                            case .engineGroup(let value): return value.map({ "engine_group=\($0)" }).joined(separator: "&")
                            case .engineType(let value): return value.map({ "engine_type=\($0)" }).joined(separator: "&")
                            case .exchangeGroup(let value): return "exchange_group=\(value)"
                            case .excludeCatalogFilter(let value): return value.map({ "exclude_catalog_filter=\($0)" }).joined(separator: "&")
                            case .expFlags(let value): return value.map({ "exp_flags=\($0)" }).joined(separator: "&")
                            case .feedingType(let value): return value.map({ "feeding_type=\($0)" }).joined(separator: "&")
                            case .freshDateFrom(let value): return "fresh_date_from=\(value)"
                            case .freshDateTo(let value): return "fresh_date_to=\(value)"
                            case .fuelRateFrom(let value): return "fuel_rate_from=\(value)"
                            case .fuelRateTo(let value): return "fuel_rate_to=\(value)"
                            case .gearType(let value): return value.map({ "gear_type=\($0)" }).joined(separator: "&")
                            case .geoRadius(let value): return "geo_radius=\(value)"
                            case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                            case .hasImage(let value): return "has_image=\(value)"
                            case .inStock(let value): return "in_stock=\(value)"
                            case .isClear(let value): return "is_clear=\(value)"
                            case .kmAgeFrom(let value): return "km_age_from=\(value)"
                            case .kmAgeTo(let value): return "km_age_to=\(value)"
                            case .markModelNameplate(let value): return value.map({ "mark_model_nameplate=\($0)" }).joined(separator: "&")
                            case .offerGrouping(let value): return "offer_grouping=\(value)"
                            case .onlyNds(let value): return "only_nds=\(value)"
                            case .ownersCountGroup(let value): return "owners_count_group=\(value)"
                            case .owningTimeGroup(let value): return "owning_time_group=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .pinnedOfferId(let value): return "pinned_offer_id=\(value)"
                            case .powerFrom(let value): return "power_from=\(value)"
                            case .powerTo(let value): return "power_to=\(value)"
                            case .priceFrom(let value): return "price_from=\(value)"
                            case .priceTo(let value): return "price_to=\(value)"
                            case .ptsStatus(let value): return "pts_status=\(value)"
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case .searchTag(let value): return value.map({ "search_tag=\($0)" }).joined(separator: "&")
                            case .seatsGroup(let value): return "seats_group=\(value)"
                            case .sellerGroup(let value): return "seller_group=\(value)"
                            case .sort(let value): return "sort=\(value)"
                            case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                            case .stateGroup(let value): return "state_group=\(value)"
                            case .steeringWheel(let value): return "steering_wheel=\(value)"
                            case .techParamId(let value): return value.map({ "tech_param_id=\($0)" }).joined(separator: "&")
                            case .topDays(let value): return "top_days=\(value)"
                            case .transmission(let value): return value.map({ "transmission=\($0)" }).joined(separator: "&")
                            case .trunkVolumeFrom(let value): return "trunk_volume_from=\(value)"
                            case .trunkVolumeTo(let value): return "trunk_volume_to=\(value)"
                            case .withBookingAllowed(let value): return "with_booking_allowed=\(value)"
                            case .withDelivery(let value): return "with_delivery=\(value)"
                            case .withRevoked(let value): return "with_revoked=\(value)"
                            case .withWarranty(let value): return "with_warranty=\(value)"
                            case .yearFrom(let value): return "year_from=\(value)"
                            case .yearTo(let value): return "year_to=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/cars/statistics
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /search/cars/breadcrumbs
            var breadcrumbs: Breadcrumbs { .init(server, path + "/breadcrumbs") }

            /// path: /search/cars/count
            var count: Count { .init(server, path + "/count") }

            /// path: /search/cars/equipment-filters
            var equipmentFilters: EquipmentFilters { .init(server, path + "/equipment-filters") }

            /// method: GET /search/cars
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

            /// path: /search/cars/histogram
            var histogram: Histogram { .init(server, path + "/histogram") }

            /// path: /search/cars/new-card
            var newCard: NewCard { .init(server, path + "/new-card") }

            /// method: POST /search/cars
            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }

            /// path: /search/cars/statistics
            var statistics: Statistics { .init(server, path + "/statistics") }
        }

        final class Category: EndpointBuilder {
            final class Context: EndpointBuilder {
                final class PremiumNewCars: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case page(Int)
                            case pageSize(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .page(let value): return "page=\(value)"
                                case .pageSize(let value): return "page_size=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case page(Int)
                            case pageSize(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .page(let value): return "page=\(value)"
                                case .pageSize(let value): return "page_size=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /search/{category}/context/premium-new-cars
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                    /// method: POST /search/{category}/context/premium-new-cars
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                final class RecommendNewInStock: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case groupBy([String])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case groupBy([String])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /search/{category}/context/recommend-new-in-stock
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                    /// method: POST /search/{category}/context/recommend-new-in-stock
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                final class SameButNew: EndpointBuilder {
                    final class OfferId: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case filterGroups(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .filterGroups(let value): return "filter_groups=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /search/{category}/context/same-but-new/{offerId}
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    /// path: /search/{category}/context/same-but-new/{offerId}
                    func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
                }

                /// path: /search/{category}/context/premium-new-cars
                var premiumNewCars: PremiumNewCars { .init(server, path + "/premium-new-cars") }

                /// path: /search/{category}/context/recommend-new-in-stock
                var recommendNewInStock: RecommendNewInStock { .init(server, path + "/recommend-new-in-stock") }

                /// path: /search/{category}/context/same-but-new
                var sameButNew: SameButNew { .init(server, path + "/same-but-new") }
            }

            final class History: EndpointBuilder {
                final class Put {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .put,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: PUT /search/{category}/history
                var put: Put { .init(server, path) }
            }

            final class MarkModelFilters: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/{category}/mark-model-filters
                var get: Get { .init(server, path) }
            }

            final class OfferLocatorCounters: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case groupBy([String])
                        case pageSize(Int)
                        case rid([String])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                            case .pageSize(let value): return "page_size=\(value)"
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferLocatorCounterResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferLocatorCounterResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/{category}/offer-locator-counters
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class PriceRangeFilters: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /search/{category}/price-range-filters
                var post: Post { .init(server, path) }
            }

            final class Related: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case auctionRelated(Bool)
                        case catalogFilter([String])
                        case dealerId(String)
                        case groupBy([String])
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .auctionRelated(let value): return "auction_related=\(value)"
                            case .catalogFilter(let value): return value.map({ "catalog_filter=\($0)" }).joined(separator: "&")
                            case .dealerId(let value): return "dealer_id=\(value)"
                            case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Post {
                    enum QueryParameter: EndpointQueryParameter {
                        case auctionRelated(Bool)
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .auctionRelated(let value): return "auction_related=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/{category}/related
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                /// method: POST /search/{category}/related
                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
            }

            final class Specials: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Post {
                    enum QueryParameter: EndpointQueryParameter {
                        case page(Int)
                        case pageSize(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/{category}/specials
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                /// method: POST /search/{category}/specials
                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
            }

            /// path: /search/{category}/context
            var context: Context { .init(server, path + "/context") }

            /// path: /search/{category}/history
            var history: History { .init(server, path + "/history") }

            /// path: /search/{category}/mark-model-filters
            var markModelFilters: MarkModelFilters { .init(server, path + "/mark-model-filters") }

            /// path: /search/{category}/offer-locator-counters
            var offerLocatorCounters: OfferLocatorCounters { .init(server, path + "/offer-locator-counters") }

            /// path: /search/{category}/price-range-filters
            var priceRangeFilters: PriceRangeFilters { .init(server, path + "/price-range-filters") }

            /// path: /search/{category}/related
            var related: Related { .init(server, path + "/related") }

            /// path: /search/{category}/specials
            var specials: Specials { .init(server, path + "/specials") }
        }

        final class History: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SavedSearchesListing>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SavedSearchesListing>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /search/history
            var get: Get { .init(server, path) }
        }

        final class Moto: EndpointBuilder {
            final class Breadcrumbs: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case bcLookup([String])
                        case rid([Int])
                        case state([String])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .bcLookup(let value): return value.map({ "bc_lookup=\($0)" }).joined(separator: "&")
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_BreadcrumbsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_BreadcrumbsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/moto/breadcrumbs
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Count: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/moto/count
                var get: Get { .init(server, path) }
            }

            final class CountCategories: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case dealerId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .dealerId(let value): return "dealer_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/moto/count-categories
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case atvType([String])
                    case color([String])
                    case context(String)
                    case creationDateFrom(Int)
                    case creationDateTo(Int)
                    case currency(String)
                    case customStateKey([String])
                    case customsStateGroup(String)
                    case cylinders([String])
                    case cylindersType([String])
                    case dealerOrgType([Int])
                    case displacementFrom(Int)
                    case displacementTo(Int)
                    case engineType([String])
                    case exchangeGroup(String)
                    case exchangeStatus([String])
                    case gearType([String])
                    case geoRadius(Int)
                    case hasImage(Bool)
                    case inStock(String)
                    case kmAgeFrom(Int)
                    case kmAgeTo(Int)
                    case markModelNameplate([String])
                    case motoCategory(String)
                    case motoType([String])
                    case onlyNds(Bool)
                    case page(Int)
                    case pageSize(Int)
                    case pinnedOfferId(String)
                    case powerFrom(Int)
                    case powerTo(Int)
                    case priceFrom(Int)
                    case priceTo(Int)
                    case rid([Int])
                    case sellerGroup(String)
                    case snowmobileType([String])
                    case sort(String)
                    case state([String])
                    case stateGroup(String)
                    case strokes([String])
                    case topDays(String)
                    case transmission([String])
                    case withBookingAllowed(String)
                    case withDelivery(String)
                    case yearFrom(Int)
                    case yearTo(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .atvType(let value): return value.map({ "atv_type=\($0)" }).joined(separator: "&")
                        case .color(let value): return value.map({ "color=\($0)" }).joined(separator: "&")
                        case .context(let value): return "context=\(value)"
                        case .creationDateFrom(let value): return "creation_date_from=\(value)"
                        case .creationDateTo(let value): return "creation_date_to=\(value)"
                        case .currency(let value): return "currency=\(value)"
                        case .customStateKey(let value): return value.map({ "custom_state_key=\($0)" }).joined(separator: "&")
                        case .customsStateGroup(let value): return "customs_state_group=\(value)"
                        case .cylinders(let value): return value.map({ "cylinders=\($0)" }).joined(separator: "&")
                        case .cylindersType(let value): return value.map({ "cylinders_type=\($0)" }).joined(separator: "&")
                        case .dealerOrgType(let value): return value.map({ "dealer_org_type=\($0)" }).joined(separator: "&")
                        case .displacementFrom(let value): return "displacement_from=\(value)"
                        case .displacementTo(let value): return "displacement_to=\(value)"
                        case .engineType(let value): return value.map({ "engine_type=\($0)" }).joined(separator: "&")
                        case .exchangeGroup(let value): return "exchange_group=\(value)"
                        case .exchangeStatus(let value): return value.map({ "exchange_status=\($0)" }).joined(separator: "&")
                        case .gearType(let value): return value.map({ "gear_type=\($0)" }).joined(separator: "&")
                        case .geoRadius(let value): return "geo_radius=\(value)"
                        case .hasImage(let value): return "has_image=\(value)"
                        case .inStock(let value): return "in_stock=\(value)"
                        case .kmAgeFrom(let value): return "km_age_from=\(value)"
                        case .kmAgeTo(let value): return "km_age_to=\(value)"
                        case .markModelNameplate(let value): return value.map({ "mark_model_nameplate=\($0)" }).joined(separator: "&")
                        case .motoCategory(let value): return "moto_category=\(value)"
                        case .motoType(let value): return value.map({ "moto_type=\($0)" }).joined(separator: "&")
                        case .onlyNds(let value): return "only_nds=\(value)"
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case .pinnedOfferId(let value): return "pinned_offer_id=\(value)"
                        case .powerFrom(let value): return "power_from=\(value)"
                        case .powerTo(let value): return "power_to=\(value)"
                        case .priceFrom(let value): return "price_from=\(value)"
                        case .priceTo(let value): return "price_to=\(value)"
                        case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                        case .sellerGroup(let value): return "seller_group=\(value)"
                        case .snowmobileType(let value): return value.map({ "snowmobile_type=\($0)" }).joined(separator: "&")
                        case .sort(let value): return "sort=\(value)"
                        case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                        case .stateGroup(let value): return "state_group=\(value)"
                        case .strokes(let value): return value.map({ "strokes=\($0)" }).joined(separator: "&")
                        case .topDays(let value): return "top_days=\(value)"
                        case .transmission(let value): return value.map({ "transmission=\($0)" }).joined(separator: "&")
                        case .withBookingAllowed(let value): return "with_booking_allowed=\(value)"
                        case .withDelivery(let value): return "with_delivery=\(value)"
                        case .yearFrom(let value): return "year_from=\(value)"
                        case .yearTo(let value): return "year_to=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Post {
                enum QueryParameter: EndpointQueryParameter {
                    case context(String)
                    case page(Int)
                    case pageSize(Int)
                    case sort(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .context(let value): return "context=\(value)"
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case .sort(let value): return "sort=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /search/moto/breadcrumbs
            var breadcrumbs: Breadcrumbs { .init(server, path + "/breadcrumbs") }

            /// path: /search/moto/count
            var count: Count { .init(server, path + "/count") }

            /// path: /search/moto/count-categories
            var countCategories: CountCategories { .init(server, path + "/count-categories") }

            /// method: GET /search/moto
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

            /// method: POST /search/moto
            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
        }

        final class Saved: EndpointBuilder {
            final class SearchId: EndpointBuilder {
                final class Count: EndpointBuilder {
                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case sort(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .sort(let value): return "sort=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferCountResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferCountResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /search/saved/{searchId}/count
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                }

                final class Post {
                    enum QueryParameter: EndpointQueryParameter {
                        case groupBy([String])
                        case page(Int)
                        case pageSize(Int)
                        case sort(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .groupBy(let value): return value.map({ "group_by=\($0)" }).joined(separator: "&")
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .sort(let value): return "sort=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// path: /search/saved/{searchId}/count
                var count: Count { .init(server, path + "/count") }

                /// method: POST /search/saved/{searchId}
                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
            }

            /// path: /search/saved/{searchId}
            func searchId(_ searchId: String) -> SearchId { .init(server, path + "/\(searchId)") }
        }

        final class Trucks: EndpointBuilder {
            final class Breadcrumbs: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case bcLookup([String])
                        case rid([Int])
                        case state([String])
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .bcLookup(let value): return value.map({ "bc_lookup=\($0)" }).joined(separator: "&")
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_BreadcrumbsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_BreadcrumbsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/trucks/breadcrumbs
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Count: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/trucks/count
                var get: Get { .init(server, path) }
            }

            final class CountCategories: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case dealerId(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .dealerId(let value): return "dealer_id=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /search/trucks/count-categories
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case agriculturalType([String])
                    case autoloaderType([String])
                    case axisFrom(Int)
                    case axisTo(Int)
                    case brakeType([String])
                    case bulldozerType([String])
                    case busType([String])
                    case cabinKey([String])
                    case catalogEquipment([String])
                    case color([String])
                    case constructionType([String])
                    case context(String)
                    case creationDateFrom(Int)
                    case creationDateTo(Int)
                    case currency(String)
                    case dealerOrgType([Int])
                    case displacementFrom(Int)
                    case displacementTo(Int)
                    case dredgeType([String])
                    case engineType([String])
                    case euroClass([String])
                    case exchangeGroup(String)
                    case gearType([String])
                    case geoRadius(Int)
                    case haggle(String)
                    case hasImage(Bool)
                    case inStock(String)
                    case kmAgeFrom(Int)
                    case kmAgeTo(Int)
                    case lightTruckType([String])
                    case loadingFrom(Int)
                    case loadingTo(Int)
                    case markModelNameplate([String])
                    case municipalType([String])
                    case onlyNds(Bool)
                    case page(Int)
                    case pageSize(Int)
                    case pinnedOfferId(String)
                    case powerFrom(Int)
                    case powerTo(Int)
                    case priceFrom(Int)
                    case priceTo(Int)
                    case rid([Int])
                    case saddleHeight([String])
                    case seatsFrom(Int)
                    case seatsTo(Int)
                    case sellerGroup(String)
                    case sort(String)
                    case state([String])
                    case stateGroup(String)
                    case steeringWheel(String)
                    case suspensionCabin([String])
                    case suspensionChassis([String])
                    case suspensionType([String])
                    case trailerType([String])
                    case transmission([String])
                    case truckType([String])
                    case trucksCategory(String)
                    case wheelDrive([String])
                    case withBookingAllowed(String)
                    case withDelivery(String)
                    case yearFrom(Int)
                    case yearTo(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .agriculturalType(let value): return value.map({ "agricultural_type=\($0)" }).joined(separator: "&")
                        case .autoloaderType(let value): return value.map({ "autoloader_type=\($0)" }).joined(separator: "&")
                        case .axisFrom(let value): return "axis_from=\(value)"
                        case .axisTo(let value): return "axis_to=\(value)"
                        case .brakeType(let value): return value.map({ "brake_type=\($0)" }).joined(separator: "&")
                        case .bulldozerType(let value): return value.map({ "bulldozer_type=\($0)" }).joined(separator: "&")
                        case .busType(let value): return value.map({ "bus_type=\($0)" }).joined(separator: "&")
                        case .cabinKey(let value): return value.map({ "cabin_key=\($0)" }).joined(separator: "&")
                        case .catalogEquipment(let value): return value.map({ "catalog_equipment=\($0)" }).joined(separator: "&")
                        case .color(let value): return value.map({ "color=\($0)" }).joined(separator: "&")
                        case .constructionType(let value): return value.map({ "construction_type=\($0)" }).joined(separator: "&")
                        case .context(let value): return "context=\(value)"
                        case .creationDateFrom(let value): return "creation_date_from=\(value)"
                        case .creationDateTo(let value): return "creation_date_to=\(value)"
                        case .currency(let value): return "currency=\(value)"
                        case .dealerOrgType(let value): return value.map({ "dealer_org_type=\($0)" }).joined(separator: "&")
                        case .displacementFrom(let value): return "displacement_from=\(value)"
                        case .displacementTo(let value): return "displacement_to=\(value)"
                        case .dredgeType(let value): return value.map({ "dredge_type=\($0)" }).joined(separator: "&")
                        case .engineType(let value): return value.map({ "engine_type=\($0)" }).joined(separator: "&")
                        case .euroClass(let value): return value.map({ "euro_class=\($0)" }).joined(separator: "&")
                        case .exchangeGroup(let value): return "exchange_group=\(value)"
                        case .gearType(let value): return value.map({ "gear_type=\($0)" }).joined(separator: "&")
                        case .geoRadius(let value): return "geo_radius=\(value)"
                        case .haggle(let value): return "haggle=\(value)"
                        case .hasImage(let value): return "has_image=\(value)"
                        case .inStock(let value): return "in_stock=\(value)"
                        case .kmAgeFrom(let value): return "km_age_from=\(value)"
                        case .kmAgeTo(let value): return "km_age_to=\(value)"
                        case .lightTruckType(let value): return value.map({ "light_truck_type=\($0)" }).joined(separator: "&")
                        case .loadingFrom(let value): return "loading_from=\(value)"
                        case .loadingTo(let value): return "loading_to=\(value)"
                        case .markModelNameplate(let value): return value.map({ "mark_model_nameplate=\($0)" }).joined(separator: "&")
                        case .municipalType(let value): return value.map({ "municipal_type=\($0)" }).joined(separator: "&")
                        case .onlyNds(let value): return "only_nds=\(value)"
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case .pinnedOfferId(let value): return "pinned_offer_id=\(value)"
                        case .powerFrom(let value): return "power_from=\(value)"
                        case .powerTo(let value): return "power_to=\(value)"
                        case .priceFrom(let value): return "price_from=\(value)"
                        case .priceTo(let value): return "price_to=\(value)"
                        case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                        case .saddleHeight(let value): return value.map({ "saddle_height=\($0)" }).joined(separator: "&")
                        case .seatsFrom(let value): return "seats_from=\(value)"
                        case .seatsTo(let value): return "seats_to=\(value)"
                        case .sellerGroup(let value): return "seller_group=\(value)"
                        case .sort(let value): return "sort=\(value)"
                        case .state(let value): return value.map({ "state=\($0)" }).joined(separator: "&")
                        case .stateGroup(let value): return "state_group=\(value)"
                        case .steeringWheel(let value): return "steering_wheel=\(value)"
                        case .suspensionCabin(let value): return value.map({ "suspension_cabin=\($0)" }).joined(separator: "&")
                        case .suspensionChassis(let value): return value.map({ "suspension_chassis=\($0)" }).joined(separator: "&")
                        case .suspensionType(let value): return value.map({ "suspension_type=\($0)" }).joined(separator: "&")
                        case .trailerType(let value): return value.map({ "trailer_type=\($0)" }).joined(separator: "&")
                        case .transmission(let value): return value.map({ "transmission=\($0)" }).joined(separator: "&")
                        case .truckType(let value): return value.map({ "truck_type=\($0)" }).joined(separator: "&")
                        case .trucksCategory(let value): return "trucks_category=\(value)"
                        case .wheelDrive(let value): return value.map({ "wheel_drive=\($0)" }).joined(separator: "&")
                        case .withBookingAllowed(let value): return "with_booking_allowed=\(value)"
                        case .withDelivery(let value): return "with_delivery=\(value)"
                        case .yearFrom(let value): return "year_from=\(value)"
                        case .yearTo(let value): return "year_to=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Post {
                enum QueryParameter: EndpointQueryParameter {
                    case context(String)
                    case page(Int)
                    case pageSize(Int)
                    case sort(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .context(let value): return "context=\(value)"
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case .sort(let value): return "sort=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_OfferListingResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                        method: .post,
                        path: path,
                        parameters: parameters,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /search/trucks/breadcrumbs
            var breadcrumbs: Breadcrumbs { .init(server, path + "/breadcrumbs") }

            /// path: /search/trucks/count
            var count: Count { .init(server, path + "/count") }

            /// path: /search/trucks/count-categories
            var countCategories: CountCategories { .init(server, path + "/count-categories") }

            /// method: GET /search/trucks
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

            /// method: POST /search/trucks
            func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
        }

        /// path: /search/cars
        var cars: Cars { .init(server, path + "/cars") }

        /// path: /search/{category}
        func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

        /// path: /search/history
        var history: History { .init(server, path + "/history") }

        /// path: /search/moto
        var moto: Moto { .init(server, path + "/moto") }

        /// path: /search/saved
        var saved: Saved { .init(server, path + "/saved") }

        /// path: /search/trucks
        var trucks: Trucks { .init(server, path + "/trucks") }
    }

    final class Searchline: EndpointBuilder {
        final class History: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case trucks
                case moto
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .trucks: return "trucks"
                    case .moto: return "moto"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SearchlineHistoryListing>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SearchlineHistoryListing>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Post {
                    enum QueryParameter: EndpointQueryParameter {
                        case isPlainText(Bool)
                        case query(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .isPlainText(let value): return "is_plain_text=\(value)"
                            case .query(let value): return "query=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Search_SearchRequestParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Search_SearchRequestParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Search_SearchRequestParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Search_SearchRequestParameters>(
                            method: .post,
                            path: path,
                            parameters: parameters,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /searchline/history/{category}
                var get: Get { .init(server, path) }

                /// method: POST /searchline/history/{category}
                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
            }

            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SearchlineHistoryListing>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SearchlineHistoryListing>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /searchline/history/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// method: GET /searchline/history
            var get: Get { .init(server, path) }
        }

        final class Suggest: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case trucks
                case moto
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .trucks: return "trucks"
                    case .moto: return "moto"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case query(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .query(let value): return "query=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SearchSuggestResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SearchSuggestResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /searchline/suggest/{category}
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case query(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .query(let value): return "query=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_SearchSuggestResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SearchSuggestResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /searchline/suggest/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// method: GET /searchline/suggest
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /searchline/history
        var history: History { .init(server, path + "/history") }

        /// path: /searchline/suggest
        var suggest: Suggest { .init(server, path + "/suggest") }
    }

    final class Session: EndpointBuilder {
        final class Get {
            fileprivate let server: StubServer
            fileprivate let path: String

            fileprivate init(_ server: StubServer, _ path: String) {
                self.server = server
                self.path = path
            }

            func ok(
                mock: MockSource<StubProtobufMessage, Vertis_Passport_SessionResult>
            ) {
                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Vertis_Passport_SessionResult>(
                    responseCode: ._200,
                    method: .get,
                    path: path,
                    parameters: nil,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func error<Response: SwiftProtobuf.Message>(
                status: HTTPResponseStatus = ._400,
                mock: MockSource<StubProtobufMessage, Response>
            ) {
                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                    responseCode: status,
                    method: .get,
                    path: path,
                    parameters: nil,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func expect(
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                    method: .get,
                    path: path,
                    parameters: nil,
                    checker: nil,
                    isInverted: false
                )
                return expectation.make(with: server)
            }

            func notExpect(
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                    method: .get,
                    path: path,
                    parameters: nil,
                    checker: nil,
                    isInverted: true
                )
                return expectation.make(with: server)
            }
        }

        /// method: GET /session
        var get: Get { .init(server, path) }
    }

    final class Shark: EndpointBuilder {
        final class CreditApplication: EndpointBuilder {
            final class Active: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case withOffers(Bool)
                        case withPersonProfiles(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .withOffers(let value): return "with_offers=\(value)"
                            case .withPersonProfiles(let value): return "with_person_profiles=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Shark_RichCreditApplicationResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Shark_RichCreditApplicationResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /shark/credit-application/active
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class CallCenter: EndpointBuilder {
                final class CreditApplicationId: EndpointBuilder {
                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: PUT /shark/credit-application/call-center/{credit_application_id}
                    var put: Put { .init(server, path) }
                }

                /// path: /shark/credit-application/call-center/{credit_application_id}
                func creditApplicationId(_ creditApplicationId: String) -> CreditApplicationId { .init(server, path + "/\(creditApplicationId)") }
            }

            final class CancelProducts: EndpointBuilder {
                final class CreditApplicationId: EndpointBuilder {
                    final class Delete {
                        enum QueryParameter: EndpointQueryParameter {
                            case creditProductIds(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .creditProductIds(let value): return "credit_product_ids=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /shark/credit-application/cancel-products/{credit_application_id}
                    func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }
                }

                /// path: /shark/credit-application/cancel-products/{credit_application_id}
                func creditApplicationId(_ creditApplicationId: String) -> CreditApplicationId { .init(server, path + "/\(creditApplicationId)") }
            }

            final class Create: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_Shark_CreditApplicationSource, Vertis_Shark_Api.CreditApplicationResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource, Vertis_Shark_Api.CreditApplicationResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_Shark_CreditApplicationSource, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_Shark_CreditApplicationSource, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_Shark_CreditApplicationSource, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /shark/credit-application/create
                var post: Post { .init(server, path) }
            }

            final class Get: EndpointBuilder {
                final class CreditApplicationId: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case withOffers(Bool)
                            case withPersonProfiles(Bool)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .withOffers(let value): return "with_offers=\(value)"
                                case .withPersonProfiles(let value): return "with_person_profiles=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_Shark_RichCreditApplicationResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Shark_RichCreditApplicationResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /shark/credit-application/get/{credit_application_id}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /shark/credit-application/get/{credit_application_id}
                func creditApplicationId(_ creditApplicationId: String) -> CreditApplicationId { .init(server, path + "/\(creditApplicationId)") }
            }

            final class List: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case page(Int)
                        case pageSize(Int)
                        case withOffers(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .withOffers(let value): return "with_offers=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_Shark_RichCreditApplicationsResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_Shark_RichCreditApplicationsResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /shark/credit-application/list
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            final class NotificationSubscriptions: EndpointBuilder {
                final class CreditApplicationId: EndpointBuilder {
                    final class Delete {
                        enum QueryParameter: EndpointQueryParameter {
                            case channels(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .channels(let value): return "channels=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        enum QueryParameter: EndpointQueryParameter {
                            case channels(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .channels(let value): return "channels=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /shark/credit-application/notification-subscriptions/{credit_application_id}
                    func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }

                    /// method: PUT /shark/credit-application/notification-subscriptions/{credit_application_id}
                    func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
                }

                /// path: /shark/credit-application/notification-subscriptions/{credit_application_id}
                func creditApplicationId(_ creditApplicationId: String) -> CreditApplicationId { .init(server, path + "/\(creditApplicationId)") }
            }

            final class Update: EndpointBuilder {
                final class CreditApplicationId: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Vertis_Shark_CreditApplicationSource, Vertis_Shark_Api.CreditApplicationResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource, Vertis_Shark_Api.CreditApplicationResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Vertis_Shark_CreditApplicationSource, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Vertis_Shark_CreditApplicationSource, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Vertis_Shark_CreditApplicationSource, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_CreditApplicationSource>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /shark/credit-application/update/{credit_application_id}
                    var post: Post { .init(server, path) }
                }

                /// path: /shark/credit-application/update/{credit_application_id}
                func creditApplicationId(_ creditApplicationId: String) -> CreditApplicationId { .init(server, path + "/\(creditApplicationId)") }
            }

            /// path: /shark/credit-application/active
            var active: Active { .init(server, path + "/active") }

            /// path: /shark/credit-application/call-center
            var callCenter: CallCenter { .init(server, path + "/call-center") }

            /// path: /shark/credit-application/cancel-products
            var cancelProducts: CancelProducts { .init(server, path + "/cancel-products") }

            /// path: /shark/credit-application/create
            var create: Create { .init(server, path + "/create") }

            /// path: /shark/credit-application/get
            var get: Get { .init(server, path + "/get") }

            /// path: /shark/credit-application/list
            var list: List { .init(server, path + "/list") }

            /// path: /shark/credit-application/notification-subscriptions
            var notificationSubscriptions: NotificationSubscriptions { .init(server, path + "/notification-subscriptions") }

            /// path: /shark/credit-application/update
            var update: Update { .init(server, path + "/update") }
        }

        final class CreditProduct: EndpointBuilder {
            final class Calculator: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_Shark_Api.CreditProductsRequest, Auto_Api_Shark_CalculatorResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest, Auto_Api_Shark_CalculatorResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_Shark_Api.CreditProductsRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_Shark_Api.CreditProductsRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_Shark_Api.CreditProductsRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /shark/credit-product/calculator
                var post: Post { .init(server, path) }
            }

            final class List: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_Shark_Api.CreditProductsRequest, Auto_Api_Shark_RichCreditProductsResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest, Auto_Api_Shark_RichCreditProductsResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_Shark_Api.CreditProductsRequest, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_Shark_Api.CreditProductsRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_Shark_Api.CreditProductsRequest, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Shark_Api.CreditProductsRequest>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /shark/credit-product/list
                var post: Post { .init(server, path) }
            }

            /// path: /shark/credit-product/calculator
            var calculator: Calculator { .init(server, path + "/calculator") }

            /// path: /shark/credit-product/list
            var list: List { .init(server, path + "/list") }
        }

        final class Integration: EndpointBuilder {
            final class Sberbank: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /shark/integration/sberbank
                var post: Post { .init(server, path) }
            }

            final class Vtb: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /shark/integration/vtb
                var post: Post { .init(server, path) }
            }

            /// path: /shark/integration/sberbank
            var sberbank: Sberbank { .init(server, path + "/sberbank") }

            /// path: /shark/integration/vtb
            var vtb: Vtb { .init(server, path + "/vtb") }
        }

        final class User: EndpointBuilder {
            final class NotificationSubscriptions: EndpointBuilder {
                final class Delete {
                    enum QueryParameter: EndpointQueryParameter {
                        case channels(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .channels(let value): return "channels=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Put {
                    enum QueryParameter: EndpointQueryParameter {
                        case channels(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .channels(let value): return "channels=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Shark_Api.DefaultResponse>(
                            responseCode: ._200,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .put,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .put,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /shark/user/notification-subscriptions
                func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }

                /// method: PUT /shark/user/notification-subscriptions
                func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
            }

            /// path: /shark/user/notification-subscriptions
            var notificationSubscriptions: NotificationSubscriptions { .init(server, path + "/notification-subscriptions") }
        }

        /// path: /shark/credit-application
        var creditApplication: CreditApplication { .init(server, path + "/credit-application") }

        /// path: /shark/credit-product
        var creditProduct: CreditProduct { .init(server, path + "/credit-product") }

        /// path: /shark/integration
        var integration: Integration { .init(server, path + "/integration") }

        /// path: /shark/user
        var user: User { .init(server, path + "/user") }
    }

    final class Stats: EndpointBuilder {
        final class Predict: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_Api_PredictRequest, Auto_Api_PredictResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_PredictRequest, Auto_Api_PredictResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_Api_PredictRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_PredictRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_Api_PredictRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_PredictRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_Api_PredictRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_PredictRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /stats/predict
            var post: Post { .init(server, path) }
        }

        final class Summary: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case complectationId(Int)
                    case configurationId(Int)
                    case mark(String)
                    case model(String)
                    case rid(Int)
                    case superGen(Int)
                    case techParamId(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .complectationId(let value): return "complectation_id=\(value)"
                        case .configurationId(let value): return "configuration_id=\(value)"
                        case .mark(let value): return "mark=\(value)"
                        case .model(let value): return "model=\(value)"
                        case .rid(let value): return "rid=\(value)"
                        case .superGen(let value): return "super_gen=\(value)"
                        case .techParamId(let value): return "tech_param_id=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_StatsSummaryResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_StatsSummaryResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /stats/summary
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /stats/predict
        var predict: Predict { .init(server, path + "/predict") }

        /// path: /stats/summary
        var summary: Summary { .init(server, path + "/summary") }
    }

    final class Story: EndpointBuilder {
        final class Id: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case withRaw(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .withRaw(let value): return "with-raw=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Vertis_Story_StoryResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Story_StoryResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Xml: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok<Response: SwiftProtobuf.Message>(
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /story/{id}/xml
                var get: Get { .init(server, path) }
            }

            /// method: GET /story/{id}
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

            /// path: /story/{id}/xml
            var xml: Xml { .init(server, path + "/xml") }
        }

        final class Search: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case excludeOfferId([String])
                    case geo(Int)
                    case tag(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .excludeOfferId(let value): return value.map({ "exclude-offer-id=\($0)" }).joined(separator: "&")
                        case .geo(let value): return "geo=\(value)"
                        case .tag(let value): return "tag=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Vertis_Story_StoryResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Vertis_Story_StoryResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /story/search
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /story/{id}
        func id(_ id: String) -> Id { .init(server, path + "/\(id)") }

        /// path: /story/search
        var search: Search { .init(server, path + "/search") }
    }

    final class TradeIn: EndpointBuilder {
        final class Apply: EndpointBuilder {
            final class Put {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_TradeInNotifier_Api_TradeInApplyRequest, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInApplyRequest, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .put,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_TradeInNotifier_Api_TradeInApplyRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInApplyRequest, Response>(
                        responseCode: status,
                        method: .put,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_TradeInNotifier_Api_TradeInApplyRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInApplyRequest>(
                        method: .put,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_TradeInNotifier_Api_TradeInApplyRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInApplyRequest>(
                        method: .put,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: PUT /trade-in/apply
            var put: Put { .init(server, path) }
        }

        final class IsAvailable: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Auto_TradeInNotifier_Api_TradeInAvailableRequest, Auto_TradeInNotifier_Api_TradeInAvailableResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInAvailableRequest, Auto_TradeInNotifier_Api_TradeInAvailableResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Auto_TradeInNotifier_Api_TradeInAvailableRequest, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInAvailableRequest, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Auto_TradeInNotifier_Api_TradeInAvailableRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInAvailableRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Auto_TradeInNotifier_Api_TradeInAvailableRequest, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_TradeInNotifier_Api_TradeInAvailableRequest>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /trade-in/is_available
            var post: Post { .init(server, path) }
        }

        /// path: /trade-in/apply
        var apply: Apply { .init(server, path + "/apply") }

        /// path: /trade-in/is_available
        var isAvailable: IsAvailable { .init(server, path + "/is_available") }
    }

    final class User: EndpointBuilder {
        final class App2app: EndpointBuilder {
            final class CallInfo: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case handle(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .handle(let value): return "handle=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_App2AppCallResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_App2AppCallResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /user/app2app/call-info
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /user/app2app/call-info
            var callInfo: CallInfo { .init(server, path + "/call-info") }
        }

        final class Compare: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class CatalogCardId: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /user/compare/{category}/{catalogCardId}
                    var delete: Delete { .init(server, path) }

                    /// method: POST /user/compare/{category}/{catalogCardId}
                    var post: Post { .init(server, path) }

                    /// method: PUT /user/compare/{category}/{catalogCardId}
                    var put: Put { .init(server, path) }
                }

                final class Models: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case geoRadius(Int)
                            case rid([Int])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .geoRadius(let value): return "geo_radius=\(value)"
                                case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_ModelsCompareResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_ModelsCompareResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        enum QueryParameter: EndpointQueryParameter {
                            case geoRadius(Int)
                            case rid([Int])
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .geoRadius(let value): return "geo_radius=\(value)"
                                case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_ModelsCompareRequest, Auto_Api_ModelsCompareResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_ModelsCompareRequest, Auto_Api_ModelsCompareResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_ModelsCompareRequest, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, Auto_Api_ModelsCompareRequest, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_ModelsCompareRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_ModelsCompareRequest>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_ModelsCompareRequest, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_ModelsCompareRequest>(
                                method: .post,
                                path: path,
                                parameters: parameters,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class ShowWithoutSave: EndpointBuilder {
                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case geoRadius(Int)
                                case rid([Int])
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .geoRadius(let value): return "geo_radius=\(value)"
                                    case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_ModelsCompareRequest, Auto_Api_ModelsCompareResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_ModelsCompareRequest, Auto_Api_ModelsCompareResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_ModelsCompareRequest, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_ModelsCompareRequest, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_ModelsCompareRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_ModelsCompareRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_ModelsCompareRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_ModelsCompareRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/compare/{category}/models/show-without-save
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    /// method: GET /user/compare/{category}/models
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                    /// method: POST /user/compare/{category}/models
                    func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }

                    /// path: /user/compare/{category}/models/show-without-save
                    var showWithoutSave: ShowWithoutSave { .init(server, path + "/show-without-save") }
                }

                final class Offers: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OffersCompareResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OffersCompareResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /user/compare/{category}/offers
                    var get: Get { .init(server, path) }
                }

                /// path: /user/compare/{category}/{catalogCardId}
                func catalogCardId(_ catalogCardId: [String]) -> CatalogCardId { .init(server, path + "/\(catalogCardId.joined(separator: ","))") }

                /// path: /user/compare/{category}/models
                var models: Models { .init(server, path + "/models") }

                /// path: /user/compare/{category}/offers
                var offers: Offers { .init(server, path + "/offers") }
            }

            /// path: /user/compare/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        final class Confirm: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_ConfirmIdentityParameters, Vertis_Passport_ConfirmIdentityResult>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ConfirmIdentityParameters, Vertis_Passport_ConfirmIdentityResult>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_ConfirmIdentityParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ConfirmIdentityParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_ConfirmIdentityParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ConfirmIdentityParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_ConfirmIdentityParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ConfirmIdentityParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /user/confirm
            var post: Post { .init(server, path) }
        }

        final class Draft: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Garage: EndpointBuilder {
                    final class Id: EndpointBuilder {
                        final class C2bCanApplyGarageApplication: EndpointBuilder {
                            final class Get {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_C2BApplicationInfoResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_C2BApplicationInfoResponse>(
                                        responseCode: ._200,
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .get,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: GET /user/draft/{category}/garage/{id}/c2b_can_apply_garage_application
                            var get: Get { .init(server, path) }
                        }

                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_DraftResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DraftResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// path: /user/draft/{category}/garage/{id}/c2b_can_apply_garage_application
                        var c2bCanApplyGarageApplication: C2bCanApplyGarageApplication { .init(server, path + "/c2b_can_apply_garage_application") }

                        /// method: POST /user/draft/{category}/garage/{id}
                        var post: Post { .init(server, path) }
                    }

                    /// path: /user/draft/{category}/garage/{id}
                    func id(_ id: String) -> Id { .init(server, path + "/\(id)") }
                }

                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_DraftResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DraftResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class OfferID: EndpointBuilder {
                    final class Multiposting: EndpointBuilder {
                        enum ClassifiedParam: CustomStringConvertible {
                            case DROM
                            case AVITO
                            case _unknown(String)

                            var description: String {
                                switch self {
                                case .DROM: return "DROM"
                                case .AVITO: return "AVITO"
                                case ._unknown(let value): return value
                                }
                            }
                        }

                        final class Classified: EndpointBuilder {
                            final class Photo: EndpointBuilder {
                                final class Mds: EndpointBuilder {
                                    final class Post {
                                        fileprivate let server: StubServer
                                        fileprivate let path: String

                                        fileprivate init(_ server: StubServer, _ path: String) {
                                            self.server = server
                                            self.path = path
                                        }

                                        func ok(
                                            mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>(
                                                responseCode: ._200,
                                                method: .post,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func error<Response: SwiftProtobuf.Message>(
                                            status: HTTPResponseStatus = ._400,
                                            mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Response>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo, Response>(
                                                responseCode: status,
                                                method: .post,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func expect(
                                            checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                                method: .post,
                                                path: path,
                                                parameters: nil,
                                                checker: checker,
                                                isInverted: false
                                            )
                                            return expectation.make(with: server)
                                        }

                                        func notExpect(
                                            checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                                method: .post,
                                                path: path,
                                                parameters: nil,
                                                checker: checker,
                                                isInverted: true
                                            )
                                            return expectation.make(with: server)
                                        }
                                    }

                                    /// method: POST /user/draft/{category}/{offerID}/multiposting/{classified}/photo/mds
                                    var post: Post { .init(server, path) }
                                }

                                final class PhotoID: EndpointBuilder {
                                    final class Delete {
                                        fileprivate let server: StubServer
                                        fileprivate let path: String

                                        fileprivate init(_ server: StubServer, _ path: String) {
                                            self.server = server
                                            self.path = path
                                        }

                                        func ok(
                                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                                responseCode: ._200,
                                                method: .delete,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func error<Response: SwiftProtobuf.Message>(
                                            status: HTTPResponseStatus = ._400,
                                            mock: MockSource<StubProtobufMessage, Response>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                                responseCode: status,
                                                method: .delete,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func expect(
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                method: .delete,
                                                path: path,
                                                parameters: nil,
                                                checker: nil,
                                                isInverted: false
                                            )
                                            return expectation.make(with: server)
                                        }

                                        func notExpect(
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                method: .delete,
                                                path: path,
                                                parameters: nil,
                                                checker: nil,
                                                isInverted: true
                                            )
                                            return expectation.make(with: server)
                                        }
                                    }

                                    final class Restore: EndpointBuilder {
                                        final class Put {
                                            fileprivate let server: StubServer
                                            fileprivate let path: String

                                            fileprivate init(_ server: StubServer, _ path: String) {
                                                self.server = server
                                                self.path = path
                                            }

                                            func ok(
                                                mock: MockSource<StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>
                                            ) {
                                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>(
                                                    responseCode: ._200,
                                                    method: .put,
                                                    path: path,
                                                    parameters: nil,
                                                    mock: mock
                                                )
                                                endpoint.use(with: server)
                                            }

                                            func error<Response: SwiftProtobuf.Message>(
                                                status: HTTPResponseStatus = ._400,
                                                mock: MockSource<StubProtobufMessage, Response>
                                            ) {
                                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                                    responseCode: status,
                                                    method: .put,
                                                    path: path,
                                                    parameters: nil,
                                                    mock: mock
                                                )
                                                endpoint.use(with: server)
                                            }

                                            func expect(
                                            ) -> XCTestExpectation {
                                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                    method: .put,
                                                    path: path,
                                                    parameters: nil,
                                                    checker: nil,
                                                    isInverted: false
                                                )
                                                return expectation.make(with: server)
                                            }

                                            func notExpect(
                                            ) -> XCTestExpectation {
                                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                    method: .put,
                                                    path: path,
                                                    parameters: nil,
                                                    checker: nil,
                                                    isInverted: true
                                                )
                                                return expectation.make(with: server)
                                            }
                                        }

                                        /// method: PUT /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/restore
                                        var put: Put { .init(server, path) }
                                    }

                                    final class Rotate: EndpointBuilder {
                                        final class Ccw: EndpointBuilder {
                                            final class Put {
                                                fileprivate let server: StubServer
                                                fileprivate let path: String

                                                fileprivate init(_ server: StubServer, _ path: String) {
                                                    self.server = server
                                                    self.path = path
                                                }

                                                func ok(
                                                    mock: MockSource<StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>
                                                ) {
                                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>(
                                                        responseCode: ._200,
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        mock: mock
                                                    )
                                                    endpoint.use(with: server)
                                                }

                                                func error<Response: SwiftProtobuf.Message>(
                                                    status: HTTPResponseStatus = ._400,
                                                    mock: MockSource<StubProtobufMessage, Response>
                                                ) {
                                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                                        responseCode: status,
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        mock: mock
                                                    )
                                                    endpoint.use(with: server)
                                                }

                                                func expect(
                                                ) -> XCTestExpectation {
                                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        checker: nil,
                                                        isInverted: false
                                                    )
                                                    return expectation.make(with: server)
                                                }

                                                func notExpect(
                                                ) -> XCTestExpectation {
                                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        checker: nil,
                                                        isInverted: true
                                                    )
                                                    return expectation.make(with: server)
                                                }
                                            }

                                            /// method: PUT /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/rotate/ccw
                                            var put: Put { .init(server, path) }
                                        }

                                        final class Cw: EndpointBuilder {
                                            final class Put {
                                                fileprivate let server: StubServer
                                                fileprivate let path: String

                                                fileprivate init(_ server: StubServer, _ path: String) {
                                                    self.server = server
                                                    self.path = path
                                                }

                                                func ok(
                                                    mock: MockSource<StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>
                                                ) {
                                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>(
                                                        responseCode: ._200,
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        mock: mock
                                                    )
                                                    endpoint.use(with: server)
                                                }

                                                func error<Response: SwiftProtobuf.Message>(
                                                    status: HTTPResponseStatus = ._400,
                                                    mock: MockSource<StubProtobufMessage, Response>
                                                ) {
                                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                                        responseCode: status,
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        mock: mock
                                                    )
                                                    endpoint.use(with: server)
                                                }

                                                func expect(
                                                ) -> XCTestExpectation {
                                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        checker: nil,
                                                        isInverted: false
                                                    )
                                                    return expectation.make(with: server)
                                                }

                                                func notExpect(
                                                ) -> XCTestExpectation {
                                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                        method: .put,
                                                        path: path,
                                                        parameters: nil,
                                                        checker: nil,
                                                        isInverted: true
                                                    )
                                                    return expectation.make(with: server)
                                                }
                                            }

                                            /// method: PUT /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/rotate/cw
                                            var put: Put { .init(server, path) }
                                        }

                                        /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/rotate/ccw
                                        var ccw: Ccw { .init(server, path + "/ccw") }

                                        /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/rotate/cw
                                        var cw: Cw { .init(server, path + "/cw") }
                                    }

                                    /// method: DELETE /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}
                                    var delete: Delete { .init(server, path) }

                                    /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/restore
                                    var restore: Restore { .init(server, path + "/restore") }

                                    /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}/rotate
                                    var rotate: Rotate { .init(server, path + "/rotate") }
                                }

                                /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo/mds
                                var mds: Mds { .init(server, path + "/mds") }

                                /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo/{photoID}
                                func photoID(_ photoID: String) -> PhotoID { .init(server, path + "/\(photoID)") }
                            }

                            /// path: /user/draft/{category}/{offerID}/multiposting/{classified}/photo
                            var photo: Photo { .init(server, path + "/photo") }
                        }

                        /// path: /user/draft/{category}/{offerID}/multiposting/{classified}
                        func classified(_ classified: ClassifiedParam) -> Classified { .init(server, path + "/\(classified)") }
                    }

                    final class Photo: EndpointBuilder {
                        final class FromUrlList: EndpointBuilder {
                            final class Post {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: POST /user/draft/{category}/{offerID}/photo/from-url-list
                            var post: Post { .init(server, path) }
                        }

                        final class Mds: EndpointBuilder {
                            final class Document: EndpointBuilder {
                                final class Post {
                                    enum QueryParameter: EndpointQueryParameter {
                                        case photoType(String)
                                        case _unknown(String, String)

                                        var queryRepresentation: String {
                                            switch self {
                                            case .photoType(let value): return "photo_type=\(value)"
                                            case ._unknown(let key, let value): return "\(key)=\(value)"
                                            }
                                        }
                                    }

                                    fileprivate let server: StubServer
                                    fileprivate let path: String
                                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                        self.parameters = parameters
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>(
                                            responseCode: ._200,
                                            method: .post,
                                            path: path,
                                            parameters: parameters,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Internal_MdsPhotoInfo, Response>(
                                            responseCode: status,
                                            method: .post,
                                            path: path,
                                            parameters: parameters,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                        checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                            method: .post,
                                            path: path,
                                            parameters: parameters,
                                            checker: checker,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                        checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                            method: .post,
                                            path: path,
                                            parameters: parameters,
                                            checker: checker,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                /// method: POST /user/draft/{category}/{offerID}/photo/mds/document
                                func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                            }

                            final class Post {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>(
                                        responseCode: ._200,
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo, Response>(
                                        responseCode: status,
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                    checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        checker: checker,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                    checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                        method: .post,
                                        path: path,
                                        parameters: nil,
                                        checker: checker,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            final class Sts: EndpointBuilder {
                                final class Post {
                                    fileprivate let server: StubServer
                                    fileprivate let path: String

                                    fileprivate init(_ server: StubServer, _ path: String) {
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Auto_Api_StsPhotoUploadResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo, Auto_Api_StsPhotoUploadResponse>(
                                            responseCode: ._200,
                                            method: .post,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo, Response>(
                                            responseCode: status,
                                            method: .post,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                        checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                            method: .post,
                                            path: path,
                                            parameters: nil,
                                            checker: checker,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                        checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                            method: .post,
                                            path: path,
                                            parameters: nil,
                                            checker: checker,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                /// method: POST /user/draft/{category}/{offerID}/photo/mds/sts
                                var post: Post { .init(server, path) }
                            }

                            /// path: /user/draft/{category}/{offerID}/photo/mds/document
                            var document: Document { .init(server, path + "/document") }

                            /// method: POST /user/draft/{category}/{offerID}/photo/mds
                            var post: Post { .init(server, path) }

                            /// path: /user/draft/{category}/{offerID}/photo/mds/sts
                            var sts: Sts { .init(server, path + "/sts") }
                        }

                        final class PhotoID: EndpointBuilder {
                            final class Delete {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            final class Restore: EndpointBuilder {
                                final class Put {
                                    fileprivate let server: StubServer
                                    fileprivate let path: String

                                    fileprivate init(_ server: StubServer, _ path: String) {
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>(
                                            responseCode: ._200,
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<StubProtobufMessage, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                            responseCode: status,
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            checker: nil,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: nil,
                                            checker: nil,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                /// method: PUT /user/draft/{category}/{offerID}/photo/{photoID}/restore
                                var put: Put { .init(server, path) }
                            }

                            final class Rotate: EndpointBuilder {
                                final class Ccw: EndpointBuilder {
                                    final class Put {
                                        fileprivate let server: StubServer
                                        fileprivate let path: String

                                        fileprivate init(_ server: StubServer, _ path: String) {
                                            self.server = server
                                            self.path = path
                                        }

                                        func ok(
                                            mock: MockSource<StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>(
                                                responseCode: ._200,
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func error<Response: SwiftProtobuf.Message>(
                                            status: HTTPResponseStatus = ._400,
                                            mock: MockSource<StubProtobufMessage, Response>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                                responseCode: status,
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func expect(
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                checker: nil,
                                                isInverted: false
                                            )
                                            return expectation.make(with: server)
                                        }

                                        func notExpect(
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                checker: nil,
                                                isInverted: true
                                            )
                                            return expectation.make(with: server)
                                        }
                                    }

                                    /// method: PUT /user/draft/{category}/{offerID}/photo/{photoID}/rotate/ccw
                                    var put: Put { .init(server, path) }
                                }

                                final class Cw: EndpointBuilder {
                                    final class Put {
                                        fileprivate let server: StubServer
                                        fileprivate let path: String

                                        fileprivate init(_ server: StubServer, _ path: String) {
                                            self.server = server
                                            self.path = path
                                        }

                                        func ok(
                                            mock: MockSource<StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_PhotoSaveSuccessResponse>(
                                                responseCode: ._200,
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func error<Response: SwiftProtobuf.Message>(
                                            status: HTTPResponseStatus = ._400,
                                            mock: MockSource<StubProtobufMessage, Response>
                                        ) {
                                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                                responseCode: status,
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                mock: mock
                                            )
                                            endpoint.use(with: server)
                                        }

                                        func expect(
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                checker: nil,
                                                isInverted: false
                                            )
                                            return expectation.make(with: server)
                                        }

                                        func notExpect(
                                        ) -> XCTestExpectation {
                                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                                method: .put,
                                                path: path,
                                                parameters: nil,
                                                checker: nil,
                                                isInverted: true
                                            )
                                            return expectation.make(with: server)
                                        }
                                    }

                                    /// method: PUT /user/draft/{category}/{offerID}/photo/{photoID}/rotate/cw
                                    var put: Put { .init(server, path) }
                                }

                                /// path: /user/draft/{category}/{offerID}/photo/{photoID}/rotate/ccw
                                var ccw: Ccw { .init(server, path + "/ccw") }

                                /// path: /user/draft/{category}/{offerID}/photo/{photoID}/rotate/cw
                                var cw: Cw { .init(server, path + "/cw") }
                            }

                            /// method: DELETE /user/draft/{category}/{offerID}/photo/{photoID}
                            var delete: Delete { .init(server, path) }

                            /// path: /user/draft/{category}/{offerID}/photo/{photoID}/restore
                            var restore: Restore { .init(server, path + "/restore") }

                            /// path: /user/draft/{category}/{offerID}/photo/{photoID}/rotate
                            var rotate: Rotate { .init(server, path + "/rotate") }
                        }

                        /// path: /user/draft/{category}/{offerID}/photo/from-url-list
                        var fromUrlList: FromUrlList { .init(server, path + "/from-url-list") }

                        /// path: /user/draft/{category}/{offerID}/photo/mds
                        var mds: Mds { .init(server, path + "/mds") }

                        /// path: /user/draft/{category}/{offerID}/photo/{photoID}
                        func photoID(_ photoID: String) -> PhotoID { .init(server, path + "/\(photoID)") }
                    }

                    /// path: /user/draft/{category}/{offerID}/multiposting
                    var multiposting: Multiposting { .init(server, path + "/multiposting") }

                    /// path: /user/draft/{category}/{offerID}/photo
                    var photo: Photo { .init(server, path + "/photo") }
                }

                final class OfferId: EndpointBuilder {
                    final class C2bApplicationInfo: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_C2BApplicationInfoResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_C2BApplicationInfoResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/draft/{category}/{offerId}/c2b_application_info
                        var get: Get { .init(server, path) }
                    }

                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_DraftResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DraftResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class LightFormRequest: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok<Response: SwiftProtobuf.Message>(
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/draft/{category}/{offerId}/light-form-request
                        var post: Post { .init(server, path) }
                    }

                    final class Publish: EndpointBuilder {
                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case from(String)
                                case postTradeIn(Bool)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .from(let value): return "from=\(value)"
                                    case .postTradeIn(let value): return "postTradeIn=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_OffersSaveSuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OffersSaveSuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/draft/{category}/{offerId}/publish
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_Offer, Auto_Api_DraftResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Offer, Auto_Api_DraftResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_Offer, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Offer, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_Offer, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Offer>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_Offer, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Offer>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Same: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_OfferResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/draft/{category}/{offerId}/same
                        var get: Get { .init(server, path) }
                    }

                    /// path: /user/draft/{category}/{offerId}/c2b_application_info
                    var c2bApplicationInfo: C2bApplicationInfo { .init(server, path + "/c2b_application_info") }

                    /// method: DELETE /user/draft/{category}/{offerId}
                    var delete: Delete { .init(server, path) }

                    /// method: GET /user/draft/{category}/{offerId}
                    var get: Get { .init(server, path) }

                    /// path: /user/draft/{category}/{offerId}/light-form-request
                    var lightFormRequest: LightFormRequest { .init(server, path + "/light-form-request") }

                    /// path: /user/draft/{category}/{offerId}/publish
                    var publish: Publish { .init(server, path + "/publish") }

                    /// method: PUT /user/draft/{category}/{offerId}
                    var put: Put { .init(server, path) }

                    /// path: /user/draft/{category}/{offerId}/same
                    var same: Same { .init(server, path + "/same") }
                }

                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Auto_Api_Offer, Auto_Api_DraftResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Offer, Auto_Api_DraftResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Auto_Api_Offer, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_Offer, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Auto_Api_Offer, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Offer>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Auto_Api_Offer, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_Offer>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class Vin: EndpointBuilder {
                    final class Vin: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_DraftResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DraftResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/draft/{category}/vin/{vin}
                        var get: Get { .init(server, path) }
                    }

                    /// path: /user/draft/{category}/vin/{vin}
                    func vin(_ vin: String) -> Vin { .init(server, path + "/\(vin)") }
                }

                /// path: /user/draft/{category}/garage
                var garage: Garage { .init(server, path + "/garage") }

                /// method: GET /user/draft/{category}
                var get: Get { .init(server, path) }

                /// path: /user/draft/{category}/{offerID}
                func offerID(_ offerID: String) -> OfferID { .init(server, path + "/\(offerID)") }

                /// path: /user/draft/{category}/{offerId}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }

                /// method: POST /user/draft/{category}
                var post: Post { .init(server, path) }

                /// path: /user/draft/{category}/vin
                var vin: Vin { .init(server, path + "/vin") }
            }

            /// path: /user/draft/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        final class Email: EndpointBuilder {
            final class Change: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_Passport_ChangeEmailParameters, Auto_Api_AddIdentityResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ChangeEmailParameters, Auto_Api_AddIdentityResponse>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_Passport_ChangeEmailParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ChangeEmailParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_Passport_ChangeEmailParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ChangeEmailParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_Passport_ChangeEmailParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ChangeEmailParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /user/email/change
                var post: Post { .init(server, path) }
            }

            final class RequestChangeCode: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_Passport_RequestEmailChangeParameters, Vertis_Passport_RequestEmailChangeResult>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_RequestEmailChangeParameters, Vertis_Passport_RequestEmailChangeResult>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_Passport_RequestEmailChangeParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_RequestEmailChangeParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_Passport_RequestEmailChangeParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_RequestEmailChangeParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_Passport_RequestEmailChangeParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_RequestEmailChangeParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /user/email/request-change-code
                var post: Post { .init(server, path) }
            }

            /// path: /user/email/change
            var change: Change { .init(server, path + "/change") }

            /// path: /user/email/request-change-code
            var requestChangeCode: RequestChangeCode { .init(server, path + "/request-change-code") }
        }

        final class EncryptedUserID: EndpointBuilder {
            final class Info: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case category([String])
                        case countInactiveOffers(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .category(let value): return value.map({ "category=\($0)" }).joined(separator: "&")
                            case .countInactiveOffers(let value): return "count_inactive_offers=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_UserInfoResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_UserInfoResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /user/{encryptedUserID}/info
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /user/{encryptedUserID}/info
            var info: Info { .init(server, path + "/info") }
        }

        final class EncryptedUserId: EndpointBuilder {
            final class Offers: EndpointBuilder {
                enum CategoryParam: CustomStringConvertible {
                    case cars
                    case moto
                    case trucks
                    case _unknown(String)

                    var description: String {
                        switch self {
                        case .cars: return "cars"
                        case .moto: return "moto"
                        case .trucks: return "trucks"
                        case ._unknown(let value): return value
                        }
                    }
                }

                final class Category: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case auction(String)
                            case autoruExpert(Bool)
                            case availability(String)
                            case avitoStatus(String)
                            case banReason([String])
                            case canBook(String)
                            case canSendFavoriteMessage(Bool)
                            case colorHex([String])
                            case createDateFrom(String)
                            case createDateTo(String)
                            case excludeTag([String])
                            case favoriteMessageWasSent(Bool)
                            case geobaseId([Int])
                            case hasExteriorPanorama(String)
                            case hasInteriorPanorama(String)
                            case hasPhoto(String)
                            case licensePlate([String])
                            case markModel([String])
                            case motoCategory([String])
                            case multipostingService([String])
                            case multipostingStatus([String])
                            case noActiveServices(Bool)
                            case page(Int)
                            case pageSize(Int)
                            case priceFrom(Int)
                            case priceTo(Int)
                            case section(String)
                            case service([String])
                            case sort(String)
                            case status([String])
                            case statusOnAnyClassifieds(String)
                            case superGen(Int)
                            case tag([String])
                            case truckCategory([String])
                            case vin([String])
                            case year(Int)
                            case yearFrom(Int)
                            case yearTo(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .auction(let value): return "auction=\(value)"
                                case .autoruExpert(let value): return "autoru_expert=\(value)"
                                case .availability(let value): return "availability=\(value)"
                                case .avitoStatus(let value): return "avito_status=\(value)"
                                case .banReason(let value): return value.map({ "ban_reason=\($0)" }).joined(separator: "&")
                                case .canBook(let value): return "can_book=\(value)"
                                case .canSendFavoriteMessage(let value): return "can_send_favorite_message=\(value)"
                                case .colorHex(let value): return value.map({ "color_hex=\($0)" }).joined(separator: "&")
                                case .createDateFrom(let value): return "create_date_from=\(value)"
                                case .createDateTo(let value): return "create_date_to=\(value)"
                                case .excludeTag(let value): return value.map({ "exclude_tag=\($0)" }).joined(separator: "&")
                                case .favoriteMessageWasSent(let value): return "favorite_message_was_sent=\(value)"
                                case .geobaseId(let value): return value.map({ "geobase_id=\($0)" }).joined(separator: "&")
                                case .hasExteriorPanorama(let value): return "has_exterior_panorama=\(value)"
                                case .hasInteriorPanorama(let value): return "has_interior_panorama=\(value)"
                                case .hasPhoto(let value): return "has_photo=\(value)"
                                case .licensePlate(let value): return value.map({ "license_plate=\($0)" }).joined(separator: "&")
                                case .markModel(let value): return value.map({ "mark_model=\($0)" }).joined(separator: "&")
                                case .motoCategory(let value): return value.map({ "moto_category=\($0)" }).joined(separator: "&")
                                case .multipostingService(let value): return value.map({ "multiposting_service=\($0)" }).joined(separator: "&")
                                case .multipostingStatus(let value): return value.map({ "multiposting_status=\($0)" }).joined(separator: "&")
                                case .noActiveServices(let value): return "no_active_services=\(value)"
                                case .page(let value): return "page=\(value)"
                                case .pageSize(let value): return "page_size=\(value)"
                                case .priceFrom(let value): return "price_from=\(value)"
                                case .priceTo(let value): return "price_to=\(value)"
                                case .section(let value): return "section=\(value)"
                                case .service(let value): return value.map({ "service=\($0)" }).joined(separator: "&")
                                case .sort(let value): return "sort=\(value)"
                                case .status(let value): return value.map({ "status=\($0)" }).joined(separator: "&")
                                case .statusOnAnyClassifieds(let value): return "status_on_any_classifieds=\(value)"
                                case .superGen(let value): return "super_gen=\(value)"
                                case .tag(let value): return value.map({ "tag=\($0)" }).joined(separator: "&")
                                case .truckCategory(let value): return value.map({ "truck_category=\($0)" }).joined(separator: "&")
                                case .vin(let value): return value.map({ "vin=\($0)" }).joined(separator: "&")
                                case .year(let value): return "year=\(value)"
                                case .yearFrom(let value): return "year_from=\(value)"
                                case .yearTo(let value): return "year_to=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /user/{encryptedUserId}/offers/{category}
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                /// path: /user/{encryptedUserId}/offers/{category}
                func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
            }

            /// path: /user/{encryptedUserId}/offers
            var offers: Offers { .init(server, path + "/offers") }
        }

        final class Favorites: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class All: EndpointBuilder {
                final class Subscriptions: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SavedSearchesListing>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SavedSearchesListing>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Id: EndpointBuilder {
                        final class Email: EndpointBuilder {
                            final class Put {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<Auto_Api_EmailDelivery, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_EmailDelivery, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<Auto_Api_EmailDelivery, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_EmailDelivery, Response>(
                                        responseCode: status,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                    checker: ((Auto_Api_EmailDelivery, Int) -> ExpectationCheckerVerdict)? = nil
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_EmailDelivery>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: checker,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                    checker: ((Auto_Api_EmailDelivery, Int) -> ExpectationCheckerVerdict)? = nil
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_EmailDelivery>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: checker,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: PUT /user/favorites/all/subscriptions/{id}/email
                            var put: Put { .init(server, path) }
                        }

                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SavedSearchResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SavedSearchResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        final class Push: EndpointBuilder {
                            final class Put {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<Auto_Api_PushDelivery, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_PushDelivery, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<Auto_Api_PushDelivery, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_PushDelivery, Response>(
                                        responseCode: status,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                    checker: ((Auto_Api_PushDelivery, Int) -> ExpectationCheckerVerdict)? = nil
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_PushDelivery>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: checker,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                    checker: ((Auto_Api_PushDelivery, Int) -> ExpectationCheckerVerdict)? = nil
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_PushDelivery>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: checker,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: PUT /user/favorites/all/subscriptions/{id}/push
                            var put: Put { .init(server, path) }
                        }

                        /// path: /user/favorites/all/subscriptions/{id}/email
                        var email: Email { .init(server, path + "/email") }

                        /// method: GET /user/favorites/all/subscriptions/{id}
                        var get: Get { .init(server, path) }

                        /// path: /user/favorites/all/subscriptions/{id}/push
                        var push: Push { .init(server, path + "/push") }
                    }

                    final class SearchId: EndpointBuilder {
                        final class Delete {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: DELETE /user/favorites/all/subscriptions/{searchId}
                        var delete: Delete { .init(server, path) }
                    }

                    /// method: GET /user/favorites/all/subscriptions
                    var get: Get { .init(server, path) }

                    /// path: /user/favorites/all/subscriptions/{id}
                    func id(_ id: String) -> Id { .init(server, path + "/\(id)") }

                    /// path: /user/favorites/all/subscriptions/{searchId}
                    func searchId(_ searchId: String) -> SearchId { .init(server, path + "/\(searchId)") }
                }

                /// path: /user/favorites/all/subscriptions
                var subscriptions: Subscriptions { .init(server, path + "/subscriptions") }
            }

            final class Category: EndpointBuilder {
                final class Count: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /user/favorites/{category}/count
                    var get: Get { .init(server, path) }
                }

                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case geoRadius(Int)
                        case inactivatedFrom(String)
                        case page(Int)
                        case pageSize(Int)
                        case priceChangeFrom(String)
                        case rid([Int])
                        case withCountNotActive(Bool)
                        case withData(Bool)
                        case withRecommended(Bool)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .geoRadius(let value): return "geo_radius=\(value)"
                            case .inactivatedFrom(let value): return "inactivated_from=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .priceChangeFrom(let value): return "price_change_from=\(value)"
                            case .rid(let value): return value.map({ "rid=\($0)" }).joined(separator: "&")
                            case .withCountNotActive(let value): return "with_count_not_active=\(value)"
                            case .withData(let value): return "with_data=\(value)"
                            case .withRecommended(let value): return "with_recommended=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_FavoriteListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_FavoriteListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class NotActive: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_FavoriteListingResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_FavoriteListingResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /user/favorites/{category}/not_active
                    var delete: Delete { .init(server, path) }
                }

                final class OfferId: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /user/favorites/{category}/{offerId}
                    var delete: Delete { .init(server, path) }

                    /// method: POST /user/favorites/{category}/{offerId}
                    var post: Post { .init(server, path) }
                }

                final class Subscriptions: EndpointBuilder {
                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<Auto_Api_SavedSearchCreateParams, Auto_Api_SavedSearchResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams, Auto_Api_SavedSearchResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<Auto_Api_SavedSearchCreateParams, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                            checker: ((Auto_Api_SavedSearchCreateParams, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                            checker: ((Auto_Api_SavedSearchCreateParams, Int) -> ExpectationCheckerVerdict)? = nil
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_SavedSearchCreateParams>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: checker,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: POST /user/favorites/{category}/subscriptions
                    var post: Post { .init(server, path) }
                }

                /// path: /user/favorites/{category}/count
                var count: Count { .init(server, path + "/count") }

                /// method: GET /user/favorites/{category}
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                /// path: /user/favorites/{category}/not_active
                var notActive: NotActive { .init(server, path + "/not_active") }

                /// path: /user/favorites/{category}/{offerId}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }

                /// path: /user/favorites/{category}/subscriptions
                var subscriptions: Subscriptions { .init(server, path + "/subscriptions") }
            }

            /// path: /user/favorites/all
            var all: All { .init(server, path + "/all") }

            /// path: /user/favorites/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        final class Forget: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_UserResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_UserResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /user/forget
            var post: Post { .init(server, path) }
        }

        final class Get {
            enum QueryParameter: EndpointQueryParameter {
                case withAuthTypes(Bool)
                case _unknown(String, String)

                var queryRepresentation: String {
                    switch self {
                    case .withAuthTypes(let value): return "with_auth_types=\(value)"
                    case ._unknown(let key, let value): return "\(key)=\(value)"
                    }
                }
            }

            fileprivate let server: StubServer
            fileprivate let path: String
            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                self.parameters = parameters
                self.server = server
                self.path = path
            }

            func ok(
                mock: MockSource<StubProtobufMessage, Auto_Api_UserResponse>
            ) {
                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_UserResponse>(
                    responseCode: ._200,
                    method: .get,
                    path: path,
                    parameters: parameters,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func error<Response: SwiftProtobuf.Message>(
                status: HTTPResponseStatus = ._400,
                mock: MockSource<StubProtobufMessage, Response>
            ) {
                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                    responseCode: status,
                    method: .get,
                    path: path,
                    parameters: parameters,
                    mock: mock
                )
                endpoint.use(with: server)
            }

            func expect(
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                    method: .get,
                    path: path,
                    parameters: parameters,
                    checker: nil,
                    isInverted: false
                )
                return expectation.make(with: server)
            }

            func notExpect(
            ) -> XCTestExpectation {
                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                    method: .get,
                    path: path,
                    parameters: parameters,
                    checker: nil,
                    isInverted: true
                )
                return expectation.make(with: server)
            }
        }

        final class Notes: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Count: EndpointBuilder {
                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /user/notes/{category}/count
                    var get: Get { .init(server, path) }
                }

                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class OfferId: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Post {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .post,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .post,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /user/notes/{category}/{offerId}
                    var delete: Delete { .init(server, path) }

                    /// method: POST /user/notes/{category}/{offerId}
                    var post: Post { .init(server, path) }

                    /// method: PUT /user/notes/{category}/{offerId}
                    var put: Put { .init(server, path) }
                }

                /// path: /user/notes/{category}/count
                var count: Count { .init(server, path + "/count") }

                /// method: GET /user/notes/{category}
                var get: Get { .init(server, path) }

                /// path: /user/notes/{category}/{offerId}
                func offerId(_ offerId: String) -> OfferId { .init(server, path + "/\(offerId)") }
            }

            /// path: /user/notes/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        final class Offers: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Auction: EndpointBuilder {
                    final class Leave: EndpointBuilder {
                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case auction(String)
                                case autoruExpert(Bool)
                                case availability(String)
                                case avitoStatus(String)
                                case banReason([String])
                                case canBook(String)
                                case canSendFavoriteMessage(Bool)
                                case colorHex([String])
                                case createDateFrom(String)
                                case createDateTo(String)
                                case excludeTag([String])
                                case favoriteMessageWasSent(Bool)
                                case geobaseId([Int])
                                case hasExteriorPanorama(String)
                                case hasInteriorPanorama(String)
                                case hasPhoto(String)
                                case licensePlate([String])
                                case markModel([String])
                                case motoCategory([String])
                                case multipostingService([String])
                                case multipostingStatus([String])
                                case noActiveServices(Bool)
                                case offerId([String])
                                case page(Int)
                                case pageSize(Int)
                                case priceFrom(Int)
                                case priceTo(Int)
                                case section(String)
                                case service([String])
                                case sort(String)
                                case status([String])
                                case statusOnAnyClassifieds(String)
                                case superGen(Int)
                                case tag([String])
                                case truckCategory([String])
                                case vin([String])
                                case year(Int)
                                case yearFrom(Int)
                                case yearTo(Int)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .auction(let value): return "auction=\(value)"
                                    case .autoruExpert(let value): return "autoru_expert=\(value)"
                                    case .availability(let value): return "availability=\(value)"
                                    case .avitoStatus(let value): return "avito_status=\(value)"
                                    case .banReason(let value): return value.map({ "ban_reason=\($0)" }).joined(separator: "&")
                                    case .canBook(let value): return "can_book=\(value)"
                                    case .canSendFavoriteMessage(let value): return "can_send_favorite_message=\(value)"
                                    case .colorHex(let value): return value.map({ "color_hex=\($0)" }).joined(separator: "&")
                                    case .createDateFrom(let value): return "create_date_from=\(value)"
                                    case .createDateTo(let value): return "create_date_to=\(value)"
                                    case .excludeTag(let value): return value.map({ "exclude_tag=\($0)" }).joined(separator: "&")
                                    case .favoriteMessageWasSent(let value): return "favorite_message_was_sent=\(value)"
                                    case .geobaseId(let value): return value.map({ "geobase_id=\($0)" }).joined(separator: "&")
                                    case .hasExteriorPanorama(let value): return "has_exterior_panorama=\(value)"
                                    case .hasInteriorPanorama(let value): return "has_interior_panorama=\(value)"
                                    case .hasPhoto(let value): return "has_photo=\(value)"
                                    case .licensePlate(let value): return value.map({ "license_plate=\($0)" }).joined(separator: "&")
                                    case .markModel(let value): return value.map({ "mark_model=\($0)" }).joined(separator: "&")
                                    case .motoCategory(let value): return value.map({ "moto_category=\($0)" }).joined(separator: "&")
                                    case .multipostingService(let value): return value.map({ "multiposting_service=\($0)" }).joined(separator: "&")
                                    case .multipostingStatus(let value): return value.map({ "multiposting_status=\($0)" }).joined(separator: "&")
                                    case .noActiveServices(let value): return "no_active_services=\(value)"
                                    case .offerId(let value): return value.map({ "offer_id=\($0)" }).joined(separator: "&")
                                    case .page(let value): return "page=\(value)"
                                    case .pageSize(let value): return "page_size=\(value)"
                                    case .priceFrom(let value): return "price_from=\(value)"
                                    case .priceTo(let value): return "price_to=\(value)"
                                    case .section(let value): return "section=\(value)"
                                    case .service(let value): return value.map({ "service=\($0)" }).joined(separator: "&")
                                    case .sort(let value): return "sort=\(value)"
                                    case .status(let value): return value.map({ "status=\($0)" }).joined(separator: "&")
                                    case .statusOnAnyClassifieds(let value): return "status_on_any_classifieds=\(value)"
                                    case .superGen(let value): return "super_gen=\(value)"
                                    case .tag(let value): return value.map({ "tag=\($0)" }).joined(separator: "&")
                                    case .truckCategory(let value): return value.map({ "truck_category=\($0)" }).joined(separator: "&")
                                    case .vin(let value): return value.map({ "vin=\($0)" }).joined(separator: "&")
                                    case .year(let value): return "year=\(value)"
                                    case .yearFrom(let value): return "year_from=\(value)"
                                    case .yearTo(let value): return "year_to=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/offers/{category}/auction/leave
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    /// path: /user/offers/{category}/auction/leave
                    var leave: Leave { .init(server, path + "/leave") }
                }

                final class Count: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case auction(String)
                            case autoruExpert(Bool)
                            case availability(String)
                            case avitoStatus(String)
                            case banReason([String])
                            case canBook(String)
                            case canSendFavoriteMessage(Bool)
                            case colorHex([String])
                            case createDateFrom(String)
                            case createDateTo(String)
                            case excludeTag([String])
                            case favoriteMessageWasSent(Bool)
                            case geobaseId([Int])
                            case hasExteriorPanorama(String)
                            case hasInteriorPanorama(String)
                            case hasPhoto(String)
                            case licensePlate([String])
                            case markModel([String])
                            case motoCategory([String])
                            case multipostingService([String])
                            case multipostingStatus([String])
                            case noActiveServices(Bool)
                            case priceFrom(Int)
                            case priceTo(Int)
                            case section(String)
                            case service([String])
                            case status([String])
                            case statusOnAnyClassifieds(String)
                            case superGen(Int)
                            case tag([String])
                            case truckCategory([String])
                            case vin([String])
                            case year(Int)
                            case yearFrom(Int)
                            case yearTo(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .auction(let value): return "auction=\(value)"
                                case .autoruExpert(let value): return "autoru_expert=\(value)"
                                case .availability(let value): return "availability=\(value)"
                                case .avitoStatus(let value): return "avito_status=\(value)"
                                case .banReason(let value): return value.map({ "ban_reason=\($0)" }).joined(separator: "&")
                                case .canBook(let value): return "can_book=\(value)"
                                case .canSendFavoriteMessage(let value): return "can_send_favorite_message=\(value)"
                                case .colorHex(let value): return value.map({ "color_hex=\($0)" }).joined(separator: "&")
                                case .createDateFrom(let value): return "create_date_from=\(value)"
                                case .createDateTo(let value): return "create_date_to=\(value)"
                                case .excludeTag(let value): return value.map({ "exclude_tag=\($0)" }).joined(separator: "&")
                                case .favoriteMessageWasSent(let value): return "favorite_message_was_sent=\(value)"
                                case .geobaseId(let value): return value.map({ "geobase_id=\($0)" }).joined(separator: "&")
                                case .hasExteriorPanorama(let value): return "has_exterior_panorama=\(value)"
                                case .hasInteriorPanorama(let value): return "has_interior_panorama=\(value)"
                                case .hasPhoto(let value): return "has_photo=\(value)"
                                case .licensePlate(let value): return value.map({ "license_plate=\($0)" }).joined(separator: "&")
                                case .markModel(let value): return value.map({ "mark_model=\($0)" }).joined(separator: "&")
                                case .motoCategory(let value): return value.map({ "moto_category=\($0)" }).joined(separator: "&")
                                case .multipostingService(let value): return value.map({ "multiposting_service=\($0)" }).joined(separator: "&")
                                case .multipostingStatus(let value): return value.map({ "multiposting_status=\($0)" }).joined(separator: "&")
                                case .noActiveServices(let value): return "no_active_services=\(value)"
                                case .priceFrom(let value): return "price_from=\(value)"
                                case .priceTo(let value): return "price_to=\(value)"
                                case .section(let value): return "section=\(value)"
                                case .service(let value): return value.map({ "service=\($0)" }).joined(separator: "&")
                                case .status(let value): return value.map({ "status=\($0)" }).joined(separator: "&")
                                case .statusOnAnyClassifieds(let value): return "status_on_any_classifieds=\(value)"
                                case .superGen(let value): return "super_gen=\(value)"
                                case .tag(let value): return value.map({ "tag=\($0)" }).joined(separator: "&")
                                case .truckCategory(let value): return value.map({ "truck_category=\($0)" }).joined(separator: "&")
                                case .vin(let value): return value.map({ "vin=\($0)" }).joined(separator: "&")
                                case .year(let value): return "year=\(value)"
                                case .yearFrom(let value): return "year_from=\(value)"
                                case .yearTo(let value): return "year_to=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferCountResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferCountResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /user/offers/{category}/count
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case auction(String)
                        case autoruExpert(Bool)
                        case availability(String)
                        case avitoStatus(String)
                        case banReason([String])
                        case canBook(String)
                        case canSendFavoriteMessage(Bool)
                        case colorHex([String])
                        case createDateFrom(String)
                        case createDateTo(String)
                        case dailyCountersDays(Int)
                        case excludeTag([String])
                        case favoriteMessageWasSent(Bool)
                        case geobaseId([Int])
                        case hasExteriorPanorama(String)
                        case hasInteriorPanorama(String)
                        case hasPhoto(String)
                        case licensePlate([String])
                        case markModel([String])
                        case motoCategory([String])
                        case multipostingService([String])
                        case multipostingStatus([String])
                        case noActiveServices(Bool)
                        case page(Int)
                        case pageSize(Int)
                        case priceFrom(Int)
                        case priceTo(Int)
                        case section(String)
                        case service([String])
                        case sort(String)
                        case status([String])
                        case statusOnAnyClassifieds(String)
                        case superGen(Int)
                        case tag([String])
                        case truckCategory([String])
                        case vin([String])
                        case withDailyCounters(Bool)
                        case year(Int)
                        case yearFrom(Int)
                        case yearTo(Int)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .auction(let value): return "auction=\(value)"
                            case .autoruExpert(let value): return "autoru_expert=\(value)"
                            case .availability(let value): return "availability=\(value)"
                            case .avitoStatus(let value): return "avito_status=\(value)"
                            case .banReason(let value): return value.map({ "ban_reason=\($0)" }).joined(separator: "&")
                            case .canBook(let value): return "can_book=\(value)"
                            case .canSendFavoriteMessage(let value): return "can_send_favorite_message=\(value)"
                            case .colorHex(let value): return value.map({ "color_hex=\($0)" }).joined(separator: "&")
                            case .createDateFrom(let value): return "create_date_from=\(value)"
                            case .createDateTo(let value): return "create_date_to=\(value)"
                            case .dailyCountersDays(let value): return "daily_counters_days=\(value)"
                            case .excludeTag(let value): return value.map({ "exclude_tag=\($0)" }).joined(separator: "&")
                            case .favoriteMessageWasSent(let value): return "favorite_message_was_sent=\(value)"
                            case .geobaseId(let value): return value.map({ "geobase_id=\($0)" }).joined(separator: "&")
                            case .hasExteriorPanorama(let value): return "has_exterior_panorama=\(value)"
                            case .hasInteriorPanorama(let value): return "has_interior_panorama=\(value)"
                            case .hasPhoto(let value): return "has_photo=\(value)"
                            case .licensePlate(let value): return value.map({ "license_plate=\($0)" }).joined(separator: "&")
                            case .markModel(let value): return value.map({ "mark_model=\($0)" }).joined(separator: "&")
                            case .motoCategory(let value): return value.map({ "moto_category=\($0)" }).joined(separator: "&")
                            case .multipostingService(let value): return value.map({ "multiposting_service=\($0)" }).joined(separator: "&")
                            case .multipostingStatus(let value): return value.map({ "multiposting_status=\($0)" }).joined(separator: "&")
                            case .noActiveServices(let value): return "no_active_services=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .priceFrom(let value): return "price_from=\(value)"
                            case .priceTo(let value): return "price_to=\(value)"
                            case .section(let value): return "section=\(value)"
                            case .service(let value): return value.map({ "service=\($0)" }).joined(separator: "&")
                            case .sort(let value): return "sort=\(value)"
                            case .status(let value): return value.map({ "status=\($0)" }).joined(separator: "&")
                            case .statusOnAnyClassifieds(let value): return "status_on_any_classifieds=\(value)"
                            case .superGen(let value): return "super_gen=\(value)"
                            case .tag(let value): return value.map({ "tag=\($0)" }).joined(separator: "&")
                            case .truckCategory(let value): return value.map({ "truck_category=\($0)" }).joined(separator: "&")
                            case .vin(let value): return value.map({ "vin=\($0)" }).joined(separator: "&")
                            case .withDailyCounters(let value): return "with_daily_counters=\(value)"
                            case .year(let value): return "year=\(value)"
                            case .yearFrom(let value): return "year_from=\(value)"
                            case .yearTo(let value): return "year_to=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_OfferListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_OfferListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                final class MarkModels: EndpointBuilder {
                    final class Get {
                        enum QueryParameter: EndpointQueryParameter {
                            case auction(String)
                            case autoruExpert(Bool)
                            case availability(String)
                            case avitoStatus(String)
                            case banReason([String])
                            case canBook(String)
                            case canSendFavoriteMessage(Bool)
                            case colorHex([String])
                            case createDateFrom(String)
                            case createDateTo(String)
                            case excludeTag([String])
                            case favoriteMessageWasSent(Bool)
                            case geobaseId([Int])
                            case hasExteriorPanorama(String)
                            case hasInteriorPanorama(String)
                            case hasPhoto(String)
                            case licensePlate([String])
                            case markModel([String])
                            case motoCategory([String])
                            case multipostingService([String])
                            case multipostingStatus([String])
                            case noActiveServices(Bool)
                            case priceFrom(Int)
                            case priceTo(Int)
                            case section(String)
                            case service([String])
                            case status([String])
                            case statusOnAnyClassifieds(String)
                            case superGen(Int)
                            case tag([String])
                            case truckCategory([String])
                            case vin([String])
                            case year(Int)
                            case yearFrom(Int)
                            case yearTo(Int)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .auction(let value): return "auction=\(value)"
                                case .autoruExpert(let value): return "autoru_expert=\(value)"
                                case .availability(let value): return "availability=\(value)"
                                case .avitoStatus(let value): return "avito_status=\(value)"
                                case .banReason(let value): return value.map({ "ban_reason=\($0)" }).joined(separator: "&")
                                case .canBook(let value): return "can_book=\(value)"
                                case .canSendFavoriteMessage(let value): return "can_send_favorite_message=\(value)"
                                case .colorHex(let value): return value.map({ "color_hex=\($0)" }).joined(separator: "&")
                                case .createDateFrom(let value): return "create_date_from=\(value)"
                                case .createDateTo(let value): return "create_date_to=\(value)"
                                case .excludeTag(let value): return value.map({ "exclude_tag=\($0)" }).joined(separator: "&")
                                case .favoriteMessageWasSent(let value): return "favorite_message_was_sent=\(value)"
                                case .geobaseId(let value): return value.map({ "geobase_id=\($0)" }).joined(separator: "&")
                                case .hasExteriorPanorama(let value): return "has_exterior_panorama=\(value)"
                                case .hasInteriorPanorama(let value): return "has_interior_panorama=\(value)"
                                case .hasPhoto(let value): return "has_photo=\(value)"
                                case .licensePlate(let value): return value.map({ "license_plate=\($0)" }).joined(separator: "&")
                                case .markModel(let value): return value.map({ "mark_model=\($0)" }).joined(separator: "&")
                                case .motoCategory(let value): return value.map({ "moto_category=\($0)" }).joined(separator: "&")
                                case .multipostingService(let value): return value.map({ "multiposting_service=\($0)" }).joined(separator: "&")
                                case .multipostingStatus(let value): return value.map({ "multiposting_status=\($0)" }).joined(separator: "&")
                                case .noActiveServices(let value): return "no_active_services=\(value)"
                                case .priceFrom(let value): return "price_from=\(value)"
                                case .priceTo(let value): return "price_to=\(value)"
                                case .section(let value): return "section=\(value)"
                                case .service(let value): return value.map({ "service=\($0)" }).joined(separator: "&")
                                case .status(let value): return value.map({ "status=\($0)" }).joined(separator: "&")
                                case .statusOnAnyClassifieds(let value): return "status_on_any_classifieds=\(value)"
                                case .superGen(let value): return "super_gen=\(value)"
                                case .tag(let value): return value.map({ "tag=\($0)" }).joined(separator: "&")
                                case .truckCategory(let value): return value.map({ "truck_category=\($0)" }).joined(separator: "&")
                                case .vin(let value): return value.map({ "vin=\($0)" }).joined(separator: "&")
                                case .year(let value): return "year=\(value)"
                                case .yearFrom(let value): return "year_from=\(value)"
                                case .yearTo(let value): return "year_to=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_MarkModelsResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_MarkModelsResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: GET /user/offers/{category}/mark-models
                    func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                }

                final class OfferID: EndpointBuilder {
                    final class Activate: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/offers/{category}/{offerID}/activate
                        var post: Post { .init(server, path) }
                    }

                    final class Actualize: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/offers/{category}/{offerID}/actualize
                        var post: Post { .init(server, path) }
                    }

                    final class BookingAllowed: EndpointBuilder {
                        final class Put {
                            enum QueryParameter: EndpointQueryParameter {
                                case allowed(Bool)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .allowed(let value): return "allowed=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .put,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .put,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .put,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .put,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: PUT /user/offers/{category}/{offerID}/booking_allowed
                        func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
                    }

                    final class C2bCanApply: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_C2BApplicationInfoResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_C2BApplicationInfoResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/c2b_can_apply
                        var get: Get { .init(server, path) }
                    }

                    final class CallHistory: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case page(Int)
                                case pageSize(Int)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .page(let value): return "page=\(value)"
                                    case .pageSize(let value): return "page_size=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_CallHistoryResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_CallHistoryResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/call-history
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class DocumentPhoto: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_DocumentPhotoUploadResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_DocumentPhotoUploadResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case photoType(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .photoType(let value): return "photo_type=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Internal_MdsPhotoInfo, Auto_Api_PhotoSaveSuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_Internal_MdsPhotoInfo, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_Internal_MdsPhotoInfo, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_Internal_MdsPhotoInfo, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_Internal_MdsPhotoInfo>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/document-photo
                        var get: Get { .init(server, path) }

                        /// method: POST /user/offers/{category}/{offerID}/document-photo
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    final class Edit: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_OffersSaveSuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OffersSaveSuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/offers/{category}/{offerID}/edit
                        var post: Post { .init(server, path) }
                    }

                    final class ExternalPanorama: EndpointBuilder {
                        final class PanoramaId: EndpointBuilder {
                            final class Put {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: PUT /user/offers/{category}/{offerID}/external-panorama/{panoramaId}
                            var put: Put { .init(server, path) }
                        }

                        /// path: /user/offers/{category}/{offerID}/external-panorama/{panoramaId}
                        func panoramaId(_ panoramaId: String) -> PanoramaId { .init(server, path + "/\(panoramaId)") }
                    }

                    final class Get {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_OfferResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferResponse>(
                                responseCode: ._200,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .get,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .get,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Hide: EndpointBuilder {
                        final class Post {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_OfferHideRequest, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_OfferHideRequest, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_OfferHideRequest, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, Auto_Api_OfferHideRequest, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_OfferHideRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_OfferHideRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_OfferHideRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Auto_Api_OfferHideRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: nil,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        final class Put {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .put,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: POST /user/offers/{category}/{offerID}/hide
                        var post: Post { .init(server, path) }

                        /// method: PUT /user/offers/{category}/{offerID}/hide
                        var put: Put { .init(server, path) }
                    }

                    final class InteriorPanorama: EndpointBuilder {
                        final class PanoramaId: EndpointBuilder {
                            final class Put {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: PUT /user/offers/{category}/{offerID}/interior-panorama/{panoramaId}
                            var put: Put { .init(server, path) }
                        }

                        /// path: /user/offers/{category}/{offerID}/interior-panorama/{panoramaId}
                        func panoramaId(_ panoramaId: String) -> PanoramaId { .init(server, path + "/\(panoramaId)") }
                    }

                    final class Multiposting: EndpointBuilder {
                        enum ClassifiedParam: CustomStringConvertible {
                            case autoru
                            case avito
                            case drom
                            case _unknown(String)

                            var description: String {
                                switch self {
                                case .autoru: return "autoru"
                                case .avito: return "avito"
                                case .drom: return "drom"
                                case ._unknown(let value): return value
                                }
                            }
                        }

                        final class Classified: EndpointBuilder {
                            final class Delete {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .delete,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            final class Put {
                                fileprivate let server: StubServer
                                fileprivate let path: String

                                fileprivate init(_ server: StubServer, _ path: String) {
                                    self.server = server
                                    self.path = path
                                }

                                func ok(
                                    mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                        responseCode: ._200,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func error<Response: SwiftProtobuf.Message>(
                                    status: HTTPResponseStatus = ._400,
                                    mock: MockSource<StubProtobufMessage, Response>
                                ) {
                                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                        responseCode: status,
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        mock: mock
                                    )
                                    endpoint.use(with: server)
                                }

                                func expect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: false
                                    )
                                    return expectation.make(with: server)
                                }

                                func notExpect(
                                ) -> XCTestExpectation {
                                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                        method: .put,
                                        path: path,
                                        parameters: nil,
                                        checker: nil,
                                        isInverted: true
                                    )
                                    return expectation.make(with: server)
                                }
                            }

                            /// method: DELETE /user/offers/{category}/{offerID}/multiposting/{classified}
                            var delete: Delete { .init(server, path) }

                            /// method: PUT /user/offers/{category}/{offerID}/multiposting/{classified}
                            var put: Put { .init(server, path) }
                        }

                        /// path: /user/offers/{category}/{offerID}/multiposting/{classified}
                        func classified(_ classified: ClassifiedParam) -> Classified { .init(server, path + "/\(classified)") }
                    }

                    final class OrigPhotoUrls: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok<Response: SwiftProtobuf.Message>(
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/orig-photo-urls
                        var get: Get { .init(server, path) }
                    }

                    final class PredictBuyers: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_Buyers_PredictionsList>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_Buyers_PredictionsList>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/predict-buyers
                        var get: Get { .init(server, path) }
                    }

                    final class Product: EndpointBuilder {
                        final class Product: EndpointBuilder {
                            final class Prolongable: EndpointBuilder {
                                final class Delete {
                                    enum QueryParameter: EndpointQueryParameter {
                                        case domain(String)
                                        case _unknown(String, String)

                                        var queryRepresentation: String {
                                            switch self {
                                            case .domain(let value): return "domain=\(value)"
                                            case ._unknown(let key, let value): return "\(key)=\(value)"
                                            }
                                        }
                                    }

                                    fileprivate let server: StubServer
                                    fileprivate let path: String
                                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                        self.parameters = parameters
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                            responseCode: ._200,
                                            method: .delete,
                                            path: path,
                                            parameters: parameters,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<StubProtobufMessage, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                            responseCode: status,
                                            method: .delete,
                                            path: path,
                                            parameters: parameters,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                            method: .delete,
                                            path: path,
                                            parameters: parameters,
                                            checker: nil,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                            method: .delete,
                                            path: path,
                                            parameters: parameters,
                                            checker: nil,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                final class Put {
                                    enum QueryParameter: EndpointQueryParameter {
                                        case domain(String)
                                        case _unknown(String, String)

                                        var queryRepresentation: String {
                                            switch self {
                                            case .domain(let value): return "domain=\(value)"
                                            case ._unknown(let key, let value): return "\(key)=\(value)"
                                            }
                                        }
                                    }

                                    fileprivate let server: StubServer
                                    fileprivate let path: String
                                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                        self.parameters = parameters
                                        self.server = server
                                        self.path = path
                                    }

                                    func ok(
                                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                                    ) {
                                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                            responseCode: ._200,
                                            method: .put,
                                            path: path,
                                            parameters: parameters,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func error<Response: SwiftProtobuf.Message>(
                                        status: HTTPResponseStatus = ._400,
                                        mock: MockSource<StubProtobufMessage, Response>
                                    ) {
                                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                            responseCode: status,
                                            method: .put,
                                            path: path,
                                            parameters: parameters,
                                            mock: mock
                                        )
                                        endpoint.use(with: server)
                                    }

                                    func expect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: parameters,
                                            checker: nil,
                                            isInverted: false
                                        )
                                        return expectation.make(with: server)
                                    }

                                    func notExpect(
                                    ) -> XCTestExpectation {
                                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                            method: .put,
                                            path: path,
                                            parameters: parameters,
                                            checker: nil,
                                            isInverted: true
                                        )
                                        return expectation.make(with: server)
                                    }
                                }

                                /// method: DELETE /user/offers/{category}/{offerID}/product/{product}/prolongable
                                func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }

                                /// method: PUT /user/offers/{category}/{offerID}/product/{product}/prolongable
                                func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
                            }

                            /// path: /user/offers/{category}/{offerID}/product/{product}/prolongable
                            var prolongable: Prolongable { .init(server, path + "/prolongable") }
                        }

                        /// path: /user/offers/{category}/{offerID}/product/{product}
                        func product(_ product: String) -> Product { .init(server, path + "/\(product)") }
                    }

                    final class Products: EndpointBuilder {
                        final class Delete {
                            enum QueryParameter: EndpointQueryParameter {
                                case classified(String)
                                case product([String])
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .classified(let value): return "classified=\(value)"
                                    case .product(let value): return value.map({ "product=\($0)" }).joined(separator: "&")
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .delete,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .delete,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .delete,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        final class Post {
                            enum QueryParameter: EndpointQueryParameter {
                                case classified(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .classified(let value): return "classified=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<Auto_Api_ApplyAutoruProductsRequest, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_ApplyAutoruProductsRequest, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<Auto_Api_ApplyAutoruProductsRequest, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, Auto_Api_ApplyAutoruProductsRequest, Response>(
                                    responseCode: status,
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                                checker: ((Auto_Api_ApplyAutoruProductsRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_ApplyAutoruProductsRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                                checker: ((Auto_Api_ApplyAutoruProductsRequest, Int) -> ExpectationCheckerVerdict)? = nil
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, Auto_Api_ApplyAutoruProductsRequest>(
                                    method: .post,
                                    path: path,
                                    parameters: parameters,
                                    checker: checker,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: DELETE /user/offers/{category}/{offerID}/products
                        func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }

                        /// method: POST /user/offers/{category}/{offerID}/products
                        func post(parameters: EndpointQueryParametersMatching<Post.QueryParameter>) -> Post { .init(server, path, parameters) }
                    }

                    final class Requisites: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/requisites
                        var get: Get { .init(server, path) }
                    }

                    final class Same: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_OfferResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/same
                        var get: Get { .init(server, path) }
                    }

                    final class Stats: EndpointBuilder {
                        final class Get {
                            enum QueryParameter: EndpointQueryParameter {
                                case from(String)
                                case to(String)
                                case _unknown(String, String)

                                var queryRepresentation: String {
                                    switch self {
                                    case .from(let value): return "from=\(value)"
                                    case .to(let value): return "to=\(value)"
                                    case ._unknown(let key, let value): return "\(key)=\(value)"
                                    }
                                }
                            }

                            fileprivate let server: StubServer
                            fileprivate let path: String
                            fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                            fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                                self.parameters = parameters
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_DailyCountersResponse>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_DailyCountersResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: parameters,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/stats
                        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
                    }

                    final class TransparencyScoring: EndpointBuilder {
                        final class Get {
                            fileprivate let server: StubServer
                            fileprivate let path: String

                            fileprivate init(_ server: StubServer, _ path: String) {
                                self.server = server
                                self.path = path
                            }

                            func ok(
                                mock: MockSource<StubProtobufMessage, Auto_Api_OfferResponse>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_OfferResponse>(
                                    responseCode: ._200,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func error<Response: SwiftProtobuf.Message>(
                                status: HTTPResponseStatus = ._400,
                                mock: MockSource<StubProtobufMessage, Response>
                            ) {
                                let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                    responseCode: status,
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    mock: mock
                                )
                                endpoint.use(with: server)
                            }

                            func expect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: false
                                )
                                return expectation.make(with: server)
                            }

                            func notExpect(
                            ) -> XCTestExpectation {
                                let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                    method: .get,
                                    path: path,
                                    parameters: nil,
                                    checker: nil,
                                    isInverted: true
                                )
                                return expectation.make(with: server)
                            }
                        }

                        /// method: GET /user/offers/{category}/{offerID}/transparency-scoring
                        var get: Get { .init(server, path) }
                    }

                    /// path: /user/offers/{category}/{offerID}/activate
                    var activate: Activate { .init(server, path + "/activate") }

                    /// path: /user/offers/{category}/{offerID}/actualize
                    var actualize: Actualize { .init(server, path + "/actualize") }

                    /// path: /user/offers/{category}/{offerID}/booking_allowed
                    var bookingAllowed: BookingAllowed { .init(server, path + "/booking_allowed") }

                    /// path: /user/offers/{category}/{offerID}/c2b_can_apply
                    var c2bCanApply: C2bCanApply { .init(server, path + "/c2b_can_apply") }

                    /// path: /user/offers/{category}/{offerID}/call-history
                    var callHistory: CallHistory { .init(server, path + "/call-history") }

                    /// method: DELETE /user/offers/{category}/{offerID}
                    var delete: Delete { .init(server, path) }

                    /// path: /user/offers/{category}/{offerID}/document-photo
                    var documentPhoto: DocumentPhoto { .init(server, path + "/document-photo") }

                    /// path: /user/offers/{category}/{offerID}/edit
                    var edit: Edit { .init(server, path + "/edit") }

                    /// path: /user/offers/{category}/{offerID}/external-panorama
                    var externalPanorama: ExternalPanorama { .init(server, path + "/external-panorama") }

                    /// method: GET /user/offers/{category}/{offerID}
                    var get: Get { .init(server, path) }

                    /// path: /user/offers/{category}/{offerID}/hide
                    var hide: Hide { .init(server, path + "/hide") }

                    /// path: /user/offers/{category}/{offerID}/interior-panorama
                    var interiorPanorama: InteriorPanorama { .init(server, path + "/interior-panorama") }

                    /// path: /user/offers/{category}/{offerID}/multiposting
                    var multiposting: Multiposting { .init(server, path + "/multiposting") }

                    /// path: /user/offers/{category}/{offerID}/orig-photo-urls
                    var origPhotoUrls: OrigPhotoUrls { .init(server, path + "/orig-photo-urls") }

                    /// path: /user/offers/{category}/{offerID}/predict-buyers
                    var predictBuyers: PredictBuyers { .init(server, path + "/predict-buyers") }

                    /// path: /user/offers/{category}/{offerID}/product
                    var product: Product { .init(server, path + "/product") }

                    /// path: /user/offers/{category}/{offerID}/products
                    var products: Products { .init(server, path + "/products") }

                    /// path: /user/offers/{category}/{offerID}/requisites
                    var requisites: Requisites { .init(server, path + "/requisites") }

                    /// path: /user/offers/{category}/{offerID}/same
                    var same: Same { .init(server, path + "/same") }

                    /// path: /user/offers/{category}/{offerID}/stats
                    var stats: Stats { .init(server, path + "/stats") }

                    /// path: /user/offers/{category}/{offerID}/transparency-scoring
                    var transparencyScoring: TransparencyScoring { .init(server, path + "/transparency-scoring") }
                }

                /// path: /user/offers/{category}/auction
                var auction: Auction { .init(server, path + "/auction") }

                /// path: /user/offers/{category}/count
                var count: Count { .init(server, path + "/count") }

                /// method: GET /user/offers/{category}
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

                /// path: /user/offers/{category}/mark-models
                var markModels: MarkModels { .init(server, path + "/mark-models") }

                /// path: /user/offers/{category}/{offerID}
                func offerID(_ offerID: String) -> OfferID { .init(server, path + "/\(offerID)") }
            }

            final class VinSuggest: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case limit(String)
                        case vinPrefix(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .limit(let value): return "limit=\(value)"
                            case .vinPrefix(let value): return "vin_prefix=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_VinSuggestResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_VinSuggestResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /user/offers/vin-suggest
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /user/offers/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }

            /// path: /user/offers/vin-suggest
            var vinSuggest: VinSuggest { .init(server, path + "/vin-suggest") }
        }

        final class Password: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_ChangePasswordParameters, Vertis_Passport_LoginResult>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ChangePasswordParameters, Vertis_Passport_LoginResult>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_ChangePasswordParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ChangePasswordParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_ChangePasswordParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ChangePasswordParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_ChangePasswordParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ChangePasswordParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /user/password
            var post: Post { .init(server, path) }
        }

        final class Phones: EndpointBuilder {
            final class Confirm: EndpointBuilder {
                final class Post {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<Vertis_Passport_ConfirmPhoneParameters, Vertis_Passport_ConfirmIdentityResult>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ConfirmPhoneParameters, Vertis_Passport_ConfirmIdentityResult>(
                            responseCode: ._200,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<Vertis_Passport_ConfirmPhoneParameters, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_ConfirmPhoneParameters, Response>(
                            responseCode: status,
                            method: .post,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                        checker: ((Vertis_Passport_ConfirmPhoneParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ConfirmPhoneParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                        checker: ((Vertis_Passport_ConfirmPhoneParameters, Int) -> ExpectationCheckerVerdict)? = nil
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_ConfirmPhoneParameters>(
                            method: .post,
                            path: path,
                            parameters: nil,
                            checker: checker,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: POST /user/phones/confirm
                var post: Post { .init(server, path) }
            }

            final class Phone: EndpointBuilder {
                final class Delete {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                            responseCode: ._200,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .delete,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .delete,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: DELETE /user/phones/{phone}
                var delete: Delete { .init(server, path) }
            }

            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_AddPhoneParameters, Auto_Api_AddIdentityResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_AddPhoneParameters, Auto_Api_AddIdentityResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_AddPhoneParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_AddPhoneParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_AddPhoneParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_AddPhoneParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_AddPhoneParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_AddPhoneParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// path: /user/phones/confirm
            var confirm: Confirm { .init(server, path + "/confirm") }

            /// path: /user/phones/{phone}
            func phone(_ phone: String) -> Phone { .init(server, path + "/\(phone)") }

            /// method: POST /user/phones
            var post: Post { .init(server, path) }
        }

        final class Profile: EndpointBuilder {
            final class Get {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Vertis_Passport_AutoruUserProfile>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Vertis_Passport_AutoruUserProfile>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_AutoruUserProfilePatch, Vertis_Passport_AutoruUserProfile>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_AutoruUserProfilePatch, Vertis_Passport_AutoruUserProfile>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_AutoruUserProfilePatch, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_AutoruUserProfilePatch, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_AutoruUserProfilePatch, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_AutoruUserProfilePatch>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_AutoruUserProfilePatch, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_AutoruUserProfilePatch>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class UserpicUploadUri: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_UserpicUploadUriResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_UserpicUploadUriResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /user/profile/userpic-upload-uri
                var get: Get { .init(server, path) }
            }

            /// method: GET /user/profile
            var get: Get { .init(server, path) }

            /// method: POST /user/profile
            var post: Post { .init(server, path) }

            /// path: /user/profile/userpic-upload-uri
            var userpicUploadUri: UserpicUploadUri { .init(server, path + "/userpic-upload-uri") }
        }

        final class Reviews: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case page(Int)
                    case pageSize(Int)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .page(let value): return "page=\(value)"
                        case .pageSize(let value): return "page_size=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class ReviewId: EndpointBuilder {
                final class Get {
                    fileprivate let server: StubServer
                    fileprivate let path: String

                    fileprivate init(_ server: StubServer, _ path: String) {
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_ReviewListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_ReviewListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: nil,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: nil,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /user/reviews/{reviewId}
                var get: Get { .init(server, path) }
            }

            /// method: GET /user/reviews
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

            /// path: /user/reviews/{reviewId}
            func reviewId(_ reviewId: String) -> ReviewId { .init(server, path + "/\(reviewId)") }
        }

        final class SocialProfiles: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<Vertis_Passport_AddSocialProfileParameters, Auto_Api_SuccessResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_AddSocialProfileParameters, Auto_Api_SuccessResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<Vertis_Passport_AddSocialProfileParameters, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, Vertis_Passport_AddSocialProfileParameters, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                    checker: ((Vertis_Passport_AddSocialProfileParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_AddSocialProfileParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                    checker: ((Vertis_Passport_AddSocialProfileParameters, Int) -> ExpectationCheckerVerdict)? = nil
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, Vertis_Passport_AddSocialProfileParameters>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: checker,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            final class Provider: EndpointBuilder {
                final class SocialUserId: EndpointBuilder {
                    final class Delete {
                        fileprivate let server: StubServer
                        fileprivate let path: String

                        fileprivate init(_ server: StubServer, _ path: String) {
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: nil,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: nil,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /user/social-profiles/{provider}/{socialUserId}
                    var delete: Delete { .init(server, path) }
                }

                /// path: /user/social-profiles/{provider}/{socialUserId}
                func socialUserId(_ socialUserId: String) -> SocialUserId { .init(server, path + "/\(socialUserId)") }
            }

            /// method: POST /user/social-profiles
            var post: Post { .init(server, path) }

            /// path: /user/social-profiles/{provider}
            func provider(_ provider: String) -> Provider { .init(server, path + "/\(provider)") }
        }

        final class Transaction: EndpointBuilder {
            final class TransactionId: EndpointBuilder {
                final class Prolongable: EndpointBuilder {
                    final class Delete {
                        enum QueryParameter: EndpointQueryParameter {
                            case domain(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .domain(let value): return "domain=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .delete,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    final class Put {
                        enum QueryParameter: EndpointQueryParameter {
                            case domain(String)
                            case _unknown(String, String)

                            var queryRepresentation: String {
                                switch self {
                                case .domain(let value): return "domain=\(value)"
                                case ._unknown(let key, let value): return "\(key)=\(value)"
                                }
                            }
                        }

                        fileprivate let server: StubServer
                        fileprivate let path: String
                        fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                        fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                            self.parameters = parameters
                            self.server = server
                            self.path = path
                        }

                        func ok(
                            mock: MockSource<StubProtobufMessage, Auto_Api_SuccessResponse>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_SuccessResponse>(
                                responseCode: ._200,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func error<Response: SwiftProtobuf.Message>(
                            status: HTTPResponseStatus = ._400,
                            mock: MockSource<StubProtobufMessage, Response>
                        ) {
                            let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                                responseCode: status,
                                method: .put,
                                path: path,
                                parameters: parameters,
                                mock: mock
                            )
                            endpoint.use(with: server)
                        }

                        func expect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: false
                            )
                            return expectation.make(with: server)
                        }

                        func notExpect(
                        ) -> XCTestExpectation {
                            let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                                method: .put,
                                path: path,
                                parameters: parameters,
                                checker: nil,
                                isInverted: true
                            )
                            return expectation.make(with: server)
                        }
                    }

                    /// method: DELETE /user/transaction/{transactionId}/prolongable
                    func delete(parameters: EndpointQueryParametersMatching<Delete.QueryParameter>) -> Delete { .init(server, path, parameters) }

                    /// method: PUT /user/transaction/{transactionId}/prolongable
                    func put(parameters: EndpointQueryParametersMatching<Put.QueryParameter>) -> Put { .init(server, path, parameters) }
                }

                /// path: /user/transaction/{transactionId}/prolongable
                var prolongable: Prolongable { .init(server, path + "/prolongable") }
            }

            /// path: /user/transaction/{transactionId}
            func transactionId(_ transactionId: String) -> TransactionId { .init(server, path + "/\(transactionId)") }
        }

        final class UserID: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case withAuthTypes(Bool)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .withAuthTypes(let value): return "with_auth_types=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_UserResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_UserResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /user/{userID}
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        /// path: /user/app2app
        var app2app: App2app { .init(server, path + "/app2app") }

        /// path: /user/compare
        var compare: Compare { .init(server, path + "/compare") }

        /// path: /user/confirm
        var confirm: Confirm { .init(server, path + "/confirm") }

        /// path: /user/draft
        var draft: Draft { .init(server, path + "/draft") }

        /// path: /user/email
        var email: Email { .init(server, path + "/email") }

        /// path: /user/{encryptedUserID}
        func encryptedUserID(_ encryptedUserID: String) -> EncryptedUserID { .init(server, path + "/\(encryptedUserID)") }

        /// path: /user/{encryptedUserId}
        func encryptedUserId(_ encryptedUserId: String) -> EncryptedUserId { .init(server, path + "/\(encryptedUserId)") }

        /// path: /user/favorites
        var favorites: Favorites { .init(server, path + "/favorites") }

        /// path: /user/forget
        var forget: Forget { .init(server, path + "/forget") }

        /// method: GET /user
        func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }

        /// path: /user/notes
        var notes: Notes { .init(server, path + "/notes") }

        /// path: /user/offers
        var offers: Offers { .init(server, path + "/offers") }

        /// path: /user/password
        var password: Password { .init(server, path + "/password") }

        /// path: /user/phones
        var phones: Phones { .init(server, path + "/phones") }

        /// path: /user/profile
        var profile: Profile { .init(server, path + "/profile") }

        /// path: /user/reviews
        var reviews: Reviews { .init(server, path + "/reviews") }

        /// path: /user/social-profiles
        var socialProfiles: SocialProfiles { .init(server, path + "/social-profiles") }

        /// path: /user/transaction
        var transaction: Transaction { .init(server, path + "/transaction") }

        /// path: /user/{userID}
        func userID(_ userID: Int) -> UserID { .init(server, path + "/\(userID)") }
    }

    final class Video: EndpointBuilder {
        final class Search: EndpointBuilder {
            enum CategoryParam: CustomStringConvertible {
                case cars
                case moto
                case trucks
                case _unknown(String)

                var description: String {
                    switch self {
                    case .cars: return "cars"
                    case .moto: return "moto"
                    case .trucks: return "trucks"
                    case ._unknown(let value): return value
                    }
                }
            }

            final class Category: EndpointBuilder {
                final class Get {
                    enum QueryParameter: EndpointQueryParameter {
                        case catalogFilter(String)
                        case mark(String)
                        case model(String)
                        case motoCategory(String)
                        case page(Int)
                        case pageSize(Int)
                        case superGen(String)
                        case truckCategory(String)
                        case vendor(String)
                        case _unknown(String, String)

                        var queryRepresentation: String {
                            switch self {
                            case .catalogFilter(let value): return "catalog_filter=\(value)"
                            case .mark(let value): return "mark=\(value)"
                            case .model(let value): return "model=\(value)"
                            case .motoCategory(let value): return "moto_category=\(value)"
                            case .page(let value): return "page=\(value)"
                            case .pageSize(let value): return "page_size=\(value)"
                            case .superGen(let value): return "super_gen=\(value)"
                            case .truckCategory(let value): return "truck_category=\(value)"
                            case .vendor(let value): return "vendor=\(value)"
                            case ._unknown(let key, let value): return "\(key)=\(value)"
                            }
                        }
                    }

                    fileprivate let server: StubServer
                    fileprivate let path: String
                    fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                    fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                        self.parameters = parameters
                        self.server = server
                        self.path = path
                    }

                    func ok(
                        mock: MockSource<StubProtobufMessage, Auto_Api_VideoListingResponse>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_VideoListingResponse>(
                            responseCode: ._200,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func error<Response: SwiftProtobuf.Message>(
                        status: HTTPResponseStatus = ._400,
                        mock: MockSource<StubProtobufMessage, Response>
                    ) {
                        let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                            responseCode: status,
                            method: .get,
                            path: path,
                            parameters: parameters,
                            mock: mock
                        )
                        endpoint.use(with: server)
                    }

                    func expect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: false
                        )
                        return expectation.make(with: server)
                    }

                    func notExpect(
                    ) -> XCTestExpectation {
                        let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                            method: .get,
                            path: path,
                            parameters: parameters,
                            checker: nil,
                            isInverted: true
                        )
                        return expectation.make(with: server)
                    }
                }

                /// method: GET /video/search/{category}
                func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
            }

            /// path: /video/search/{category}
            func category(_ category: CategoryParam) -> Category { .init(server, path + "/\(category)") }
        }

        /// path: /video/search
        var search: Search { .init(server, path + "/search") }
    }

    final class Vox: EndpointBuilder {
        final class GenerateOtt: EndpointBuilder {
            final class Get {
                enum QueryParameter: EndpointQueryParameter {
                    case loginKey(String)
                    case _unknown(String, String)

                    var queryRepresentation: String {
                        switch self {
                        case .loginKey(let value): return "login-key=\(value)"
                        case ._unknown(let key, let value): return "\(key)=\(value)"
                        }
                    }
                }

                fileprivate let server: StubServer
                fileprivate let path: String
                fileprivate let parameters: EndpointQueryParametersMatching<QueryParameter>

                fileprivate init(_ server: StubServer, _ path: String, _ parameters: EndpointQueryParametersMatching<QueryParameter>) {
                    self.parameters = parameters
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_VoxOttResponse>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Auto_Api_VoxOttResponse>(
                        responseCode: ._200,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<QueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .get,
                        path: path,
                        parameters: parameters,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<QueryParameter, StubProtobufMessage>(
                        method: .get,
                        path: path,
                        parameters: parameters,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: GET /vox/generate-ott
            func get(parameters: EndpointQueryParametersMatching<Get.QueryParameter>) -> Get { .init(server, path, parameters) }
        }

        final class SignUpUser: EndpointBuilder {
            final class Post {
                fileprivate let server: StubServer
                fileprivate let path: String

                fileprivate init(_ server: StubServer, _ path: String) {
                    self.server = server
                    self.path = path
                }

                func ok(
                    mock: MockSource<StubProtobufMessage, Auto_Api_AddVoxUserResponse>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Auto_Api_AddVoxUserResponse>(
                        responseCode: ._200,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func error<Response: SwiftProtobuf.Message>(
                    status: HTTPResponseStatus = ._400,
                    mock: MockSource<StubProtobufMessage, Response>
                ) {
                    let endpoint = MockedEndpoint<StubEndpointQueryParameter, StubProtobufMessage, Response>(
                        responseCode: status,
                        method: .post,
                        path: path,
                        parameters: nil,
                        mock: mock
                    )
                    endpoint.use(with: server)
                }

                func expect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: false
                    )
                    return expectation.make(with: server)
                }

                func notExpect(
                ) -> XCTestExpectation {
                    let expectation = MockedEndpointExpectation<StubEndpointQueryParameter, StubProtobufMessage>(
                        method: .post,
                        path: path,
                        parameters: nil,
                        checker: nil,
                        isInverted: true
                    )
                    return expectation.make(with: server)
                }
            }

            /// method: POST /vox/sign-up-user
            var post: Post { .init(server, path) }
        }

        /// path: /vox/generate-ott
        var generateOtt: GenerateOtt { .init(server, path + "/generate-ott") }

        /// path: /vox/sign-up-user
        var signUpUser: SignUpUser { .init(server, path + "/sign-up-user") }
    }

}

final class API {
    fileprivate let server: StubServer

    init(server: StubServer) { self.server = server }

    /// path: /auth
    var auth: PublicAPI.Auth { PublicAPI.Auth(server, "/auth") }

    /// path: /autoparts
    var autoparts: PublicAPI.Autoparts { PublicAPI.Autoparts(server, "/autoparts") }

    /// path: /autoservices
    var autoservices: PublicAPI.Autoservices { PublicAPI.Autoservices(server, "/autoservices") }

    /// path: /billing
    var billing: PublicAPI.Billing { PublicAPI.Billing(server, "/billing") }

    /// path: /booking
    var booking: PublicAPI.Booking { PublicAPI.Booking(server, "/booking") }

    /// path: /c2b-auction
    var c2bAuction: PublicAPI.C2bAuction { PublicAPI.C2bAuction(server, "/c2b-auction") }

    /// path: /carfax
    var carfax: PublicAPI.Carfax { PublicAPI.Carfax(server, "/carfax") }

    /// path: /chat
    var chat: PublicAPI.Chat { PublicAPI.Chat(server, "/chat") }

    /// path: /cme
    var cme: PublicAPI.Cme { PublicAPI.Cme(server, "/cme") }

    /// path: /comments
    var comments: PublicAPI.Comments { PublicAPI.Comments(server, "/comments") }

    /// path: /dealer
    var dealer: PublicAPI.Dealer { PublicAPI.Dealer(server, "/dealer") }

    /// path: /promo-landing
    var promoLanding: PublicAPI.PromoLanding { PublicAPI.PromoLanding(server, "/promo-landing") }

    /// path: /events
    var events: PublicAPI.Events { PublicAPI.Events(server, "/events") }

    /// path: /features
    var features: PublicAPI.Features { PublicAPI.Features(server, "/features") }

    /// path: /feedback
    var feedback: PublicAPI.Feedback { PublicAPI.Feedback(server, "/feedback") }

    /// path: /feeds
    var feeds: PublicAPI.Feeds { PublicAPI.Feeds(server, "/feeds") }

    /// path: /garage
    var garage: PublicAPI.Garage { PublicAPI.Garage(server, "/garage") }

    /// path: /geo
    var geo: PublicAPI.Geo { PublicAPI.Geo(server, "/geo") }

    /// path: /device
    var device: PublicAPI.Device { PublicAPI.Device(server, "/device") }

    /// path: /unsubscribe
    var unsubscribe: PublicAPI.Unsubscribe { PublicAPI.Unsubscribe(server, "/unsubscribe") }

    /// path: /history
    var history: PublicAPI.History { PublicAPI.History(server, "/history") }

    /// path: /lenta
    var lenta: PublicAPI.Lenta { PublicAPI.Lenta(server, "/lenta") }

    /// path: /magazine
    var magazine: PublicAPI.Magazine { PublicAPI.Magazine(server, "/magazine") }

    /// path: /match-applications
    var matchApplications: PublicAPI.MatchApplications { PublicAPI.MatchApplications(server, "/match-applications") }

    /// path: /notification
    var notification: PublicAPI.Notification { PublicAPI.Notification(server, "/notification") }

    /// path: /offer
    var offer: PublicAPI.Offer { PublicAPI.Offer(server, "/offer") }

    /// path: /panorama
    var panorama: PublicAPI.Panorama { PublicAPI.Panorama(server, "/panorama") }

    /// path: /parsing
    var parsing: PublicAPI.Parsing { PublicAPI.Parsing(server, "/parsing") }

    /// path: /personalization
    var personalization: PublicAPI.Personalization { PublicAPI.Personalization(server, "/personalization") }

    /// path: /photos
    var photos: PublicAPI.Photos { PublicAPI.Photos(server, "/photos") }

    /// path: /products
    var products: PublicAPI.Products { PublicAPI.Products(server, "/products") }

    /// path: /promocode
    var promocode: PublicAPI.Promocode { PublicAPI.Promocode(server, "/promocode") }

    /// path: /recalls
    var recalls: PublicAPI.Recalls { PublicAPI.Recalls(server, "/recalls") }

    /// path: /reference
    var reference: PublicAPI.Reference { PublicAPI.Reference(server, "/reference") }

    /// path: /reviews
    var reviews: PublicAPI.Reviews { PublicAPI.Reviews(server, "/reviews") }

    /// path: /safe-deal
    var safeDeal: PublicAPI.SafeDeal { PublicAPI.SafeDeal(server, "/safe-deal") }

    /// path: /salon
    var salon: PublicAPI.Salon { PublicAPI.Salon(server, "/salon") }

    /// path: /search
    var search: PublicAPI.Search { PublicAPI.Search(server, "/search") }

    /// path: /searchline
    var searchline: PublicAPI.Searchline { PublicAPI.Searchline(server, "/searchline") }

    /// path: /session
    var session: PublicAPI.Session { PublicAPI.Session(server, "/session") }

    /// path: /shark
    var shark: PublicAPI.Shark { PublicAPI.Shark(server, "/shark") }

    /// path: /stats
    var stats: PublicAPI.Stats { PublicAPI.Stats(server, "/stats") }

    /// path: /story
    var story: PublicAPI.Story { PublicAPI.Story(server, "/story") }

    /// path: /trade-in
    var tradeIn: PublicAPI.TradeIn { PublicAPI.TradeIn(server, "/trade-in") }

    /// path: /user
    var user: PublicAPI.User { PublicAPI.User(server, "/user") }

    /// path: /video
    var video: PublicAPI.Video { PublicAPI.Video(server, "/video") }

    /// path: /vox
    var vox: PublicAPI.Vox { PublicAPI.Vox(server, "/vox") }

}
