// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pandora_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (*ExecutionResult, error)
	FindObject(ctx context.Context, in *FindObjectRequest, opts ...grpc.CallOption) (*Any, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

var searchExecuteStreamDesc = &grpc.StreamDesc{
	StreamName: "Execute",
}

func (c *searchClient) Execute(ctx context.Context, in *ExecutionRequest, opts ...grpc.CallOption) (*ExecutionResult, error) {
	out := new(ExecutionResult)
	err := c.cc.Invoke(ctx, "/vertis.vasgen.grpc.Search/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var searchFindObjectStreamDesc = &grpc.StreamDesc{
	StreamName: "FindObject",
}

func (c *searchClient) FindObject(ctx context.Context, in *FindObjectRequest, opts ...grpc.CallOption) (*Any, error) {
	out := new(Any)
	err := c.cc.Invoke(ctx, "/vertis.vasgen.grpc.Search/FindObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchService is the service API for Search service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSearchService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SearchService struct {
	Execute    func(context.Context, *ExecutionRequest) (*ExecutionResult, error)
	FindObject func(context.Context, *FindObjectRequest) (*Any, error)
}

func (s *SearchService) execute(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/vertis.vasgen.grpc.Search/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Execute(ctx, req.(*ExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SearchService) findObject(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.FindObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/vertis.vasgen.grpc.Search/FindObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.FindObject(ctx, req.(*FindObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterSearchService registers a service implementation with a gRPC server.
func RegisterSearchService(s grpc.ServiceRegistrar, srv *SearchService) {
	srvCopy := *srv
	if srvCopy.Execute == nil {
		srvCopy.Execute = func(context.Context, *ExecutionRequest) (*ExecutionResult, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
		}
	}
	if srvCopy.FindObject == nil {
		srvCopy.FindObject = func(context.Context, *FindObjectRequest) (*Any, error) {
			return nil, status.Errorf(codes.Unimplemented, "method FindObject not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "vertis.vasgen.grpc.Search",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Execute",
				Handler:    srvCopy.execute,
			},
			{
				MethodName: "FindObject",
				Handler:    srvCopy.findObject,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "all.proto",
	}

	s.RegisterService(&sd, nil)
}
