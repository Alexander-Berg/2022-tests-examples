package ru.yandex.vos2.autoru.letters.renderers

import org.scalatest.funsuite.AnyFunSuite
import ru.yandex.vertis.feature.model.Feature
import ru.yandex.vertis.mockito.MockitoSupport.{mock, when}
import ru.yandex.vertis.tracing.Traced
import ru.yandex.vos2.AutoruModel.AutoruOffer
import ru.yandex.vos2.AutoruModel.AutoruOffer.Notification.NotificationType
import ru.yandex.vos2.OfferModel.Offer
import ru.yandex.vos2.autoru.InitTestDbs
import ru.yandex.vos2.autoru.model.TestUtils
import ru.yandex.vos2.services.pushnoy.PushTemplateV1

/**
  * Created by sievmi on 26.01.18
  */
import org.junit.runner.RunWith
import org.scalatestplus.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class LowRatingRendererTest extends AnyFunSuite with InitTestDbs {
  implicit val trace = Traced.empty

  def addLowRatingNotification(builder: Offer.Builder, num: Int, pos: Int = 100): AutoruOffer.Builder = {
    builder.getOfferAutoruBuilder.addNotifications(
      AutoruOffer.Notification
        .newBuilder()
        .setType(NotificationType.LOW_RATING)
        .addExtraArgs(s"$pos")
        .setTimestampCreate(num)
    )
  }

  val isSpamalotFeature: Feature[Boolean] = mock[Feature[Boolean]]
  when(isSpamalotFeature.value).thenReturn(true)
  val renderer = new LowRatingRenderer(isSpamalotFeature)

  test("first push") {
    val offerBuilder = TestUtils.createOffer()
    addLowRatingNotification(offerBuilder, 1)
    val res = renderer.render(offerBuilder.build(), Seq("1"))
    res.push match {
      case push: Option[PushTemplateV1] =>
        assert(push.nonEmpty)
        assert(push.get.androidTitle === Some("üìû –ú–∞–ª–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é?"))
        assert(
          push.get.androidBody === s"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ 1-–µ –≤ —Å–ø–∏—Å–∫–µ\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –µ–≥–æ –≤–∏–¥–µ–ª–∏"
        )
        assert(
          push.get.iosBody === s"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ 1-–µ –≤ —Å–ø–∏—Å–∫–µ\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –µ–≥–æ –≤–∏–¥–µ–ª–∏"
        )
    }

  }

  test("second push") {
    val offerBuilder = TestUtils.createOffer()
    addLowRatingNotification(offerBuilder, 1)
    addLowRatingNotification(offerBuilder, 2)
    val res = renderer.render(offerBuilder.build(), Seq("2"))
    res.push match {
      case push: Option[PushTemplateV1] =>
        assert(push.nonEmpty)
        assert(push.get.androidTitle === Some("üìû –ú–∞–ª–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é?"))
        assert(
          push.get.androidBody === s"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞ 2-–º –º–µ—Å—Ç–µ\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ ‚Äî –∑–≤–æ–Ω–∏—Ç—å –±—É–¥—É—Ç —á–∞—â–µ"
        )
        assert(
          push.get.iosBody === s"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–∞ 2-–º –º–µ—Å—Ç–µ\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ ‚Äî –∑–≤–æ–Ω–∏—Ç—å –±—É–¥—É—Ç —á–∞—â–µ"
        )
    }
  }

  test("third push") {
    val offerBuilder = TestUtils.createOffer()
    addLowRatingNotification(offerBuilder, 1)
    addLowRatingNotification(offerBuilder, 2)
    addLowRatingNotification(offerBuilder, 3)
    val res = renderer.render(offerBuilder.build(), Seq("3"))
    res.push match {
      case push: Option[PushTemplateV1] =>
        assert(push.nonEmpty)
        assert(push.get.androidTitle === Some("üìû –ú–∞–ª–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é?"))
        assert(
          push.get.androidBody === s"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ 3-–µ –≤ —Å–ø–∏—Å–∫–µ\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ, –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –µ–≥–æ –∑–∞–º–µ—Ç—è—Ç"
        )
        assert(
          push.get.iosBody === s"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ 3-–µ –≤ —Å–ø–∏—Å–∫–µ\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ, –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –µ–≥–æ –∑–∞–º–µ—Ç—è—Ç"
        )
    }
  }

  test("fourth push") {
    val offerBuilder = TestUtils.createOffer()
    addLowRatingNotification(offerBuilder, 1)
    addLowRatingNotification(offerBuilder, 2)
    addLowRatingNotification(offerBuilder, 3)
    addLowRatingNotification(offerBuilder, 4)
    val res = renderer.render(offerBuilder.build(), Seq("4"))
    res.push match {
      case push: Option[PushTemplateV1] =>
        assert(push.nonEmpty)
        assert(push.get.androidTitle === Some("üìû –ú–∞–ª–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é?"))
        assert(
          push.get.androidBody === s"–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ä–µ–¥–∫–æ –≤–∏–¥—è—Ç –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–í–µ–¥—å –æ–Ω–æ 4-–µ –≤ —Å–ø–∏—Å–∫–µ :( –ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ"
        )
        assert(
          push.get.iosBody === s"–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —Ä–µ–¥–∫–æ –≤–∏–¥—è—Ç –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n–í–µ–¥—å –æ–Ω–æ 4-–µ –≤ —Å–ø–∏—Å–∫–µ :( –ü–æ–¥–Ω–∏–º–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–∏—Å–∫–µ"
        )
    }
  }

}
