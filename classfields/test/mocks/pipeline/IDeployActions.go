// Code generated by mockery v2.12.2. DO NOT EDIT.

package pipeline

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// IDeployActions is an autogenerated mock type for the IDeployActions type
type IDeployActions struct {
	mock.Mock
}

// Disable provides a mock function with given fields: systemName, layer, dc
func (_m *IDeployActions) Disable(systemName string, layer string, dc string) error {
	ret := _m.Called(systemName, layer, dc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(systemName, layer, dc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Enable provides a mock function with given fields: systemName, layer, dc
func (_m *IDeployActions) Enable(systemName string, layer string, dc string) error {
	ret := _m.Called(systemName, layer, dc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(systemName, layer, dc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIDeployActions creates a new instance of IDeployActions. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDeployActions(t testing.TB) *IDeployActions {
	mock := &IDeployActions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
