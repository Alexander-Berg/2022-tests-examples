// Code generated by mockery v2.13.1. DO NOT EDIT.

package arcanum

import (
	pkgarcanum "aptly/pkg/arcanum"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CommentPullRequest provides a mock function with given fields: id, issue
func (_m *IClient) CommentPullRequest(id int64, issue string) error {
	ret := _m.Called(id, issue)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, issue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePullRequest provides a mock function with given fields: branch, summary
func (_m *IClient) CreatePullRequest(branch string, summary string) (int64, error) {
	ret := _m.Called(branch, summary)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(branch, summary)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(branch, summary)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPullRequestStatus provides a mock function with given fields: id
func (_m *IClient) GetPullRequestStatus(id int64) (pkgarcanum.Status, error) {
	ret := _m.Called(id)

	var r0 pkgarcanum.Status
	if rf, ok := ret.Get(0).(func(int64) pkgarcanum.Status); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(pkgarcanum.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIClient(t mockConstructorTestingTNewIClient) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
