// Code generated by mockery v2.9.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	agent "golang.org/x/crypto/ssh/agent"

	ssh "golang.org/x/crypto/ssh"
)

// SSHAgent is an autogenerated mock type for the ExtendedAgent type
type SSHAgent struct {
	mock.Mock
}

// Add provides a mock function with given fields: key
func (_m *SSHAgent) Add(key agent.AddedKey) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(agent.AddedKey) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Extension provides a mock function with given fields: extensionType, contents
func (_m *SSHAgent) Extension(extensionType string, contents []byte) ([]byte, error) {
	ret := _m.Called(extensionType, contents)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, []byte) []byte); ok {
		r0 = rf(extensionType, contents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(extensionType, contents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *SSHAgent) List() ([]*agent.Key, error) {
	ret := _m.Called()

	var r0 []*agent.Key
	if rf, ok := ret.Get(0).(func() []*agent.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*agent.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lock provides a mock function with given fields: passphrase
func (_m *SSHAgent) Lock(passphrase []byte) error {
	ret := _m.Called(passphrase)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(passphrase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: key
func (_m *SSHAgent) Remove(key ssh.PublicKey) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(ssh.PublicKey) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveAll provides a mock function with given fields:
func (_m *SSHAgent) RemoveAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sign provides a mock function with given fields: key, data
func (_m *SSHAgent) Sign(key ssh.PublicKey, data []byte) (*ssh.Signature, error) {
	ret := _m.Called(key, data)

	var r0 *ssh.Signature
	if rf, ok := ret.Get(0).(func(ssh.PublicKey, []byte) *ssh.Signature); ok {
		r0 = rf(key, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssh.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ssh.PublicKey, []byte) error); ok {
		r1 = rf(key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignWithFlags provides a mock function with given fields: key, data, flags
func (_m *SSHAgent) SignWithFlags(key ssh.PublicKey, data []byte, flags agent.SignatureFlags) (*ssh.Signature, error) {
	ret := _m.Called(key, data, flags)

	var r0 *ssh.Signature
	if rf, ok := ret.Get(0).(func(ssh.PublicKey, []byte, agent.SignatureFlags) *ssh.Signature); ok {
		r0 = rf(key, data, flags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssh.Signature)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ssh.PublicKey, []byte, agent.SignatureFlags) error); ok {
		r1 = rf(key, data, flags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signers provides a mock function with given fields:
func (_m *SSHAgent) Signers() ([]ssh.Signer, error) {
	ret := _m.Called()

	var r0 []ssh.Signer
	if rf, ok := ret.Get(0).(func() []ssh.Signer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ssh.Signer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: passphrase
func (_m *SSHAgent) Unlock(passphrase []byte) error {
	ret := _m.Called(passphrase)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(passphrase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
