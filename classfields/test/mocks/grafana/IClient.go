// Code generated by mockery v2.12.2. DO NOT EDIT.

package grafana

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAnnotation provides a mock function with given fields: message, tags
func (_m *IClient) CreateAnnotation(message string, tags ...string) error {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(message, tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAnnotationTimed provides a mock function with given fields: message, start, end, tags
func (_m *IClient) CreateAnnotationTimed(message string, start time.Time, end time.Time, tags ...string) error {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message, start, end)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time, ...string) error); ok {
		r0 = rf(message, start, end, tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndAnnotation provides a mock function with given fields: tags
func (_m *IClient) EndAnnotation(tags ...string) error {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartAnnotation provides a mock function with given fields: message, tags
func (_m *IClient) StartAnnotation(message string, tags ...string) error {
	_va := make([]interface{}, len(tags))
	for _i := range tags {
		_va[_i] = tags[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(message, tags...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIClient creates a new instance of IClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIClient(t testing.TB) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
