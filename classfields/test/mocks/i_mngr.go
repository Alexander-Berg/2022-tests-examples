// Code generated by mockery v2.9.3. DO NOT EDIT.

package mocks

import (
	idm "github.com/YandexClassifieds/h2p/common/idm"
	mock "github.com/stretchr/testify/mock"

	models "github.com/YandexClassifieds/h2p/cmd/h2p-idm/models"
)

// IMngr is an autogenerated mock type for the IMngr type
type IMngr struct {
	mock.Mock
}

// AddEntry provides a mock function with given fields: entry
func (_m *IMngr) AddEntry(entry *models.Entry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Entry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOwner provides a mock function with given fields: service, owner
func (_m *IMngr) AddOwner(service string, owner idm.Owner) error {
	ret := _m.Called(service, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, idm.Owner) error); ok {
		r0 = rf(service, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRole provides a mock function with given fields: role
func (_m *IMngr) AddRole(role models.Role) error {
	ret := _m.Called(role)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Role) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEntry provides a mock function with given fields: entry
func (_m *IMngr) DeleteEntry(entry *models.Entry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Entry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOwner provides a mock function with given fields: service, owner
func (_m *IMngr) DeleteOwner(service string, owner idm.Owner) error {
	ret := _m.Called(service, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, idm.Owner) error); ok {
		r0 = rf(service, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRole provides a mock function with given fields: role
func (_m *IMngr) DeleteRole(role models.Role) error {
	ret := _m.Called(role)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Role) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEntries provides a mock function with given fields: t
func (_m *IMngr) GetEntries(t models.Type) (models.Entries, error) {
	ret := _m.Called(t)

	var r0 models.Entries
	if rf, ok := ret.Get(0).(func(models.Type) models.Entries); ok {
		r0 = rf(t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Entries)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Type) error); ok {
		r1 = rf(t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwnerRolesMap provides a mock function with given fields:
func (_m *IMngr) GetOwnerRolesMap() (map[string][]idm.Owner, error) {
	ret := _m.Called()

	var r0 map[string][]idm.Owner
	if rf, ok := ret.Get(0).(func() map[string][]idm.Owner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]idm.Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwners provides a mock function with given fields:
func (_m *IMngr) GetOwners() (map[string][]idm.Owner, error) {
	ret := _m.Called()

	var r0 map[string][]idm.Owner
	if rf, ok := ret.Get(0).(func() map[string][]idm.Owner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]idm.Owner)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoles provides a mock function with given fields:
func (_m *IMngr) GetRoles() ([]models.Role, error) {
	ret := _m.Called()

	var r0 []models.Role
	if rf, ok := ret.Get(0).(func() []models.Role); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
