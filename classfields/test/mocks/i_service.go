// Code generated by mockery v2.9.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	service_map "github.com/YandexClassifieds/h2p/pb/shiva/service_map"
)

// IServiceMap is an autogenerated mock type for the IService type
type IServiceMap struct {
	mock.Mock
}

// GetOwners provides a mock function with given fields: path
func (_m *IServiceMap) GetOwners(path string) ([]string, error) {
	ret := _m.Called(path)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: service
func (_m *IServiceMap) GetService(service string) (*service_map.ServiceMap, error) {
	ret := _m.Called(service)

	var r0 *service_map.ServiceMap
	if rf, ok := ret.Get(0).(func(string) *service_map.ServiceMap); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service_map.ServiceMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: types
func (_m *IServiceMap) GetServices(types []service_map.ServiceType) ([]*service_map.ServiceMap, error) {
	ret := _m.Called(types)

	var r0 []*service_map.ServiceMap
	if rf, ok := ret.Get(0).(func([]service_map.ServiceType) []*service_map.ServiceMap); ok {
		r0 = rf(types)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service_map.ServiceMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]service_map.ServiceType) error); ok {
		r1 = rf(types)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
