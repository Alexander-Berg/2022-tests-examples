// Code generated by mockery v2.9.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	idm "github.com/YandexClassifieds/h2p/common/idm"
	mock "github.com/stretchr/testify/mock"
)

// IIDMService is an autogenerated mock type for the IIDMService type
type IIDMService struct {
	mock.Mock
}

// AddNodeRecursive provides a mock function with given fields: initPath, path, uniqueId, fields, visible
func (_m *IIDMService) AddNodeRecursive(initPath string, path []string, uniqueId string, fields *[]idm.RoleField, visible bool) {
	_m.Called(initPath, path, uniqueId, fields, visible)
}

// AddRoleOwner provides a mock function with given fields: service, owner
func (_m *IIDMService) AddRoleOwner(service string, owner idm.Owner) error {
	ret := _m.Called(service, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, idm.Owner) error); ok {
		r0 = rf(service, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Approve provides a mock function with given fields: id, approve, comment
func (_m *IIDMService) Approve(id int, approve bool, comment string) error {
	ret := _m.Called(id, approve, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, bool, string) error); ok {
		r0 = rf(id, approve, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApproveRequests provides a mock function with given fields: status, approver
func (_m *IIDMService) ApproveRequests(status string, approver string) (*idm.APIApproveRequests, error) {
	ret := _m.Called(status, approver)

	var r0 *idm.APIApproveRequests
	if rf, ok := ret.Get(0).(func(string, string) *idm.APIApproveRequests); ok {
		r0 = rf(status, approver)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idm.APIApproveRequests)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, approver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckRole provides a mock function with given fields: user, valuePath
func (_m *IIDMService) CheckRole(user string, valuePath string) error {
	ret := _m.Called(user, valuePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user, valuePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNode provides a mock function with given fields: path
func (_m *IIDMService) DeleteNode(path string) {
	_m.Called(path)
}

// DeleteRoleOwner provides a mock function with given fields: service, owner
func (_m *IIDMService) DeleteRoleOwner(service string, owner idm.Owner) error {
	ret := _m.Called(service, owner)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, idm.Owner) error); ok {
		r0 = rf(service, owner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ErrorResponse provides a mock function with given fields: w, code, severity, msg, data
func (_m *IIDMService) ErrorResponse(w http.ResponseWriter, code int, severity idm.Severity, msg string, data *idm.FieldsData) {
	_m.Called(w, code, severity, msg, data)
}

// GetNodeDescription provides a mock function with given fields: slugPath
func (_m *IIDMService) GetNodeDescription(slugPath string) (*idm.APINodeDescription, error) {
	ret := _m.Called(slugPath)

	var r0 *idm.APINodeDescription
	if rf, ok := ret.Get(0).(func(string) *idm.APINodeDescription); ok {
		r0 = rf(slugPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*idm.APINodeDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slugPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSoxTicket provides a mock function with given fields: fields
func (_m *IIDMService) GetSoxTicket(fields string) (bool, string, error) {
	ret := _m.Called(fields)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(fields)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(fields)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(fields)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ParseFields provides a mock function with given fields: fields
func (_m *IIDMService) ParseFields(fields string) (map[string]interface{}, error) {
	ret := _m.Called(fields)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestRoleCli provides a mock function with given fields: valuePath, user, comment, depriveAfterDays
func (_m *IIDMService) RequestRoleCli(valuePath string, user string, comment string, depriveAfterDays int) error {
	ret := _m.Called(valuePath, user, comment, depriveAfterDays)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) error); ok {
		r0 = rf(valuePath, user, comment, depriveAfterDays)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *IIDMService) SetToken(token string) {
	_m.Called(token)
}
