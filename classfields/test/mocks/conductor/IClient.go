// Code generated by mockery v2.12.2. DO NOT EDIT.

package conductor

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// FilterHostsByDC provides a mock function with given fields: hosts, dc
func (_m *IClient) FilterHostsByDC(hosts []string, dc string) []string {
	ret := _m.Called(hosts, dc)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string, string) []string); ok {
		r0 = rf(hosts, dc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GroupToHosts provides a mock function with given fields: group
func (_m *IClient) GroupToHosts(group string) ([]string, error) {
	ret := _m.Called(group)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupsToHosts provides a mock function with given fields: groups
func (_m *IClient) GroupsToHosts(groups []string) ([]string, error) {
	ret := _m.Called(groups)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(groups)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(groups)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIClient(t testing.TB) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
