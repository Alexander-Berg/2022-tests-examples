// Code generated by mockery v2.12.2. DO NOT EDIT.

package lb

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// ISystem is an autogenerated mock type for the ISystem type
type ISystem struct {
	mock.Mock
}

// Close provides a mock function with given fields: dc
func (_m *ISystem) Close(dc string) error {
	ret := _m.Called(dc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ISystem) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Open provides a mock function with given fields: dc
func (_m *ISystem) Open(dc string) error {
	ret := _m.Called(dc)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISystem creates a new instance of ISystem. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewISystem(t testing.TB) *ISystem {
	mock := &ISystem{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
