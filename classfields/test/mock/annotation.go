// Code generated by mockery. DO NOT EDIT.

package mock

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// IAnnotation is an autogenerated mock type for the IAnnotation type
type IAnnotation struct {
	mock.Mock
}

// Point provides a mock function with given fields: text, tags, _a2
func (_m *IAnnotation) Point(text string, tags []string, _a2 time.Time) (int64, error) {
	ret := _m.Called(text, tags, _a2)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, []string, time.Time) int64); ok {
		r0 = rf(text, tags, _a2)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, time.Time) error); ok {
		r1 = rf(text, tags, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields: text, tags, timeStart
func (_m *IAnnotation) Start(text string, tags []string, timeStart time.Time) (int64, error) {
	ret := _m.Called(text, tags, timeStart)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, []string, time.Time) int64); ok {
		r0 = rf(text, tags, timeStart)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, time.Time) error); ok {
		r1 = rf(text, tags, timeStart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: text, tags, timeEnd, id
func (_m *IAnnotation) Stop(text string, tags []string, timeEnd time.Time, id int64) error {
	ret := _m.Called(text, tags, timeEnd, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, time.Time, int64) error); ok {
		r0 = rf(text, tags, timeEnd, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIAnnotation interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAnnotation creates a new instance of IAnnotation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAnnotation(t mockConstructorTestingTNewIAnnotation) *IAnnotation {
	mock := &IAnnotation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
