// Code generated by mockery. DO NOT EDIT.

package mock

import (
	api "github.com/YandexClassifieds/shiva/pkg/tracker/api"
	mock "github.com/stretchr/testify/mock"
)

// TrackerAPI is an autogenerated mock type for the TrackerAPI type
type TrackerAPI struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: issueNumber, commentID
func (_m *TrackerAPI) DeleteComment(issueNumber string, commentID int64) error {
	ret := _m.Called(issueNumber, commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(issueNumber, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRemoteLink provides a mock function with given fields: issueNumber, linkId
func (_m *TrackerAPI) DeleteRemoteLink(issueNumber string, linkId int64) error {
	ret := _m.Called(issueNumber, linkId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(issueNumber, linkId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecuteTransition provides a mock function with given fields: issueNumber, transition
func (_m *TrackerAPI) ExecuteTransition(issueNumber string, transition string) error {
	ret := _m.Called(issueNumber, transition)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(issueNumber, transition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindIssues provides a mock function with given fields: query
func (_m *TrackerAPI) FindIssues(query string) ([]*api.Issue, error) {
	ret := _m.Called(query)

	var r0 []*api.Issue
	if rf, ok := ret.Get(0).(func(string) []*api.Issue); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Issue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComment provides a mock function with given fields: issueNumber, commentID
func (_m *TrackerAPI) GetComment(issueNumber string, commentID int64) (*api.Comment, error) {
	ret := _m.Called(issueNumber, commentID)

	var r0 *api.Comment
	if rf, ok := ret.Get(0).(func(string, int64) *api.Comment); ok {
		r0 = rf(issueNumber, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(issueNumber, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: issueNumber
func (_m *TrackerAPI) GetComments(issueNumber string) ([]*api.Comment, error) {
	ret := _m.Called(issueNumber)

	var r0 []*api.Comment
	if rf, ok := ret.Get(0).(func(string) []*api.Comment); ok {
		r0 = rf(issueNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(issueNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIssue provides a mock function with given fields: number
func (_m *TrackerAPI) GetIssue(number string) (*api.Issue, error) {
	ret := _m.Called(number)

	var r0 *api.Issue
	if rf, ok := ret.Get(0).(func(string) *api.Issue); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Issue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueue provides a mock function with given fields: name
func (_m *TrackerAPI) GetQueue(name string) (*api.Queue, error) {
	ret := _m.Called(name)

	var r0 *api.Queue
	if rf, ok := ret.Get(0).(func(string) *api.Queue); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Queue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteLinks provides a mock function with given fields: issueNumber, origin
func (_m *TrackerAPI) GetRemoteLinks(issueNumber string, origin string) ([]*api.RemoteLinkResponse, error) {
	ret := _m.Called(issueNumber, origin)

	var r0 []*api.RemoteLinkResponse
	if rf, ok := ret.Get(0).(func(string, string) []*api.RemoteLinkResponse); ok {
		r0 = rf(issueNumber, origin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.RemoteLinkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(issueNumber, origin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitions provides a mock function with given fields: issueNumber
func (_m *TrackerAPI) GetTransitions(issueNumber string) ([]*api.Transition, error) {
	ret := _m.Called(issueNumber)

	var r0 []*api.Transition
	if rf, ok := ret.Get(0).(func(string) []*api.Transition); ok {
		r0 = rf(issueNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*api.Transition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(issueNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakeComment provides a mock function with given fields: number, text
func (_m *TrackerAPI) MakeComment(number string, text string) (*api.Comment, error) {
	ret := _m.Called(number, text)

	var r0 *api.Comment
	if rf, ok := ret.Get(0).(func(string, string) *api.Comment); ok {
		r0 = rf(number, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(number, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostRemoteLink provides a mock function with given fields: issueNumber, link
func (_m *TrackerAPI) PostRemoteLink(issueNumber string, link api.CreateRemoteLinkRequest) (*api.RemoteLinkResponse, error) {
	ret := _m.Called(issueNumber, link)

	var r0 *api.RemoteLinkResponse
	if rf, ok := ret.Get(0).(func(string, api.CreateRemoteLinkRequest) *api.RemoteLinkResponse); ok {
		r0 = rf(issueNumber, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.RemoteLinkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, api.CreateRemoteLinkRequest) error); ok {
		r1 = rf(issueNumber, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTrackerAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewTrackerAPI creates a new instance of TrackerAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTrackerAPI(t mockConstructorTestingTNewTrackerAPI) *TrackerAPI {
	mock := &TrackerAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
