// Code generated by mockery. DO NOT EDIT.

package mock

import (
	arcanum "github.com/YandexClassifieds/shiva/pkg/arcanum"
	mock "github.com/stretchr/testify/mock"
)

// ArcanumService is an autogenerated mock type for the IService type
type ArcanumService struct {
	mock.Mock
}

// Comment provides a mock function with given fields: id, comment
func (_m *ArcanumService) Comment(id uint32, comment string) error {
	ret := _m.Called(id, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, string) error); ok {
		r0 = rf(id, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPrInfo provides a mock function with given fields: id
func (_m *ArcanumService) GetPrInfo(id uint32) (*arcanum.PrInfo, error) {
	ret := _m.Called(id)

	var r0 *arcanum.PrInfo
	if rf, ok := ret.Get(0).(func(uint32) *arcanum.PrInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arcanum.PrInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutReviewers provides a mock function with given fields: id, logins
func (_m *ArcanumService) PutReviewers(id uint32, logins []string) error {
	ret := _m.Called(id, logins)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, []string) error); ok {
		r0 = rf(id, logins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewArcanumService interface {
	mock.TestingT
	Cleanup(func())
}

// NewArcanumService creates a new instance of ArcanumService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArcanumService(t mockConstructorTestingTNewArcanumService) *ArcanumService {
	mock := &ArcanumService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
