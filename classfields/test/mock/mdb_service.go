// Code generated by mockery. DO NOT EDIT.

package mock

import (
	mdb "github.com/YandexClassifieds/shiva/pkg/mdb"
	mock "github.com/stretchr/testify/mock"

	service_map "github.com/YandexClassifieds/shiva/pb/shiva/service_map"
)

// MdbService is an autogenerated mock type for the IService type
type MdbService struct {
	mock.Mock
}

// GetCluster provides a mock function with given fields: sType, id
func (_m *MdbService) GetCluster(sType service_map.ServiceType, id string) (*mdb.Cluster, error) {
	ret := _m.Called(sType, id)

	var r0 *mdb.Cluster
	if rf, ok := ret.Get(0).(func(service_map.ServiceType, string) *mdb.Cluster); ok {
		r0 = rf(sType, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mdb.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(service_map.ServiceType, string) error); ok {
		r1 = rf(sType, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMdbService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMdbService creates a new instance of MdbService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMdbService(t mockConstructorTestingTNewMdbService) *MdbService {
	mock := &MdbService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
