// Code generated by mockery. DO NOT EDIT.

package mock

import (
	board "github.com/YandexClassifieds/shiva/pkg/grafana/dashboard/board"

	mock "github.com/stretchr/testify/mock"

	panel "github.com/YandexClassifieds/shiva/pkg/grafana/dashboard/panel"
)

// DashboardClient is an autogenerated mock type for the IClient type
type DashboardClient struct {
	mock.Mock
}

// CreateFolder provides a mock function with given fields: folder
func (_m *DashboardClient) CreateFolder(folder *panel.Folder) (*panel.Folder, error) {
	ret := _m.Called(folder)

	var r0 *panel.Folder
	if rf, ok := ret.Get(0).(func(*panel.Folder) *panel.Folder); ok {
		r0 = rf(folder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panel.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*panel.Folder) error); ok {
		r1 = rf(folder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDashboard provides a mock function with given fields: uid
func (_m *DashboardClient) DeleteDashboard(uid string) error {
	ret := _m.Called(uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFolder provides a mock function with given fields: uid
func (_m *DashboardClient) DeleteFolder(uid string) error {
	ret := _m.Called(uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDashboardByFolderIdAndTitle provides a mock function with given fields: folderId, title
func (_m *DashboardClient) GetDashboardByFolderIdAndTitle(folderId uint, title string) (*board.Dashboard, error) {
	ret := _m.Called(folderId, title)

	var r0 *board.Dashboard
	if rf, ok := ret.Get(0).(func(uint, string) *board.Dashboard); ok {
		r0 = rf(folderId, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*board.Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(folderId, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardByUid provides a mock function with given fields: uid
func (_m *DashboardClient) GetDashboardByUid(uid string) (*board.Dashboard, error) {
	ret := _m.Called(uid)

	var r0 *board.Dashboard
	if rf, ok := ret.Get(0).(func(string) *board.Dashboard); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*board.Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFolderByTitle provides a mock function with given fields: title
func (_m *DashboardClient) GetFolderByTitle(title string) (*panel.Folder, error) {
	ret := _m.Called(title)

	var r0 *panel.Folder
	if rf, ok := ret.Get(0).(func(string) *panel.Folder); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panel.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDashboard provides a mock function with given fields: _a0, folderId, overwrite
func (_m *DashboardClient) SaveDashboard(_a0 *board.Dashboard, folderId uint, overwrite bool) (*panel.StatusMessage, error) {
	ret := _m.Called(_a0, folderId, overwrite)

	var r0 *panel.StatusMessage
	if rf, ok := ret.Get(0).(func(*board.Dashboard, uint, bool) *panel.StatusMessage); ok {
		r0 = rf(_a0, folderId, overwrite)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*panel.StatusMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*board.Dashboard, uint, bool) error); ok {
		r1 = rf(_a0, folderId, overwrite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDashboardClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewDashboardClient creates a new instance of DashboardClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDashboardClient(t mockConstructorTestingTNewDashboardClient) *DashboardClient {
	mock := &DashboardClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
