// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service_map "github.com/YandexClassifieds/shiva/pb/shiva/service_map"

	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/kafka/v1"
)

// MdbKafkaService is an autogenerated mock type for the IService type
type MdbKafkaService struct {
	mock.Mock
}

// CreateTopic provides a mock function with given fields: ctx, id, name, options
func (_m *MdbKafkaService) CreateTopic(ctx context.Context, id string, name string, options *service_map.KafkaOptions) error {
	ret := _m.Called(ctx, id, name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *service_map.KafkaOptions) error); ok {
		r0 = rf(ctx, id, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, id, name, password
func (_m *MdbKafkaService) CreateUser(ctx context.Context, id string, name string, password string) error {
	ret := _m.Called(ctx, id, name, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, name, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTopic provides a mock function with given fields: ctx, id, name
func (_m *MdbKafkaService) DeleteTopic(ctx context.Context, id string, name string) error {
	ret := _m.Called(ctx, id, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id, name
func (_m *MdbKafkaService) DeleteUser(ctx context.Context, id string, name string) error {
	ret := _m.Called(ctx, id, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GrantPermission provides a mock function with given fields: ctx, id, topic, user, role
func (_m *MdbKafkaService) GrantPermission(ctx context.Context, id string, topic string, user string, role v1.Permission_AccessRole) error {
	ret := _m.Called(ctx, id, topic, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, v1.Permission_AccessRole) error); ok {
		r0 = rf(ctx, id, topic, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokePermission provides a mock function with given fields: ctx, id, topic, user, role
func (_m *MdbKafkaService) RevokePermission(ctx context.Context, id string, topic string, user string, role v1.Permission_AccessRole) error {
	ret := _m.Called(ctx, id, topic, user, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, v1.Permission_AccessRole) error); ok {
		r0 = rf(ctx, id, topic, user, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTopic provides a mock function with given fields: ctx, id, name, options
func (_m *MdbKafkaService) UpdateTopic(ctx context.Context, id string, name string, options *service_map.KafkaOptions) error {
	ret := _m.Called(ctx, id, name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *service_map.KafkaOptions) error); ok {
		r0 = rf(ctx, id, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMdbKafkaService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMdbKafkaService creates a new instance of MdbKafkaService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMdbKafkaService(t mockConstructorTestingTNewMdbKafkaService) *MdbKafkaService {
	mock := &MdbKafkaService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
