// Code generated by mockery. DO NOT EDIT.

package mock

import (
	sentry "github.com/YandexClassifieds/shiva/pkg/sentry"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the IClient type
type Client struct {
	mock.Mock
}

// CreateKey provides a mock function with given fields: org, project, name
func (_m *Client) CreateKey(org string, project string, name string) (*sentry.Key, error) {
	ret := _m.Called(org, project, name)

	var r0 *sentry.Key
	if rf, ok := ret.Get(0).(func(string, string, string) *sentry.Key); ok {
		r0 = rf(org, project, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sentry.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(org, project, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: org, team, name
func (_m *Client) CreateProject(org string, team string, name string) (*sentry.ProjectResponse, error) {
	ret := _m.Called(org, team, name)

	var r0 *sentry.ProjectResponse
	if rf, ok := ret.Get(0).(func(string, string, string) *sentry.ProjectResponse); ok {
		r0 = rf(org, team, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sentry.ProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(org, team, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: org, name
func (_m *Client) DeleteProject(org string, name string) error {
	ret := _m.Called(org, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(org, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Key provides a mock function with given fields: org, project, name
func (_m *Client) Key(org string, project string, name string) (*sentry.Key, error) {
	ret := _m.Called(org, project, name)

	var r0 *sentry.Key
	if rf, ok := ret.Get(0).(func(string, string, string) *sentry.Key); ok {
		r0 = rf(org, project, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sentry.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(org, project, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keys provides a mock function with given fields: org, project
func (_m *Client) Keys(org string, project string) ([]*sentry.Key, error) {
	ret := _m.Called(org, project)

	var r0 []*sentry.Key
	if rf, ok := ret.Get(0).(func(string, string) []*sentry.Key); ok {
		r0 = rf(org, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sentry.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(org, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Project provides a mock function with given fields: org, name
func (_m *Client) Project(org string, name string) (*sentry.ProjectResponse, error) {
	ret := _m.Called(org, name)

	var r0 *sentry.ProjectResponse
	if rf, ok := ret.Get(0).(func(string, string) *sentry.ProjectResponse); ok {
		r0 = rf(org, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sentry.ProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(org, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Projects provides a mock function with given fields: org, team
func (_m *Client) Projects(org string, team string) ([]*sentry.ProjectResponse, error) {
	ret := _m.Called(org, team)

	var r0 []*sentry.ProjectResponse
	if rf, ok := ret.Get(0).(func(string, string) []*sentry.ProjectResponse); ok {
		r0 = rf(org, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sentry.ProjectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(org, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKey provides a mock function with given fields: ID, org, project, newName, limit
func (_m *Client) UpdateKey(ID string, org string, project string, newName string, limit *sentry.Limit) error {
	ret := _m.Called(ID, org, project, newName, limit)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, *sentry.Limit) error); ok {
		r0 = rf(ID, org, project, newName, limit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
