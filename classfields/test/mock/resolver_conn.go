// Code generated by mockery. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	resolver "google.golang.org/grpc/resolver"

	serviceconfig "google.golang.org/grpc/serviceconfig"
)

// ResolverConn is an autogenerated mock type for the ClientConn type
type ResolverConn struct {
	mock.Mock
}

// NewAddress provides a mock function with given fields: addresses
func (_m *ResolverConn) NewAddress(addresses []resolver.Address) {
	_m.Called(addresses)
}

// NewServiceConfig provides a mock function with given fields: serviceConfig
func (_m *ResolverConn) NewServiceConfig(serviceConfig string) {
	_m.Called(serviceConfig)
}

// ParseServiceConfig provides a mock function with given fields: serviceConfigJSON
func (_m *ResolverConn) ParseServiceConfig(serviceConfigJSON string) *serviceconfig.ParseResult {
	ret := _m.Called(serviceConfigJSON)

	var r0 *serviceconfig.ParseResult
	if rf, ok := ret.Get(0).(func(string) *serviceconfig.ParseResult); ok {
		r0 = rf(serviceConfigJSON)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceconfig.ParseResult)
		}
	}

	return r0
}

// ReportError provides a mock function with given fields: _a0
func (_m *ResolverConn) ReportError(_a0 error) {
	_m.Called(_a0)
}

// UpdateState provides a mock function with given fields: _a0
func (_m *ResolverConn) UpdateState(_a0 resolver.State) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(resolver.State) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewResolverConn interface {
	mock.TestingT
	Cleanup(func())
}

// NewResolverConn creates a new instance of ResolverConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResolverConn(t mockConstructorTestingTNewResolverConn) *ResolverConn {
	mock := &ResolverConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
