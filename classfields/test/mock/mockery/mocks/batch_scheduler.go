// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	scheduler "github.com/YandexClassifieds/shiva/cmd/shiva/scheduler"
	mock "github.com/stretchr/testify/mock"
)

// BatchScheduler is an autogenerated mock type for the BatchScheduler type
type BatchScheduler struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx
func (_m *BatchScheduler) Run(ctx *scheduler.BatchContext) (chan *scheduler.State, error) {
	ret := _m.Called(ctx)

	var r0 chan *scheduler.State
	if rf, ok := ret.Get(0).(func(*scheduler.BatchContext) chan *scheduler.State); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *scheduler.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scheduler.BatchContext) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// State provides a mock function with given fields: ctx
func (_m *BatchScheduler) State(ctx *scheduler.BatchContext) (chan *scheduler.State, error) {
	ret := _m.Called(ctx)

	var r0 chan *scheduler.State
	if rf, ok := ret.Get(0).(func(*scheduler.BatchContext) chan *scheduler.State); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *scheduler.State)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*scheduler.BatchContext) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: ctx
func (_m *BatchScheduler) Stop(ctx *scheduler.BatchContext) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*scheduler.BatchContext) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBatchScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchScheduler creates a new instance of BatchScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchScheduler(t mockConstructorTestingTNewBatchScheduler) *BatchScheduler {
	mock := &BatchScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
