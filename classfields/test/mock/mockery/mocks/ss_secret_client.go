// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	secret "github.com/YandexClassifieds/shiva/pb/ss/secret"
)

// SecretClient is an autogenerated mock type for the SecretClient type
type SecretClient struct {
	mock.Mock
}

// CreateSecret provides a mock function with given fields: ctx, in, opts
func (_m *SecretClient) CreateSecret(ctx context.Context, in *secret.CreateSecretRequest, opts ...grpc.CallOption) (*secret.CreateSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secret.CreateSecretResponse
	if rf, ok := ret.Get(0).(func(context.Context, *secret.CreateSecretRequest, ...grpc.CallOption) *secret.CreateSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.CreateSecretResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secret.CreateSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: ctx, in, opts
func (_m *SecretClient) DeleteSecret(ctx context.Context, in *secret.DeleteSecretRequest, opts ...grpc.CallOption) (*secret.DeleteSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secret.DeleteSecretResponse
	if rf, ok := ret.Get(0).(func(context.Context, *secret.DeleteSecretRequest, ...grpc.CallOption) *secret.DeleteSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.DeleteSecretResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secret.DeleteSecretRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecrets provides a mock function with given fields: ctx, in, opts
func (_m *SecretClient) GetSecrets(ctx context.Context, in *secret.GetSecretsRequest, opts ...grpc.CallOption) (*secret.GetSecretResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secret.GetSecretResponse
	if rf, ok := ret.Get(0).(func(context.Context, *secret.GetSecretsRequest, ...grpc.CallOption) *secret.GetSecretResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.GetSecretResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secret.GetSecretsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RewriteOwners provides a mock function with given fields: ctx, in, opts
func (_m *SecretClient) RewriteOwners(ctx context.Context, in *secret.RewriteOwnersRequest, opts ...grpc.CallOption) (*secret.RewriteOwnersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secret.RewriteOwnersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *secret.RewriteOwnersRequest, ...grpc.CallOption) *secret.RewriteOwnersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret.RewriteOwnersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *secret.RewriteOwnersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSecretClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretClient creates a new instance of SecretClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretClient(t mockConstructorTestingTNewSecretClient) *SecretClient {
	mock := &SecretClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
