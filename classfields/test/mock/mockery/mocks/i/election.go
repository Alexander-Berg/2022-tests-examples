// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Election is an autogenerated mock type for the Election type
type Election struct {
	mock.Mock
}

// IsLeader provides a mock function with given fields:
func (_m *Election) IsLeader() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Election) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *Election) State() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Election) Stop() {
	_m.Called()
}

type mockConstructorTestingTNewElection interface {
	mock.TestingT
	Cleanup(func())
}

// NewElection creates a new instance of Election. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElection(t mockConstructorTestingTNewElection) *Election {
	mock := &Election{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
