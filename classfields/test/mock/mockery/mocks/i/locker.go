// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	locker "github.com/YandexClassifieds/shiva/pkg/i/locker"
	mock "github.com/stretchr/testify/mock"
)

// Locker is an autogenerated mock type for the Locker type
type Locker struct {
	mock.Mock
}

// Lock provides a mock function with given fields: _a0
func (_m *Locker) Lock(_a0 locker.Context) (locker.Lock, error) {
	ret := _m.Called(_a0)

	var r0 locker.Lock
	if rf, ok := ret.Get(0).(func(locker.Context) locker.Lock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(locker.Lock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(locker.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Steal provides a mock function with given fields: _a0
func (_m *Locker) Steal(_a0 locker.Context) (locker.Lock, error) {
	ret := _m.Called(_a0)

	var r0 locker.Lock
	if rf, ok := ret.Get(0).(func(locker.Context) locker.Lock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(locker.Lock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(locker.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields:
func (_m *Locker) Stop() {
	_m.Called()
}

// Unlock provides a mock function with given fields: _a0
func (_m *Locker) Unlock(_a0 locker.Lock) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(locker.Lock) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLocker interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocker creates a new instance of Locker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocker(t mockConstructorTestingTNewLocker) *Locker {
	mock := &Locker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
