// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	kv "github.com/YandexClassifieds/shiva/pkg/i/kv"
	mock "github.com/stretchr/testify/mock"
)

// KV is an autogenerated mock type for the KV type
type KV struct {
	mock.Mock
}

// All provides a mock function with given fields:
func (_m *KV) All() (map[string]kv.Value, error) {
	ret := _m.Called()

	var r0 map[string]kv.Value
	if rf, ok := ret.Get(0).(func() map[string]kv.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]kv.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: k, v
func (_m *KV) Create(k string, v kv.Value) error {
	ret := _m.Called(k, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, kv.Value) error); ok {
		r0 = rf(k, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: k
func (_m *KV) Get(k string) (kv.Value, error) {
	ret := _m.Called(k)

	var r0 kv.Value
	if rf, ok := ret.Get(0).(func(string) kv.Value); ok {
		r0 = rf(k)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kv.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(k)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: k, v
func (_m *KV) Save(k string, v kv.Value) error {
	ret := _m.Called(k, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, kv.Value) error); ok {
		r0 = rf(k, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKV interface {
	mock.TestingT
	Cleanup(func())
}

// NewKV creates a new instance of KV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKV(t mockConstructorTestingTNewKV) *KV {
	mock := &KV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
