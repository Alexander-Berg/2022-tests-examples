// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	tokens "github.com/YandexClassifieds/shiva/pb/ss/tokens"
)

// SSTokenClient is an autogenerated mock type for the SecretClient type
type SSTokenClient struct {
	mock.Mock
}

// AddToken provides a mock function with given fields: ctx, in, opts
func (_m *SSTokenClient) AddToken(ctx context.Context, in *tokens.TokenData, opts ...grpc.CallOption) (*tokens.AddTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *tokens.AddTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tokens.TokenData, ...grpc.CallOption) *tokens.AddTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.AddTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tokens.TokenData, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAllowed provides a mock function with given fields: ctx, in, opts
func (_m *SSTokenClient) CheckAllowed(ctx context.Context, in *tokens.CheckAllowedRequest, opts ...grpc.CallOption) (*tokens.CheckAllowedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *tokens.CheckAllowedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tokens.CheckAllowedRequest, ...grpc.CallOption) *tokens.CheckAllowedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.CheckAllowedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tokens.CheckAllowedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequiredVersion provides a mock function with given fields: ctx, in, opts
func (_m *SSTokenClient) GetRequiredVersion(ctx context.Context, in *tokens.GetRequiredVersionRequest, opts ...grpc.CallOption) (*tokens.GetRequiredVersionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *tokens.GetRequiredVersionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tokens.GetRequiredVersionRequest, ...grpc.CallOption) *tokens.GetRequiredVersionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.GetRequiredVersionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tokens.GetRequiredVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, in, opts
func (_m *SSTokenClient) RevokeToken(ctx context.Context, in *tokens.RevokeTokenRequest, opts ...grpc.CallOption) (*tokens.RevokeTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *tokens.RevokeTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tokens.RevokeTokenRequest, ...grpc.CallOption) *tokens.RevokeTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.RevokeTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tokens.RevokeTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSSTokenClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSSTokenClient creates a new instance of SSTokenClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSSTokenClient(t mockConstructorTestingTNewSSTokenClient) *SSTokenClient {
	mock := &SSTokenClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
