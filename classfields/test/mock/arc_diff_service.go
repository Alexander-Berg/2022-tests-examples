// Code generated by mockery. DO NOT EDIT.

package mock

import (
	file "github.com/YandexClassifieds/shiva/pkg/arc/diff/file"
	mock "github.com/stretchr/testify/mock"
)

// ArcDiffService is an autogenerated mock type for the IService type
type ArcDiffService struct {
	mock.Mock
}

// ChangeList provides a mock function with given fields: prId
func (_m *ArcDiffService) ChangeList(prId uint32) ([]*file.File, error) {
	ret := _m.Called(prId)

	var r0 []*file.File
	if rf, ok := ret.Get(0).(func(uint32) []*file.File); ok {
		r0 = rf(prId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*file.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(prId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewArcDiffService interface {
	mock.TestingT
	Cleanup(func())
}

// NewArcDiffService creates a new instance of ArcDiffService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArcDiffService(t mockConstructorTestingTNewArcDiffService) *ArcDiffService {
	mock := &ArcDiffService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
