// Code generated by mockery. DO NOT EDIT.

package mock

import (
	client "github.com/YandexClassifieds/shiva/pkg/yav/client"
	mock "github.com/stretchr/testify/mock"
)

// YavClient is an autogenerated mock type for the IClient type
type YavClient struct {
	mock.Mock
}

// AddGroupRole provides a mock function with given fields: secID, staffID, role
func (_m *YavClient) AddGroupRole(secID string, staffID int, role string) error {
	ret := _m.Called(secID, staffID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, string) error); ok {
		r0 = rf(secID, staffID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserRole provides a mock function with given fields: secID, login, role
func (_m *YavClient) AddUserRole(secID string, login string, role string) error {
	ret := _m.Called(secID, login, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(secID, login, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanRead provides a mock function with given fields: secretId, uid
func (_m *YavClient) CanRead(secretId string, uid string) (bool, error) {
	ret := _m.Called(secretId, uid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(secretId, uid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(secretId, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDelegationToken provides a mock function with given fields: secretId, signature, tvmClientId
func (_m *YavClient) CreateDelegationToken(secretId string, signature string, tvmClientId uint) (*client.CreatedTokenInfo, error) {
	ret := _m.Called(secretId, signature, tvmClientId)

	var r0 *client.CreatedTokenInfo
	if rf, ok := ret.Get(0).(func(string, string, uint) *client.CreatedTokenInfo); ok {
		r0 = rf(secretId, signature, tvmClientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CreatedTokenInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint) error); ok {
		r1 = rf(secretId, signature, tvmClientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecret provides a mock function with given fields: name
func (_m *YavClient) CreateSecret(name string) (string, error) {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupRole provides a mock function with given fields: secID, staffID, role
func (_m *YavClient) DeleteGroupRole(secID string, staffID int, role string) error {
	ret := _m.Called(secID, staffID, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, string) error); ok {
		r0 = rf(secID, staffID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserRole provides a mock function with given fields: secID, login, role
func (_m *YavClient) DeleteUserRole(secID string, login string, role string) error {
	ret := _m.Called(secID, login, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(secID, login, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSecret provides a mock function with given fields: secretId
func (_m *YavClient) GetSecret(secretId string) (*client.SecretInfo, error) {
	ret := _m.Called(secretId)

	var r0 *client.SecretInfo
	if rf, ok := ret.Get(0).(func(string) *client.SecretInfo); ok {
		r0 = rf(secretId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SecretInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secretId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretByVersionOrSecretId provides a mock function with given fields: id
func (_m *YavClient) GetSecretByVersionOrSecretId(id string) (*client.VersionInfo, error) {
	ret := _m.Called(id)

	var r0 *client.VersionInfo
	if rf, ok := ret.Get(0).(func(string) *client.VersionInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.VersionInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDelegationTokens provides a mock function with given fields: secretId
func (_m *YavClient) ListDelegationTokens(secretId string) ([]client.TokenInfo, error) {
	ret := _m.Called(secretId)

	var r0 []client.TokenInfo
	if rf, ok := ret.Get(0).(func(string) []client.TokenInfo); ok {
		r0 = rf(secretId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.TokenInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secretId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Owners provides a mock function with given fields: secID
func (_m *YavClient) Owners(secID string) (*client.OwnersInfo, error) {
	ret := _m.Called(secID)

	var r0 *client.OwnersInfo
	if rf, ok := ret.Get(0).(func(string) *client.OwnersInfo); ok {
		r0 = rf(secID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OwnersInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Readers provides a mock function with given fields: secID
func (_m *YavClient) Readers(secID string) (*client.ReadersInfo, error) {
	ret := _m.Called(secID)

	var r0 *client.ReadersInfo
	if rf, ok := ret.Get(0).(func(string) *client.ReadersInfo); ok {
		r0 = rf(secID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ReadersInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(secID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeDelegationToken provides a mock function with given fields: tokenId
func (_m *YavClient) RevokeDelegationToken(tokenId string) error {
	ret := _m.Called(tokenId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecretFromToken provides a mock function with given fields: token, signature, versionId, serviceTicket
func (_m *YavClient) SecretFromToken(token string, signature string, versionId string, serviceTicket string) (client.SecretValues, error) {
	ret := _m.Called(token, signature, versionId, serviceTicket)

	var r0 client.SecretValues
	if rf, ok := ret.Get(0).(func(string, string, string, string) client.SecretValues); ok {
		r0 = rf(token, signature, versionId, serviceTicket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SecretValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(token, signature, versionId, serviceTicket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetaInfo provides a mock function with given fields: secID, metaInfo
func (_m *YavClient) UpdateMetaInfo(secID string, metaInfo client.UpdateMetaInfoRequest) error {
	ret := _m.Called(secID, metaInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, client.UpdateMetaInfoRequest) error); ok {
		r0 = rf(secID, metaInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewYavClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewYavClient creates a new instance of YavClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewYavClient(t mockConstructorTestingTNewYavClient) *YavClient {
	mock := &YavClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
