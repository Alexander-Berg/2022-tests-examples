const fuzzyRound = require('./fuzzyRound');
const TESTS_INT_NUMBERS = [
    { num: 0, precision: 0, digits: 0, result: 0 },
    { num: 0, precision: 0, digits: 1, result: 0 },
    { num: 0, precision: 0, digits: 2, result: 0 },
    { num: 0, precision: 0, digits: 3, result: 0 },
    { num: 0, precision: 0, result: 0 },
    { num: 0, precision: 1, digits: 0, result: 0 },
    { num: 0, precision: 1, digits: 1, result: 0 },
    { num: 0, precision: 1, digits: 2, result: 0 },
    { num: 0, precision: 1, digits: 3, result: 0 },
    { num: 0, precision: 1, result: 0 },
    { num: 0, precision: 2, digits: 0, result: 0 },
    { num: 0, precision: 2, digits: 1, result: 0 },
    { num: 0, precision: 2, digits: 2, result: 0 },
    { num: 0, precision: 2, digits: 3, result: 0 },
    { num: 0, precision: 2, result: 0 },
    { num: 1, precision: 0, digits: 0, result: 1 },
    { num: 1, precision: 0, digits: 1, result: 1 },
    { num: 1, precision: 0, digits: 2, result: 1 },
    { num: 1, precision: 0, digits: 3, result: 1 },
    { num: 1, precision: 0, result: 1 },
    { num: 1, precision: 1, digits: 0, result: 1 },
    { num: 1, precision: 1, digits: 1, result: 1 },
    { num: 1, precision: 1, digits: 2, result: 1 },
    { num: 1, precision: 1, digits: 3, result: 1 },
    { num: 1, precision: 1, result: 1 },
    { num: 1, precision: 2, digits: 0, result: 1 },
    { num: 1, precision: 2, digits: 1, result: 1 },
    { num: 1, precision: 2, digits: 2, result: 1 },
    { num: 1, precision: 2, digits: 3, result: 1 },
    { num: 1, precision: 2, result: 1 },
    { num: 9999, precision: 0, digits: 0, result: 9999 },
    { num: 9999, precision: 0, digits: 1, result: 9999 },
    { num: 9999, precision: 0, digits: 2, result: 9999 },
    { num: 9999, precision: 0, digits: 3, result: 9999 },
    { num: 9999, precision: 0, result: 9999 },
    { num: 9999, precision: 1, digits: 0, result: 9999 },
    { num: 9999, precision: 1, digits: 1, result: 9999 },
    { num: 9999, precision: 1, digits: 2, result: 9999 },
    { num: 9999, precision: 1, digits: 3, result: 9999 },
    { num: 9999, precision: 1, result: 9999 },
    { num: 9999, precision: 2, digits: 0, result: 9999 },
    { num: 9999, precision: 2, digits: 1, result: 9999 },
    { num: 9999, precision: 2, digits: 2, result: 9999 },
    { num: 9999, precision: 2, digits: 3, result: 9999 },
    { num: 9999, precision: 2, result: 9999 },
];
const TESTS_FLOAT_NUMBERS = [
    { num: 0.1545, precision: 0, digits: 0, result: 0 },
    { num: 0.1545, precision: 0, digits: 1, result: 0 },
    { num: 0.1545, precision: 0, digits: 2, result: 0 },
    { num: 0.1545, precision: 0, digits: 3, result: 0 },
    { num: 0.1545, precision: 0, result: 0 },
    { num: 0.1545, precision: 1, digits: 0, result: 0 },
    { num: 0.1545, precision: 1, digits: 1, result: 0.2 },
    { num: 0.1545, precision: 1, digits: 2, result: 0.2 },
    { num: 0.1545, precision: 1, digits: 3, result: 0.2 },
    { num: 0.1545, precision: 1, result: 0.2 },
    { num: 0.1545, precision: 2, digits: 0, result: 0 },
    { num: 0.1545, precision: 2, digits: 1, result: 0.2 },
    { num: 0.1545, precision: 2, digits: 2, result: 0.15 },
    { num: 0.1545, precision: 2, digits: 3, result: 0.16 },
    { num: 0.1545, precision: 2, result: 0.15 },
    { num: 1.5454, precision: 0, digits: 0, result: 2 },
    { num: 1.5454, precision: 0, digits: 1, result: 2 },
    { num: 1.5454, precision: 0, digits: 2, result: 2 },
    { num: 1.5454, precision: 0, digits: 3, result: 2 },
    { num: 1.5454, precision: 0, result: 2 },
    { num: 1.5454, precision: 1, digits: 0, result: 2 },
    { num: 1.5454, precision: 1, digits: 1, result: 1.5 },
    { num: 1.5454, precision: 1, digits: 2, result: 1.6 },
    { num: 1.5454, precision: 1, digits: 3, result: 1.6 },
    { num: 1.5454, precision: 1, result: 1.6 },
    { num: 1.5454, precision: 2, digits: 0, result: 2 },
    { num: 1.5454, precision: 2, digits: 1, result: 1.5 },
    { num: 1.5454, precision: 2, digits: 2, result: 1.55 },
    { num: 1.5454, precision: 2, digits: 3, result: 1.55 },
    { num: 1.5454, precision: 2, result: 1.55 },
];
const TESTS = TESTS_INT_NUMBERS.concat(TESTS_FLOAT_NUMBERS);

TESTS.forEach((testCase) => {
    const { digits, num, precision, result } = testCase;

    it(`should return ${ result } for num: ${ num } precision: ${ precision } digits: ${ digits }`, () => {
        expect(fuzzyRound(num, precision, digits)).toEqual(result);
    });
});
