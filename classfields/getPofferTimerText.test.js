const MockDate = require('mockdate');
const getPofferTimerText = require('./getPofferTimerText');

afterEach(() => {
    MockDate.reset();
});

it('возвращает корректное время до конца дня', () => {
    MockDate.set('2019-02-26T13:13:13.000+0300');
    expect(getPofferTimerText()).toBe('10:46:46');
});

it('возвращает корректное время до конца дня если кол-во секунд равно нулю а остальное нет', () => {
    MockDate.set('2019-02-26T13:13:00.000+0300');
    expect(getPofferTimerText()).toBe('10:46:59');
});

it('возвращает корректное время до конца дня если кол-во минут равно нулю а остальное нет', () => {
    MockDate.set('2019-02-26T13:00:15.000+0300');
    expect(getPofferTimerText()).toBe('10:59:44');
});

it('возвращает корректное время до конца дня если кол-во минут и секунд равно нулю а часов нет', () => {
    MockDate.set('2019-02-26T13:00:00.000+0300');
    expect(getPofferTimerText()).toBe('10:59:59');
});

it('возвращает корректное время до конца дня если кол-во часов равно нулю а остальное нет', () => {
    MockDate.set('2019-02-26T23:11:32.000+0300');
    expect(getPofferTimerText()).toBe('00:48:27');
});

it('возвращает корректное время до конца дня если кол-во часов и минут равно нулю а секунд нет', () => {
    MockDate.set('2019-02-26T23:59:32.000+0300');
    expect(getPofferTimerText()).toBe('00:00:27');
});

it('возвращает корректное время до конца дня если кол-во часов и секунд равно нулю а минут нет', () => {
    MockDate.set('2019-02-26T23:23:00.000+0300');
    expect(getPofferTimerText()).toBe('00:36:59');
});

it('возвращает ноль если день закончился', () => {
    MockDate.set('2019-02-26T23:59:59.000+0300');
    expect(getPofferTimerText()).toBe('00:00:00');
});

it('возвращает корректное время по москве если я в магадане', () => {
    MockDate.set('2019-02-26T04:30:00.000+1100');
    // в москве '2019-02-25 20:30:00', зона магадан +11:00 к utc, зона москвы +03:00 к utc
    expect(getPofferTimerText()).toBe('03:29:59');
});
