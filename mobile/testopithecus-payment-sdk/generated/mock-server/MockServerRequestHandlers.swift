// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-server/mock-server-request-handlers.ts >>>

import Foundation

open class MockServerRequestHandlers {
  @discardableResult
  open class func callback(_ callback: @escaping (HttpRequest) -> HttpResponse) -> MockServerRequestHandlerWithCallback {
    return MockServerRequestHandlerWithCallback(callback)
  }

  @discardableResult
  open class func stripPathPrefix(_ pathPrefix: String, _ handler: HttpRequestHandler) -> MockServerStripPathPrefixRequestHandler {
    return MockServerStripPathPrefixRequestHandler(pathPrefix, handler)
  }

}

open class MockServerRequestHandlerWithCallback: HttpRequestHandler {
  private let callback: (HttpRequest) -> HttpResponse
  public init(_ callback: @escaping (HttpRequest) -> HttpResponse) {
    self.callback = callback
  }

  @discardableResult
  open func handleRequest(_ request: HttpRequest) -> HttpResponse {
    return self.callback(request)
  }

}

open class MockServerStripPathPrefixRequestHandler: HttpRequestHandler {
  private let pathPrefix: String
  private let handler: HttpRequestHandler
  public init(_ pathPrefix: String, _ handler: HttpRequestHandler) {
    self.pathPrefix = pathPrefix
    self.handler = handler
  }

  @discardableResult
  open func handleRequest(_ request: HttpRequest) -> HttpResponse {
    let url = nullthrows(Uris.fromString(request.url))
    var pathSegments = url.getPathSegments()
    if pathSegments.length > 0 && pathSegments[0] == self.pathPrefix {
      pathSegments = pathSegments.slice(1)
    }
    let newUrl = url.builder().setPath(pathSegments.join("/")).build()
    let newRequest = HttpRequest(request.method, newUrl.getAbsoluteString(), request.headers, request.body)
    return self.handler.handleRequest(newRequest)
  }

}

open class MockServerDelayedRequestHandler: HttpRequestHandler {
  private let handler: HttpRequestHandler
  private let delayMs: Int32
  private let sleepImpl: SyncSleep
  public init(_ handler: HttpRequestHandler, _ delayMs: Int32, _ sleepImpl: SyncSleep) {
    self.handler = handler
    self.delayMs = delayMs
    self.sleepImpl = sleepImpl
  }

  @discardableResult
  open func handleRequest(_ request: HttpRequest) -> HttpResponse {
    self.sleepImpl.sleepMs(self.delayMs)
    return self.handler.handleRequest(request)
  }

}

