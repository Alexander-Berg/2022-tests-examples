// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-server/mock-server-request-handlers.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class MockServerRequestHandlers {
    companion object {
        @JvmStatic
        open fun callback(callback: (HttpRequest) -> HttpResponse): MockServerRequestHandlerWithCallback {
            return MockServerRequestHandlerWithCallback(callback)
        }

        @JvmStatic
        open fun stripPathPrefix(pathPrefix: String, handler: HttpRequestHandler): MockServerStripPathPrefixRequestHandler {
            return MockServerStripPathPrefixRequestHandler(pathPrefix, handler)
        }

    }
}

public open class MockServerRequestHandlerWithCallback(private val callback: (HttpRequest) -> HttpResponse): HttpRequestHandler {
    open override fun handleRequest(request: HttpRequest): HttpResponse {
        return this.callback(request)
    }

}

public open class MockServerStripPathPrefixRequestHandler(private val pathPrefix: String, private val handler: HttpRequestHandler): HttpRequestHandler {
    open override fun handleRequest(request: HttpRequest): HttpResponse {
        val url = nullthrows(Uris.fromString(request.url))
        var pathSegments = url.getPathSegments()
        if (pathSegments.size > 0 && pathSegments[0] == this.pathPrefix) {
            pathSegments = pathSegments.slice(1)
        }
        val newUrl = url.builder().setPath(pathSegments.joinToString("/")).build()
        val newRequest = HttpRequest(request.method, newUrl.getAbsoluteString(), request.headers, request.body)
        return this.handler.handleRequest(newRequest)
    }

}

public open class MockServerDelayedRequestHandler(private val handler: HttpRequestHandler, private val delayMs: Int, private val sleepImpl: SyncSleep): HttpRequestHandler {
    open override fun handleRequest(request: HttpRequest): HttpResponse {
        this.sleepImpl.sleepMs(this.delayMs)
        return this.handler.handleRequest(request)
    }

}

