// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-server/mock-server-request-matchers.ts >>>

import Foundation

public protocol MockServerRequestMatcher: HttpRequestHandler {
  @discardableResult
  func canHandleRequest(_ request: HttpRequest) -> Bool
}

open class MockServerRequestMatchers {
  @discardableResult
  open class func path(_ path: String, _ handler: HttpRequestHandler) -> MockServerPathRequestMatcher {
    return MockServerPathRequestMatcher(path, handler)
  }

  @discardableResult
  open class func pathPrefix(_ pathPrefix: String, _ handler: HttpRequestHandler) -> MockServerPathPrefixRequestMatcher {
    return MockServerPathPrefixRequestMatcher(pathPrefix, handler)
  }

}

open class MockServerAbstractRequestMatcher: MockServerRequestMatcher {
  private let handler: HttpRequestHandler
  public init(_ handler: HttpRequestHandler) {
    self.handler = handler
  }

  @discardableResult
  open func canHandleRequest(_ request: HttpRequest) -> Bool {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func handleRequest(_ request: HttpRequest) -> HttpResponse {
    return self.handler.handleRequest(request)
  }

}

open class MockServerPathRequestMatcher: MockServerAbstractRequestMatcher {
  private let path: String
  public init(_ path: String, _ handler: HttpRequestHandler) {
    self.path = path
    super.init(handler)
  }

  @discardableResult
  open override func canHandleRequest(_ request: HttpRequest) -> Bool {
    let requestPath = nullthrows(Uris.fromString(request.url)?.getPath())
    return self.dropLeadingSlash(self.path) == self.dropLeadingSlash(requestPath)
  }

  @discardableResult
  private func dropLeadingSlash(_ path: String) -> String {
    return path.startsWith("/") ? path.slice(1) : path
  }

}

open class MockServerPathPrefixRequestMatcher: MockServerAbstractRequestMatcher {
  private let pathPrefix: String
  public init(_ pathPrefix: String, _ handler: HttpRequestHandler) {
    self.pathPrefix = pathPrefix
    super.init(handler)
  }

  @discardableResult
  open override func canHandleRequest(_ request: HttpRequest) -> Bool {
    let pathComponents = nullthrows(Uris.fromString(request.url)?.getPathSegments())
    return pathComponents.length > 0 && pathComponents[0] == self.pathPrefix
  }

}

