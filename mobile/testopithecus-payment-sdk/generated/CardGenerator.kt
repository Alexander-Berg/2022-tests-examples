// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM card-generator.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class BoundCard(val cardNumber: String, val expirationMonth: String, val expirationYear: String, val cvv: String) {
    companion object {
        @JvmStatic
        open fun generated(type: CardPaymentSystem = CardPaymentSystem.MasterCard): BoundCard {
            return BoundCard(CardGenerator.generateCardNumber(type), BoundCardConstants.EXPIRATION_MONTH, CardGenerator.generateExpirationYear(), BoundCardConstants.CVV)
        }

    }
}

public open class BoundCardConstants {
    companion object {
        @JvmStatic val EXPIRATION_MONTH: String = "11"
        @JvmStatic val CVV: String = "123"
    }
}

public open class CardGenerator {
    companion object {
        @JvmStatic
        open fun generateCardNumber(type: CardPaymentSystem): String {
            var pos: Int = 6
            val cardArr: YSArray<Int> = mutableListOf(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
            when (type) {
                CardPaymentSystem.MasterCard -> {
                    cardArr[0] = 5
                    cardArr[1] = 1
                }
                CardPaymentSystem.AmericanExpress -> {
                    cardArr[0] = 3
                    cardArr[1] = 4
                }
                CardPaymentSystem.Maestro -> {
                    cardArr[0] = 5
                    cardArr[1] = 0
                }
                CardPaymentSystem.MIR -> {
                    cardArr[0] = 2
                    cardArr[1] = 2
                }
                CardPaymentSystem.VISA -> {
                    cardArr[0] = 4
                    cardArr[1] = 2
                }
                else -> {
                }
            }
            var sum: Int = 0
            var final_digit: Int = 0
            var t = doubleToInt32(floorDouble(randomDouble() * 5)) % 5
            var len_offset: Int = 0
            val len: Int = 16
            while (pos < len - 1) {
                cardArr[pos] = doubleToInt32(floorDouble(randomDouble() * 10)) % 10
                pos = pos + 1
            }
            len_offset = (len + 1) % 2
            for (index in (0 until len - 1 step 1)) {
                if ((index + len_offset) % 2 > 0) {
                    t = cardArr[index] * 2
                    if (t > 9) {
                        t = t - 9
                    }
                    sum = sum + t
                } else {
                    sum = sum + cardArr[index]
                }
            }
            final_digit = (10 - (sum % 10)) % 10
            cardArr[len - 1] = final_digit
            var cardStr = ""
            for (index in (0 until cardArr.size step 1)) {
                cardStr = cardStr + "${cardArr[index]}"
            }
            return cardStr
        }

        @JvmStatic
        open fun generateExpirationYear(): String {
            val currentYear = YSDate().getFullYear() % 100
            return "${currentYear + 1}"
        }

        @JvmStatic
        open fun generateExpirationDate(type: ExpirationDateType): String {
            val currentYear = YSDate().getFullYear() % 100
            val currentMonth = YSDate().getMonth() + 1
            val formattedCurrentMonth = this.formatExpirationMonth(currentMonth)
            when (type) {
                ExpirationDateType.currentMonthAndYear -> {
                    return "${formattedCurrentMonth}${currentYear}"
                }
                ExpirationDateType.date50YearsInFuture -> {
                    return "${formattedCurrentMonth}${currentYear + 50}"
                }
                ExpirationDateType.dateMore50YearsInFuture -> {
                    return "${formattedCurrentMonth}${currentYear + 51}"
                }
                ExpirationDateType.nextMonth -> {
                    return if (currentMonth == 12) "01${currentYear + 1}" else "${this.formatExpirationMonth(currentMonth + 1)}${currentYear}"
                }
                ExpirationDateType.previousMonth -> {
                    return if (currentMonth == 1) "12${currentYear - 1}" else "${this.formatExpirationMonth(currentMonth - 1)}${currentYear}"
                }
                ExpirationDateType.previousYear -> {
                    return "${formattedCurrentMonth}${currentYear - 1}"
                }
                ExpirationDateType.nonExistentMonth -> {
                    return "13${currentYear}"
                }
                ExpirationDateType.tooManySymbols -> {
                    return "${formattedCurrentMonth}${currentYear}1"
                }
            }
        }

        @JvmStatic
        private fun formatExpirationMonth(month: Int): String {
            return if ("${month}".length == 1) "0${month}" else "${month}"
        }

    }
}

public enum class ExpirationDateType {
    currentMonthAndYear,
    nextMonth,
    previousMonth,
    previousYear,
    date50YearsInFuture,
    dateMore50YearsInFuture,
    nonExistentMonth,
    tooManySymbols,
}
public open class SpecificCards {
    companion object {
        @JvmStatic val masterCard: BoundCard = BoundCard("5100008498698746", "12", "50", "123")
        @JvmStatic val mir: BoundCard = BoundCard("2200003680082987", "12", "50", "123")
        @JvmStatic val visa: BoundCard = BoundCard("4200006115699289", "12", "50", "123")
    }
}

