// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-method-selected-component.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentMethodSelectedComponent: MBTComponent {
    open override fun assertMatches(model: App, application: App): Unit {
        val appMethodsListFeature = PaymentMethodsListFeature.`get`.forceCast(application)
        assertTrue(appMethodsListFeature.waitForPaymentMethods(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT), "Payment methods screen was not load in ${PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT} seconds")
        val modelScreenTitle = PaymentScreenTitleFeature.`get`.castIfSupported(model)
        val appScreenTitle = PaymentScreenTitleFeature.`get`.castIfSupported(application)
        if (modelScreenTitle != null && appScreenTitle != null) {
            val modelTitle = modelScreenTitle.getTitle()
            val appTitle = appScreenTitle.getTitle()
            assertStringEquals(modelTitle, appTitle, "Screen title mismatch")
        }
        val modelMethodsListFeature = PaymentMethodsListFeature.`get`.castIfSupported(model)
        if (modelMethodsListFeature != null) {
            val modelMethods = modelMethodsListFeature.getMethods()
            val appMethods = appMethodsListFeature.getMethods()
            assertInt32Equals(modelMethods.size, appMethods.size, "Incorrect number of payment methods")
            for (modelMethod in modelMethods) {
                assertTrue(appMethods.contains(modelMethod), "Incorrect payment method")
            }
        }
        val modelUnbindCardFeature = UnbindCardFeature.`get`.castIfSupported(model)
        val appUnbindCardFeature = UnbindCardFeature.`get`.castIfSupported(application)
        if (modelUnbindCardFeature != null && appUnbindCardFeature != null) {
            val modelEditButton = modelUnbindCardFeature.isEditButtonShown()
            val appEditButton = appUnbindCardFeature.isEditButtonShown()
            assertBooleanEquals(modelEditButton, appEditButton, "Incorrect Edit button status")
        }
        val modelApplePayFeature = ApplePayFeature.`get`.castIfSupported(model)
        val appApplePayFeature = ApplePayFeature.`get`.castIfSupported(application)
        if (modelApplePayFeature != null && appApplePayFeature != null) {
            val modelApplePayAvailable = modelApplePayFeature.isAvailable()
            val appApplePayAvailable = appApplePayFeature.isAvailable()
            assertBooleanEquals(modelApplePayAvailable, appApplePayAvailable, "Incorrect ApplePay availability status")
        }
        val modelGooglePayFeature = GooglePayFeature.`get`.castIfSupported(model)
        val appGooglePayFeature = GooglePayFeature.`get`.castIfSupported(application)
        if (modelGooglePayFeature != null && appGooglePayFeature != null) {
            val modelGooglePayAvailable = modelGooglePayFeature.isAvailable()
            val appGooglePayAvailable = appGooglePayFeature.isAvailable()
            assertBooleanEquals(modelGooglePayAvailable, appGooglePayAvailable, "Incorrect GooglePay availability status")
        }
        val modelSBPFeature = SBPFeature.`get`.castIfSupported(model)
        val appSBPFeature = SBPFeature.`get`.castIfSupported(application)
        if (modelSBPFeature != null && appSBPFeature != null) {
            val modelSBPAvailable = modelSBPFeature.isAvailable()
            val appSBPAvailable = appSBPFeature.isAvailable()
            assertBooleanEquals(modelSBPAvailable, appSBPAvailable, "Incorrect SBP availability status")
        }
        val modelKeyboard = KeyboardFeature.`get`.castIfSupported(model)
        val appKeyboard = KeyboardFeature.`get`.castIfSupported(application)
        if (modelKeyboard != null && appKeyboard != null) {
            val modelNumKeyboardShown = modelKeyboard.isNumericKeyboardShown()
            val appNumKeyboardShown = appKeyboard.isNumericKeyboardShown()
            assertBooleanEquals(modelNumKeyboardShown, appNumKeyboardShown, "Numeric keyboard status is incorrect")
            val modelAlphKeyboardShown = modelKeyboard.isAlphabeticalKeyboardShown()
            val appAlphKeyboardShown = appKeyboard.isAlphabeticalKeyboardShown()
            assertBooleanEquals(modelAlphKeyboardShown, appAlphKeyboardShown, "Alphabetical keyboard status is incorrect")
        }
        val modelPaymentButtonFeature = PaymentButtonFeature.`get`.castIfSupported(model)
        val appPaymentButtonFeature = PaymentButtonFeature.`get`.castIfSupported(application)
        if (modelPaymentButtonFeature != null && appPaymentButtonFeature != null) {
            val isModelPayButtonEnabled = modelPaymentButtonFeature.isEnabled()
            val isAppPayButtonEnabled = appPaymentButtonFeature.isEnabled()
            assertBooleanEquals(isModelPayButtonEnabled, isAppPayButtonEnabled, "Payment button enabled status is incorrect")
            val modelPayButtonText = modelPaymentButtonFeature.getButtonText()
            val appPayButtonText = appPaymentButtonFeature.getButtonText()
            assertStringEquals(modelPayButtonText, appPayButtonText, "Pay button text mismatch")
            if (modelMethodsListFeature!!.getMethodsListMode() != MethodsListMode.preselect) {
                val modelPaymentButtonLabelText = modelPaymentButtonFeature.getLabelText()
                val appPaymentButtonLabelText = appPaymentButtonFeature.getLabelText()
                assertStringEquals(modelPaymentButtonLabelText, appPaymentButtonLabelText, "Pay button label text mismatch")
            }
        }
        val modelLicenseAgreementFeature = LicenseAgreementFeature.`get`.castIfSupported(model)
        val appLicenseAgreementFeature = LicenseAgreementFeature.`get`.castIfSupported(application)
        if (modelLicenseAgreementFeature != null && appLicenseAgreementFeature != null) {
            val modelLicenseAgreementShown = modelLicenseAgreementFeature.isLicenseAgreementShown()
            val appLicenseAgreementShown = appLicenseAgreementFeature.isLicenseAgreementShown()
            assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status")
            val modelLicenseAgreement = modelLicenseAgreementFeature.getLicenseAgreement()
            val appLicenseAgreement = appLicenseAgreementFeature.getLicenseAgreement()
            assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text")
        }
        val modelPaymentDetails = ReadPaymentDetailsFeature.`get`.castIfSupported(model)
        if (modelPaymentDetails!!.isPersonalInfoShown()) {
            val modelPersonalInfoFields = PersonalInformationFeature.`get`.castIfSupported(model)
            val appPersonalInfoFields = PersonalInformationFeature.`get`.castIfSupported(application)
            if (modelPersonalInfoFields != null && appPersonalInfoFields != null) {
                val modelName = modelPersonalInfoFields.getFieldValue(PersonalInformationField.firstName)
                val appName = appPersonalInfoFields.getFieldValue(PersonalInformationField.firstName)
                assertStringEquals(modelName, appName, "Name is incorrect")
                val modelLastName = modelPersonalInfoFields.getFieldValue(PersonalInformationField.lastName)
                val appLastName = appPersonalInfoFields.getFieldValue(PersonalInformationField.lastName)
                assertStringEquals(modelLastName, appLastName, "Last name is incorrect")
                val modelEmail = modelPersonalInfoFields.getFieldValue(PersonalInformationField.email)
                val appEmail = appPersonalInfoFields.getFieldValue(PersonalInformationField.email)
                assertStringEquals(modelEmail, appEmail, "Email is incorrect")
                val modelPhoneNumber = modelPersonalInfoFields.getFieldValue(PersonalInformationField.phoneNumber)
                val appPhoneNumber = appPersonalInfoFields.getFieldValue(PersonalInformationField.phoneNumber)
                assertStringEquals(modelPhoneNumber, appPhoneNumber, "Phone number is incorrect")
            }
            val modelPersInfoFieldsValidator = PersonalInformationFieldsValidatorFeature.`get`.castIfSupported(model)
            val appPersInfoFieldsValidator = PersonalInformationFieldsValidatorFeature.`get`.castIfSupported(application)
            if (modelPersInfoFieldsValidator != null && appPersInfoFieldsValidator != null) {
                if (modelPaymentDetails!!.isPersonalInfoShown()) {
                    val modelEmailErrorText = modelPersInfoFieldsValidator.getEmailErrorText()
                    val appEmailErrorText = appPersInfoFieldsValidator.getEmailErrorText()
                    assertStringEquals(modelEmailErrorText, appEmailErrorText, "Email error message is incorrect")
                    val modelPhoneNumberErrorText = modelPersInfoFieldsValidator.getPhoneNumberErrorText()
                    val appPhoneNumberErrorText = appPersInfoFieldsValidator.getPhoneNumberErrorText()
                    assertStringEquals(modelPhoneNumberErrorText, appPhoneNumberErrorText, "Phone number error message is incorrect")
                }
            }
        }
    }

    open override fun getComponentType(): MBTComponentType {
        return PaymentMethodSelectedComponent.type
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "PaymentSDK payment methods with selected option"
    }
}

