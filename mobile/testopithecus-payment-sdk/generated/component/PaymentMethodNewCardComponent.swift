// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-method-new-card-component.ts >>>

import Foundation

open class PaymentMethodNewCardComponent: MBTComponent {
  public static let type: String = "PaymentMethodNewCardComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let appFillNewCard = FillNewCardFeature.`get`.forceCast(application)
    (try assertTrue((try appFillNewCard.waitForNewCardScreen(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT)), "Payment new card screen was not load in \(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT) seconds"))
    let modelScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(model)
    let appScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(application)
    if modelScreenTitle != nil && appScreenTitle != nil {
      let modelTitle = (try modelScreenTitle.getTitle())
      let appTitle = (try appScreenTitle.getTitle())
      (try assertStringEquals(modelTitle, appTitle, "Screen title mismatch"))
    }
    let modelFillNewCard: FillNewCard! = FillNewCardFeature.`get`.castIfSupported(model)
    let newCardMode: NewCardMode! = modelFillNewCard!.getNewCardMode()
    let modelPaymentDetails: ReadPaymentDetails! = ReadPaymentDetailsFeature.`get`.castIfSupported(model)
    if modelFillNewCard != nil {
      let modelCardNumber = (try modelFillNewCard.getFieldValue(NewCardField.cardNumber))
      let appCardNumber = (try appFillNewCard.getFieldValue(NewCardField.cardNumber))
      (try assertStringEquals(modelCardNumber, appCardNumber, "Card number is incorrect"))
      let modelExpirationDate = (try modelFillNewCard.getFieldValue(NewCardField.expirationDate))
      let appExpirationDate = (try appFillNewCard.getFieldValue(NewCardField.expirationDate))
      (try assertStringEquals(modelExpirationDate, appExpirationDate, "Expiration date is incorrect"))
      let modelCVV = formatCvv((try modelFillNewCard.getFieldValue(NewCardField.cvv)))
      let appCVV = formatCvv((try appFillNewCard.getFieldValue(NewCardField.cvv)))
      (try assertStringEquals(modelCVV, appCVV, "CVV is incorrect"))
      if newCardMode != NewCardMode.bind {
        let modelBackButton = (try modelFillNewCard.isBackButtonShown())
        let appBackButton = (try appFillNewCard.isBackButtonShown())
        (try assertBooleanEquals(modelBackButton, appBackButton, "Back button visibility state is incorrect"))
        if modelPaymentDetails!.getAuthorizationMode() == AuthorizationMode.authorized && newCardMode == NewCardMode.pay {
          let modelSaveCardCheckbox = (try modelFillNewCard.isSaveCardCheckboxEnabled())
          let appSaveCardCheckbox = (try appFillNewCard.isSaveCardCheckboxEnabled())
          (try assertBooleanEquals(modelSaveCardCheckbox, appSaveCardCheckbox, "Save card checkbox value is incorrect"))
        }
      }
    }
    let modelLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(model)
    let appLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(application)
    if modelLicenseAgreementFeature != nil && appLicenseAgreementFeature != nil {
      let modelLicenseAgreementShown = (try modelLicenseAgreementFeature.isLicenseAgreementShown())
      let appLicenseAgreementShown = (try appLicenseAgreementFeature.isLicenseAgreementShown())
      (try assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status"))
      let modelLicenseAgreement = (try modelLicenseAgreementFeature.getLicenseAgreement())
      let appLicenseAgreement = (try appLicenseAgreementFeature.getLicenseAgreement())
      (try assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text"))
    }
    let modelKeyboard: KeyboardProtocol! = KeyboardFeature.`get`.castIfSupported(model)
    let appKeyboard: KeyboardProtocol! = KeyboardFeature.`get`.castIfSupported(application)
    if modelKeyboard != nil && appKeyboard != nil {
      let modelNumKeyboardShown = (try modelKeyboard.isNumericKeyboardShown())
      let appNumKeyboardShown = (try appKeyboard.isNumericKeyboardShown())
      (try assertBooleanEquals(modelNumKeyboardShown, appNumKeyboardShown, "Numeric keyboard status is incorrect"))
      let modelAlphKeyboardShown = (try modelKeyboard.isAlphabeticalKeyboardShown())
      let appAlphKeyboardShown = (try appKeyboard.isAlphabeticalKeyboardShown())
      (try assertBooleanEquals(modelAlphKeyboardShown, appAlphKeyboardShown, "Alphabetical keyboard status is incorrect"))
    }
    let modelFieldsValidator: NewCardFieldsValidator! = NewCardFieldsValidatorFeature.`get`.castIfSupported(model)
    let appFieldsValidator: NewCardFieldsValidator! = NewCardFieldsValidatorFeature.`get`.castIfSupported(application)
    if modelFieldsValidator != nil && appFieldsValidator != nil {
      let modelCardNumberErrorText = (try modelFieldsValidator.getCardNumberErrorText())
      let appCardNumberErrorText = (try appFieldsValidator.getCardNumberErrorText())
      (try assertStringEquals(modelCardNumberErrorText, appCardNumberErrorText, "Card number error message is incorrect"))
      let modelCvvErrorText = (try modelFieldsValidator.getCvvErrorText())
      let appCvvErrorText = (try appFieldsValidator.getCvvErrorText())
      (try assertStringEquals(modelCvvErrorText, appCvvErrorText, "Cvv error message is incorrect"))
      let modelExpirationDateErrorText = (try modelFieldsValidator.getExpirationDateErrorText())
      let appExpirationDateErrorText = (try appFieldsValidator.getExpirationDateErrorText())
      (try assertStringEquals(modelExpirationDateErrorText, appExpirationDateErrorText, "Expiration date error message is incorrect"))
    }
    if modelPaymentDetails!.isPersonalInfoShown() && newCardMode != NewCardMode.bind {
      let modelPersonalInfoFields: PersonalInformation! = PersonalInformationFeature.`get`.castIfSupported(model)
      let appPersonalInfoFields: PersonalInformation! = PersonalInformationFeature.`get`.castIfSupported(application)
      if modelPersonalInfoFields != nil && appPersonalInfoFields != nil {
        let modelName = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.firstName))
        let appName = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.firstName))
        (try assertStringEquals(modelName, appName, "Name is incorrect"))
        let modelLastName = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.lastName))
        let appLastName = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.lastName))
        (try assertStringEquals(modelLastName, appLastName, "Last name is incorrect"))
        let modelEmail = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.email))
        let appEmail = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.email))
        (try assertStringEquals(modelEmail, appEmail, "Email is incorrect"))
        let modelPhoneNumber = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.phoneNumber))
        let appPhoneNumber = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.phoneNumber))
        (try assertStringEquals(modelPhoneNumber, appPhoneNumber, "Phone number is incorrect"))
      }
      let modelPersInfoFieldsValidator: PersonalInformationFieldsValidator! = PersonalInformationFieldsValidatorFeature.`get`.castIfSupported(model)
      let appPersInfoFieldsValidator: PersonalInformationFieldsValidator! = PersonalInformationFieldsValidatorFeature.`get`.castIfSupported(application)
      if modelPersInfoFieldsValidator != nil && appPersInfoFieldsValidator != nil {
        let modelEmailErrorText = (try modelPersInfoFieldsValidator.getEmailErrorText())
        let appEmailErrorText = (try appPersInfoFieldsValidator.getEmailErrorText())
        (try assertStringEquals(modelEmailErrorText, appEmailErrorText, "Email error message is incorrect"))
        let modelPhoneNumberErrorText = (try modelPersInfoFieldsValidator.getPhoneNumberErrorText())
        let appPhoneNumberErrorText = (try appPersInfoFieldsValidator.getPhoneNumberErrorText())
        (try assertStringEquals(modelPhoneNumberErrorText, appPhoneNumberErrorText, "Phone number error message is incorrect"))
      }
    }
    let modelPaymentButton: PaymentButton! = PaymentButtonFeature.`get`.castIfSupported(model)
    let appPaymentButton: PaymentButton! = PaymentButtonFeature.`get`.castIfSupported(application)
    if modelPaymentButton != nil && appPaymentButton != nil {
      let modelPaymentButtonEnabled = (try modelPaymentButton.isEnabled())
      let appPaymentButtonEnabled = (try appPaymentButton.isEnabled())
      (try assertBooleanEquals(modelPaymentButtonEnabled, appPaymentButtonEnabled, "Payment button status is incorrect"))
      let modelPaymentButtonText = (try modelPaymentButton.getButtonText())
      let appPaymentButtonText = (try appPaymentButton.getButtonText())
      (try assertStringEquals(modelPaymentButtonText, appPaymentButtonText, "Pay button text mismatch"))
    }
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return PaymentMethodNewCardComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

