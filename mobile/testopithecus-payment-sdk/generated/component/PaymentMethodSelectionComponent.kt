// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-method-selection-component.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentMethodSelectionComponent: MBTComponent {
    open override fun assertMatches(model: App, application: App): Unit {
        val appMethodsListFeature = PaymentMethodsListFeature.`get`.forceCast(application)
        assertTrue(appMethodsListFeature.waitForPaymentMethods(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT), "Method selection screen was not load in ${PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT} seconds")
        val modelScreenTitle = PaymentScreenTitleFeature.`get`.castIfSupported(model)
        val appScreenTitle = PaymentScreenTitleFeature.`get`.castIfSupported(application)
        if (modelScreenTitle != null && appScreenTitle != null) {
            val modelTitle = modelScreenTitle.getTitle()
            val appTitle = appScreenTitle.getTitle()
            assertStringEquals(modelTitle, appTitle, "Screen title mismatch")
        }
        val modelMethodsListFeature = PaymentMethodsListFeature.`get`.castIfSupported(model)
        if (modelMethodsListFeature != null) {
            val modelMethods = modelMethodsListFeature.getMethods()
            val appMethods = appMethodsListFeature.getMethods()
            assertInt32Equals(modelMethods.size, appMethods.size, "Incorrect number of payment methods")
            for (modelMethod in modelMethods) {
                assertTrue(appMethods.contains(modelMethod), "Incorrect payment method")
            }
        }
        val modelApplePayFeature = ApplePayFeature.`get`.castIfSupported(model)
        val appApplePayFeature = ApplePayFeature.`get`.castIfSupported(application)
        if (modelApplePayFeature != null && appApplePayFeature != null) {
            val modelApplePayAvailable = modelApplePayFeature.isAvailable()
            val appApplePayAvailable = appApplePayFeature.isAvailable()
            assertBooleanEquals(modelApplePayAvailable, appApplePayAvailable, "Incorrect ApplePay availability status")
        }
        val modelGooglePayFeature = GooglePayFeature.`get`.castIfSupported(model)
        val appGooglePayFeature = GooglePayFeature.`get`.castIfSupported(application)
        if (modelGooglePayFeature != null && appGooglePayFeature != null) {
            val modelGooglePayAvailable = modelGooglePayFeature.isAvailable()
            val appGooglePayAvailable = appGooglePayFeature.isAvailable()
            assertBooleanEquals(modelGooglePayAvailable, appGooglePayAvailable, "Incorrect GooglePay availability status")
        }
        val modelSBPFeature = SBPFeature.`get`.castIfSupported(model)
        val appSBPFeature = SBPFeature.`get`.castIfSupported(application)
        if (modelSBPFeature != null && appSBPFeature != null) {
            val modelSBPAvailable = modelSBPFeature.isAvailable()
            val appSBPAvailable = appSBPFeature.isAvailable()
            assertBooleanEquals(modelSBPAvailable, appSBPAvailable, "Incorrect SBP availability status")
        }
        val modelLicenseAgreementFeature = LicenseAgreementFeature.`get`.castIfSupported(model)
        val appLicenseAgreementFeature = LicenseAgreementFeature.`get`.castIfSupported(application)
        if (modelLicenseAgreementFeature != null && appLicenseAgreementFeature != null) {
            val modelLicenseAgreementShown = modelLicenseAgreementFeature.isLicenseAgreementShown()
            val appLicenseAgreementShown = appLicenseAgreementFeature.isLicenseAgreementShown()
            assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status")
            val modelLicenseAgreement = modelLicenseAgreementFeature.getLicenseAgreement()
            val appLicenseAgreement = appLicenseAgreementFeature.getLicenseAgreement()
            assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text")
        }
    }

    open override fun getComponentType(): MBTComponentType {
        return PaymentMethodSelectionComponent.type
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "PaymentSDK start payment screen"
    }
}

