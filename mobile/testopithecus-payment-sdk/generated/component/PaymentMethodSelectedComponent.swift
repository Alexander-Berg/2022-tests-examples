// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-method-selected-component.ts >>>

import Foundation

open class PaymentMethodSelectedComponent: MBTComponent {
  public static let type: String = "PaymentSDK payment methods with selected option"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let appMethodsListFeature = PaymentMethodsListFeature.`get`.forceCast(application)
    (try assertTrue((try appMethodsListFeature.waitForPaymentMethods(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT)), "Payment methods screen was not load in \(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT) seconds"))
    let modelScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(model)
    let appScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(application)
    if modelScreenTitle != nil && appScreenTitle != nil {
      let modelTitle = (try modelScreenTitle.getTitle())
      let appTitle = (try appScreenTitle.getTitle())
      (try assertStringEquals(modelTitle, appTitle, "Screen title mismatch"))
    }
    let modelMethodsListFeature: PaymentMethodsList! = PaymentMethodsListFeature.`get`.castIfSupported(model)
    if modelMethodsListFeature != nil {
      let modelMethods = modelMethodsListFeature.getMethods()
      let appMethods = appMethodsListFeature.getMethods()
      (try assertInt32Equals(modelMethods.length, appMethods.length, "Incorrect number of payment methods"))
      for modelMethod in modelMethods {
        (try assertTrue(appMethods.includes(modelMethod), "Incorrect payment method"))
      }
    }
    let modelUnbindCardFeature: UnbindCard! = UnbindCardFeature.`get`.castIfSupported(model)
    let appUnbindCardFeature: UnbindCard! = UnbindCardFeature.`get`.castIfSupported(application)
    if modelUnbindCardFeature != nil && appUnbindCardFeature != nil {
      let modelEditButton = (try modelUnbindCardFeature.isEditButtonShown())
      let appEditButton = (try appUnbindCardFeature.isEditButtonShown())
      (try assertBooleanEquals(modelEditButton, appEditButton, "Incorrect Edit button status"))
    }
    let modelApplePayFeature: ApplePay! = ApplePayFeature.`get`.castIfSupported(model)
    let appApplePayFeature: ApplePay! = ApplePayFeature.`get`.castIfSupported(application)
    if modelApplePayFeature != nil && appApplePayFeature != nil {
      let modelApplePayAvailable = modelApplePayFeature.isAvailable()
      let appApplePayAvailable = appApplePayFeature.isAvailable()
      (try assertBooleanEquals(modelApplePayAvailable, appApplePayAvailable, "Incorrect ApplePay availability status"))
    }
    let modelGooglePayFeature: GooglePay! = GooglePayFeature.`get`.castIfSupported(model)
    let appGooglePayFeature: GooglePay! = GooglePayFeature.`get`.castIfSupported(application)
    if modelGooglePayFeature != nil && appGooglePayFeature != nil {
      let modelGooglePayAvailable = modelGooglePayFeature.isAvailable()
      let appGooglePayAvailable = appGooglePayFeature.isAvailable()
      (try assertBooleanEquals(modelGooglePayAvailable, appGooglePayAvailable, "Incorrect GooglePay availability status"))
    }
    let modelSBPFeature: SBP! = SBPFeature.`get`.castIfSupported(model)
    let appSBPFeature: SBP! = SBPFeature.`get`.castIfSupported(application)
    if modelSBPFeature != nil && appSBPFeature != nil {
      let modelSBPAvailable = modelSBPFeature.isAvailable()
      let appSBPAvailable = appSBPFeature.isAvailable()
      (try assertBooleanEquals(modelSBPAvailable, appSBPAvailable, "Incorrect SBP availability status"))
    }
    let modelKeyboard: KeyboardProtocol! = KeyboardFeature.`get`.castIfSupported(model)
    let appKeyboard: KeyboardProtocol! = KeyboardFeature.`get`.castIfSupported(application)
    if modelKeyboard != nil && appKeyboard != nil {
      let modelNumKeyboardShown = (try modelKeyboard.isNumericKeyboardShown())
      let appNumKeyboardShown = (try appKeyboard.isNumericKeyboardShown())
      (try assertBooleanEquals(modelNumKeyboardShown, appNumKeyboardShown, "Numeric keyboard status is incorrect"))
      let modelAlphKeyboardShown = (try modelKeyboard.isAlphabeticalKeyboardShown())
      let appAlphKeyboardShown = (try appKeyboard.isAlphabeticalKeyboardShown())
      (try assertBooleanEquals(modelAlphKeyboardShown, appAlphKeyboardShown, "Alphabetical keyboard status is incorrect"))
    }
    let modelPaymentButtonFeature: PaymentButton! = PaymentButtonFeature.`get`.castIfSupported(model)
    let appPaymentButtonFeature: PaymentButton! = PaymentButtonFeature.`get`.castIfSupported(application)
    if modelPaymentButtonFeature != nil && appPaymentButtonFeature != nil {
      let isModelPayButtonEnabled = (try modelPaymentButtonFeature.isEnabled())
      let isAppPayButtonEnabled = (try appPaymentButtonFeature.isEnabled())
      (try assertBooleanEquals(isModelPayButtonEnabled, isAppPayButtonEnabled, "Payment button enabled status is incorrect"))
      let modelPayButtonText = (try modelPaymentButtonFeature.getButtonText())
      let appPayButtonText = (try appPaymentButtonFeature.getButtonText())
      (try assertStringEquals(modelPayButtonText, appPayButtonText, "Pay button text mismatch"))
      if (try modelMethodsListFeature!.getMethodsListMode()) != MethodsListMode.preselect {
        let modelPaymentButtonLabelText = (try modelPaymentButtonFeature.getLabelText())
        let appPaymentButtonLabelText = (try appPaymentButtonFeature.getLabelText())
        (try assertStringEquals(modelPaymentButtonLabelText, appPaymentButtonLabelText, "Pay button label text mismatch"))
      }
    }
    let modelLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(model)
    let appLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(application)
    if modelLicenseAgreementFeature != nil && appLicenseAgreementFeature != nil {
      let modelLicenseAgreementShown = (try modelLicenseAgreementFeature.isLicenseAgreementShown())
      let appLicenseAgreementShown = (try appLicenseAgreementFeature.isLicenseAgreementShown())
      (try assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status"))
      let modelLicenseAgreement = (try modelLicenseAgreementFeature.getLicenseAgreement())
      let appLicenseAgreement = (try appLicenseAgreementFeature.getLicenseAgreement())
      (try assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text"))
    }
    let modelPaymentDetails: ReadPaymentDetails! = ReadPaymentDetailsFeature.`get`.castIfSupported(model)
    if modelPaymentDetails!.isPersonalInfoShown() {
      let modelPersonalInfoFields: PersonalInformation! = PersonalInformationFeature.`get`.castIfSupported(model)
      let appPersonalInfoFields: PersonalInformation! = PersonalInformationFeature.`get`.castIfSupported(application)
      if modelPersonalInfoFields != nil && appPersonalInfoFields != nil {
        let modelName = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.firstName))
        let appName = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.firstName))
        (try assertStringEquals(modelName, appName, "Name is incorrect"))
        let modelLastName = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.lastName))
        let appLastName = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.lastName))
        (try assertStringEquals(modelLastName, appLastName, "Last name is incorrect"))
        let modelEmail = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.email))
        let appEmail = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.email))
        (try assertStringEquals(modelEmail, appEmail, "Email is incorrect"))
        let modelPhoneNumber = (try modelPersonalInfoFields.getFieldValue(PersonalInformationField.phoneNumber))
        let appPhoneNumber = (try appPersonalInfoFields.getFieldValue(PersonalInformationField.phoneNumber))
        (try assertStringEquals(modelPhoneNumber, appPhoneNumber, "Phone number is incorrect"))
      }
      let modelPersInfoFieldsValidator: PersonalInformationFieldsValidator! = PersonalInformationFieldsValidatorFeature.`get`.castIfSupported(model)
      let appPersInfoFieldsValidator: PersonalInformationFieldsValidator! = PersonalInformationFieldsValidatorFeature.`get`.castIfSupported(application)
      if modelPersInfoFieldsValidator != nil && appPersInfoFieldsValidator != nil {
        if modelPaymentDetails!.isPersonalInfoShown() {
          let modelEmailErrorText = (try modelPersInfoFieldsValidator.getEmailErrorText())
          let appEmailErrorText = (try appPersInfoFieldsValidator.getEmailErrorText())
          (try assertStringEquals(modelEmailErrorText, appEmailErrorText, "Email error message is incorrect"))
          let modelPhoneNumberErrorText = (try modelPersInfoFieldsValidator.getPhoneNumberErrorText())
          let appPhoneNumberErrorText = (try appPersInfoFieldsValidator.getPhoneNumberErrorText())
          (try assertStringEquals(modelPhoneNumberErrorText, appPhoneNumberErrorText, "Phone number error message is incorrect"))
        }
      }
    }
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return PaymentMethodSelectedComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

