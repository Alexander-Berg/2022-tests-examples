// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/preselect-cvv-component.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PreselectCvvComponent: MBTComponent {
    open override fun assertMatches(model: App, application: App): Unit {
        val appPreselectCvvFeature = PreselectCvvFeature.`get`.forceCast(application)
        assertTrue(appPreselectCvvFeature.waitForPreselectCvv(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT), "Preselect cvv screen was not load in ${PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT} seconds")
        val modelScreenTitle = PaymentScreenTitleFeature.`get`.castIfSupported(model)
        val appScreenTitle = PaymentScreenTitleFeature.`get`.castIfSupported(application)
        if (modelScreenTitle != null && appScreenTitle != null) {
            val modelTitle = modelScreenTitle.getTitle()
            val appTitle = appScreenTitle.getTitle()
            assertStringEquals(modelTitle, appTitle, "Screen title mismatch")
        }
        val modelPreselectCvvFeature = PreselectCvvFeature.`get`.castIfSupported(model)
        if (modelPreselectCvvFeature != null) {
            val modelCvvValue = modelPreselectCvvFeature.getCvvFieldValue()
            val appCvvValue = appPreselectCvvFeature.getCvvFieldValue()
            assertBooleanEquals(modelCvvValue == null, appCvvValue == null, "Incorrect cvv value")
            if (modelCvvValue != null && appCvvValue != null) {
                assertStringEquals(modelCvvValue, appCvvValue, "Incorrect cvv value")
            }
            val modelSelectedCardName = modelPreselectCvvFeature.getCardName()
            val appSelectedCardName = appPreselectCvvFeature.getCardName()
            assertStringEquals(modelSelectedCardName, appSelectedCardName, "Incorrect card name")
        }
        val modelLicenseAgreementFeature = LicenseAgreementFeature.`get`.castIfSupported(model)
        val appLicenseAgreementFeature = LicenseAgreementFeature.`get`.castIfSupported(application)
        if (modelLicenseAgreementFeature != null && appLicenseAgreementFeature != null) {
            val modelLicenseAgreementShown = modelLicenseAgreementFeature.isLicenseAgreementShown()
            val appLicenseAgreementShown = appLicenseAgreementFeature.isLicenseAgreementShown()
            assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status")
            val modelLicenseAgreement = modelLicenseAgreementFeature.getLicenseAgreement()
            val appLicenseAgreement = appLicenseAgreementFeature.getLicenseAgreement()
            assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text")
        }
    }

    open override fun getComponentType(): MBTComponentType {
        return PreselectCvvComponent.type
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "PreselectCvvComponent"
    }
}

