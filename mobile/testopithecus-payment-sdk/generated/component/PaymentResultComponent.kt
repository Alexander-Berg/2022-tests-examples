// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-result-component.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentResultComponent: MBTComponent {
    open override fun assertMatches(model: App, application: App): Unit {
        val modelPaymentResultFeature = PaymentResultFeature.`get`.castIfSupported(model)
        val appPaymentResultFeature = PaymentResultFeature.`get`.castIfSupported(application)
        if (modelPaymentResultFeature != null && appPaymentResultFeature != null) {
            assertTrue(appPaymentResultFeature.waitForCompletion(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT), "Payment not completed in ${PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT} milliseconds")
            val modelMessage = removeNewlines(modelPaymentResultFeature.getResultMessage())
            val appMessage = removeNewlines(appPaymentResultFeature.getResultMessage())
            assertStringEquals(modelMessage, appMessage, "Result message mismatch")
        }
        val modelPaymentButton = PaymentButtonFeature.`get`.castIfSupported(model)
        val appPaymentButton = PaymentButtonFeature.`get`.castIfSupported(application)
        if (modelPaymentButton != null && appPaymentButton != null) {
            val modelPaymentButtonEnabled = modelPaymentButton.isEnabled()
            val appPaymentButtonEnabled = appPaymentButton.isEnabled()
            assertBooleanEquals(modelPaymentButtonEnabled, appPaymentButtonEnabled, "Close button status is incorrect")
        }
    }

    open override fun getComponentType(): MBTComponentType {
        return PaymentResultComponent.type
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "Represent result/loading screen"
    }
}

