// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-result-component.ts >>>

import Foundation

open class PaymentResultComponent: MBTComponent {
  public static let type: String = "Represent result/loading screen"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let modelPaymentResultFeature: PaymentResultProvider! = PaymentResultFeature.`get`.castIfSupported(model)
    let appPaymentResultFeature: PaymentResultProvider! = PaymentResultFeature.`get`.castIfSupported(application)
    if modelPaymentResultFeature != nil && appPaymentResultFeature != nil {
      (try assertTrue((try appPaymentResultFeature.waitForCompletion(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT)), "Payment not completed in \(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT) milliseconds"))
      let modelMessage = removeNewlines((try modelPaymentResultFeature.getResultMessage()))
      let appMessage = removeNewlines((try appPaymentResultFeature.getResultMessage()))
      (try assertStringEquals(modelMessage, appMessage, "Result message mismatch"))
    }
    let modelPaymentButton: PaymentButton! = PaymentButtonFeature.`get`.castIfSupported(model)
    let appPaymentButton: PaymentButton! = PaymentButtonFeature.`get`.castIfSupported(application)
    if modelPaymentButton != nil && appPaymentButton != nil {
      let modelPaymentButtonEnabled = (try modelPaymentButton.isEnabled())
      let appPaymentButtonEnabled = (try appPaymentButton.isEnabled())
      (try assertBooleanEquals(modelPaymentButtonEnabled, appPaymentButtonEnabled, "Close button status is incorrect"))
    }
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return PaymentResultComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

