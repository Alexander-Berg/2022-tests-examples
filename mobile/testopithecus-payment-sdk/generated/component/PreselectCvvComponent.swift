// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/preselect-cvv-component.ts >>>

import Foundation

open class PreselectCvvComponent: MBTComponent {
  public static let type: String = "PreselectCvvComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let appPreselectCvvFeature = PreselectCvvFeature.`get`.forceCast(application)
    (try assertTrue((try appPreselectCvvFeature.waitForPreselectCvv(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT)), "Preselect cvv screen was not load in \(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT) seconds"))
    let modelScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(model)
    let appScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(application)
    if modelScreenTitle != nil && appScreenTitle != nil {
      let modelTitle = (try modelScreenTitle.getTitle())
      let appTitle = (try appScreenTitle.getTitle())
      (try assertStringEquals(modelTitle, appTitle, "Screen title mismatch"))
    }
    let modelPreselectCvvFeature: PreselectCvv! = PreselectCvvFeature.`get`.castIfSupported(model)
    if modelPreselectCvvFeature != nil {
      let modelCvvValue: String! = (try modelPreselectCvvFeature.getCvvFieldValue())
      let appCvvValue: String! = (try appPreselectCvvFeature.getCvvFieldValue())
      (try assertBooleanEquals(modelCvvValue == nil, appCvvValue == nil, "Incorrect cvv value"))
      if modelCvvValue != nil && appCvvValue != nil {
        (try assertStringEquals(modelCvvValue, appCvvValue, "Incorrect cvv value"))
      }
      let modelSelectedCardName = (try modelPreselectCvvFeature.getCardName())
      let appSelectedCardName = (try appPreselectCvvFeature.getCardName())
      (try assertStringEquals(modelSelectedCardName, appSelectedCardName, "Incorrect card name"))
    }
    let modelLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(model)
    let appLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(application)
    if modelLicenseAgreementFeature != nil && appLicenseAgreementFeature != nil {
      let modelLicenseAgreementShown = (try modelLicenseAgreementFeature.isLicenseAgreementShown())
      let appLicenseAgreementShown = (try appLicenseAgreementFeature.isLicenseAgreementShown())
      (try assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status"))
      let modelLicenseAgreement = (try modelLicenseAgreementFeature.getLicenseAgreement())
      let appLicenseAgreement = (try appLicenseAgreementFeature.getLicenseAgreement())
      (try assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text"))
    }
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return PreselectCvvComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

