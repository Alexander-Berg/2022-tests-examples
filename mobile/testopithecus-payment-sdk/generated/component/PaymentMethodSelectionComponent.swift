// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/payment-method-selection-component.ts >>>

import Foundation

open class PaymentMethodSelectionComponent: MBTComponent {
  public static let type: String = "PaymentSDK start payment screen"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let appMethodsListFeature = PaymentMethodsListFeature.`get`.forceCast(application)
    (try assertTrue((try appMethodsListFeature.waitForPaymentMethods(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT)), "Method selection screen was not load in \(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT) seconds"))
    let modelScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(model)
    let appScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(application)
    if modelScreenTitle != nil && appScreenTitle != nil {
      let modelTitle = (try modelScreenTitle.getTitle())
      let appTitle = (try appScreenTitle.getTitle())
      (try assertStringEquals(modelTitle, appTitle, "Screen title mismatch"))
    }
    let modelMethodsListFeature: PaymentMethodsList! = PaymentMethodsListFeature.`get`.castIfSupported(model)
    if modelMethodsListFeature != nil {
      let modelMethods = modelMethodsListFeature.getMethods()
      let appMethods = appMethodsListFeature.getMethods()
      (try assertInt32Equals(modelMethods.length, appMethods.length, "Incorrect number of payment methods"))
      for modelMethod in modelMethods {
        (try assertTrue(appMethods.includes(modelMethod), "Incorrect payment method"))
      }
    }
    let modelApplePayFeature: ApplePay! = ApplePayFeature.`get`.castIfSupported(model)
    let appApplePayFeature: ApplePay! = ApplePayFeature.`get`.castIfSupported(application)
    if modelApplePayFeature != nil && appApplePayFeature != nil {
      let modelApplePayAvailable = modelApplePayFeature.isAvailable()
      let appApplePayAvailable = appApplePayFeature.isAvailable()
      (try assertBooleanEquals(modelApplePayAvailable, appApplePayAvailable, "Incorrect ApplePay availability status"))
    }
    let modelGooglePayFeature: GooglePay! = GooglePayFeature.`get`.castIfSupported(model)
    let appGooglePayFeature: GooglePay! = GooglePayFeature.`get`.castIfSupported(application)
    if modelGooglePayFeature != nil && appGooglePayFeature != nil {
      let modelGooglePayAvailable = modelGooglePayFeature.isAvailable()
      let appGooglePayAvailable = appGooglePayFeature.isAvailable()
      (try assertBooleanEquals(modelGooglePayAvailable, appGooglePayAvailable, "Incorrect GooglePay availability status"))
    }
    let modelSBPFeature: SBP! = SBPFeature.`get`.castIfSupported(model)
    let appSBPFeature: SBP! = SBPFeature.`get`.castIfSupported(application)
    if modelSBPFeature != nil && appSBPFeature != nil {
      let modelSBPAvailable = modelSBPFeature.isAvailable()
      let appSBPAvailable = appSBPFeature.isAvailable()
      (try assertBooleanEquals(modelSBPAvailable, appSBPAvailable, "Incorrect SBP availability status"))
    }
    let modelLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(model)
    let appLicenseAgreementFeature: LicenseAgreement! = LicenseAgreementFeature.`get`.castIfSupported(application)
    if modelLicenseAgreementFeature != nil && appLicenseAgreementFeature != nil {
      let modelLicenseAgreementShown = (try modelLicenseAgreementFeature.isLicenseAgreementShown())
      let appLicenseAgreementShown = (try appLicenseAgreementFeature.isLicenseAgreementShown())
      (try assertBooleanEquals(modelLicenseAgreementShown, appLicenseAgreementShown, "Incorrect License agreement shown status"))
      let modelLicenseAgreement = (try modelLicenseAgreementFeature.getLicenseAgreement())
      let appLicenseAgreement = (try appLicenseAgreementFeature.getLicenseAgreement())
      (try assertStringEquals(modelLicenseAgreement, appLicenseAgreement, "Incorrect License agreement text"))
    }
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return PaymentMethodSelectionComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

