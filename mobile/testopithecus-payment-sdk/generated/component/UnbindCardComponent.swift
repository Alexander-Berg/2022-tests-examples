// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM component/unbind-card-component.ts >>>

import Foundation

open class UnbindCardComponent: MBTComponent {
  public static let type: String = "UnbindCardComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let appUnbindCard = UnbindCardFeature.`get`.forceCast(application)
    (try assertTrue((try appUnbindCard.waitForUnbindCard(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT)), "Unbind screen was not load in \(PaymentSdkConstants.SCREEN_APPEARANCE_TIMEOUT) seconds"))
    let modelScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(model)
    let appScreenTitle: PaymentScreenTitle! = PaymentScreenTitleFeature.`get`.castIfSupported(application)
    if modelScreenTitle != nil && appScreenTitle != nil {
      let modelTitle = (try modelScreenTitle.getTitle())
      let appTitle = (try appScreenTitle.getTitle())
      (try assertStringEquals(modelTitle, appTitle, "Screen title mismatch"))
    }
    let modelUnbindCard: UnbindCard! = UnbindCardFeature.`get`.castIfSupported(model)
    if modelUnbindCard != nil {
      let modelCards = modelUnbindCard.getCards()
      let appCards = appUnbindCard.getCards()
      (try assertInt32Equals(modelCards.length, appCards.length, "Incorrect number of bound cards"))
      for modelCard in modelCards {
        (try assertTrue(appCards.includes(modelCard), "Incorrect bound card"))
      }
      let modelDoneButton = (try modelUnbindCard.isDoneButtonShown())
      let appDoneButton = (try appUnbindCard.isDoneButtonShown())
      (try assertBooleanEquals(modelDoneButton, appDoneButton, "Incorrect done button showing status"))
    }
    let modelKeyboard: KeyboardProtocol! = KeyboardFeature.`get`.castIfSupported(model)
    let appKeyboard: KeyboardProtocol! = KeyboardFeature.`get`.castIfSupported(application)
    if modelKeyboard != nil && appKeyboard != nil {
      let modelNumKeyboardShown = (try modelKeyboard.isNumericKeyboardShown())
      let appNumKeyboardShown = (try appKeyboard.isNumericKeyboardShown())
      (try assertBooleanEquals(modelNumKeyboardShown, appNumKeyboardShown, "Numeric keyboard status is incorrect"))
      let modelAlphKeyboardShown = (try modelKeyboard.isAlphabeticalKeyboardShown())
      let appAlphKeyboardShown = (try appKeyboard.isAlphabeticalKeyboardShown())
      (try assertBooleanEquals(modelAlphKeyboardShown, appAlphKeyboardShown, "Alphabetical keyboard status is incorrect"))
    }
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return UnbindCardComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

