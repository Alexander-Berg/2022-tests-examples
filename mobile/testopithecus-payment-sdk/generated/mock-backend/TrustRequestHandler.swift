// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/trust-request-handler.ts >>>

import Foundation

open class TrustRequestHandler: HttpRequestHandler {
  private let trustModel: MockTrustModel
  private let jsonSerializer: JSONSerializer
  public init(_ trustModel: MockTrustModel, _ jsonSerializer: JSONSerializer) {
    self.trustModel = trustModel
    self.jsonSerializer = jsonSerializer
  }

  @discardableResult
  open func handleRequest(_ request: HttpRequest) -> HttpResponse {
    if request.url == "/trust/trust-payments/v2/orders" {
      let orderId = self.trustModel.createOrder(getRequestHeader(request.headers, "X-Service-Token"))
      return TrustPaymentsOrdersResponse(orderId).toHttpResponse(self.jsonSerializer)
    } else if request.url == "/trust/trust-payments/v2/payments" {
      let body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
      let req = extractMockRequest(body.getValue(), self.jsonSerializer, {
        (item) in
        TrustPaymentsPaymentsRequest.decodeJson(item)
      })
      if req.isError() {
        return makeErrorHttpResponse("Wrong format", self.jsonSerializer)
      }
      let data = req.getValue()
      let result = self.trustModel.setupOrder(data.serviceOrderId, data.price, data.forced3ds)
      if result.isError() {
        return makeErrorHttpResponse(result.getError().message, self.jsonSerializer)
      }
      return TrustPaymentsPaymentsResponse(result.getValue()).toHttpResponse(self.jsonSerializer)
    } else if request.url.search(StartPurchaseRequest.PATH_MATCH_REGEX) != -1 {
      let purchaseId = request.url.match(StartPurchaseRequest.PATH_MATCH_REGEX)![1]
      if !self.trustModel.checkHasPurchase(purchaseId) {
        return makeErrorHttpResponse("Wrong format", self.jsonSerializer)
      }
      return makeSuccessHttpResponse(self.jsonSerializer)
    } else if request.url.startsWith("/trust/mock-trust-bank") {
      let name = Uris.fromString(request.url)?.getQueryParameter("bank") ?? nil
      if name == nil {
        return makeErrorHttpResponse("Wrong format", self.jsonSerializer)
      }
      let result = self.trustModel.setStartMockBank(name!)
      if result.isError() {
        return makeErrorHttpResponse("Wrong format", self.jsonSerializer)
      }
      return makeSuccessHttpResponse(self.jsonSerializer)
    } else if request.url.startsWith("/trust/mock-family-info-mode") {
      let modeParam = Uris.fromString(request.url)?.getQueryParameter("mode") ?? nil
      if modeParam == nil {
        return makeErrorHttpResponse("Wrong format", self.jsonSerializer)
      }
      let mode: FamilyInfoMode! = stringToFamilyInfoMode(modeParam!)
      if mode == nil {
        return makeErrorHttpResponse("Wrong format", self.jsonSerializer)
      }
      self.trustModel.setFamilyInfoMode(mode!)
      return makeSuccessHttpResponse(self.jsonSerializer)
    }
    return makeErrorHttpResponse("Unstubbed", self.jsonSerializer)
  }

}

