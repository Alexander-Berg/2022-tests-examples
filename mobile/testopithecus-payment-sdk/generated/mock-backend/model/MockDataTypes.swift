// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/model/mock-data-types.ts >>>

import Foundation

open class MockCard {
  public let cardNumber: String
  public let expirationMonth: String
  public let expirationYear: String
  public let cvn: String
  public let id: String
  public init(_ cardNumber: String, _ expirationMonth: String, _ expirationYear: String, _ cvn: String, _ id: String) {
    self.cardNumber = cardNumber
    self.expirationMonth = expirationMonth
    self.expirationYear = expirationYear
    self.cvn = cvn
    self.id = id
  }

}

public enum Verification3dsState : String {
  case not_required = "not_required"
  case `required` = "required"
  case provided = "provided"
  public func toString() -> String {
    return self.rawValue
  }
}
open class MockSuppliedMethod {
  public let methodId: String
  public var verification3ds: Verification3dsState
  public var code3ds: String
  public var sbpConfirmed: Bool
  public init(_ methodId: String, _ verification3ds: Verification3dsState = Verification3dsState.not_required, _ code3ds: String = "", _ sbpConfirmed: Bool = false) {
    self.methodId = methodId
    self.verification3ds = verification3ds
    self.code3ds = code3ds
    self.sbpConfirmed = sbpConfirmed
  }

}

open class MockOrder {
  public let id: String
  public let service: String!
  public let isBinding: Bool
  public var amount: String
  public var token: String
  public var acquirer: Acquirer!
  public var checkCvn: Bool
  public var forced3ds: Bool
  public var supplied: MockSuppliedMethod!
  public var finished: Bool
  public init(_ id: String, _ service: String!, _ isBinding: Bool = false, _ amount: String = "", _ token: String = "", _ acquirer: Acquirer! = nil, _ checkCvn: Bool = false, _ forced3ds: Bool = false, _ supplied: MockSuppliedMethod! = nil, _ finished: Bool = false) {
    self.id = id
    self.service = service
    self.isBinding = isBinding
    self.amount = amount
    self.token = token
    self.acquirer = acquirer
    self.checkCvn = checkCvn
    self.forced3ds = forced3ds
    self.supplied = supplied
    self.finished = finished
  }

}

open class MockBindingV2 {
  public let oAuth: String
  public let service: String
  public let card: MockCard
  public var purchaseToken: String
  public init(_ oAuth: String, _ service: String, _ card: MockCard, _ purchaseToken: String) {
    self.oAuth = oAuth
    self.service = service
    self.card = card
    self.purchaseToken = purchaseToken
  }

}

open class PaymentMethodsData {
  public let methods: YSArray<PaymentMethod>
  public let enabledMethods: YSArray<EnabledPaymentMethod>
  public init(_ methods: YSArray<PaymentMethod>, _ enabledMethods: YSArray<EnabledPaymentMethod>) {
    self.methods = methods
    self.enabledMethods = enabledMethods
  }

}

open class InitPaymentData {
  public let purchaseToken: String
  public let amount: String
  public let methods: PaymentMethodsData
  public let acquirer: Acquirer!
  public let merchantInfo: MerchantInfo!
  public init(_ purchaseToken: String, _ amount: String, _ methods: PaymentMethodsData, _ acquirer: Acquirer! = nil, _ merchantInfo: MerchantInfo! = nil) {
    self.purchaseToken = purchaseToken
    self.amount = amount
    self.methods = methods
    self.acquirer = acquirer
    self.merchantInfo = merchantInfo
  }

}

open class CheckPaymentData {
  public let status: String
  public let statusDesc: String
  public let purchaseToken: String
  public let amount: String
  public let isBinding: Bool
  public let timestamp: String
  public let redirect3ds: String!
  public let sbpPaymentForm: String!
  public init(_ status: String, _ statusDesc: String, _ purchaseToken: String, _ amount: String, _ isBinding: Bool, _ timestamp: String, _ redirect3ds: String!, _ sbpPaymentForm: String!) {
    self.status = status
    self.statusDesc = statusDesc
    self.purchaseToken = purchaseToken
    self.amount = amount
    self.isBinding = isBinding
    self.timestamp = timestamp
    self.redirect3ds = redirect3ds
    self.sbpPaymentForm = sbpPaymentForm
  }

}

open class MobPaymentError: YSError {
  public let status: String
  public init(_ status: String, _ message: String) {
    self.status = status
    super.init(message)
  }

}

public enum FamilyInfoMode : String {
  case disabled = "disabled"
  case enabled_low_allowance = "enabled_low_allowance"
  case enabled_high_allowance = "enabled_high_allowance"
  case enabled_unbound_limit = "enabled_unbound_limit"
  public func toString() -> String {
    return self.rawValue
  }
}
@discardableResult
public func stringToFamilyInfoMode(_ value: String) -> FamilyInfoMode! {
  switch value {
    case FamilyInfoMode.disabled.toString():
      return FamilyInfoMode.disabled
    case FamilyInfoMode.enabled_low_allowance.toString():
      return FamilyInfoMode.enabled_low_allowance
    case FamilyInfoMode.enabled_high_allowance.toString():
      return FamilyInfoMode.enabled_high_allowance
    case FamilyInfoMode.enabled_unbound_limit.toString():
      return FamilyInfoMode.enabled_unbound_limit
    default:
      return nil
  }
}

