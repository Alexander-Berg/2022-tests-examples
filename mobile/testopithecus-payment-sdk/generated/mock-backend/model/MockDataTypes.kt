// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/model/mock-data-types.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class MockCard(val cardNumber: String, val expirationMonth: String, val expirationYear: String, val cvn: String, val id: String) {
}

public enum class Verification3dsState(val value: String) {
    not_required("not_required"),
    required("required"),
    provided("provided"),
    ;
    override fun toString(): String = value
}
public open class MockSuppliedMethod(val methodId: String, var verification3ds: Verification3dsState = Verification3dsState.not_required, var code3ds: String = "", var sbpConfirmed: Boolean = false) {
}

public open class MockOrder(val id: String, val service: String?, val isBinding: Boolean = false, var amount: String = "", var token: String = "", var acquirer: Acquirer? = null, var checkCvn: Boolean = false, var forced3ds: Boolean = false, var supplied: MockSuppliedMethod? = null, var finished: Boolean = false) {
}

public open class MockBindingV2(val oAuth: String, val service: String, val card: MockCard, var purchaseToken: String) {
}

public open class PaymentMethodsData(val methods: YSArray<PaymentMethod>, val enabledMethods: YSArray<EnabledPaymentMethod>) {
}

public open class InitPaymentData(val purchaseToken: String, val amount: String, val methods: PaymentMethodsData, val acquirer: Acquirer? = null, val merchantInfo: MerchantInfo? = null) {
}

public open class CheckPaymentData(val status: String, val statusDesc: String, val purchaseToken: String, val amount: String, val isBinding: Boolean, val timestamp: String, val redirect3ds: String?, val sbpPaymentForm: String?) {
}

public open class MobPaymentError(val status: String, message: String): YSError(message) {
}

public enum class FamilyInfoMode(val value: String) {
    disabled("disabled"),
    enabled_low_allowance("enabled_low_allowance"),
    enabled_high_allowance("enabled_high_allowance"),
    enabled_unbound_limit("enabled_unbound_limit"),
    ;
    override fun toString(): String = value
}
public fun stringToFamilyInfoMode(value: String): FamilyInfoMode? {
    when (value) {
        FamilyInfoMode.disabled.toString() -> {
            return FamilyInfoMode.disabled
        }
        FamilyInfoMode.enabled_low_allowance.toString() -> {
            return FamilyInfoMode.enabled_low_allowance
        }
        FamilyInfoMode.enabled_high_allowance.toString() -> {
            return FamilyInfoMode.enabled_high_allowance
        }
        FamilyInfoMode.enabled_unbound_limit.toString() -> {
            return FamilyInfoMode.enabled_unbound_limit
        }
        else -> {
            return null
        }
    }
}

