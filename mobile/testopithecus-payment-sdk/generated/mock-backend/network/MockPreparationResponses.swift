// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/network/mock-preparation-responses.ts >>>

import Foundation

open class TrustPaymentsOrdersResponse {
  public let orderId: String
  public init(_ orderId: String) {
    self.orderId = orderId
  }

  @discardableResult
  open func toHttpResponse(_ jsonSerializer: JSONSerializer) -> HttpResponse {
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "success").putString("status_code", "created").putString("order_id", self.orderId).putString("product_id", "some_id").putString("order_status", "order_created")).getValue()).build()
  }

}

open class TrustPaymentsPaymentsResponse {
  public let token: String
  public init(_ token: String) {
    self.token = token
  }

  @discardableResult
  open func toHttpResponse(_ jsonSerializer: JSONSerializer) -> HttpResponse {
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "success").putString("status_code", "payment_created").putString("purchase_token", self.token)).getValue()).build()
  }

}

open class TusGetAccountResponse {
  @discardableResult
  open func toHttpResponse(_ jsonSerializer: JSONSerializer) -> HttpResponse {
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "ok").putString("passport_environment", "testing").put("account", MapJSONItem().putString("delete_at", "None").putString("locked_until", "2023-01-26 10:26:58.706900").putString("login", "local-test-yandex-team").putString("password", "password").putString("uid", "1234567890"))).getValue()).build()
  }

}

open class TusGetTokenResponse {
  @discardableResult
  open func toHttpResponse(_ jsonSerializer: JSONSerializer) -> HttpResponse {
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("access_token", "AAAADEADBEEFDEADBEEF").putString("expires_in", "99999999").putString("token_type", "bearer").putString("uid", "1234567890")).getValue()).build()
  }

}

@discardableResult
public func makeErrorHttpResponse(_ message: String, _ jsonSerializer: JSONSerializer) -> HttpResponse {
  return HttpResponseBuilder().setCode(500).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "error").putString("status_desc", message)).getValue()).build()
}

@discardableResult
public func makeSuccessHttpResponse(_ jsonSerializer: JSONSerializer) -> HttpResponse {
  return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "success")).getValue()).build()
}

