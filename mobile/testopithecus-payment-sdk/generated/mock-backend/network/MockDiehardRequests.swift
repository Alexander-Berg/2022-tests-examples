// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/network/mock-diehard-requests.ts >>>

import Foundation

@discardableResult
public func decodeBindCardRequest(_ service: String!, _ item: JSONItem) -> Result<BindNewCardRequest> {
  return decodeJSONItem(item, {
    (json) in
    let paramsMap = (try (try (try json.tryCastAsMapJSONItem()).tryGet("params")).tryCastAsMapJSONItem())
    return BindNewCardRequest(paramsMap.getString("token"), service, (try paramsMap.tryGetString("card_number")), (try paramsMap.tryGetString("expiration_month")), (try paramsMap.tryGetString("expiration_year")), (try paramsMap.tryGetString("cvn")), (try paramsMap.tryGetInt32("region_id")))
  })
}

@discardableResult
public func decodeUnbindCardRequest(_ item: JSONItem) -> Result<UnbindCardRequest> {
  return decodeJSONItem(item, {
    (json) in
    let paramsMap = (try (try (try json.tryCastAsMapJSONItem()).tryGet("params")).tryCastAsMapJSONItem())
    return UnbindCardRequest(paramsMap.getString("token"), (try paramsMap.tryGetString("card")))
  })
}

open class MockSupplyPaymentRequest {
  public let token: String!
  public let purchaseToken: String
  public let paymentMethod: String
  public let cardNumber: String!
  public let expirationMonth: String!
  public let expirationYear: String!
  public let cvn: String!
  public let bindCard: Int32!
  public init(_ token: String!, _ purchaseToken: String, _ paymentMethod: String, _ cardNumber: String!, _ expirationMonth: String!, _ expirationYear: String!, _ cvn: String!, _ bindCard: Int32!) {
    self.token = token
    self.purchaseToken = purchaseToken
    self.paymentMethod = paymentMethod
    self.cardNumber = cardNumber
    self.expirationMonth = expirationMonth
    self.expirationYear = expirationYear
    self.cvn = cvn
    self.bindCard = bindCard
  }

  @discardableResult
  open class func decodeJson(_ item: JSONItem) -> Result<MockSupplyPaymentRequest> {
    return decodeJSONItem(item, {
      (json) in
      let paramsMap = (try (try (try json.tryCastAsMapJSONItem()).tryGet("params")).tryCastAsMapJSONItem())
      return MockSupplyPaymentRequest(paramsMap.getString("token"), (try paramsMap.tryGetString("purchase_token")), (try paramsMap.tryGetString("payment_method")), paramsMap.getString("card_number"), paramsMap.getString("expiration_month"), paramsMap.getString("expiration_year"), paramsMap.getString("cvn"), paramsMap.getInt32("bind_card"))
    })
  }

}

@discardableResult
public func decodeCheckPaymentRequest(_ item: JSONItem) -> Result<CheckPaymentRequest> {
  return decodeJSONItem(item, {
    (json) in
    let paramsMap = (try (try (try json.tryCastAsMapJSONItem()).tryGet("params")).tryCastAsMapJSONItem())
    return CheckPaymentRequest((try paramsMap.tryGetString("purchase_token")))
  })
}

@discardableResult
public func decodeNewCardBindReuest(_ headerOauthToken: String, _ item: JSONItem) -> Result<NewCardBindingRequest> {
  return decodeJSONItem(item, {
    (json) in
    let map = (try json.tryCastAsMapJSONItem())
    return NewCardBindingRequest(headerOauthToken, (try map.tryGetString("service_token")), (try map.tryGetString("hash_algo")), (try map.tryGetString("card_data_encrypted")), (try map.tryGetInt32("region_id")))
  })
}

