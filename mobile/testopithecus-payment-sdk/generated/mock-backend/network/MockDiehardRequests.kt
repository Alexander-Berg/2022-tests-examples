// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/network/mock-diehard-requests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public fun decodeBindCardRequest(service: String?, item: JSONItem): Result<BindNewCardRequest> {
    return decodeJSONItem(item, __LBL__MockDiehardRequests_1@ {
        json ->
        val paramsMap = json.tryCastAsMapJSONItem().tryGet("params").tryCastAsMapJSONItem()
        return@__LBL__MockDiehardRequests_1 BindNewCardRequest(paramsMap.getString("token"), service, paramsMap.tryGetString("card_number"), paramsMap.tryGetString("expiration_month"), paramsMap.tryGetString("expiration_year"), paramsMap.tryGetString("cvn"), paramsMap.tryGetInt32("region_id"))
    })
}

public fun decodeUnbindCardRequest(item: JSONItem): Result<UnbindCardRequest> {
    return decodeJSONItem(item, __LBL__MockDiehardRequests_2@ {
        json ->
        val paramsMap = json.tryCastAsMapJSONItem().tryGet("params").tryCastAsMapJSONItem()
        return@__LBL__MockDiehardRequests_2 UnbindCardRequest(paramsMap.getString("token"), paramsMap.tryGetString("card"))
    })
}

public open class MockSupplyPaymentRequest(val token: String?, val purchaseToken: String, val paymentMethod: String, val cardNumber: String?, val expirationMonth: String?, val expirationYear: String?, val cvn: String?, val bindCard: Int?) {
    companion object {
        @JvmStatic
        open fun decodeJson(item: JSONItem): Result<MockSupplyPaymentRequest> {
            return decodeJSONItem(item, __LBL__MockDiehardRequests_3@ {
                json ->
                val paramsMap = json.tryCastAsMapJSONItem().tryGet("params").tryCastAsMapJSONItem()
                return@__LBL__MockDiehardRequests_3 MockSupplyPaymentRequest(paramsMap.getString("token"), paramsMap.tryGetString("purchase_token"), paramsMap.tryGetString("payment_method"), paramsMap.getString("card_number"), paramsMap.getString("expiration_month"), paramsMap.getString("expiration_year"), paramsMap.getString("cvn"), paramsMap.getInt32("bind_card"))
            })
        }

    }
}

public fun decodeCheckPaymentRequest(item: JSONItem): Result<CheckPaymentRequest> {
    return decodeJSONItem(item, __LBL__MockDiehardRequests_4@ {
        json ->
        val paramsMap = json.tryCastAsMapJSONItem().tryGet("params").tryCastAsMapJSONItem()
        return@__LBL__MockDiehardRequests_4 CheckPaymentRequest(paramsMap.tryGetString("purchase_token"))
    })
}

public fun decodeNewCardBindReuest(headerOauthToken: String, item: JSONItem): Result<NewCardBindingRequest> {
    return decodeJSONItem(item, __LBL__MockDiehardRequests_5@ {
        json ->
        val map = json.tryCastAsMapJSONItem()
        return@__LBL__MockDiehardRequests_5 NewCardBindingRequest(headerOauthToken, map.tryGetString("service_token"), map.tryGetString("hash_algo"), map.tryGetString("card_data_encrypted"), map.tryGetInt32("region_id"))
    })
}

