// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/network/mock-mobpayment-responses.ts >>>

import Foundation

@discardableResult
fileprivate func makeMethodsArray(_ data: YSArray<PaymentMethod>) -> ArrayJSONItem {
  let res = ArrayJSONItem()
  data.forEach({
    (value) in
    let method = MapJSONItem().putInt32("region_id", 225).putString("payment_method", "card").putString("binding_ts", "1111111111.111").putString("recommended_verification_type", "standard2_3ds").putBoolean("expired", false).putString("card_bank", value.bank.toString()).put("aliases", ArrayJSONItem().addString(value.identifier)).putString("system", value.system).putString("card_country", "ROU").putString("payment_system", value.system).putString("card_level", "").putString("holder", "Card Holder").put("binding_systems", ArrayJSONItem().addString("trust")).putString("id", value.identifier).putString("card_id", value.identifier).putBoolean("verify_cvv", value.verifyCvv).putInt32("last_paid", 1).putInt32("last_service_paid", 1).putString("account", value.account)
    if value.familyInfo != nil {
      let familyInfo = value.familyInfo!
      let payerInfoJson = MapJSONItem().putString("uid", familyInfo.familyAdminUid).put("family_info", MapJSONItem().putString("family_id", familyInfo.familyId).putInt32("expenses", familyInfo.expenses).putInt32("limit", familyInfo.limit).putString("currency", familyInfo.currency).putString("frame", familyInfo.frame).putBoolean("unlimited", familyInfo.isUnlimited))
      method.put("payer_info", payerInfoJson)
    }
    res.add(method)
  })
  return res
}

@discardableResult
fileprivate func makePaymentMethods(_ data: RawPaymentMethodsResponse) -> MapJSONItem {
  let enabledPaymentMethods = ArrayJSONItem()
  for method in data.enabledPaymentMethods {
    if method.paymentMethod == "card" {
      enabledPaymentMethods.add(MapJSONItem().putString("payment_method", "card").put("payment_systems", ArrayJSONItem().addString("MIR").addString("Maestro").addString("MasterCard").addString("VISA").addString("VISA_ELECTRON")).putString("currency", "RUB").putInt32("firm_id", 1))
    } else {
      enabledPaymentMethods.add(MapJSONItem().putString("payment_method", method.paymentMethod).putString("currency", "RUB").putInt32("firm_id", 1))
    }
  }
  return MapJSONItem().putString("status", data.status).putBoolean("google_pay_supported", data.googlePaySupported).putBoolean("apple_pay_supported", data.applePaySupported).put("payment_methods", makeMethodsArray(data.paymentMethods)).put("enabled_payment_methods", enabledPaymentMethods)
}

@discardableResult
public func makePaymentMethodsHttpResponse(_ data: RawPaymentMethodsResponse, _ jsonSerializer: JSONSerializer) -> HttpResponse {
  return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(makePaymentMethods(data)).getValue()).build()
}

@discardableResult
fileprivate func makeMerchantInfo(_ data: InitPaymentResponse) -> MapJSONItem {
  let isMerchantInfoExists = data.merchantInfo != nil
  let result = MapJSONItem().putString("name", isMerchantInfoExists ? data.merchantInfo!.name : "").putString("schedule_text", isMerchantInfoExists ? data.merchantInfo!.scheduleText : "").putString("ogrn", isMerchantInfoExists ? data.merchantInfo!.ogrn : "")
  let isMerchantAddressExists = isMerchantInfoExists && data.merchantInfo!.merchantAddress != nil
  return result.put("legal_address", MapJSONItem().putString("city", isMerchantAddressExists ? data.merchantInfo!.merchantAddress!.city : "").putString("country", isMerchantAddressExists ? data.merchantInfo!.merchantAddress!.country : "").putString("home", isMerchantAddressExists ? data.merchantInfo!.merchantAddress!.home : "").putString("street", isMerchantAddressExists ? data.merchantInfo!.merchantAddress!.street : "").putString("zip", isMerchantAddressExists ? data.merchantInfo!.merchantAddress!.zip : ""))
}

@discardableResult
public func makeInitPaymentHttpResponse(_ data: InitPaymentResponse, _ jsonSerializer: JSONSerializer) -> HttpResponse {
  let isYaOplata = data.acquirer != nil
  return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(makePaymentMethods(data).putStringIfPresent("acquirer", undefinedToNull(data.acquirer?.toString())).putString("token", data.token).putString("license_url", isYaOplata ? "https://yandex.ru/legal/payer_termsofuse" : "").putString("total", data.total).putString("currency", data.currency).putString("environment", data.environment).putNull("google_pay").put("paymethod_markup", MapJSONItem()).putString("payment_url", "https://trust-test.yandex.ru/web/payment?purchase_token=\(data.token)").putStringIfPresent("credit_form_url", data.creditFormUrl).put("merchant", makeMerchantInfo(data))).getValue()).build()
}

@discardableResult
public func makeVerifyBindingHttpResponse(_ data: VerifyBindingResponse, _ jsonSerializer: JSONSerializer) -> HttpResponse {
  return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "success").putString("purchase_token", data.purchaseToken)).getValue()).build()
}

@discardableResult
public func makeMobPaymentHttpError(_ status: String, _ message: String, _ jsonSerializer: JSONSerializer) -> HttpResponse {
  return HttpResponseBuilder().setCode(500).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", status).putString("message", message).putInt32("code", 1010).putString("req_id", "111-222")).getValue()).build()
}

