// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/network/mock-mobpayment-responses.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

private fun makeMethodsArray(data: YSArray<PaymentMethod>): ArrayJSONItem {
    val res = ArrayJSONItem()
    data.forEach(__LBL__MockMobpaymentResponses_1@ {
        value ->
        val method = MapJSONItem().putInt32("region_id", 225).putString("payment_method", "card").putString("binding_ts", "1111111111.111").putString("recommended_verification_type", "standard2_3ds").putBoolean("expired", false).putString("card_bank", value.bank.toString()).put("aliases", ArrayJSONItem().addString(value.identifier)).putString("system", value.system).putString("card_country", "ROU").putString("payment_system", value.system).putString("card_level", "").putString("holder", "Card Holder").put("binding_systems", ArrayJSONItem().addString("trust")).putString("id", value.identifier).putString("card_id", value.identifier).putBoolean("verify_cvv", value.verifyCvv).putInt32("last_paid", 1).putInt32("last_service_paid", 1).putString("account", value.account)
        if (value.familyInfo != null) {
            val familyInfo = value.familyInfo!!
            val payerInfoJson = MapJSONItem().putString("uid", familyInfo.familyAdminUid).put("family_info", MapJSONItem().putString("family_id", familyInfo.familyId).putInt32("expenses", familyInfo.expenses).putInt32("limit", familyInfo.limit).putString("currency", familyInfo.currency).putString("frame", familyInfo.frame).putBoolean("unlimited", familyInfo.isUnlimited))
            method.put("payer_info", payerInfoJson)
        }
        res.add(method)
    })
    return res
}

private fun makePaymentMethods(data: RawPaymentMethodsResponse): MapJSONItem {
    val enabledPaymentMethods = ArrayJSONItem()
    for (method in data.enabledPaymentMethods) {
        if (method.paymentMethod == "card") {
            enabledPaymentMethods.add(MapJSONItem().putString("payment_method", "card").put("payment_systems", ArrayJSONItem().addString("MIR").addString("Maestro").addString("MasterCard").addString("VISA").addString("VISA_ELECTRON")).putString("currency", "RUB").putInt32("firm_id", 1))
        } else {
            enabledPaymentMethods.add(MapJSONItem().putString("payment_method", method.paymentMethod).putString("currency", "RUB").putInt32("firm_id", 1))
        }
    }
    return MapJSONItem().putString("status", data.status).putBoolean("google_pay_supported", data.googlePaySupported).putBoolean("apple_pay_supported", data.applePaySupported).put("payment_methods", makeMethodsArray(data.paymentMethods)).put("enabled_payment_methods", enabledPaymentMethods)
}

public fun makePaymentMethodsHttpResponse(data: RawPaymentMethodsResponse, jsonSerializer: JSONSerializer): HttpResponse {
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(makePaymentMethods(data)).getValue()).build()
}

private fun makeMerchantInfo(data: InitPaymentResponse): MapJSONItem {
    val isMerchantInfoExists = data.merchantInfo != null
    val result = MapJSONItem().putString("name", if (isMerchantInfoExists) data.merchantInfo!!.name else "").putString("schedule_text", if (isMerchantInfoExists) data.merchantInfo!!.scheduleText else "").putString("ogrn", if (isMerchantInfoExists) data.merchantInfo!!.ogrn else "")
    val isMerchantAddressExists = isMerchantInfoExists && data.merchantInfo!!.merchantAddress != null
    return result.put("legal_address", MapJSONItem().putString("city", if (isMerchantAddressExists) data.merchantInfo!!.merchantAddress!!.city else "").putString("country", if (isMerchantAddressExists) data.merchantInfo!!.merchantAddress!!.country else "").putString("home", if (isMerchantAddressExists) data.merchantInfo!!.merchantAddress!!.home else "").putString("street", if (isMerchantAddressExists) data.merchantInfo!!.merchantAddress!!.street else "").putString("zip", if (isMerchantAddressExists) data.merchantInfo!!.merchantAddress!!.zip else ""))
}

public fun makeInitPaymentHttpResponse(data: InitPaymentResponse, jsonSerializer: JSONSerializer): HttpResponse {
    val isYaOplata = data.acquirer != null
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(makePaymentMethods(data).putStringIfPresent("acquirer", undefinedToNull(data.acquirer?.toString())).putString("token", data.token).putString("license_url", if (isYaOplata) "https://yandex.ru/legal/payer_termsofuse" else "").putString("total", data.total).putString("currency", data.currency).putString("environment", data.environment).putNull("google_pay").put("paymethod_markup", MapJSONItem()).putString("payment_url", "https://trust-test.yandex.ru/web/payment?purchase_token=${data.token}").putStringIfPresent("credit_form_url", data.creditFormUrl).put("merchant", makeMerchantInfo(data))).getValue()).build()
}

public fun makeVerifyBindingHttpResponse(data: VerifyBindingResponse, jsonSerializer: JSONSerializer): HttpResponse {
    return HttpResponseBuilder().setCode(200).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", "success").putString("purchase_token", data.purchaseToken)).getValue()).build()
}

public fun makeMobPaymentHttpError(status: String, message: String, jsonSerializer: JSONSerializer): HttpResponse {
    return HttpResponseBuilder().setCode(500).setBodyText(jsonSerializer.serialize(MapJSONItem().putString("status", status).putString("message", message).putInt32("code", 1010).putString("req_id", "111-222")).getValue()).build()
}

