// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/trust-request-handler.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class TrustRequestHandler(private val trustModel: MockTrustModel, private val jsonSerializer: JSONSerializer): HttpRequestHandler {
    open override fun handleRequest(request: HttpRequest): HttpResponse {
        if (request.url == "/trust/trust-payments/v2/orders") {
            val orderId = this.trustModel.createOrder(getRequestHeader(request.headers, "X-Service-Token"))
            return TrustPaymentsOrdersResponse(orderId).toHttpResponse(this.jsonSerializer)
        } else if (request.url == "/trust/trust-payments/v2/payments") {
            val body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
            val req = extractMockRequest(body.getValue(), this.jsonSerializer,  {
                item ->
                TrustPaymentsPaymentsRequest.decodeJson(item)
            })
            if (req.isError()) {
                return makeErrorHttpResponse("Wrong format", this.jsonSerializer)
            }
            val data = req.getValue()
            val result = this.trustModel.setupOrder(data.serviceOrderId, data.price, data.forced3ds)
            if (result.isError()) {
                return makeErrorHttpResponse(result.getError().message, this.jsonSerializer)
            }
            return TrustPaymentsPaymentsResponse(result.getValue()).toHttpResponse(this.jsonSerializer)
        } else if (request.url.search(StartPurchaseRequest.PATH_MATCH_REGEX) != -1) {
            val purchaseId = request.url.match(StartPurchaseRequest.PATH_MATCH_REGEX)!![1]
            if (!this.trustModel.checkHasPurchase(purchaseId)) {
                return makeErrorHttpResponse("Wrong format", this.jsonSerializer)
            }
            return makeSuccessHttpResponse(this.jsonSerializer)
        } else if (request.url.startsWith("/trust/mock-trust-bank")) {
            val name = Uris.fromString(request.url)?.getQueryParameter("bank") ?: null
            if (name == null) {
                return makeErrorHttpResponse("Wrong format", this.jsonSerializer)
            }
            val result = this.trustModel.setStartMockBank(name!!)
            if (result.isError()) {
                return makeErrorHttpResponse("Wrong format", this.jsonSerializer)
            }
            return makeSuccessHttpResponse(this.jsonSerializer)
        } else if (request.url.startsWith("/trust/mock-family-info-mode")) {
            val modeParam = Uris.fromString(request.url)?.getQueryParameter("mode") ?: null
            if (modeParam == null) {
                return makeErrorHttpResponse("Wrong format", this.jsonSerializer)
            }
            val mode = stringToFamilyInfoMode(modeParam!!)
            if (mode == null) {
                return makeErrorHttpResponse("Wrong format", this.jsonSerializer)
            }
            this.trustModel.setFamilyInfoMode(mode!!)
            return makeSuccessHttpResponse(this.jsonSerializer)
        }
        return makeErrorHttpResponse("Unstubbed", this.jsonSerializer)
    }

}

