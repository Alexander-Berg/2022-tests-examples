// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/diehard-request-handler.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class DiehardRequestHandler(private val trustModel: MockTrustModel, private val jsonSerializer: JSONSerializer): HttpRequestHandler {
    open override fun handleRequest(request: HttpRequest): HttpResponse {
        val headerAuth = getHttpOAuth(request)
        val service = getRequestHeader(request.headers, "X-Service-Token")
        val body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
        if (body.isError()) {
            return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
        }
        if (request.url == "/diehard/api/bind_card") {
            return this.handleBindCard(headerAuth, service, body.getValue())
        } else if (request.url == "/diehard/api/unbind_card") {
            return this.handleUnbindCard(headerAuth, body.getValue())
        } else if (request.url == "/diehard/api/supply_payment_data") {
            return this.handleSupplyPayment(headerAuth, body.getValue())
        } else if (request.url == "/diehard/api/check_payment") {
            return this.handleCheckPayment(body.getValue())
        } else if (request.url == "/diehard/api/bindings/v2.0/bindings") {
            return this.handleBindingV2(request, body.getValue())
        }
        return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
    }

    private fun handleBindCard(headerAuth: String?, service: String?, body: String): HttpResponse {
        val req = extractMockRequest(body, this.jsonSerializer,  {
            item ->
            decodeBindCardRequest("", item)
        })
        if (req.isError()) {
            return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
        }
        val data = req.getValue()
        if (headerAuth == null && data.token == null) {
            return makeDiehardHttpError("authorization_reject", this.jsonSerializer)
        }
        val oAuth = headerAuth ?: data.token!!
        val result = this.trustModel.bindCard(oAuth, data.cardNumber, data.expirationMonth, data.expirationYear, data.cvn, service)
        if (result.isError()) {
            return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
        }
        return makeBindCardHttpResponse(BindNewCardResponse("success", null, "card bound ok", result.getValue()), this.jsonSerializer)
    }

    private fun handleUnbindCard(headerAuth: String?, body: String): HttpResponse {
        val req = extractMockRequest(body, this.jsonSerializer,  {
            item ->
            decodeUnbindCardRequest(item)
        })
        if (req.isError()) {
            return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
        }
        val data = req.getValue()
        if (headerAuth == null && data.token == null) {
            return makeDiehardHttpError("authorization_reject", this.jsonSerializer)
        }
        val oAuth = headerAuth ?: data.token!!
        val result = this.trustModel.unBindCard(oAuth, data.cardID)
        if (result.isError()) {
            return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
        }
        return makeUnbindCardHttpResponse(UnbindCardResponse("success", null, "card unbound ok"), this.jsonSerializer)
    }

    private fun handleSupplyPayment(headerAuth: String?, body: String): HttpResponse {
        val req = extractMockRequest(body, this.jsonSerializer,  {
            item ->
            MockSupplyPaymentRequest.decodeJson(item)
        })
        if (req.isError()) {
            return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
        }
        val data = req.getValue()
        val oAuth = headerAuth ?: data.token
        if (data.paymentMethod == "new_card") {
            if (data.cardNumber == null || data.expirationMonth == null || data.expirationYear == null || data.cvn == null) {
                return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
            }
            val result = this.trustModel.supplyPaymentByNewCard(oAuth, data.purchaseToken, data.cardNumber!!, data.expirationMonth!!, data.expirationYear!!, data.cvn!!, data.bindCard == 1)
            if (result.isError()) {
                return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
            }
        } else if (data.paymentMethod == "sbp_qr") {
            val result = this.trustModel.supplyPaymentBySbp(oAuth, data.purchaseToken)
            if (result.isError()) {
                return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
            }
        } else {
            val result = this.trustModel.supplyPaymentByStoredCard(oAuth, data.purchaseToken, data.paymentMethod, data.cvn)
            if (result.isError()) {
                return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
            }
        }
        return makeSupplyPaymentHttpResponse(SupplyPaymentResponse("success", null, null), this.jsonSerializer)
    }

    private fun handleCheckPayment(body: String): HttpResponse {
        val req = extractMockRequest(body, this.jsonSerializer,  {
            item ->
            decodeCheckPaymentRequest(item)
        })
        if (req.isError()) {
            return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
        }
        val data = req.getValue()
        val result = this.trustModel.checkPayment(data.purchaseToken)
        if (result.isError()) {
            return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
        }
        val checkData = result.getValue()
        return makeCheckPaymentHttpResponse(CheckPaymentResponse(checkData.status, null, checkData.statusDesc, checkData.redirect3ds, checkData.sbpPaymentForm, null), checkData.purchaseToken, checkData.amount, checkData.isBinding, checkData.timestamp, this.jsonSerializer)
    }

    private fun handleBindingV2(request: HttpRequest, body: String): HttpResponse {
        val oAuth = getRequestHeader(request.headers, "X-Oauth-Token")
        if (oAuth == null) {
            return makeDiehardHttpError("authorization_reject", this.jsonSerializer)
        }
        val req = extractMockRequest(body, this.jsonSerializer,  {
            item ->
            decodeNewCardBindReuest(oAuth!!, item)
        })
        if (req.isError()) {
            return makeDiehardHttpError("invalid_processing_request", this.jsonSerializer)
        }
        val data = req.getValue()
        val result = this.trustModel.startV2Binding(oAuth!!, data.cardDataEncrypted, data.hashAlgorithm, data.serviceToken)
        if (result.isError()) {
            return makeDiehardHttpError(result.getError().message, this.jsonSerializer)
        }
        return makeBindingV2Response(NewCardBindingResponse(result.getValue()), this.jsonSerializer)
    }

}

