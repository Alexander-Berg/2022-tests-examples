// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/mobpayment-request-handler.ts >>>

import Foundation

open class MobpaymentRequestHandler: HttpRequestHandler {
  private let trustModel: MockTrustModel
  private let jsonSerializer: JSONSerializer
  public init(_ trustModel: MockTrustModel, _ jsonSerializer: JSONSerializer) {
    self.trustModel = trustModel
    self.jsonSerializer = jsonSerializer
  }

  @discardableResult
  open func handleRequest(_ request: HttpRequest) -> HttpResponse {
    let oAuth: String! = getHttpOAuth(request)
    let checkCvn = getRequestHeader(request.headers, "X-SDK-Force-CVV") == "1"
    if request.url == "/mobpayment/v1/payment_methods" {
      let result = self.trustModel.paymentMethods(oAuth, checkCvn)
      return makePaymentMethodsHttpResponse(RawPaymentMethodsResponse("success", false, false, result.methods, result.enabledMethods), self.jsonSerializer)
    } else if request.url == "/mobpayment/v1/init_payment" {
      let body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
      if body.isError() {
        return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", self.jsonSerializer)
      }
      let req = extractMockRequest(body.getValue(), self.jsonSerializer, {
        (item) in
        decodeInitPaymentRequest(item)
      })
      if req.isError() {
        return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", self.jsonSerializer)
      }
      let data = req.getValue()
      let service: String! = getRequestHeader(request.headers, "X-Service-Token")
      let result = self.trustModel.initPayment(oAuth, data.email, data.token, service, checkCvn)
      if result.isError() {
        let initError = result.getError() as! MobPaymentError
        return makeMobPaymentHttpError(initError.status, initError.message, self.jsonSerializer)
      }
      let initData = result.getValue()
      return makeInitPaymentHttpResponse(InitPaymentResponse("success", initData.purchaseToken, nil, initData.acquirer, "production", initData.amount, "RUB", initData.merchantInfo, nil, nil, false, false, initData.methods.methods, initData.methods.enabledMethods), self.jsonSerializer)
    } else if request.url == "/mobpayment/v1/verify_binding" {
      let service: String! = getRequestHeader(request.headers, "X-Service-Token")
      if oAuth == nil || service == nil {
        return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", self.jsonSerializer)
      }
      let body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
      if body.isError() {
        return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", self.jsonSerializer)
      }
      let req = extractMockRequest(body.getValue(), self.jsonSerializer, {
        (item) in
        decodeVerifyBindingRequest(item)
      })
      if req.isError() {
        return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", self.jsonSerializer)
      }
      let data = req.getValue()
      let result = self.trustModel.verifyBinding(oAuth!, data.bindingId, service!)
      if result.isError() {
        let initError = result.getError() as! MobPaymentError
        return makeMobPaymentHttpError(initError.status, initError.message, self.jsonSerializer)
      }
      let verifyData = result.getValue()
      return makeVerifyBindingHttpResponse(VerifyBindingResponse(verifyData), self.jsonSerializer)
    }
    return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", self.jsonSerializer)
  }

}

