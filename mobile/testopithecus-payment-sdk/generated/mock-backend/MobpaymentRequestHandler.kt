// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/mobpayment-request-handler.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class MobpaymentRequestHandler(private val trustModel: MockTrustModel, private val jsonSerializer: JSONSerializer): HttpRequestHandler {
    open override fun handleRequest(request: HttpRequest): HttpResponse {
        val oAuth = getHttpOAuth(request)
        val checkCvn = getRequestHeader(request.headers, "X-SDK-Force-CVV") == "1"
        if (request.url == "/mobpayment/v1/payment_methods") {
            val result = this.trustModel.paymentMethods(oAuth, checkCvn)
            return makePaymentMethodsHttpResponse(RawPaymentMethodsResponse("success", false, false, result.methods, result.enabledMethods), this.jsonSerializer)
        } else if (request.url == "/mobpayment/v1/init_payment") {
            val body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
            if (body.isError()) {
                return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", this.jsonSerializer)
            }
            val req = extractMockRequest(body.getValue(), this.jsonSerializer,  {
                item ->
                decodeInitPaymentRequest(item)
            })
            if (req.isError()) {
                return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", this.jsonSerializer)
            }
            val data = req.getValue()
            val service = getRequestHeader(request.headers, "X-Service-Token")
            val result = this.trustModel.initPayment(oAuth, data.email, data.token, service, checkCvn)
            if (result.isError()) {
                val initError = result.getError() as MobPaymentError
                return makeMobPaymentHttpError(initError.status, initError.message, this.jsonSerializer)
            }
            val initData = result.getValue()
            return makeInitPaymentHttpResponse(InitPaymentResponse("success", initData.purchaseToken, null, initData.acquirer, "production", initData.amount, "RUB", initData.merchantInfo, null, null, false, false, initData.methods.methods, initData.methods.enabledMethods), this.jsonSerializer)
        } else if (request.url == "/mobpayment/v1/verify_binding") {
            val service = getRequestHeader(request.headers, "X-Service-Token")
            if (oAuth == null || service == null) {
                return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", this.jsonSerializer)
            }
            val body = ArrayBufferHelpers.arrayBufferToString(request.body, Encoding.Utf8)
            if (body.isError()) {
                return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", this.jsonSerializer)
            }
            val req = extractMockRequest(body.getValue(), this.jsonSerializer,  {
                item ->
                decodeVerifyBindingRequest(item)
            })
            if (req.isError()) {
                return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", this.jsonSerializer)
            }
            val data = req.getValue()
            val result = this.trustModel.verifyBinding(oAuth!!, data.bindingId, service!!)
            if (result.isError()) {
                val initError = result.getError() as MobPaymentError
                return makeMobPaymentHttpError(initError.status, initError.message, this.jsonSerializer)
            }
            val verifyData = result.getValue()
            return makeVerifyBindingHttpResponse(VerifyBindingResponse(verifyData), this.jsonSerializer)
        }
        return makeMobPaymentHttpError("incorrect format", "body seems to be malformed", this.jsonSerializer)
    }

}

