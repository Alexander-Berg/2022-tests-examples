// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/binding-card-extractor.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public interface CardDataDecryptor {
    fun decrypt(data: String, hashAlgo: String): Result<String>
}

public open class BindingCardExtractor(private val cardDataDecryptor: CardDataDecryptor, private val jsonSerializer: JSONSerializer) {
    open fun createCardFromData(id: String, encryptedData: String, hashAlgo: String): Result<MockCard> {
        val decrypted = this.cardDataDecryptor.decrypt(encryptedData, hashAlgo)
        if (decrypted.isError()) {
            return resultError(YSError("cannot decrypt"))
        }
        val card = extractMockRequest(decrypted.getValue(), this.jsonSerializer,  {
            item ->
            BindingCardExtractor.createCardFromJson(id, item)
        })
        return card.flatMap( {
            value ->
            resultValue(card.getValue())
        })
    }

    companion object {
        @JvmStatic
        private fun createCardFromJson(id: String, item: JSONItem): Result<MockCard> {
            return decodeJSONItem(item, __LBL__BindingCardExtractor_1@ {
                json ->
                val map = json.tryCastAsMapJSONItem()
                return@__LBL__BindingCardExtractor_1 MockCard(map.tryGetString("card_number"), map.tryGetString("expiration_month"), map.tryGetString("expiration_year"), map.tryGetString("cvn"), id)
            })
        }

    }
}

