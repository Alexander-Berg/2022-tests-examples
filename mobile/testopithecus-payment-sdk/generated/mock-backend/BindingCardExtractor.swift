// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mock-backend/binding-card-extractor.ts >>>

import Foundation

public protocol CardDataDecryptor {
  @discardableResult
  func decrypt(_ data: String, _ hashAlgo: String) -> Result<String>
}

open class BindingCardExtractor {
  private let cardDataDecryptor: CardDataDecryptor
  private let jsonSerializer: JSONSerializer
  public init(_ cardDataDecryptor: CardDataDecryptor, _ jsonSerializer: JSONSerializer) {
    self.cardDataDecryptor = cardDataDecryptor
    self.jsonSerializer = jsonSerializer
  }

  @discardableResult
  open func createCardFromData(_ id: String, _ encryptedData: String, _ hashAlgo: String) -> Result<MockCard> {
    let decrypted = self.cardDataDecryptor.decrypt(encryptedData, hashAlgo)
    if decrypted.isError() {
      return resultError(YSError("cannot decrypt"))
    }
    let card = extractMockRequest(decrypted.getValue(), self.jsonSerializer, {
      (item) in
      BindingCardExtractor.createCardFromJson(id, item)
    })
    return card.flatMap({
      (value) in
      resultValue(card.getValue())
    })
  }

  @discardableResult
  private class func createCardFromJson(_ id: String, _ item: JSONItem) -> Result<MockCard> {
    return decodeJSONItem(item, {
      (json) in
      let map = (try json.tryCastAsMapJSONItem())
      return MockCard((try map.tryGetString("card_number")), (try map.tryGetString("expiration_month")), (try map.tryGetString("expiration_year")), (try map.tryGetString("cvn")), id)
    })
  }

}

