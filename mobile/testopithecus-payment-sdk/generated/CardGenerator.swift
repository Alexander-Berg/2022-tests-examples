// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM card-generator.ts >>>

import Foundation

open class BoundCard {
  public let cardNumber: String
  public let expirationMonth: String
  public let expirationYear: String
  public let cvv: String
  public init(_ cardNumber: String, _ expirationMonth: String, _ expirationYear: String, _ cvv: String) {
    self.cardNumber = cardNumber
    self.expirationMonth = expirationMonth
    self.expirationYear = expirationYear
    self.cvv = cvv
  }

  @discardableResult
  open class func generated(_ type: CardPaymentSystem = CardPaymentSystem.MasterCard) -> BoundCard {
    return BoundCard(CardGenerator.generateCardNumber(type), BoundCardConstants.EXPIRATION_MONTH, CardGenerator.generateExpirationYear(), BoundCardConstants.CVV)
  }

}

open class BoundCardConstants {
  public static let EXPIRATION_MONTH: String = "11"
  public static let CVV: String = "123"
}

open class CardGenerator {
  @discardableResult
  open class func generateCardNumber(_ type: CardPaymentSystem) -> String {
    var pos: Int32 = 6
    let cardArr: YSArray<Int32> = YSArray(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    switch type {
      case CardPaymentSystem.MasterCard:
        cardArr[0] = 5
        cardArr[1] = 1
      case CardPaymentSystem.AmericanExpress:
        cardArr[0] = 3
        cardArr[1] = 4
      case CardPaymentSystem.Maestro:
        cardArr[0] = 5
        cardArr[1] = 0
      case CardPaymentSystem.MIR:
        cardArr[0] = 2
        cardArr[1] = 2
      case CardPaymentSystem.VISA:
        cardArr[0] = 4
        cardArr[1] = 2
      default:
        break
    }
    var sum: Int32 = 0
    var final_digit: Int32 = 0
    var t = doubleToInt32(floorDouble(randomDouble() * 5)) % 5
    var len_offset: Int32 = 0
    let len: Int32 = 16
    while pos < len - 1 {
      cardArr[pos] = doubleToInt32(floorDouble(randomDouble() * 10)) % 10
      pos = pos + 1
    }
    len_offset = (len + 1) % 2
    for index in stride(from: 0, to: len - 1, by: 1) {
      if (index + len_offset) % 2 > 0 {
        t = cardArr[index] * 2
        if t > 9 {
          t = t - 9
        }
        sum = sum + t
      } else {
        sum = sum + cardArr[index]
      }
    }
    final_digit = (10 - (sum % 10)) % 10
    cardArr[len - 1] = final_digit
    var cardStr = ""
    for index in stride(from: 0, to: cardArr.length, by: 1) {
      cardStr = cardStr + "\(cardArr[index])"
    }
    return cardStr
  }

  @discardableResult
  open class func generateExpirationYear() -> String {
    let currentYear = YSDate().getFullYear() % 100
    return "\(currentYear + 1)"
  }

  @discardableResult
  open class func generateExpirationDate(_ type: ExpirationDateType) -> String {
    let currentYear = YSDate().getFullYear() % 100
    let currentMonth = YSDate().getMonth() + 1
    let formattedCurrentMonth = self.formatExpirationMonth(currentMonth)
    switch type {
      case ExpirationDateType.currentMonthAndYear:
        return "\(formattedCurrentMonth)\(currentYear)"
      case ExpirationDateType.date50YearsInFuture:
        return "\(formattedCurrentMonth)\(currentYear + 50)"
      case ExpirationDateType.dateMore50YearsInFuture:
        return "\(formattedCurrentMonth)\(currentYear + 51)"
      case ExpirationDateType.nextMonth:
        return currentMonth == 12 ? "01\(currentYear + 1)" : "\(self.formatExpirationMonth(currentMonth + 1))\(currentYear)"
      case ExpirationDateType.previousMonth:
        return currentMonth == 1 ? "12\(currentYear - 1)" : "\(self.formatExpirationMonth(currentMonth - 1))\(currentYear)"
      case ExpirationDateType.previousYear:
        return "\(formattedCurrentMonth)\(currentYear - 1)"
      case ExpirationDateType.nonExistentMonth:
        return "13\(currentYear)"
      case ExpirationDateType.tooManySymbols:
        return "\(formattedCurrentMonth)\(currentYear)1"
    }
  }

  @discardableResult
  private class func formatExpirationMonth(_ month: Int32) -> String {
    return "\(month)".length == 1 ? "0\(month)" : "\(month)"
  }

}

public enum ExpirationDateType {
  case currentMonthAndYear
  case nextMonth
  case previousMonth
  case previousYear
  case date50YearsInFuture
  case dateMore50YearsInFuture
  case nonExistentMonth
  case tooManySymbols
}
open class SpecificCards {
  public static let masterCard: BoundCard = BoundCard("5100008498698746", "12", "50", "123")
  public static let mir: BoundCard = BoundCard("2200003680082987", "12", "50", "123")
  public static let visa: BoundCard = BoundCard("4200006115699289", "12", "50", "123")
}

