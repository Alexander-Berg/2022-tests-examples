// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/sample-app-actions.ts >>>

import Foundation

open class OpenSampleAppAction: MBTAction {
  public static let type: MBTActionType = "OpenSampleAppAction"
  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let readPaymentDetails = ReadPaymentDetailsFeature.`get`.forceCast(model)
    let account = readPaymentDetails.getAccount()
    let merchantId = (try readPaymentDetails.getMerchantId())
    let paymentId = (try readPaymentDetails.getPaymentId())
    let forceCvv = readPaymentDetails.getForceCvv()
    let filter = readPaymentDetails.getPaymentMethodsFilter()
    let isDarkModeEnabled = readPaymentDetails.isDarkModeEnabled()
    let personalInfoShowingMode = readPaymentDetails.getPersonalInfoShowingMode()
    let authorizationMode = readPaymentDetails.getAuthorizationMode()
    let bindingV2Enabled = readPaymentDetails.isBindingV2Enabled()
    let cashEnabled = readPaymentDetails.isCashEnabled()
    let additionalSettings = PaymentAdditionalSettings(forceCvv, filter, isDarkModeEnabled, personalInfoShowingMode, authorizationMode, bindingV2Enabled, cashEnabled)
    let modelStartPaymentProcess = SampleAppFeature.`get`.forceCast(model)
    let appStartPaymentProcess = SampleAppFeature.`get`.forceCast(application)
    (try modelStartPaymentProcess.startSampleApp(account, merchantId, paymentId, additionalSettings))
    (try appStartPaymentProcess.startSampleApp(account, merchantId, paymentId, additionalSettings))
    return SampleAppComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (ReadPaymentDetailsFeature.`get`.included(modelFeatures) && SampleAppFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenSampleAppAction.type
  }

}

open class StartCardBindingProcessAction: BaseSimpleAction<SampleApp, SampleAppComponent> {
  public static let type: MBTActionType = "StartCardBindingProcessAction"
  public init() {
    super.init(StartCardBindingProcessAction.type)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: SampleApp, _ currentComponent: SampleAppComponent) throws -> MBTComponent {
    (try modelOrApplication.bindCard())
    return PaymentMethodNewCardComponent()
  }

  @discardableResult
  open override func requiredFeature() -> Feature<SampleApp> {
    return SampleAppFeature.`get`
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class StartRegularPaymentProcessAction: MBTAction {
  public static let type: MBTActionType = "StartRegularPaymentProcessAction"
  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let modelStartPaymentProcess = SampleAppFeature.`get`.forceCast(model)
    let appStartPaymentProcess = SampleAppFeature.`get`.forceCast(application)
    (try modelStartPaymentProcess.startRegularPayment())
    (try appStartPaymentProcess.startRegularPayment())
    let isSomePaymentMethodsAvailable = PaymentMethodsListFeature.`get`.forceCast(model).getMethods().length > 0
    return isSomePaymentMethodsAvailable ? PaymentMethodSelectionComponent() : PaymentMethodNewCardComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SampleAppFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return StartRegularPaymentProcessAction.type
  }

}

open class StartPreselectPaymentProcessAction: MBTAction {
  public static let type: MBTActionType = "StartPreselectPaymentProcessAction"
  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let modelStartPaymentProcess = SampleAppFeature.`get`.forceCast(model)
    let appStartPaymentProcess = SampleAppFeature.`get`.forceCast(application)
    (try modelStartPaymentProcess.startPreselectPayment())
    (try appStartPaymentProcess.startPreselectPayment())
    let isSomePaymentMethodsAvailable = PaymentMethodsListFeature.`get`.forceCast(model).getMethods().length > 0
    return isSomePaymentMethodsAvailable ? PaymentMethodSelectionComponent() : PaymentMethodNewCardComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SampleAppFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return StartPreselectPaymentProcessAction.type
  }

}

