// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/payment-button-actions.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PressPaymentButtonAction: MBTAction {
    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        val modelPaymentButton = PaymentButtonFeature.`get`.forceCast(model)
        val appPaymentButton = PaymentButtonFeature.`get`.forceCast(application)
        val modelReadPaymentDetails = ReadPaymentDetailsFeature.`get`.forceCast(model)
        val isPreselectModeEnabled = PaymentMethodsListFeature.`get`.forceCast(model).getMethodsListMode() == MethodsListMode.preselect
        val selectedMethod = PaymentMethodsListFeature.`get`.forceCast(model).getSelected()
        val shouldShowSbp = selectedMethod != -1 && PaymentMethodsListFeature.`get`.forceCast(model).getMethods()[selectedMethod] == PaymentMethodName.sbp
        modelPaymentButton.pressButton()
        appPaymentButton.pressButton()
        if (history.currentComponent.tostring() == "PaymentMethodNewCardComponent" && isPreselectModeEnabled) {
            return PaymentMethodSelectedComponent()
        }
        if (history.currentComponent.tostring() == "SbpBanksListComponent" || history.currentComponent.tostring() == "SbpExtendedBanksListComponent") {
            return SbpSampleBankComponent()
        }
        if (shouldShowSbp) {
            return SbpBanksListComponent()
        }
        return if (modelReadPaymentDetails.getExpected3ds() != null) Page3dsComponent() else PaymentResultComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return PaymentButtonFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return PaymentButtonFeature.`get`.forceCast(model).isEnabled()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return this.getActionType()
    }

    open override fun getActionType(): MBTActionType {
        return PressPaymentButtonAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "PressPaymentButtonAction"
    }
}

public open class SetPaymentButtonStatusAction(private val enabled: Boolean = true): BaseSimpleAction<PaymentButton, MBTComponent>("SetPaymentButtonStatusAction") {
    open override fun performImpl(paymentButton: PaymentButton, currentComponent: MBTComponent): MBTComponent {
        paymentButton.setEnabledInModel(this.enabled)
        return currentComponent
    }

    open override fun requiredFeature(): Feature<PaymentButton> {
        return PaymentButtonFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

}

