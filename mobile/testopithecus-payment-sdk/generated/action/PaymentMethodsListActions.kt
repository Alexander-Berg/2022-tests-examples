// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/payment-methods-list-actions.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class SelectPaymentMethodAction(private var methodIndex: Int): BaseSimpleAction<PaymentMethodsList, PaymentMethodSelectionComponent>("SelectPaymentMethod") {
    open override fun performImpl(modelOrApplication: PaymentMethodsList, currentComponent: PaymentMethodSelectionComponent): MBTComponent {
        modelOrApplication.selectMethod(this.methodIndex)
        return PaymentMethodSelectedComponent()
    }

    open override fun canBePerformed(model: App): Boolean {
        val methodCanBeSelected = PaymentMethodsListFeature.`get`.forceCast(model).getMethods().size > this.methodIndex
        return super.canBePerformed(model) && methodCanBeSelected
    }

    open override fun requiredFeature(): Feature<PaymentMethodsList> {
        return PaymentMethodsListFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

}

public open class ClickNewCardPaymentMethodAction(): BaseSimpleAction<PaymentMethodsList, MBTComponent>(ClickNewCardPaymentMethodAction.type) {
    open override fun requiredFeature(): Feature<PaymentMethodsList> {
        return PaymentMethodsListFeature.`get`
    }

    open override fun performImpl(modelOrApplication: PaymentMethodsList, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.clickNewCard()
        return PaymentMethodNewCardComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ClickNewCardPaymentMethodAction"
    }
}

public open class SelectSbpMethodAction(): BaseSimpleAction<PaymentMethodsList, PaymentMethodSelectionComponent>("SelectSbpMethod") {
    open override fun performImpl(modelOrApplication: PaymentMethodsList, currentComponent: PaymentMethodSelectionComponent): MBTComponent {
        modelOrApplication.selectSbpMethod()
        return PaymentMethodSelectedComponent()
    }

    open override fun canBePerformed(model: App): Boolean {
        val methodCanBeSelected = PaymentMethodsListFeature.`get`.forceCast(model).getMethods().contains(PaymentMethodName.sbp)
        return super.canBePerformed(model) && methodCanBeSelected
    }

    open override fun requiredFeature(): Feature<PaymentMethodsList> {
        return PaymentMethodsListFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

}

public open class TapOnCashPaymentMethodAction(): BaseSimpleAction<Preselect, MBTComponent>(TapOnCashPaymentMethodAction.type) {
    open override fun requiredFeature(): Feature<Preselect> {
        return PreselectFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Preselect, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.selectCash()
        return PaymentMethodSelectedComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TapOnCashPaymentMethodAction"
    }
}

public open class PreselectTapOnOtherCardAction(): BaseSimpleAction<Preselect, MBTComponent>(PreselectTapOnOtherCardAction.type) {
    open override fun requiredFeature(): Feature<Preselect> {
        return PreselectFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Preselect, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnOtherCard()
        return PaymentMethodNewCardComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "PreselectTapOnOtherCardAction"
    }
}

public open class PreselectTapOnAddCardAction(): BaseSimpleAction<Preselect, MBTComponent>(PreselectTapOnAddCardAction.type) {
    open override fun canBePerformed(model: App): Boolean {
        return PaymentButtonFeature.`get`.forceCast(model).isEnabled()
    }

    open override fun requiredFeature(): Feature<Preselect> {
        return PreselectFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Preselect, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnAddCard()
        return Page3dsComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "PreselectTapOnAddCardAction"
    }
}

public open class PressSelectButtonAction: MBTAction {
    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        val modelPreselect = PreselectFeature.`get`.forceCast(model)
        val appPreselect = PreselectFeature.`get`.forceCast(application)
        val readPaymentDetails = ReadPaymentDetailsFeature.`get`.forceCast(model)
        modelPreselect.tapOnSelectButton()
        appPreselect.tapOnSelectButton()
        if (modelPreselect.isCashSelected()) {
            return SampleAppComponent()
        }
        return if (readPaymentDetails.getForceCvv()) PreselectCvvComponent() else PaymentResultComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return PreselectFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return this.getActionType()
    }

    open override fun getActionType(): MBTActionType {
        return PressSelectButtonAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "PressSelectButtonAction"
    }
}

public open class TapOnCvvFieldOfSelectPaymentMethodAction(): BaseSimpleAction<PaymentMethodsList, MBTComponent>(TapOnCvvFieldOfSelectPaymentMethodAction.type) {
    open override fun performImpl(modelOrApplication: PaymentMethodsList, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnCvvField()
        return currentComponent
    }

    open override fun canBePerformed(model: App): Boolean {
        val isSomeMethodSelected = PaymentMethodsListFeature.`get`.forceCast(model).getSelected() >= 0
        return super.canBePerformed(model) && isSomeMethodSelected
    }

    open override fun requiredFeature(): Feature<PaymentMethodsList> {
        return PaymentMethodsListFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TapOnCvvFieldOfSelectPaymentMethodAction"
    }
}

public open class EnterCvvForSelectPaymentMethodAction(private var cvv: MBTActionType): BaseSimpleAction<PaymentMethodsList, MBTComponent>(EnterCvvForSelectPaymentMethodAction.type) {
    open override fun performImpl(modelOrApplication: PaymentMethodsList, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnCvvField()
        modelOrApplication.setCvvFieldValue(this.cvv)
        return currentComponent
    }

    open override fun canBePerformed(model: App): Boolean {
        val isSomeMethodSelected = PaymentMethodsListFeature.`get`.forceCast(model).getSelected() >= 0
        return super.canBePerformed(model) && isSomeMethodSelected
    }

    open override fun requiredFeature(): Feature<PaymentMethodsList> {
        return PaymentMethodsListFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "EnterCvvForSelectPaymentMethodAction"
    }
}

