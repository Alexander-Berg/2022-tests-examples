// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/payment-button-actions.ts >>>

import Foundation

open class PressPaymentButtonAction: MBTAction {
  public static let type: MBTActionType = "PressPaymentButtonAction"
  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let modelPaymentButton = PaymentButtonFeature.`get`.forceCast(model)
    let appPaymentButton = PaymentButtonFeature.`get`.forceCast(application)
    let modelReadPaymentDetails = ReadPaymentDetailsFeature.`get`.forceCast(model)
    let isPreselectModeEnabled = (try PaymentMethodsListFeature.`get`.forceCast(model).getMethodsListMode()) == MethodsListMode.preselect
    let selectedMethod = (try PaymentMethodsListFeature.`get`.forceCast(model).getSelected())
    let shouldShowSbp = selectedMethod != -1 && PaymentMethodsListFeature.`get`.forceCast(model).getMethods()[selectedMethod] == PaymentMethodName.sbp
    (try modelPaymentButton.pressButton())
    (try appPaymentButton.pressButton())
    if history.currentComponent.tostring() == "PaymentMethodNewCardComponent" && isPreselectModeEnabled {
      return PaymentMethodSelectedComponent()
    }
    if history.currentComponent.tostring() == "SbpBanksListComponent" || history.currentComponent.tostring() == "SbpExtendedBanksListComponent" {
      return SbpSampleBankComponent()
    }
    if shouldShowSbp {
      return SbpBanksListComponent()
    }
    return modelReadPaymentDetails.getExpected3ds() != nil ? Page3dsComponent() : PaymentResultComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PaymentButtonFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try PaymentButtonFeature.`get`.forceCast(model).isEnabled())
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return PressPaymentButtonAction.type
  }

}

open class SetPaymentButtonStatusAction: BaseSimpleAction<PaymentButton, MBTComponent> {
  private let enabled: Bool
  public init(_ enabled: Bool = true) {
    self.enabled = enabled
    super.init("SetPaymentButtonStatusAction")
  }

  @discardableResult
  open override func performImpl(_ paymentButton: PaymentButton, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try paymentButton.setEnabledInModel(self.enabled))
    return currentComponent
  }

  @discardableResult
  open override func requiredFeature() -> Feature<PaymentButton> {
    return PaymentButtonFeature.`get`
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

