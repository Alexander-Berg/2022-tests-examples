// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/new-card-actions.ts >>>

import Foundation

open class FillNewCardDataAction: MBTAction {
  public static let type: MBTActionType = "FillNewCardDataAction"
  private let card: BoundCard
  private let save: Bool
  public init(_ card: BoundCard, _ save: Bool) {
    self.card = card
    self.save = save
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return FillNewCardFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  private func tapAndSetValue(_ model: FillNewCard, _ application: FillNewCard, _ field: NewCardField, _ value: String) throws -> Void {
    (try model.tapOnField(field))
    (try application.tapOnField(field))
    (try model.setFieldValue(field, value))
    (try application.setFieldValue(field, value))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let modelFillNewCard = FillNewCardFeature.`get`.forceCast(model)
    let appFillNewCard = FillNewCardFeature.`get`.forceCast(application)
    let expirationDate = "\(self.card.expirationMonth)\(self.card.expirationYear)"
    (try self.tapAndSetValue(modelFillNewCard, appFillNewCard, NewCardField.cardNumber, self.card.cardNumber))
    (try self.tapAndSetValue(modelFillNewCard, appFillNewCard, NewCardField.expirationDate, expirationDate))
    (try self.tapAndSetValue(modelFillNewCard, appFillNewCard, NewCardField.cvv, self.card.cvv))
    let modelReadPaymentDetails = ReadPaymentDetailsFeature.`get`.forceCast(model)
    if modelReadPaymentDetails.getAuthorizationMode() == AuthorizationMode.authorized && modelFillNewCard.getNewCardMode() == NewCardMode.pay {
      (try modelFillNewCard.setSaveCardCheckboxEnabled(self.save))
      (try appFillNewCard.setSaveCardCheckboxEnabled(self.save))
    }
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "FillNewCardDataAction"
  }

  @discardableResult
  open func getActionType() -> String {
    return FillNewCardDataAction.type
  }

}

open class TapOnNewCardFieldAction: BaseSimpleAction<FillNewCard, MBTComponent> {
  public static let type: MBTActionType = "TapOnNewCardFieldAction"
  private let field: NewCardField
  public init(_ field: NewCardField, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.field = field
    super.init(TapOnNewCardFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<FillNewCard> {
    return FillNewCardFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: FillNewCard, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnField(self.field))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class FillNewCardFieldAction: BaseSimpleAction<FillNewCard, MBTComponent> {
  public static let type: MBTActionType = "FillNewCardFieldAction"
  private let field: NewCardField
  private let value: String
  public init(_ field: NewCardField, _ value: String) {
    self.field = field
    self.value = value
    super.init(FillNewCardFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<FillNewCard> {
    return FillNewCardFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: FillNewCard, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setFieldValue(self.field, self.value))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class TapAndFillNewCardFieldAction: BaseSimpleAction<FillNewCard, MBTComponent> {
  public static let type: MBTActionType = "TapAndFillNewCardFieldAction"
  private let field: NewCardField
  private let value: String
  public init(_ field: NewCardField, _ value: String) {
    self.field = field
    self.value = value
    super.init(TapAndFillNewCardFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<FillNewCard> {
    return FillNewCardFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: FillNewCard, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnField(self.field))
    (try modelOrApplication.setFieldValue(self.field, self.value))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class TapAndPasteNewCardFieldAction: BaseSimpleAction<FillNewCard, MBTComponent> {
  public static let type: MBTActionType = "TapAndPasteNewCardFieldAction"
  private let field: NewCardField
  private let value: String
  public init(_ field: NewCardField, _ value: String) {
    self.field = field
    self.value = value
    super.init(TapAndPasteNewCardFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<FillNewCard> {
    return FillNewCardFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: FillNewCard, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnField(self.field))
    (try modelOrApplication.pasteFieldValue(self.field, self.value))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class PasteNewCardFieldAction: BaseSimpleAction<FillNewCard, MBTComponent> {
  public static let type: MBTActionType = "PasteNewCardFieldAction"
  private let field: NewCardField
  private let value: String
  public init(_ field: NewCardField, _ value: String) {
    self.field = field
    self.value = value
    super.init(PasteNewCardFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<FillNewCard> {
    return FillNewCardFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: FillNewCard, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.pasteFieldValue(self.field, self.value))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class TapOnNewCardBackButtonAction: MBTAction {
  public static let type: MBTActionType = "TapOnNewCardBackButtonAction"
  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try FillNewCardFeature.`get`.forceCast(model).tapOnBackButton())
    (try FillNewCardFeature.`get`.forceCast(application).tapOnBackButton())
    return requireNonNull(history.previousDifferentComponent, "There is no previous screen")
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return FillNewCardFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return TapOnNewCardBackButtonAction.type
  }

}

