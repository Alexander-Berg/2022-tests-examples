// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/license-agreement-actions.ts >>>

import Foundation

open class OpenFullLicenseAgreementAction: BaseSimpleAction<LicenseAgreement, MBTComponent> {
  public static let type: MBTActionType = "OpenFullLicenseAgreementAction"
  public init() {
    super.init(OpenFullLicenseAgreementAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<LicenseAgreement> {
    return LicenseAgreementFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: LicenseAgreement) throws -> Bool {
    return (try model.isLicenseAgreementShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: LicenseAgreement, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.openFullLicenseAgreement())
    return LicenseAgreementComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class CloseFullLicenseAgreementAction: MBTAction {
  public static let type: MBTActionType = "CloseFullLicenseAgreementAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return LicenseAgreementFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let modelKeyboard = LicenseAgreementFeature.`get`.forceCast(model)
    let appKeyboard = LicenseAgreementFeature.`get`.forceCast(application)
    (try modelKeyboard.closeFullLicenseAgreement())
    (try appKeyboard.closeFullLicenseAgreement())
    return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseFullLicenseAgreementAction"
  }

  @discardableResult
  open func getActionType() -> String {
    return CloseFullLicenseAgreementAction.type
  }

}

