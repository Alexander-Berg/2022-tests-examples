// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM action/license-agreement-actions.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class OpenFullLicenseAgreementAction(): BaseSimpleAction<LicenseAgreement, MBTComponent>(OpenFullLicenseAgreementAction.type) {
    open override fun requiredFeature(): Feature<LicenseAgreement> {
        return LicenseAgreementFeature.`get`
    }

    open override fun canBePerformedImpl(model: LicenseAgreement): Boolean {
        return model.isLicenseAgreementShown()
    }

    open override fun performImpl(modelOrApplication: LicenseAgreement, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.openFullLicenseAgreement()
        return LicenseAgreementComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenFullLicenseAgreementAction"
    }
}

public open class CloseFullLicenseAgreementAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return LicenseAgreementFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        val modelKeyboard = LicenseAgreementFeature.`get`.forceCast(model)
        val appKeyboard = LicenseAgreementFeature.`get`.forceCast(application)
        modelKeyboard.closeFullLicenseAgreement()
        appKeyboard.closeFullLicenseAgreement()
        return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "CloseFullLicenseAgreementAction"
    }

    open override fun getActionType(): String {
        return CloseFullLicenseAgreementAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "CloseFullLicenseAgreementAction"
    }
}

