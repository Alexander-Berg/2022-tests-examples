// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/sample-app-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class SampleAppModel(private val paymentScreenTitleModel: PaymentScreenTitleModel, private val readPaymentDetails: ReadPaymentDetailsModel, private val paymentButtonModel: PaymentButtonModel, private val fillNewCardModel: FillNewCardModel, private val paymentMethodsListModel: PaymentMethodsListModel, private val unbindCardModel: UnbindCardModel, private val keyboardModel: KeyboardModel): SampleApp {
    private var additionalSettings: PaymentAdditionalSettings = PaymentAdditionalSettings(false, PaymentMethodsFilter(), false, PersonalInfoMode.HIDE, AuthorizationMode.authorized, false, false)
    open override fun startSampleApp(user: OAuthUserAccount, merchantId: String, paymentId: String, additionalSettings: PaymentAdditionalSettings): Unit {
        this.additionalSettings = additionalSettings
    }

    private fun updateTitle(): Unit {
        var title = ""
        if (this.readPaymentDetails.isPersonalInfoShown()) {
            title = PaymentScreenTitleLabel.personalInformation
        } else if (this.paymentMethodsListModel.getMethods().size > 0) {
            title = PaymentScreenTitleLabel.paymentMethod
        } else {
            title = if (this.fillNewCardModel.getNewCardMode() == NewCardMode.preselect) PaymentScreenTitleLabel.addCard else PaymentScreenTitleLabel.cardPayment
        }
        this.paymentScreenTitleModel.setTitle(title)
    }

    open override fun bindCard(): Unit {
        this.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.addCard)
        this.paymentButtonModel.setEnabledInModel(false)
        this.paymentButtonModel.setButtonText(PaymentButtonLabel.addCard)
        this.fillNewCardModel.setNewCardMode(NewCardMode.bind)
        this.keyboardModel.setNumericKeyboardStatus(true)
    }

    open override fun startPreselectPayment(): Unit {
        this.paymentMethodsListModel.setMethodsListMode(MethodsListMode.preselect)
        this.fillNewCardModel.setNewCardMode(NewCardMode.preselect)
        this.updateTitle()
        this.paymentButtonModel.setButtonText(if (this.paymentMethodsListModel.getMethods().size > 0) PaymentButtonLabel.select else PaymentButtonLabel.addCard)
        this.unbindCardModel.setEditButtonShowingStatus(this.unbindCardModel.checkHasCardsToUnbind())
        if (this.paymentMethodsListModel.getMethods().size == 0) {
            this.keyboardModel.setNumericKeyboardStatus(true)
        }
    }

    open override fun startRegularPayment(): Unit {
        this.paymentMethodsListModel.setMethodsListMode(MethodsListMode.regular)
        this.fillNewCardModel.setNewCardMode(NewCardMode.pay)
        this.updateTitle()
        this.paymentButtonModel.setButtonText(PaymentButtonLabel.pay)
        this.paymentButtonModel.setLabelText(PaymentButtonLabel.label(this.readPaymentDetails.getCurrency(), this.readPaymentDetails.getAmount()))
        val title = this.paymentScreenTitleModel.getTitle()
        if (this.paymentMethodsListModel.getMethods().size == 0 && PaymentScreenTitleLabel.personalInformation != title) {
            this.keyboardModel.setNumericKeyboardStatus(true)
        }
        if (this.additionalSettings.forceCvv && this.paymentMethodsListModel.getCards().size != 0) {
            this.keyboardModel.setNumericKeyboardStatus(true)
        }
    }

    open override fun unbindCard(): Unit {
    }

    open override fun waitForAppReady(): Boolean {
        return true
    }

}

