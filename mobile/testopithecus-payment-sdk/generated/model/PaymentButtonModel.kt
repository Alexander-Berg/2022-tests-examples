// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/payment-button-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentButtonModel(private val amount: String, private val currency: String): PaymentButton {
    private var buttonText: String = ""
    private var labelText: String = ""
    private var enabled: Boolean = false
    private var buttonAction: ((Boolean) -> Unit)? = null
    init {
        this.buttonText = PaymentButtonLabel.pay
        this.labelText = PaymentButtonLabel.label(this.currency, this.amount)
    }
    open override fun getButtonText(): String {
        return this.buttonText
    }

    open fun setButtonText(value: String): Unit {
        this.buttonText = value
    }

    open override fun getLabelText(): String {
        return this.labelText
    }

    open fun setLabelText(value: String): Unit {
        this.labelText = value
    }

    open fun setButtonAction(buttonAction: (Boolean) -> Unit): Unit {
        this.buttonAction = buttonAction
    }

    open override fun isEnabled(): Boolean {
        return this.enabled
    }

    open override fun setEnabledInModel(value: Boolean): Unit {
        this.enabled = value
    }

    open override fun pressButton(): Unit {
        if (this.buttonAction != null) {
            val action = this.buttonAction!!
            action(this.enabled)
        }
    }

}

public open class PaymentButtonLabel {
    companion object {
        @JvmStatic val addSberbankCard: String = "Add SberBank card"
        @JvmStatic val addCard: String = "Add"
        @JvmStatic val select: String = "Select"
        @JvmStatic val close: String = "Close"
        @JvmStatic val pay: String = "Pay"
        @JvmStatic val enterCvv: String = "Enter CVV"
        @JvmStatic
        open fun label(currency: String, amount: String): String {
            val amountNumber: Double? = stringToDouble(amount)
            val parts = amount.split(".")
            if (amountNumber == null || parts.size != 2) {
                return "${currency} ${amount}"
            }
            if (stringToInt32(parts[1]) == 0) {
                return "${currency} ${parts[0]}"
            } else {
                return "${currency} ${amount}"
            }
        }

    }
}

