// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/license-agreement-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class LicenseAgreementModel(private val readPaymentDetailsModel: ReadPaymentDetailsModel, private val fillNewCardModel: FillNewCardModel, private val paymentMethodsListModel: PaymentMethodsListModel): LicenseAgreement {
    private var termsOfUse: String = "By clicking \"Pay\", you consent to the terms and conditions."
    private var fullTermsOfUse: String = "By clicking pay, I consent to the Terms of Service and to the processing of my data by \"YANDEX\" LLC and the " + "Recipient for the purposes specified in this document, as well as the Privacy Policy. \"YANDEX\" LLC is not " + "the recipient of the payment."
    private fun merchantInfoText(merchantInfo: MerchantInfo): String {
        return "Payment will be received by ${merchantInfo.name}"
    }

    private fun fullMerchantInfoText(merchantInfo: MerchantInfo?): String {
        if (merchantInfo == null) {
            return ""
        }
        var text = ""
        if (!isStringNullOrEmpty(merchantInfo.name)) {
            text += "Recipient: ${merchantInfo.name}\n"
        }
        if (!isStringNullOrEmpty(merchantInfo.ogrn)) {
            text += "OGRN/OGRNIP: ${merchantInfo.ogrn}\n"
        }
        if (!isStringNullOrEmpty(merchantInfo.scheduleText)) {
            text += "Business hours: ${merchantInfo.scheduleText}\n"
        }
        val merchantAddress = merchantInfo.merchantAddress
        if (merchantAddress != null) {
            text += "Address: country ${merchantAddress!!.country}, " + "city ${merchantAddress!!.city}, " + "street ${merchantAddress!!.street}, " + "house ${merchantAddress!!.home}, " + "postal code ${merchantAddress!!.zip}"
        }
        return text
    }

    open override fun getLicenseAgreement(): String {
        if (!this.isLicenseAgreementShown()) {
            return ""
        }
        val merchantInfo = this.readPaymentDetailsModel.getMerchantInfo()
        return if (merchantInfo == null || isStringNullOrEmpty(merchantInfo!!.name)) this.termsOfUse else "${this.merchantInfoText(merchantInfo)}. ${this.termsOfUse}"
    }

    open override fun isLicenseAgreementShown(): Boolean {
        val isNoBindMode = this.fillNewCardModel.getNewCardMode() != NewCardMode.bind
        val isNoPreselect = this.paymentMethodsListModel.getMethodsListMode() != MethodsListMode.preselect
        return this.readPaymentDetailsModel.getAcquirer() != null && isNoBindMode && isNoPreselect
    }

    open override fun closeFullLicenseAgreement(): Unit {
    }

    open override fun getFullLicenseAgreement(): String {
        return if (this.isLicenseAgreementShown()) "${this.fullMerchantInfoText(this.readPaymentDetailsModel.getMerchantInfo())}\n\n${this.fullTermsOfUse}" else ""
    }

    open override fun openFullLicenseAgreement(): Unit {
    }

}

