// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/sample-app-model.ts >>>

import Foundation

open class SampleAppModel: SampleApp {
  private var additionalSettings: PaymentAdditionalSettings = PaymentAdditionalSettings(false, PaymentMethodsFilter(), false, PersonalInfoMode.HIDE, AuthorizationMode.authorized, false, false)
  private let paymentScreenTitleModel: PaymentScreenTitleModel
  private let readPaymentDetails: ReadPaymentDetailsModel
  private let paymentButtonModel: PaymentButtonModel
  private let fillNewCardModel: FillNewCardModel
  private let paymentMethodsListModel: PaymentMethodsListModel
  private let unbindCardModel: UnbindCardModel
  private let keyboardModel: KeyboardModel
  public init(_ paymentScreenTitleModel: PaymentScreenTitleModel, _ readPaymentDetails: ReadPaymentDetailsModel, _ paymentButtonModel: PaymentButtonModel, _ fillNewCardModel: FillNewCardModel, _ paymentMethodsListModel: PaymentMethodsListModel, _ unbindCardModel: UnbindCardModel, _ keyboardModel: KeyboardModel) {
    self.paymentScreenTitleModel = paymentScreenTitleModel
    self.readPaymentDetails = readPaymentDetails
    self.paymentButtonModel = paymentButtonModel
    self.fillNewCardModel = fillNewCardModel
    self.paymentMethodsListModel = paymentMethodsListModel
    self.unbindCardModel = unbindCardModel
    self.keyboardModel = keyboardModel
  }

  @discardableResult
  open func startSampleApp(_ user: OAuthUserAccount, _ merchantId: String, _ paymentId: String, _ additionalSettings: PaymentAdditionalSettings) throws -> Void {
    self.additionalSettings = additionalSettings
  }

  @discardableResult
  private func updateTitle() throws -> Void {
    var title = ""
    if self.readPaymentDetails.isPersonalInfoShown() {
      title = PaymentScreenTitleLabel.personalInformation
    } else if self.paymentMethodsListModel.getMethods().length > 0 {
      title = PaymentScreenTitleLabel.paymentMethod
    } else {
      title = self.fillNewCardModel.getNewCardMode() == NewCardMode.preselect ? PaymentScreenTitleLabel.addCard : PaymentScreenTitleLabel.cardPayment
    }
    (try self.paymentScreenTitleModel.setTitle(title))
  }

  @discardableResult
  open func bindCard() throws -> Void {
    (try self.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.addCard))
    (try self.paymentButtonModel.setEnabledInModel(false))
    self.paymentButtonModel.setButtonText(PaymentButtonLabel.addCard)
    self.fillNewCardModel.setNewCardMode(NewCardMode.bind)
    self.keyboardModel.setNumericKeyboardStatus(true)
  }

  @discardableResult
  open func startPreselectPayment() throws -> Void {
    (try self.paymentMethodsListModel.setMethodsListMode(MethodsListMode.preselect))
    self.fillNewCardModel.setNewCardMode(NewCardMode.preselect)
    (try self.updateTitle())
    self.paymentButtonModel.setButtonText(self.paymentMethodsListModel.getMethods().length > 0 ? PaymentButtonLabel.select : PaymentButtonLabel.addCard)
    self.unbindCardModel.setEditButtonShowingStatus(self.unbindCardModel.checkHasCardsToUnbind())
    if self.paymentMethodsListModel.getMethods().length == 0 {
      self.keyboardModel.setNumericKeyboardStatus(true)
    }
  }

  @discardableResult
  open func startRegularPayment() throws -> Void {
    (try self.paymentMethodsListModel.setMethodsListMode(MethodsListMode.regular))
    self.fillNewCardModel.setNewCardMode(NewCardMode.pay)
    (try self.updateTitle())
    self.paymentButtonModel.setButtonText(PaymentButtonLabel.pay)
    self.paymentButtonModel.setLabelText(PaymentButtonLabel.label(self.readPaymentDetails.getCurrency(), self.readPaymentDetails.getAmount()))
    let title = (try self.paymentScreenTitleModel.getTitle())
    if self.paymentMethodsListModel.getMethods().length == 0 && PaymentScreenTitleLabel.personalInformation != title {
      self.keyboardModel.setNumericKeyboardStatus(true)
    }
    if self.additionalSettings.forceCvv && self.paymentMethodsListModel.getCards().length != 0 {
      self.keyboardModel.setNumericKeyboardStatus(true)
    }
  }

  @discardableResult
  open func unbindCard() throws -> Void {
  }

  @discardableResult
  open func waitForAppReady() throws -> Bool {
    return true
  }

}

