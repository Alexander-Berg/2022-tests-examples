// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/payment-methods-list-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentMethodsListModel(private var availableMethods: AvailableMethods, private val paymentScreenTitleModel: PaymentScreenTitleModel, private val keyboardModel: KeyboardModel, private val forceCvv: Boolean, private val buttonModel: PaymentButtonModel): PaymentMethodsList {
    private var showKeyboardFirstCvv: Boolean = false
    private var addedCards: YSArray<String> = mutableListOf()
    private var selected: Int = -1
    private var cvv: String? = null
    private var methodsListMode: MethodsListMode = MethodsListMode.regular
    init {
        this.showKeyboardFirstCvv = forceCvv
    }
    open override fun waitForPaymentMethods(mSec: Int): Boolean {
        return true
    }

    open fun getAllMethods(): YSArray<String> {
        return TestPaymentMethodsBuilder().setAvailableMethods(this.availableMethods).setAddedCards(this.addedCards).getAllMethods()
    }

    open fun getAvailableMethods(): AvailableMethods {
        return this.availableMethods
    }

    open override fun getMethods(): YSArray<String> {
        return this.getAllMethods().filter( {
            pm ->
            !mutableListOf(PaymentMethodName.applePay, PaymentMethodName.googlePay).contains(pm)
        })
    }

    open fun getCards(): YSArray<String> {
        return this.getMethods().filter( {
            pm ->
            !mutableListOf(PaymentMethodName.otherCard, PaymentMethodName.cash).contains(pm)
        })
    }

    open fun getSelectedMethodName(): String? {
        val methods = this.getMethods()
        return if (this.selected >= 0 && methods.size > this.selected) methods[this.selected] else null
    }

    open fun getSelectedCardName(): String? {
        val methods = this.getCards()
        return if (this.selected >= 0 && methods.size > this.selected) methods[this.selected] else null
    }

    open fun addCard(cardNumber: String): Boolean {
        if (this.getAllMethods().contains(buildPaymentMethodNameByCardNumber(cardNumber))) {
            return false
        }
        this.addedCards.add(cardNumber)
        return true
    }

    open fun deleteMethod(method: String): Unit {
        val paymentMethods = this.availableMethods.paymentMethods.filter( {
            pm ->
            buildPaymentMethodNameByPaymentMethod(pm) != method
        })
        this.availableMethods = this.availableMethods.builder().setPaymentMethods(paymentMethods).build()
        this.addedCards = this.addedCards.filter( {
            card ->
            buildPaymentMethodNameByCardNumber(card) != method
        })
    }

    open override fun getSelected(): Int {
        return this.selected
    }

    open override fun selectMethod(index: Int): Unit {
        if (this.selected != index) {
            this.cvv = null
            if (this.showKeyboardFirstCvv) {
                this.showKeyboardFirstCvv = false
            } else {
                this.keyboardModel.setNumericKeyboardStatus(false)
            }
            if (this.methodsListMode == MethodsListMode.regular && this.forceCvv) {
                this.buttonModel.setButtonText(PaymentButtonLabel.enterCvv)
            }
        }
        this.selected = index
    }

    open override fun selectSbpMethod(): Unit {
        this.selected = this.getAllMethods().lastIndexOf(PaymentMethodName.sbp)
        this.keyboardModel.setNumericKeyboardStatus(false)
    }

    open override fun setCvvFieldValue(cvv: String): Unit {
        this.cvv = cvv
        if (this.methodsListMode == MethodsListMode.regular && this.forceCvv && cvv.length == 3) {
            this.buttonModel.setButtonText(PaymentButtonLabel.pay)
        }
    }

    open override fun getCvvFieldValue(): String? {
        return if (this.methodsListMode == MethodsListMode.preselect) null else if (this.forceCvv && this.cvv == null) "" else this.cvv
    }

    open override fun clickNewCard(): Unit {
        this.keyboardModel.setNumericKeyboardStatus(true)
        this.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.cardPayment)
    }

    open override fun tapOnCvvField(): Unit {
        this.keyboardModel.setNumericKeyboardStatus(true)
    }

    open fun resetFields(): Unit {
        this.keyboardModel.setNumericKeyboardStatus(false)
        this.cvv = null
        if (this.methodsListMode == MethodsListMode.regular) {
            this.selected = -1
        }
    }

    open override fun getMethodsListMode(): MethodsListMode {
        return this.methodsListMode
    }

    open fun setMethodsListMode(mode: MethodsListMode): Unit {
        this.methodsListMode = mode
    }

}

public open class TestPaymentMethodsBuilder() {
    private var availableMethods: AvailableMethods = AvailableMethodsBuilder().build()
    private var addedCards: YSArray<String> = mutableListOf()
    open fun setAvailableMethods(value: AvailableMethods): TestPaymentMethodsBuilder {
        this.availableMethods = value
        return this
    }

    open fun setAddedCards(value: YSArray<String>): TestPaymentMethodsBuilder {
        this.addedCards = value
        return this
    }

    open fun getAllMethods(): YSArray<String> {
        val result: YSArray<String> = mutableListOf()
        for (method in this.availableMethods.paymentMethods) {
            result.add(buildPaymentMethodNameByPaymentMethod(method))
        }
        for (cardNumber in this.addedCards) {
            result.add(buildPaymentMethodNameByCardNumber(cardNumber))
        }
        if (this.availableMethods.isGooglePayAvailable) {
            result.add(PaymentMethodName.googlePay)
        }
        if (this.availableMethods.isApplePayAvailable) {
            result.add(PaymentMethodName.applePay)
        }
        if (this.availableMethods.isCashAvailable) {
            result.add(PaymentMethodName.cash)
        }
        if (this.availableMethods.isSpbQrAvailable) {
            result.add(PaymentMethodName.sbp)
        }
        if (result.size > 0) {
            result.add(PaymentMethodName.otherCard)
        }
        return result
    }

}

public open class PreselectModel(private val paymentScreenTitleModel: PaymentScreenTitleModel, private val keyboardModel: KeyboardModel, private val paymentMethodsListModel: PaymentMethodsListModel, private val paymentButtonModel: PaymentButtonModel, private val fillNewCardModel: FillNewCardModel): Preselect {
    private var cashSelected: Boolean = false
    open override fun isCashSelected(): Boolean {
        return this.cashSelected
    }

    open override fun selectCash(): Unit {
        this.cashSelected = true
    }

    open override fun tapOnSelectButton(): Unit {
        this.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.paymentMethod)
    }

    open override fun tapOnOtherCard(): Unit {
        this.keyboardModel.setNumericKeyboardStatus(true)
        this.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.addCard)
        this.paymentButtonModel.setButtonText(PaymentButtonLabel.addCard)
        this.fillNewCardModel.setNewCardMode(NewCardMode.bind)
    }

    open fun unbindCard(index: Int): Unit {
        this.paymentMethodsListModel.deleteMethod(this.paymentMethodsListModel.getMethods()[index])
    }

    open override fun tapOnAddCard(): Unit {
        this.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.paymentMethod)
        this.paymentButtonModel.setButtonText(PaymentButtonLabel.select)
        this.paymentButtonModel.pressButton()
        this.fillNewCardModel.setNewCardMode(null)
    }

}

public open class PreselectCvvModel(private val paymentMethodsListModel: PaymentMethodsListModel, private val forceCvv: Boolean): PreselectCvv {
    open override fun getCardName(): String {
        return this.paymentMethodsListModel.getSelectedCardName()!!
    }

    open override fun getCvvFieldValue(): String? {
        val cvv = this.paymentMethodsListModel.getCvvFieldValue()
        return if (this.forceCvv && cvv == null) "" else cvv
    }

    open override fun waitForPreselectCvv(mSec: Int): Boolean {
        return true
    }

}

public open class ApplePayModel(private val availableMethods: AvailableMethods): ApplePay {
    open override fun isAvailable(): Boolean {
        return this.availableMethods.isApplePayAvailable
    }

}

public open class GooglePayModel(private val availableMethods: AvailableMethods): GooglePay {
    open override fun isAvailable(): Boolean {
        return this.availableMethods.isGooglePayAvailable
    }

}

public open class SBPModel(private val availableMethods: AvailableMethods): SBP {
    open override fun isAvailable(): Boolean {
        return this.availableMethods.isSpbQrAvailable
    }

}

