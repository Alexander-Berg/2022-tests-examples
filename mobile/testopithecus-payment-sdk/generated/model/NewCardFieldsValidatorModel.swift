// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/new-card-fields-validator-model.ts >>>

import Foundation

open class NewCardFieldsValidatorModel: NewCardFieldsValidator {
  private var cardNumberValue: String = ""
  private var cardNumberErrorShown: Bool = false
  private var cvvValue: String = ""
  private var cvvErrorShown: Bool = false
  private var expirationDateValue: String = ""
  private var expirationDateErrorShown: Bool = false
  private let fillNewCardModel: FillNewCardModel
  public init(_ fillNewCardModel: FillNewCardModel) {
    self.fillNewCardModel = fillNewCardModel
  }

  @discardableResult
  open func getCardNumberErrorText() throws -> String {
    self.cardNumberErrorShown = (try self.isCardNumberValidationErrorShown())
    return self.cardNumberErrorShown ? NewCardFieldsValidationError.cardNumber.toString() : ""
  }

  @discardableResult
  open func getCvvErrorText() throws -> String {
    self.cvvErrorShown = (try self.isCvvValidationErrorShown())
    return self.cvvErrorShown ? NewCardFieldsValidationError.cvv.toString() : ""
  }

  @discardableResult
  open func getExpirationDateErrorText() throws -> String {
    self.expirationDateErrorShown = (try self.isExpirationDateValidationErrorShown())
    return self.expirationDateErrorShown ? NewCardFieldsValidationError.expirationDate.toString() : ""
  }

  @discardableResult
  private func isExpirationDateValid() throws -> Bool {
    let expirationDate = (try self.fillNewCardModel.getFieldValue(NewCardField.expirationDate))
    let expirationMonth = stringToInt32(expirationDate.slice(0, 2)) ?? 0
    let expirationYear = stringToInt32(expirationDate.slice(2, 4)) ?? 0
    return expirationDate.length == 4 && expirationMonth > 0 && expirationMonth <= 12 && expirationYear >= 22
  }

  @discardableResult
  private func isCardNumberValidationErrorShown() throws -> Bool {
    let cardNumber = (try self.fillNewCardModel.getFieldValue(NewCardField.cardNumber))
    if self.cardNumberErrorShown && self.cardNumberValue == cardNumber {
      return true
    }
    let focusedField: NewCardField! = self.fillNewCardModel.getFocusedField()
    self.cardNumberValue = cardNumber
    return (cardNumber.length != 0 && (!LengthCardNumberValidator.validateCardLength(cardNumber) || !checkLuhn(cardNumber)) && focusedField != NewCardField.cardNumber)
  }

  @discardableResult
  private func isExpirationDateValidationErrorShown() throws -> Bool {
    let expirationDate = (try self.fillNewCardModel.getFieldValue(NewCardField.expirationDate))
    if self.expirationDateErrorShown && self.expirationDateValue == expirationDate {
      return true
    }
    self.expirationDateValue = expirationDate
    let focusedField: NewCardField! = self.fillNewCardModel.getFocusedField()
    if focusedField == NewCardField.expirationDate || expirationDate == "" {
      return false
    }
    let isExpirationDateValid = (try self.isExpirationDateValid())
    return !isExpirationDateValid
  }

  @discardableResult
  private func isCvvValidationErrorShown() throws -> Bool {
    let cvv = (try self.fillNewCardModel.getFieldValue(NewCardField.cvv))
    if self.cvvErrorShown && self.cvvValue == cvv {
      return true
    }
    let focusedField: NewCardField! = self.fillNewCardModel.getFocusedField()
    self.cvvValue = cvv
    return cvv.length > 0 && cvv.length < 3 && focusedField != NewCardField.cvv
  }

  open func resetFields() -> Void {
    self.cardNumberErrorShown = false
    self.expirationDateErrorShown = false
    self.cvvErrorShown = false
    self.cardNumberValue = ""
    self.expirationDateValue = ""
    self.cvvValue = ""
  }

}

public enum NewCardFieldsValidationError : String {
  case cardNumber = "Check the card number"
  case expirationDate = "Incorrect date"
  case cvv = "Incorrect CVV"
  public func toString() -> String {
    return self.rawValue
  }
}
