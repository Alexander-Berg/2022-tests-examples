// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/personal-information-model.ts >>>

import Foundation

open class PersonalInformationModel: PersonalInformation {
  private var name: String = ""
  private var lastName: String = ""
  private var phoneNumber: String = ""
  private var email: String
  private var focusedField: PersonalInformationField! = nil
  private let paymentDetailsModel: ReadPaymentDetailsModel
  private let keyboardModel: KeyboardModel
  public init(_ paymentDetailsModel: ReadPaymentDetailsModel, _ keyboardModel: KeyboardModel) {
    self.paymentDetailsModel = paymentDetailsModel
    self.keyboardModel = keyboardModel
    self.email = self.paymentDetailsModel.getAuthorizationMode() == AuthorizationMode.authorized ? self.paymentDetailsModel.getAccount().account.login + "@yandex.ru" : ""
  }

  @discardableResult
  open func getFieldValue(_ field: PersonalInformationField) throws -> String {
    switch field {
      case PersonalInformationField.firstName:
        return self.name
      case PersonalInformationField.lastName:
        return self.lastName
      case PersonalInformationField.phoneNumber:
        return self.phoneNumber
      case PersonalInformationField.email:
        return self.email
    }
  }

  @discardableResult
  open func getFocusedField() -> PersonalInformationField! {
    return self.focusedField
  }

  @discardableResult
  open func pasteFieldValue(_ field: PersonalInformationField, _ value: String) throws -> Void {
    (try self.setFieldValue(field, value))
  }

  @discardableResult
  open func setFieldValue(_ field: PersonalInformationField, _ value: String) throws -> Void {
    switch field {
      case PersonalInformationField.firstName:
        self.name = value
      case PersonalInformationField.lastName:
        self.lastName = value
      case PersonalInformationField.phoneNumber:
        self.phoneNumber = value
      case PersonalInformationField.email:
        self.email = value
    }
  }

  @discardableResult
  open func tapOnField(_ field: PersonalInformationField) throws -> Void {
    self.focusedField = field
    self.keyboardModel.setAlphabeticalKeyboardStatus(true)
  }

  @discardableResult
  open func resetFields() throws -> Void {
    self.name = ""
    self.lastName = ""
    self.phoneNumber = ""
    self.email = ""
    self.focusedField = nil
    self.keyboardModel.setAlphabeticalKeyboardStatus(false)
  }

}

public enum PersonalInformationField {
  case firstName
  case lastName
  case phoneNumber
  case email
}
