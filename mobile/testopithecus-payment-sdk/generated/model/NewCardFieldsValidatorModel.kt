// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/new-card-fields-validator-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class NewCardFieldsValidatorModel(private val fillNewCardModel: FillNewCardModel): NewCardFieldsValidator {
    private var cardNumberValue: String = ""
    private var cardNumberErrorShown: Boolean = false
    private var cvvValue: String = ""
    private var cvvErrorShown: Boolean = false
    private var expirationDateValue: String = ""
    private var expirationDateErrorShown: Boolean = false
    open override fun getCardNumberErrorText(): String {
        this.cardNumberErrorShown = this.isCardNumberValidationErrorShown()
        return if (this.cardNumberErrorShown) NewCardFieldsValidationError.cardNumber.toString() else ""
    }

    open override fun getCvvErrorText(): String {
        this.cvvErrorShown = this.isCvvValidationErrorShown()
        return if (this.cvvErrorShown) NewCardFieldsValidationError.cvv.toString() else ""
    }

    open override fun getExpirationDateErrorText(): String {
        this.expirationDateErrorShown = this.isExpirationDateValidationErrorShown()
        return if (this.expirationDateErrorShown) NewCardFieldsValidationError.expirationDate.toString() else ""
    }

    private fun isExpirationDateValid(): Boolean {
        val expirationDate = this.fillNewCardModel.getFieldValue(NewCardField.expirationDate)
        val expirationMonth = stringToInt32(expirationDate.slice(0, 2)) ?: 0
        val expirationYear = stringToInt32(expirationDate.slice(2, 4)) ?: 0
        return expirationDate.length == 4 && expirationMonth > 0 && expirationMonth <= 12 && expirationYear >= 22
    }

    private fun isCardNumberValidationErrorShown(): Boolean {
        val cardNumber = this.fillNewCardModel.getFieldValue(NewCardField.cardNumber)
        if (this.cardNumberErrorShown && this.cardNumberValue == cardNumber) {
            return true
        }
        val focusedField = this.fillNewCardModel.getFocusedField()
        this.cardNumberValue = cardNumber
        return (cardNumber.length != 0 && (!LengthCardNumberValidator.validateCardLength(cardNumber) || !checkLuhn(cardNumber)) && focusedField != NewCardField.cardNumber)
    }

    private fun isExpirationDateValidationErrorShown(): Boolean {
        val expirationDate = this.fillNewCardModel.getFieldValue(NewCardField.expirationDate)
        if (this.expirationDateErrorShown && this.expirationDateValue == expirationDate) {
            return true
        }
        this.expirationDateValue = expirationDate
        val focusedField = this.fillNewCardModel.getFocusedField()
        if (focusedField == NewCardField.expirationDate || expirationDate == "") {
            return false
        }
        val isExpirationDateValid = this.isExpirationDateValid()
        return !isExpirationDateValid
    }

    private fun isCvvValidationErrorShown(): Boolean {
        val cvv = this.fillNewCardModel.getFieldValue(NewCardField.cvv)
        if (this.cvvErrorShown && this.cvvValue == cvv) {
            return true
        }
        val focusedField = this.fillNewCardModel.getFocusedField()
        this.cvvValue = cvv
        return cvv.length > 0 && cvv.length < 3 && focusedField != NewCardField.cvv
    }

    open fun resetFields(): Unit {
        this.cardNumberErrorShown = false
        this.expirationDateErrorShown = false
        this.cvvErrorShown = false
        this.cardNumberValue = ""
        this.expirationDateValue = ""
        this.cvvValue = ""
    }

}

public enum class NewCardFieldsValidationError(val value: String) {
    cardNumber("Check the card number"),
    expirationDate("Incorrect date"),
    cvv("Incorrect CVV"),
    ;
    override fun toString(): String = value
}
