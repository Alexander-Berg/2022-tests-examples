// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/payment-result-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentResultModel(private val forcedErrorType: PaymentErrorType?, private val code3ds: String?, private val cvvValid: Boolean, private val fillNewCardModel: FillNewCardModel, private val fill3dsModel: Fill3dsModel): PaymentResultProvider {
    open override fun getResultMessage(): String {
        if (this.fillNewCardModel.getNewCardMode() == NewCardMode.bind) {
            return ResultMessage.cardAdded
        }
        if (this.isSuccess()) {
            return ResultMessage.success
        }
        if (this.forcedErrorType == null) {
            return ResultMessage.error
        }
        return paymentErrorLocalization(this.forcedErrorType)
    }

    open fun isSuccess(): Boolean {
        return (!this.fill3dsModel.is3dsPageForceClosed() && this.forcedErrorType == null && mutableListOf(null, "200").contains(this.code3ds) && this.cvvValid)
    }

    open fun forcedPaymentErrorType(): PaymentErrorType? {
        return this.forcedErrorType
    }

    open fun isCvvValid(): Boolean {
        return this.cvvValid
    }

    open override fun waitForCompletion(mSec: Int): Boolean {
        return true
    }

    open override fun closeResultScreen(): Unit {
    }

}

public open class ResultMessage {
    companion object {
        @JvmStatic val success: String = "Thank you for your order!\nPayment was successful"
        @JvmStatic val error: String = "Something went wrong.\nPlease try again"
        @JvmStatic val cardAdded: String = "Card added"
        @JvmStatic val cardRemoved: String = "Card removed"
    }
}

public fun paymentErrorLocalization(errorType: PaymentErrorType): String {
    when (errorType) {
        PaymentErrorType.notEnoughFunds -> {
            return "Not enough funds on card"
        }
        PaymentErrorType.force3ds -> {
            return "Failed 3DS verification"
        }
        PaymentErrorType.transactionNotPermittedToCard57 -> {
        }
        PaymentErrorType.transactionNotPermittedToCard58 -> {
            return "Transaction not permitted for this card"
        }
        PaymentErrorType.restrictedCard36 -> {
        }
        PaymentErrorType.restrictedCard62 -> {
            return "Invalid card"
        }
        else -> {
            return ResultMessage.error
        }
    }
    return ResultMessage.error
}

