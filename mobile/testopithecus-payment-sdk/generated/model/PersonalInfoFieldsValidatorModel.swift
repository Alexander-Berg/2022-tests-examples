// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/personal-info-fields-validator-model.ts >>>

import Foundation

open class PersonalInfoFieldsValidatorModel: PersonalInformationFieldsValidator {
  private var phoneNumber: String = ""
  private var phoneNumberErrorShown: Bool = false
  private var email: String = ""
  private var emailErrorShown: Bool = false
  private let personalInformationModel: PersonalInformationModel
  public init(_ personalInformationModel: PersonalInformationModel) {
    self.personalInformationModel = personalInformationModel
  }

  @discardableResult
  open func getEmailErrorText() throws -> String {
    self.emailErrorShown = (try self.isEmailValidationErrorShown())
    return self.emailErrorShown ? PersonalInformationValidationError.email.toString() : ""
  }

  @discardableResult
  open func getPhoneNumberErrorText() throws -> String {
    self.phoneNumberErrorShown = (try self.isPhoneNumberValidationErrorShown())
    return self.phoneNumberErrorShown ? PersonalInformationValidationError.phoneNumber.toString() : ""
  }

  @discardableResult
  private func isPhoneNumberValid() throws -> Bool {
    let phoneNumber = (try self.personalInformationModel.getFieldValue(PersonalInformationField.phoneNumber))
    return (phoneNumber.length == 0 || (self.allCharDigit(phoneNumber) && (((phoneNumber.startsWith("7") || phoneNumber.startsWith("8")) && phoneNumber.length == 11) || (phoneNumber.startsWith("+7") && phoneNumber.length == 12))))
  }

  @discardableResult
  private func allCharDigit(_ str: String) -> Bool {
    return str.split("").filter({
      (item) in
      isCharDigit(item) || item == "+"
    }).length == str.length
  }

  @discardableResult
  private func isPhoneNumberValidationErrorShown() throws -> Bool {
    let phoneNumber = (try self.personalInformationModel.getFieldValue(PersonalInformationField.phoneNumber))
    if self.phoneNumberErrorShown && self.phoneNumber == phoneNumber {
      return true
    }
    self.phoneNumber = phoneNumber
    let focusedField: PersonalInformationField! = self.personalInformationModel.getFocusedField()
    let isPhoneNumberValid = (try self.isPhoneNumberValid())
    return !isPhoneNumberValid && focusedField != PersonalInformationField.phoneNumber
  }

  @discardableResult
  private func isEmailValid() throws -> Bool {
    let email = (try self.personalInformationModel.getFieldValue(PersonalInformationField.email)).split("")
    return (email.length == 0 || (email.includes(".") && email.length >= 5 && email.filter({
      (item) in
      item == "@"
    }).length == 1))
  }

  @discardableResult
  private func isEmailValidationErrorShown() throws -> Bool {
    let email = (try self.personalInformationModel.getFieldValue(PersonalInformationField.email))
    if self.emailErrorShown && self.email == email {
      return true
    }
    self.email = email
    let focusedField: PersonalInformationField! = self.personalInformationModel.getFocusedField()
    let isEmailValid = (try self.isEmailValid())
    return !isEmailValid && focusedField != PersonalInformationField.email
  }

  open func resetFields() -> Void {
    self.emailErrorShown = false
    self.email = ""
    self.phoneNumberErrorShown = false
    self.phoneNumber = ""
  }

}

public enum PersonalInformationValidationError : String {
  case phoneNumber = "Enter your phone number in the format +70123456789"
  case email = "Enter an email address in the format mail@example.com"
  public func toString() -> String {
    return self.rawValue
  }
}
