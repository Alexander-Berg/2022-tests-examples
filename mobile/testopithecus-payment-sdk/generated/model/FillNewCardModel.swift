// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/fill-new-card-model.ts >>>

import Foundation

open class FillNewCardModel: FillNewCard {
  private var cardNumber: String = ""
  private var expirationDate: String = ""
  private var cvv: String = ""
  private var saveCardCheckbox: Bool = true
  private var focusedField: NewCardField! = NewCardField.cardNumber
  private var mode: NewCardMode! = nil
  private let paymentScreenTitleModel: PaymentScreenTitleModel
  private let isSomePaymentMethodsAvailable: Bool
  private let keyboardModel: KeyboardModel
  public init(_ paymentScreenTitleModel: PaymentScreenTitleModel, _ isSomePaymentMethodsAvailable: Bool, _ keyboardModel: KeyboardModel) {
    self.paymentScreenTitleModel = paymentScreenTitleModel
    self.isSomePaymentMethodsAvailable = isSomePaymentMethodsAvailable
    self.keyboardModel = keyboardModel
  }

  @discardableResult
  open func waitForNewCardScreen(_ mSec: Int32) throws -> Bool {
    return true
  }

  @discardableResult
  open func getFieldValue(_ field: NewCardField) throws -> String {
    switch field {
      case NewCardField.cardNumber:
        return self.cardNumber
      case NewCardField.expirationDate:
        return self.expirationDate
      case NewCardField.cvv:
        return self.cvv
    }
  }

  @discardableResult
  open func setFieldValue(_ field: NewCardField, _ value: String) throws -> Void {
    switch field {
      case NewCardField.cardNumber:
        self.cardNumber = normalizeCardNumber(value)
      case NewCardField.expirationDate:
        self.expirationDate = normalizeExpirationDate(value)
      case NewCardField.cvv:
        self.cvv = value
    }
  }

  @discardableResult
  open func pasteFieldValue(_ field: NewCardField, _ value: String) throws -> Void {
    (try self.setFieldValue(field, value))
  }

  @discardableResult
  open func tapOnField(_ field: NewCardField) throws -> Void {
    self.focusedField = field
    self.keyboardModel.setNumericKeyboardStatus(true)
  }

  @discardableResult
  open func setSaveCardCheckboxEnabled(_ value: Bool) throws -> Void {
    self.saveCardCheckbox = value
  }

  @discardableResult
  open func isSaveCardCheckboxEnabled() throws -> Bool {
    return self.saveCardCheckbox
  }

  @discardableResult
  open func resetFields() throws -> Void {
    self.cardNumber = ""
    self.expirationDate = ""
    self.cvv = ""
    self.saveCardCheckbox = true
    self.focusedField = NewCardField.cardNumber
    self.keyboardModel.setNumericKeyboardStatus(false)
  }

  @discardableResult
  open func isAllFieldsFilled() -> Bool {
    return self.cardNumber != "" && self.expirationDate != "" && self.cvv != ""
  }

  @discardableResult
  open func getNewCardMode() -> NewCardMode! {
    return self.mode
  }

  open func setNewCardMode(_ mode: NewCardMode!) -> Void {
    self.mode = mode
  }

  @discardableResult
  open func getFocusedField() -> NewCardField! {
    return self.focusedField
  }

  @discardableResult
  open func tapOnBackButton() throws -> Void {
    (try self.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.paymentMethod))
    self.keyboardModel.setNumericKeyboardStatus(false)
    self.keyboardModel.setAlphabeticalKeyboardStatus(false)
  }

  @discardableResult
  open func isBackButtonShown() throws -> Bool {
    return self.isSomePaymentMethodsAvailable
  }

}

public enum NewCardField : String {
  case cardNumber = "cardNumber"
  case expirationDate = "expirationDate"
  case cvv = "cvv"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum NewCardMode {
  case bind
  case pay
  case preselect
}
