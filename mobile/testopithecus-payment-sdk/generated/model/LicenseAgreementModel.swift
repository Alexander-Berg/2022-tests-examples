// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/license-agreement-model.ts >>>

import Foundation

open class LicenseAgreementModel: LicenseAgreement {
  private var termsOfUse: String = "By clicking \"Pay\", you consent to the terms and conditions."
  private var fullTermsOfUse: String = "By clicking pay, I consent to the Terms of Service and to the processing of my data by \"YANDEX\" LLC and the " + "Recipient for the purposes specified in this document, as well as the Privacy Policy. \"YANDEX\" LLC is not " + "the recipient of the payment."
  private let readPaymentDetailsModel: ReadPaymentDetailsModel
  private let fillNewCardModel: FillNewCardModel
  private let paymentMethodsListModel: PaymentMethodsListModel
  public init(_ readPaymentDetailsModel: ReadPaymentDetailsModel, _ fillNewCardModel: FillNewCardModel, _ paymentMethodsListModel: PaymentMethodsListModel) {
    self.readPaymentDetailsModel = readPaymentDetailsModel
    self.fillNewCardModel = fillNewCardModel
    self.paymentMethodsListModel = paymentMethodsListModel
  }

  @discardableResult
  private func merchantInfoText(_ merchantInfo: MerchantInfo) -> String {
    return "Payment will be received by \(merchantInfo.name)"
  }

  @discardableResult
  private func fullMerchantInfoText(_ merchantInfo: MerchantInfo!) -> String {
    if merchantInfo == nil {
      return ""
    }
    var text = ""
    if !isStringNullOrEmpty(merchantInfo.name) {
      text += "Recipient: \(merchantInfo.name)\n"
    }
    if !isStringNullOrEmpty(merchantInfo.ogrn) {
      text += "OGRN/OGRNIP: \(merchantInfo.ogrn)\n"
    }
    if !isStringNullOrEmpty(merchantInfo.scheduleText) {
      text += "Business hours: \(merchantInfo.scheduleText)\n"
    }
    let merchantAddress: MerchantAddress! = merchantInfo.merchantAddress
    if merchantAddress != nil {
      text += "Address: country \(merchantAddress!.country), " + "city \(merchantAddress!.city), " + "street \(merchantAddress!.street), " + "house \(merchantAddress!.home), " + "postal code \(merchantAddress!.zip)"
    }
    return text
  }

  @discardableResult
  open func getLicenseAgreement() throws -> String {
    if !(try self.isLicenseAgreementShown()) {
      return ""
    }
    let merchantInfo: MerchantInfo! = self.readPaymentDetailsModel.getMerchantInfo()
    return merchantInfo == nil || isStringNullOrEmpty(merchantInfo!.name) ? self.termsOfUse : "\(self.merchantInfoText(merchantInfo)). \(self.termsOfUse)"
  }

  @discardableResult
  open func isLicenseAgreementShown() throws -> Bool {
    let isNoBindMode = self.fillNewCardModel.getNewCardMode() != NewCardMode.bind
    let isNoPreselect = (try self.paymentMethodsListModel.getMethodsListMode()) != MethodsListMode.preselect
    return self.readPaymentDetailsModel.getAcquirer() != nil && isNoBindMode && isNoPreselect
  }

  @discardableResult
  open func closeFullLicenseAgreement() throws -> Void {
  }

  @discardableResult
  open func getFullLicenseAgreement() throws -> String {
    return (try self.isLicenseAgreementShown()) ? "\(self.fullMerchantInfoText(self.readPaymentDetailsModel.getMerchantInfo()))\n\n\(self.fullTermsOfUse)" : ""
  }

  @discardableResult
  open func openFullLicenseAgreement() throws -> Void {
  }

}

