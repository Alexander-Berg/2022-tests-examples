// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/payment-sdk-model.ts >>>

import Foundation

open class PaymentSdkModel: AppModel {
  public let readPaymentDetailsModel: ReadPaymentDetailsModel
  public let sampleAppModel: SampleAppModel
  public let paymentMethodsListModel: PaymentMethodsListModel
  public let paymentResultModel: PaymentResultModel
  public let paymentButtonModel: PaymentButtonModel
  public let fillNewCardModel: FillNewCardModel
  public let fill3dsModel: Fill3dsModel
  public let newCardFieldsValidatorModel: NewCardFieldsValidatorModel
  public let keyboardModel: KeyboardModel
  public let deviceOrientationModel: DeviceOrientationModel
  public let paymentScreenTitleModel: PaymentScreenTitleModel
  public let personalInformationModel: PersonalInformationModel
  public let personalInfoFieldsValidatorModel: PersonalInfoFieldsValidatorModel
  public let applePayModel: ApplePayModel
  public let googlePayModel: GooglePayModel
  public let sbpModel: SBPModel
  public let preselectCvvModel: PreselectCvvModel
  public let preselectModel: PreselectModel
  public let unbindCardModel: UnbindCardModel
  public let licenseAgreementModel: LicenseAgreementModel
  public let sbpSampleBankModel: SbpSampleBankModel
  public let sbpBanksListModel: SbpBanksListModel
  public let sbpExtendedBanksListModel: SbpExtendedBanksListModel
  public static var allSupportedFeatures: YSArray<FeatureID> = YSArray(ReadPaymentDetailsFeature.`get`.name, SampleAppFeature.`get`.name, PaymentScreenTitleFeature.`get`.name, PaymentMethodsListFeature.`get`.name, PaymentButtonFeature.`get`.name, PaymentResultFeature.`get`.name, FillNewCardFeature.`get`.name, Fill3dsFeature.`get`.name, NewCardFieldsValidatorFeature.`get`.name, KeyboardFeature.`get`.name, DeviceOrientationFeature.`get`.name, PersonalInformationFeature.`get`.name, PersonalInformationFieldsValidatorFeature.`get`.name, ApplePayFeature.`get`.name, GooglePayFeature.`get`.name, SBPFeature.`get`.name, PreselectFeature.`get`.name, PreselectCvvFeature.`get`.name, UnbindCardFeature.`get`.name, LicenseAgreementFeature.`get`.name, SbpSampleBankFeature.`get`.name, SbpBanksListFeature.`get`.name, SbpExtendedBanksListFeature.`get`.name)
  public var supportedFeatures: YSArray<FeatureID> = copyArray(PaymentSdkModel.allSupportedFeatures)
  public init(_ account: OAuthUserAccount, _ merchantId: String, _ paymentId: String, _ availableMethods: AvailableMethods, _ amount: String, _ currency: String, _ expected3ds: String!, _ isCvvValid: Bool, _ forcedErrorType: PaymentErrorType!, _ forceCvv: Bool, _ methodsFilter: PaymentMethodsFilter, _ isDarkModeEnabled: Bool, _ personalInfoShowingMode: PersonalInfoMode, _ authorizationMode: AuthorizationMode, _ isBindingV2Enabled: Bool, _ isCashEnabled: Bool, _ acquirer: Acquirer!) {
    self.paymentScreenTitleModel = PaymentScreenTitleModel()
    self.readPaymentDetailsModel = ReadPaymentDetailsModel(account, merchantId, paymentId, forceCvv, methodsFilter, isDarkModeEnabled, personalInfoShowingMode, authorizationMode, amount, currency, isBindingV2Enabled, isCashEnabled, expected3ds, acquirer)
    self.paymentButtonModel = PaymentButtonModel(amount, currency)
    self.keyboardModel = KeyboardModel()
    self.applePayModel = ApplePayModel(availableMethods)
    self.googlePayModel = GooglePayModel(availableMethods)
    self.sbpModel = SBPModel(availableMethods)
    self.paymentMethodsListModel = PaymentMethodsListModel(availableMethods, self.paymentScreenTitleModel, self.keyboardModel, forceCvv, self.paymentButtonModel)
    self.preselectCvvModel = PreselectCvvModel(self.paymentMethodsListModel, forceCvv)
    self.fill3dsModel = Fill3dsModel()
    self.fillNewCardModel = FillNewCardModel(self.paymentScreenTitleModel, self.paymentMethodsListModel.getAllMethods().length > 0, self.keyboardModel)
    self.licenseAgreementModel = LicenseAgreementModel(self.readPaymentDetailsModel, self.fillNewCardModel, self.paymentMethodsListModel)
    self.paymentResultModel = PaymentResultModel(forcedErrorType, expected3ds, isCvvValid, self.fillNewCardModel, self.fill3dsModel)
    self.preselectModel = PreselectModel(self.paymentScreenTitleModel, self.keyboardModel, self.paymentMethodsListModel, self.paymentButtonModel, self.fillNewCardModel)
    self.unbindCardModel = UnbindCardModel(self.paymentMethodsListModel, self.paymentButtonModel)
    self.sampleAppModel = SampleAppModel(self.paymentScreenTitleModel, self.readPaymentDetailsModel, self.paymentButtonModel, self.fillNewCardModel, self.paymentMethodsListModel, self.unbindCardModel, self.keyboardModel)
    self.sbpSampleBankModel = SbpSampleBankModel()
    self.sbpBanksListModel = SbpBanksListModel()
    self.sbpExtendedBanksListModel = SbpExtendedBanksListModel()
    self.newCardFieldsValidatorModel = NewCardFieldsValidatorModel(self.fillNewCardModel)
    self.deviceOrientationModel = DeviceOrientationModel()
    self.personalInformationModel = PersonalInformationModel(self.readPaymentDetailsModel, self.keyboardModel)
    self.personalInfoFieldsValidatorModel = PersonalInfoFieldsValidatorModel(self.personalInformationModel)
    self.paymentButtonModel.setButtonAction({
      (enabled) in
      let paymentMethods = self.paymentMethodsListModel.getMethods()
      let isSaveCardCheckboxEnabled = (try self.fillNewCardModel.isSaveCardCheckboxEnabled())
      if paymentMethods.length < 5 && self.fillNewCardModel.isAllFieldsFilled() && (isSaveCardCheckboxEnabled || self.fillNewCardModel.getNewCardMode() == NewCardMode.bind) && self.paymentResultModel.isSuccess() {
        if (try self.paymentMethodsListModel.addCard((try self.fillNewCardModel.getFieldValue(NewCardField.cardNumber)))) {
          if (try self.paymentMethodsListModel.getMethodsListMode()) == MethodsListMode.preselect {
            (try self.paymentMethodsListModel.selectMethod(self.paymentMethodsListModel.getCards().length - 1))
            self.unbindCardModel.setEditButtonShowingStatus(self.unbindCardModel.checkHasCardsToUnbind())
          }
        }
      }
      if enabled {
        self.paymentMethodsListModel.resetFields()
        (try self.fillNewCardModel.resetFields())
      }
    })
  }

  @discardableResult
  open func copy() -> AppModel {
    let account = self.readPaymentDetailsModel.getAccount()
    let merchantId = self.readPaymentDetailsModel.getMerchantId()
    let paymentId = self.readPaymentDetailsModel.getPaymentId()
    let availableMethods = self.paymentMethodsListModel.getAvailableMethods()
    let amount = self.readPaymentDetailsModel.getAmount()
    let currency = self.readPaymentDetailsModel.getCurrency()
    let expected3ds: String! = self.readPaymentDetailsModel.getExpected3ds()
    let isCvvValid = self.paymentResultModel.isCvvValid()
    let forcedErrorType: PaymentErrorType! = self.paymentResultModel.forcedPaymentErrorType()
    let forceCvv = self.readPaymentDetailsModel.getForceCvv()
    let methodsFilter = self.readPaymentDetailsModel.getPaymentMethodsFilter()
    let isDarkModeEnabled = self.readPaymentDetailsModel.isDarkModeEnabled()
    let personalInfoShowingMode = self.readPaymentDetailsModel.getPersonalInfoShowingMode()
    let authorizationMode = self.readPaymentDetailsModel.getAuthorizationMode()
    let isBindingV2Enabled = self.readPaymentDetailsModel.isBindingV2Enabled()
    let isCashEnabled = self.readPaymentDetailsModel.isCashEnabled()
    let acquirer: Acquirer! = self.readPaymentDetailsModel.getAcquirer()
    return PaymentSdkModel(account, merchantId, paymentId, availableMethods, amount, currency, expected3ds, isCvvValid, forcedErrorType, forceCvv, methodsFilter, isDarkModeEnabled, personalInfoShowingMode, authorizationMode, isBindingV2Enabled, isCashEnabled, acquirer)
  }

  @discardableResult
  open func getCurrentStateHash() -> Int64 {
    return int64(0)
  }

  @discardableResult
  open func dump(_ model: App) -> String {
    return ""
  }

  @discardableResult
  open func getFeature(_ feature: FeatureID) -> Any {
    return FeatureRegistry().register(ReadPaymentDetailsFeature.`get`, self.readPaymentDetailsModel).register(SampleAppFeature.`get`, self.sampleAppModel).register(PaymentScreenTitleFeature.`get`, self.paymentScreenTitleModel).register(PaymentMethodsListFeature.`get`, self.paymentMethodsListModel).register(PaymentButtonFeature.`get`, self.paymentButtonModel).register(PaymentResultFeature.`get`, self.paymentResultModel).register(FillNewCardFeature.`get`, self.fillNewCardModel).register(Fill3dsFeature.`get`, self.fill3dsModel).register(NewCardFieldsValidatorFeature.`get`, self.newCardFieldsValidatorModel).register(KeyboardFeature.`get`, self.keyboardModel).register(DeviceOrientationFeature.`get`, self.deviceOrientationModel).register(PersonalInformationFeature.`get`, self.personalInformationModel).register(PersonalInformationFieldsValidatorFeature.`get`, self.personalInfoFieldsValidatorModel).register(ApplePayFeature.`get`, self.applePayModel).register(GooglePayFeature.`get`, self.googlePayModel).register(SBPFeature.`get`, self.sbpModel).register(PreselectFeature.`get`, self.preselectModel).register(PreselectCvvFeature.`get`, self.preselectCvvModel).register(UnbindCardFeature.`get`, self.unbindCardModel).register(LicenseAgreementFeature.`get`, self.licenseAgreementModel).register(SbpSampleBankFeature.`get`, self.sbpSampleBankModel).register(SbpBanksListFeature.`get`, self.sbpBanksListModel).register(SbpExtendedBanksListFeature.`get`, self.sbpExtendedBanksListModel).`get`(feature)
  }

}

