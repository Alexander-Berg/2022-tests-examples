// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/fill-new-card-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class FillNewCardModel(private val paymentScreenTitleModel: PaymentScreenTitleModel, private val isSomePaymentMethodsAvailable: Boolean, private val keyboardModel: KeyboardModel): FillNewCard {
    private var cardNumber: String = ""
    private var expirationDate: String = ""
    private var cvv: String = ""
    private var saveCardCheckbox: Boolean = true
    private var focusedField: NewCardField? = NewCardField.cardNumber
    private var mode: NewCardMode? = null
    open override fun waitForNewCardScreen(mSec: Int): Boolean {
        return true
    }

    open override fun getFieldValue(`field`: NewCardField): String {
        when (`field`) {
            NewCardField.cardNumber -> {
                return this.cardNumber
            }
            NewCardField.expirationDate -> {
                return this.expirationDate
            }
            NewCardField.cvv -> {
                return this.cvv
            }
        }
    }

    open override fun setFieldValue(`field`: NewCardField, value: String): Unit {
        when (`field`) {
            NewCardField.cardNumber -> {
                this.cardNumber = normalizeCardNumber(value)
            }
            NewCardField.expirationDate -> {
                this.expirationDate = normalizeExpirationDate(value)
            }
            NewCardField.cvv -> {
                this.cvv = value
            }
        }
    }

    open override fun pasteFieldValue(`field`: NewCardField, value: String): Unit {
        this.setFieldValue(`field`, value)
    }

    open override fun tapOnField(`field`: NewCardField): Unit {
        this.focusedField = `field`
        this.keyboardModel.setNumericKeyboardStatus(true)
    }

    open override fun setSaveCardCheckboxEnabled(value: Boolean): Unit {
        this.saveCardCheckbox = value
    }

    open override fun isSaveCardCheckboxEnabled(): Boolean {
        return this.saveCardCheckbox
    }

    open fun resetFields(): Unit {
        this.cardNumber = ""
        this.expirationDate = ""
        this.cvv = ""
        this.saveCardCheckbox = true
        this.focusedField = NewCardField.cardNumber
        this.keyboardModel.setNumericKeyboardStatus(false)
    }

    open fun isAllFieldsFilled(): Boolean {
        return this.cardNumber != "" && this.expirationDate != "" && this.cvv != ""
    }

    open override fun getNewCardMode(): NewCardMode? {
        return this.mode
    }

    open fun setNewCardMode(mode: NewCardMode?): Unit {
        this.mode = mode
    }

    open override fun getFocusedField(): NewCardField? {
        return this.focusedField
    }

    open override fun tapOnBackButton(): Unit {
        this.paymentScreenTitleModel.setTitle(PaymentScreenTitleLabel.paymentMethod)
        this.keyboardModel.setNumericKeyboardStatus(false)
        this.keyboardModel.setAlphabeticalKeyboardStatus(false)
    }

    open override fun isBackButtonShown(): Boolean {
        return this.isSomePaymentMethodsAvailable
    }

}

public enum class NewCardField(val value: String) {
    cardNumber("cardNumber"),
    expirationDate("expirationDate"),
    cvv("cvv"),
    ;
    override fun toString(): String = value
}
public enum class NewCardMode {
    bind,
    pay,
    preselect,
}
