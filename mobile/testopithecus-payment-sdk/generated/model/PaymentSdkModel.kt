// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/payment-sdk-model.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PaymentSdkModel(account: OAuthUserAccount, merchantId: String, paymentId: String, availableMethods: AvailableMethods, amount: String, currency: String, expected3ds: String?, isCvvValid: Boolean, forcedErrorType: PaymentErrorType?, forceCvv: Boolean, methodsFilter: PaymentMethodsFilter, isDarkModeEnabled: Boolean, personalInfoShowingMode: PersonalInfoMode, authorizationMode: AuthorizationMode, isBindingV2Enabled: Boolean, isCashEnabled: Boolean, acquirer: Acquirer?): AppModel {
    val readPaymentDetailsModel: ReadPaymentDetailsModel
    val sampleAppModel: SampleAppModel
    val paymentMethodsListModel: PaymentMethodsListModel
    val paymentResultModel: PaymentResultModel
    val paymentButtonModel: PaymentButtonModel
    val fillNewCardModel: FillNewCardModel
    val fill3dsModel: Fill3dsModel
    val newCardFieldsValidatorModel: NewCardFieldsValidatorModel
    val keyboardModel: KeyboardModel
    val deviceOrientationModel: DeviceOrientationModel
    val paymentScreenTitleModel: PaymentScreenTitleModel
    val personalInformationModel: PersonalInformationModel
    val personalInfoFieldsValidatorModel: PersonalInfoFieldsValidatorModel
    val applePayModel: ApplePayModel
    val googlePayModel: GooglePayModel
    val sbpModel: SBPModel
    val preselectCvvModel: PreselectCvvModel
    val preselectModel: PreselectModel
    val unbindCardModel: UnbindCardModel
    val licenseAgreementModel: LicenseAgreementModel
    val sbpSampleBankModel: SbpSampleBankModel
    val sbpBanksListModel: SbpBanksListModel
    val sbpExtendedBanksListModel: SbpExtendedBanksListModel
    override var supportedFeatures: YSArray<FeatureID> = copyArray(PaymentSdkModel.allSupportedFeatures)
    init {
        this.paymentScreenTitleModel = PaymentScreenTitleModel()
        this.readPaymentDetailsModel = ReadPaymentDetailsModel(account, merchantId, paymentId, forceCvv, methodsFilter, isDarkModeEnabled, personalInfoShowingMode, authorizationMode, amount, currency, isBindingV2Enabled, isCashEnabled, expected3ds, acquirer)
        this.paymentButtonModel = PaymentButtonModel(amount, currency)
        this.keyboardModel = KeyboardModel()
        this.applePayModel = ApplePayModel(availableMethods)
        this.googlePayModel = GooglePayModel(availableMethods)
        this.sbpModel = SBPModel(availableMethods)
        this.paymentMethodsListModel = PaymentMethodsListModel(availableMethods, this.paymentScreenTitleModel, this.keyboardModel, forceCvv, this.paymentButtonModel)
        this.preselectCvvModel = PreselectCvvModel(this.paymentMethodsListModel, forceCvv)
        this.fill3dsModel = Fill3dsModel()
        this.fillNewCardModel = FillNewCardModel(this.paymentScreenTitleModel, this.paymentMethodsListModel.getAllMethods().size > 0, this.keyboardModel)
        this.licenseAgreementModel = LicenseAgreementModel(this.readPaymentDetailsModel, this.fillNewCardModel, this.paymentMethodsListModel)
        this.paymentResultModel = PaymentResultModel(forcedErrorType, expected3ds, isCvvValid, this.fillNewCardModel, this.fill3dsModel)
        this.preselectModel = PreselectModel(this.paymentScreenTitleModel, this.keyboardModel, this.paymentMethodsListModel, this.paymentButtonModel, this.fillNewCardModel)
        this.unbindCardModel = UnbindCardModel(this.paymentMethodsListModel, this.paymentButtonModel)
        this.sampleAppModel = SampleAppModel(this.paymentScreenTitleModel, this.readPaymentDetailsModel, this.paymentButtonModel, this.fillNewCardModel, this.paymentMethodsListModel, this.unbindCardModel, this.keyboardModel)
        this.sbpSampleBankModel = SbpSampleBankModel()
        this.sbpBanksListModel = SbpBanksListModel()
        this.sbpExtendedBanksListModel = SbpExtendedBanksListModel()
        this.newCardFieldsValidatorModel = NewCardFieldsValidatorModel(this.fillNewCardModel)
        this.deviceOrientationModel = DeviceOrientationModel()
        this.personalInformationModel = PersonalInformationModel(this.readPaymentDetailsModel, this.keyboardModel)
        this.personalInfoFieldsValidatorModel = PersonalInfoFieldsValidatorModel(this.personalInformationModel)
        this.paymentButtonModel.setButtonAction(__LBL__PaymentSdkModel_1@ {
            enabled ->
            val paymentMethods = this.paymentMethodsListModel.getMethods()
            val isSaveCardCheckboxEnabled = this.fillNewCardModel.isSaveCardCheckboxEnabled()
            if (paymentMethods.size < 5 && this.fillNewCardModel.isAllFieldsFilled() && (isSaveCardCheckboxEnabled || this.fillNewCardModel.getNewCardMode() == NewCardMode.bind) && this.paymentResultModel.isSuccess()) {
                if (this.paymentMethodsListModel.addCard(this.fillNewCardModel.getFieldValue(NewCardField.cardNumber))) {
                    if (this.paymentMethodsListModel.getMethodsListMode() == MethodsListMode.preselect) {
                        this.paymentMethodsListModel.selectMethod(this.paymentMethodsListModel.getCards().size - 1)
                        this.unbindCardModel.setEditButtonShowingStatus(this.unbindCardModel.checkHasCardsToUnbind())
                    }
                }
            }
            if (enabled) {
                this.paymentMethodsListModel.resetFields()
                this.fillNewCardModel.resetFields()
            }
        })
    }
    open override fun copy(): AppModel {
        val account = this.readPaymentDetailsModel.getAccount()
        val merchantId = this.readPaymentDetailsModel.getMerchantId()
        val paymentId = this.readPaymentDetailsModel.getPaymentId()
        val availableMethods = this.paymentMethodsListModel.getAvailableMethods()
        val amount = this.readPaymentDetailsModel.getAmount()
        val currency = this.readPaymentDetailsModel.getCurrency()
        val expected3ds = this.readPaymentDetailsModel.getExpected3ds()
        val isCvvValid = this.paymentResultModel.isCvvValid()
        val forcedErrorType = this.paymentResultModel.forcedPaymentErrorType()
        val forceCvv = this.readPaymentDetailsModel.getForceCvv()
        val methodsFilter = this.readPaymentDetailsModel.getPaymentMethodsFilter()
        val isDarkModeEnabled = this.readPaymentDetailsModel.isDarkModeEnabled()
        val personalInfoShowingMode = this.readPaymentDetailsModel.getPersonalInfoShowingMode()
        val authorizationMode = this.readPaymentDetailsModel.getAuthorizationMode()
        val isBindingV2Enabled = this.readPaymentDetailsModel.isBindingV2Enabled()
        val isCashEnabled = this.readPaymentDetailsModel.isCashEnabled()
        val acquirer = this.readPaymentDetailsModel.getAcquirer()
        return PaymentSdkModel(account, merchantId, paymentId, availableMethods, amount, currency, expected3ds, isCvvValid, forcedErrorType, forceCvv, methodsFilter, isDarkModeEnabled, personalInfoShowingMode, authorizationMode, isBindingV2Enabled, isCashEnabled, acquirer)
    }

    open override fun getCurrentStateHash(): Long {
        return int64(0)
    }

    open override fun dump(model: App): String {
        return ""
    }

    open override fun getFeature(feature: FeatureID): Any {
        return FeatureRegistry().register(ReadPaymentDetailsFeature.`get`, this.readPaymentDetailsModel).register(SampleAppFeature.`get`, this.sampleAppModel).register(PaymentScreenTitleFeature.`get`, this.paymentScreenTitleModel).register(PaymentMethodsListFeature.`get`, this.paymentMethodsListModel).register(PaymentButtonFeature.`get`, this.paymentButtonModel).register(PaymentResultFeature.`get`, this.paymentResultModel).register(FillNewCardFeature.`get`, this.fillNewCardModel).register(Fill3dsFeature.`get`, this.fill3dsModel).register(NewCardFieldsValidatorFeature.`get`, this.newCardFieldsValidatorModel).register(KeyboardFeature.`get`, this.keyboardModel).register(DeviceOrientationFeature.`get`, this.deviceOrientationModel).register(PersonalInformationFeature.`get`, this.personalInformationModel).register(PersonalInformationFieldsValidatorFeature.`get`, this.personalInfoFieldsValidatorModel).register(ApplePayFeature.`get`, this.applePayModel).register(GooglePayFeature.`get`, this.googlePayModel).register(SBPFeature.`get`, this.sbpModel).register(PreselectFeature.`get`, this.preselectModel).register(PreselectCvvFeature.`get`, this.preselectCvvModel).register(UnbindCardFeature.`get`, this.unbindCardModel).register(LicenseAgreementFeature.`get`, this.licenseAgreementModel).register(SbpSampleBankFeature.`get`, this.sbpSampleBankModel).register(SbpBanksListFeature.`get`, this.sbpBanksListModel).register(SbpExtendedBanksListFeature.`get`, this.sbpExtendedBanksListModel).`get`(feature)
    }

    companion object {
        @JvmStatic var allSupportedFeatures: YSArray<FeatureID> = mutableListOf(ReadPaymentDetailsFeature.`get`.name, SampleAppFeature.`get`.name, PaymentScreenTitleFeature.`get`.name, PaymentMethodsListFeature.`get`.name, PaymentButtonFeature.`get`.name, PaymentResultFeature.`get`.name, FillNewCardFeature.`get`.name, Fill3dsFeature.`get`.name, NewCardFieldsValidatorFeature.`get`.name, KeyboardFeature.`get`.name, DeviceOrientationFeature.`get`.name, PersonalInformationFeature.`get`.name, PersonalInformationFieldsValidatorFeature.`get`.name, ApplePayFeature.`get`.name, GooglePayFeature.`get`.name, SBPFeature.`get`.name, PreselectFeature.`get`.name, PreselectCvvFeature.`get`.name, UnbindCardFeature.`get`.name, LicenseAgreementFeature.`get`.name, SbpSampleBankFeature.`get`.name, SbpBanksListFeature.`get`.name, SbpExtendedBanksListFeature.`get`.name)
    }
}

