// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM model/payment-result-model.ts >>>

import Foundation

open class PaymentResultModel: PaymentResultProvider {
  private let forcedErrorType: PaymentErrorType!
  private let code3ds: String!
  private let cvvValid: Bool
  private let fillNewCardModel: FillNewCardModel
  private let fill3dsModel: Fill3dsModel
  public init(_ forcedErrorType: PaymentErrorType!, _ code3ds: String!, _ cvvValid: Bool, _ fillNewCardModel: FillNewCardModel, _ fill3dsModel: Fill3dsModel) {
    self.forcedErrorType = forcedErrorType
    self.code3ds = code3ds
    self.cvvValid = cvvValid
    self.fillNewCardModel = fillNewCardModel
    self.fill3dsModel = fill3dsModel
  }

  @discardableResult
  open func getResultMessage() throws -> String {
    if self.fillNewCardModel.getNewCardMode() == NewCardMode.bind {
      return ResultMessage.cardAdded
    }
    if self.isSuccess() {
      return ResultMessage.success
    }
    if self.forcedErrorType == nil {
      return ResultMessage.error
    }
    return paymentErrorLocalization(self.forcedErrorType)
  }

  @discardableResult
  open func isSuccess() -> Bool {
    return (!self.fill3dsModel.is3dsPageForceClosed() && self.forcedErrorType == nil && YSArray(nil, "200").includes(self.code3ds) && self.cvvValid)
  }

  @discardableResult
  open func forcedPaymentErrorType() -> PaymentErrorType! {
    return self.forcedErrorType
  }

  @discardableResult
  open func isCvvValid() -> Bool {
    return self.cvvValid
  }

  @discardableResult
  open func waitForCompletion(_ mSec: Int32) throws -> Bool {
    return true
  }

  @discardableResult
  open func closeResultScreen() throws -> Void {
  }

}

open class ResultMessage {
  public static let success: String = "Thank you for your order!\nPayment was successful"
  public static let error: String = "Something went wrong.\nPlease try again"
  public static let cardAdded: String = "Card added"
  public static let cardRemoved: String = "Card removed"
}

@discardableResult
public func paymentErrorLocalization(_ errorType: PaymentErrorType) -> String {
  switch errorType {
    case PaymentErrorType.notEnoughFunds:
      return "Not enough funds on card"
    case PaymentErrorType.force3ds:
      return "Failed 3DS verification"
    case PaymentErrorType.transactionNotPermittedToCard57:
      fallthrough
    case PaymentErrorType.transactionNotPermittedToCard58:
      return "Transaction not permitted for this card"
    case PaymentErrorType.restrictedCard36:
      fallthrough
    case PaymentErrorType.restrictedCard62:
      return "Invalid card"
    default:
      return ResultMessage.error
  }
  return ResultMessage.error
}

