// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM service/mock-prepare-service.ts >>>

import Foundation

open class MockPrepareService {
  private let networkService: NetworkService
  public init(_ networkService: NetworkService) {
    self.networkService = networkService
  }

  @discardableResult
  open class func create(_ network: Network, _ serializer: JSONSerializer) -> MockPrepareService {
    let errorProcessor = DiehardBackendErrorProcessor()
    let networkService = NetworkService(network, serializer, errorProcessor)
    return MockPrepareService(networkService)
  }

  @discardableResult
  open func setMockBank(_ bank: BankName) -> XPromise<Bool> {
    return self.networkService.performRequest(MockBankRequest(bank), {
      (item) in
      decodeJSONItem(item, {
        (json) in
        let map = (try json.tryCastAsMapJSONItem())
        return (try map.tryGetString("status")) == "success"
      })
    })
  }

  @discardableResult
  open func setMockFamilyInfoMode(_ mode: FamilyInfoMode) -> XPromise<Bool> {
    return self.networkService.performRequest(MockFamilyInfoModeRequest(mode), {
      (item) in
      decodeJSONItem(item, {
        (json) in
        let map = (try json.tryCastAsMapJSONItem())
        return (try map.tryGetString("status")) == "success"
      })
    })
  }

}

