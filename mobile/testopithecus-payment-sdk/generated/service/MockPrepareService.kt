// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM service/mock-prepare-service.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class MockPrepareService(private val networkService: NetworkService) {
    open fun setMockBank(bank: BankName): XPromise<Boolean> {
        return this.networkService.performRequest(MockBankRequest(bank),  {
            item ->
            decodeJSONItem(item, __LBL__MockPrepareService_1@ {
                json ->
                val map = json.tryCastAsMapJSONItem()
                return@__LBL__MockPrepareService_1 map.tryGetString("status") == "success"
            })
        })
    }

    open fun setMockFamilyInfoMode(mode: FamilyInfoMode): XPromise<Boolean> {
        return this.networkService.performRequest(MockFamilyInfoModeRequest(mode),  {
            item ->
            decodeJSONItem(item, __LBL__MockPrepareService_2@ {
                json ->
                val map = json.tryCastAsMapJSONItem()
                return@__LBL__MockPrepareService_2 map.tryGetString("status") == "success"
            })
        })
    }

    companion object {
        @JvmStatic
        open fun create(network: Network, serializer: JSONSerializer): MockPrepareService {
            val errorProcessor = DiehardBackendErrorProcessor()
            val networkService = NetworkService(network, serializer, errorProcessor)
            return MockPrepareService(networkService)
        }

    }
}

