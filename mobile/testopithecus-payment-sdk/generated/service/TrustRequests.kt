// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM service/trust-requests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public abstract class BaseTrustRequest protected constructor(protected val user: OAuthUserAccount, protected val merchant: String): BaseNetworkRequest() {
    open override fun encoding(): RequestEncoding {
        return JsonRequestEncoding()
    }

    open override fun method(): NetworkMethod {
        return NetworkMethod.post
    }

    open override fun headersExtra(): MapJSONItem {
        val headers = MapJSONItem().putString("X-Service-Token", this.merchant)
        if (this.user.account.uid.length > 0) {
            headers.putString("X-Uid", this.user.account.uid)
        }
        return headers
    }

}

public open class CreateOrderRequest(user: OAuthUserAccount, merchant: String, private val product: String): BaseTrustRequest(user, merchant) {
    open override fun targetPath(): String {
        return "trust-payments/v2/orders"
    }

    open override fun params(): NetworkParams {
        return MapJSONItem().putString("product_id", this.product)
    }

}

public open class CreatePurchaseRequest(user: OAuthUserAccount, merchant: String, private val orderId: String, private val force3ds: Boolean, private val amount: String, private val forceCvv: Boolean): BaseTrustRequest(user, merchant) {
    open override fun targetPath(): String {
        return "trust-payments/v2/payments"
    }

    open override fun params(): MapJSONItem {
        return MapJSONItem().putString("return_path", "https://yandex.ru/").putString("user_email", this.user.account.login + "@yandex.ru").putString("user_phone", "89998887766").putInt32("wait_for_cvn", if (this.forceCvv) 1 else 0).put("pass_params", MapJSONItem().put("terminal_route_data", MapJSONItem().putInt32("service_force_3ds", if (this.force3ds) 1 else 0))).put("orders", ArrayJSONItem().add(MapJSONItem().putString("currency", "RUB").putString("fiscal_nds", "nds_18").putString("fiscal_title", "test_fiscal_title").putString("price", this.amount).putString("service_order_id", this.orderId)))
    }

}

public open class StartPurchaseRequest(user: OAuthUserAccount, merchant: String, private val purchaseId: String): BaseTrustRequest(user, merchant) {
    open override fun targetPath(): String {
        return "trust-payments/v2/payments/" + this.purchaseId + "/start"
    }

    open override fun params(): MapJSONItem {
        return super.params().putString("purchaseId", this.purchaseId)
    }

    companion object {
        @JvmStatic val PATH_MATCH_REGEX: String = "trust-payments/v2/payments/([0-9]+)/start"
    }
}

public open class PaymentMethodsRequest(user: OAuthUserAccount, merchant: String): BaseTrustRequest(user, merchant) {
    open override fun method(): NetworkMethod {
        return NetworkMethod.`get`
    }

    open override fun targetPath(): String {
        return "trust-payments/v2/payment-methods"
    }

    open override fun params(): NetworkParams {
        return super.params()
    }

    open override fun encoding(): RequestEncoding {
        return UrlRequestEncoding()
    }

}

