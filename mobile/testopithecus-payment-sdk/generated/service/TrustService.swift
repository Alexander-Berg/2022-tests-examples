// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM service/trust-service.ts >>>

import Foundation

open class TrustService {
  private let networkService: NetworkService
  public init(_ networkService: NetworkService) {
    self.networkService = networkService
  }

  @discardableResult
  open class func create(_ network: Network, _ serializer: JSONSerializer, _ passportToken: String!) -> TrustService {
    let passportInterceptor = PassportHeaderInterceptor(passportToken)
    let authorizedNetwork = NetworkIntermediate(network, YSArray(passportInterceptor))
    let errorProcessor = DiehardBackendErrorProcessor()
    let networkService = NetworkService(authorizedNetwork, serializer, errorProcessor)
    return TrustService(networkService)
  }

  @discardableResult
  open func createPurchase(_ user: OAuthUserAccount, _ merchant: String, _ product: String, _ force3ds: Bool, _ amount: String, _ forceCvv: Bool) -> XPromise<Purchase> {
    return self.networkService.performRequest(CreateOrderRequest(user, merchant, product), {
      (item) in
      decodeJSONItem(item, {
        (json) in
        let map = (try json.tryCastAsMapJSONItem())
        return (try map.tryGetString("order_id"))
      })
    }).flatThen({
      (orderId) in
      self.networkService.performRequest(CreatePurchaseRequest(user, merchant, orderId, force3ds, amount, forceCvv), {
        (item) in
        decodeJSONItem(item, {
          (json) in
          let map = (try json.tryCastAsMapJSONItem())
          let purchaseToken = (try map.tryGetString("purchase_token"))
          return Purchase(orderId, purchaseToken)
        })
      })
    })
  }

  @discardableResult
  open func startPurchase(_ user: OAuthUserAccount, _ merchant: String, _ purchaseId: String) -> XPromise<Void> {
    return self.networkService.performRequest(StartPurchaseRequest(user, merchant, purchaseId), {
      (item) in
      decodeJSONItem(item, {
        (json) in
        let status: String! = (try json.tryCastAsMapJSONItem()).getString("status")
        if status != "success" {
          throw YSError("Unable to start purchase")
        }
      })
    })
  }

}

open class Purchase {
  public let orderId: String
  public let purchaseId: String
  public init(_ orderId: String, _ purchaseId: String) {
    self.orderId = orderId
    self.purchaseId = purchaseId
  }

}

