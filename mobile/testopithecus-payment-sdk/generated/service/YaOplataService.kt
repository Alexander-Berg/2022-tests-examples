// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM service/ya-oplata-service.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public typealias PayToken = String

public open class YaOplataService(private val networkService: NetworkService) {
    open fun createOrder(acquirerToken: String, amount: String): XPromise<PayToken> {
        return this.networkService.performRequest(YaOplataCreateOrderRequest(acquirerToken, amount),  {
            item ->
            decodeJSONItem(item, __LBL__YaOplataService_1@ {
                json ->
                val map = json.tryCastAsMapJSONItem()
                val data = map.tryGet("data").tryCastAsMapJSONItem()
                return@__LBL__YaOplataService_1 data.tryGetString("pay_token")
            })
        })
    }

    companion object {
        @JvmStatic
        open fun create(network: Network, serializer: JSONSerializer): YaOplataService {
            val errorProcessor = YaOplataBackendErrorProcessor()
            val networkService = NetworkService(network, serializer, errorProcessor)
            return YaOplataService(networkService)
        }

    }
}

public open class YaOplataBackendErrorProcessor: NetworkServiceErrorProcessor {
    open override fun extractError(errorBody: JSONItem, code: Int): NetworkServiceError? {
        val errorResponse = YaOplataErrorResponse.fromJsonItem(errorBody)
        if (errorResponse.isError()) {
            return null
        }
        return YaOplataBackendError(errorResponse.getValue())
    }

    open override fun validateResponse(body: JSONItem): NetworkServiceError? {
        return null
    }

    open override fun wrapError(error: NetworkServiceError): NetworkServiceError {
        return error
    }

}

public open class YaOplataBackendError(val error: YaOplataErrorResponse): NetworkServiceError(mobileBackendStatusToKind(error.code), ExternalErrorTrigger.internal_sdk, error.code, "Ya Payment Backend Error: code - ${error.code}, status - ${error.status} : ${error.message ?: "empty message"}") {
    open override fun convertToExternalError(): ExternalError {
        return ExternalError(this.kind, this.trigger, this.code, this.error.status, this.message)
    }

}

public open class YaOplataErrorResponse(val status: String, val code: Int, val message: String?) {
    companion object {
        @JvmStatic
        open fun fromJsonItem(item: JSONItem): Result<YaOplataErrorResponse> {
            return decodeJSONItem(item, __LBL__YaOplataService_2@ {
                json ->
                val map = json.tryCastAsMapJSONItem()
                val status = map.tryGetString("status")
                val code = map.tryGetInt32("code")
                val data = map.`get`("data") as MapJSONItem
                val message = data.getString("message")
                return@__LBL__YaOplataService_2 YaOplataErrorResponse(status, code, message)
            })
        }

    }
}

