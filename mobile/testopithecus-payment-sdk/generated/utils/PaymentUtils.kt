// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM utils/payment-utils.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public fun normalizeCardNumber(cardNumber: String): String {
    return cardNumber.split("").filter( {
        item ->
        isCharDigit(item)
    }).joinToString("")
}

public fun formatCvv(cvv: String?): String {
    if (cvv == null) {
        return ""
    }
    var formattedCvv = ""
    val cvvList = cvv.split("").filter( {
        item ->
        isCharDigit(item) || item == "•"
    }).slice(0, 3)
    for (`_` in cvvList) {
        formattedCvv += "•"
    }
    return formattedCvv
}

public fun isCharDigit(str: String): Boolean {
    return mutableListOf("0", "1", "2", "3", "4", "5", "6", "7", "8", "9").contains(str)
}

public fun normalizeExpirationDate(expirationDate: String): String {
    return expirationDate.split("").filter( {
        item ->
        isCharDigit(item)
    }).joinToString("")
}

public fun buildPaymentMethodNameByCardNumber(cardNumber: String): String {
    val system = CardPaymentSystemChecker.instance.lookup(cardNumber)
    return "${if (system != CardPaymentSystem.UNKNOWN) system.toString() else ""}  •••• ${cardNumber.slice(-4)}"
}

public fun buildPaymentMethodNameByPaymentMethod(paymentMethod: PaymentMethod): String {
    val prefix = if (paymentMethod.familyInfo != null) PaymentMethodName.familyPayPrefix else paymentMethod.system
    return "${prefix}  •••• ${paymentMethod.account.slice(-4)}"
}

public open class PaymentSdkConstants {
    companion object {
        @JvmStatic val SCREEN_APPEARANCE_TIMEOUT: Int = 20000
    }
}

