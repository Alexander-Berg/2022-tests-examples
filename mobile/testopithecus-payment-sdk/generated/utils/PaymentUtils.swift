// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM utils/payment-utils.ts >>>

import Foundation

@discardableResult
public func normalizeCardNumber(_ cardNumber: String) -> String {
  return cardNumber.split("").filter({
    (item) in
    isCharDigit(item)
  }).join("")
}

@discardableResult
public func formatCvv(_ cvv: String!) -> String {
  if cvv == nil {
    return ""
  }
  var formattedCvv = ""
  let cvvList = cvv.split("").filter({
    (item) in
    isCharDigit(item) || item == "•"
  }).slice(0, 3)
  for `_` in cvvList {
    formattedCvv += "•"
  }
  return formattedCvv
}

@discardableResult
public func isCharDigit(_ str: String) -> Bool {
  return YSArray("0", "1", "2", "3", "4", "5", "6", "7", "8", "9").includes(str)
}

@discardableResult
public func normalizeExpirationDate(_ expirationDate: String) -> String {
  return expirationDate.split("").filter({
    (item) in
    isCharDigit(item)
  }).join("")
}

@discardableResult
public func buildPaymentMethodNameByCardNumber(_ cardNumber: String) -> String {
  let system = CardPaymentSystemChecker.instance.lookup(cardNumber)
  return "\(system != CardPaymentSystem.UNKNOWN ? system.toString() : "")  •••• \(cardNumber.slice(-4))"
}

@discardableResult
public func buildPaymentMethodNameByPaymentMethod(_ paymentMethod: PaymentMethod) -> String {
  let `prefix` = paymentMethod.familyInfo != nil ? PaymentMethodName.familyPayPrefix : paymentMethod.system
  return "\(`prefix`)  •••• \(paymentMethod.account.slice(-4))"
}

open class PaymentSdkConstants {
  public static let SCREEN_APPEARANCE_TIMEOUT: Int32 = 20000
}

