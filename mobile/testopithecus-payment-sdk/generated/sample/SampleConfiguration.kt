// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM sample/sample-configuration.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class SampleConfiguration(private val paymentDataPreparer: PaymentDataPreparer, private val userService: PaymentUserService) {
    private var authorizationMode: AuthorizationMode = AuthorizationMode.authorized
    private var providedAccount: OAuthUserAccount? = null
    private var boundCardsCount: Int = 1
    open fun setBoundCardsCount(count: Int): SampleConfiguration {
        this.boundCardsCount = count
        return this
    }

    open fun setAuthorizationMode(mode: AuthorizationMode): SampleConfiguration {
        this.authorizationMode = mode
        return this
    }

    open fun setProvidedAccount(providedAccount: OAuthUserAccount): SampleConfiguration {
        this.providedAccount = providedAccount
        return this
    }

    open fun configuration(): XPromise<PaymentConfig> {
        var userAccount: OAuthUserAccount?
        try {
            userAccount = this.getUserAccount()
        } catch (e: RuntimeException) {
            return reject(YSError("Unable to get authorized user, error ${extractErrorMessage(e)}"))
        }
        if (userAccount == null) {
            return reject(YSError("Unable to get authorized user, account is null"))
        }
        this.paymentDataPreparer.setMerchantId(SampleConfiguration.SERVICE_TOKEN)
        this.paymentDataPreparer.clearBoundCards()
        for (`_` in (0 until this.boundCardsCount step 1)) {
            this.paymentDataPreparer.addBoundCard(BoundCard.generated())
        }
        return this.paymentDataPreparer.prepare(userAccount).then( {
            _ ->
            PaymentConfig(Payer(userAccount!!.oauthToken, userAccount!!.account.uid, userAccount!!.account.login + "@yandex.ru"), Merchant(this.paymentDataPreparer.getMerchantId(), this.paymentDataPreparer.merchantLocalizedName), this.paymentDataPreparer.getPaymentId(), this.paymentDataPreparer.getOrderId())
        })
    }

    open fun setMockBank(bank: BankName): XPromise<Boolean> {
        return this.paymentDataPreparer.mockPrepareService.setMockBank(bank)
    }

    open fun setMockFamilyInfoMode(mode: FamilyInfoMode): XPromise<Boolean> {
        return this.paymentDataPreparer.mockPrepareService.setMockFamilyInfoMode(mode)
    }

    open fun useYaOplata(use: Boolean): Unit {
        this.paymentDataPreparer.setUseYaOplata(use)
        this.paymentDataPreparer.setAcquirer(if (use) Acquirer.kassa else null)
    }

    private fun getUserAccount(): OAuthUserAccount? {
        when (this.authorizationMode) {
            AuthorizationMode.authorized -> {
                return this.userService.getAuthorizedUser()
            }
            AuthorizationMode.nonauthorized -> {
                val account = UserAccount(SampleConfiguration.ANY_EMAIL, "", "")
                return OAuthUserAccount(account, null, AccountType2.YandexTest)
            }
            AuthorizationMode.provided -> {
                return this.providedAccount
            }
        }
    }

    companion object {
        @JvmStatic var SERVICE_TOKEN: String = "payment_sdk_19d9962ddd08e7d52a2668cbcd5f7b7e"
        @JvmStatic var ANY_EMAIL: String = "test.account@ya.ru"
        @JvmStatic var ANY_3DS_CODE: String = "123"
        @JvmStatic
        open fun build(trustNetwork: Network, yaOplataNetwork: Network, diehardNetwork: Network, mobileBackendNetwork: Network, syncNetwork: SyncNetwork, jsonSerializer: JSONSerializer, passportToken: String?, tusConsumer: String, forcedAuthHost: String? = null, forced3ds: Boolean = false): SampleConfiguration {
            val trustService = TrustService.create(trustNetwork, jsonSerializer, passportToken)
            val yaOplataService = YaOplataService.create(yaOplataNetwork, jsonSerializer)
            val userService = PaymentUserService.build(diehardNetwork, mobileBackendNetwork, syncNetwork, jsonSerializer, passportToken, tusConsumer, forcedAuthHost)
            val mockPrepareService = MockPrepareService.create(trustNetwork, jsonSerializer)
            val paymentDataPreparer = PaymentDataPreparer(trustService, userService, yaOplataService, mockPrepareService)
            if (forced3ds) {
                paymentDataPreparer.set3ds(SampleConfiguration.ANY_3DS_CODE)
            }
            return SampleConfiguration(paymentDataPreparer, userService)
        }

    }
}

public enum class AuthorizationMode {
    authorized,
    nonauthorized,
    provided,
}
