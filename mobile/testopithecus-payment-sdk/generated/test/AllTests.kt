// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/all-tests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class AllPaymentSdkTests {
    companion object {
        @JvmStatic val `get`: TestsRegistry<PaymentDataPreparer> = TestsRegistry<PaymentDataPreparer>().regular(PayWithNewCardWithoutSavingTest()).regular(DisablePayButtonTest()).regular(PayWithNewCardWithSavingTest()).regular(NewCardFieldsValidatorTest()).regular(NewCardFieldsNumericKeyboardTest()).regular(PasteValuesToNewCardFieldsTest()).regular(PayWithNewCardNotEnoughFundsTest()).regular(ValidatePaymentMethodsAndNewCardInLandscapeTest()).regular(PaymentMethodCvvFieldNumericKeyboardTest()).regular(PayWithExistingMethodInvalid3dsTest()).regular(PayWithExistingMethodCVVTest()).regular(PayWithExistingMethod3DSCVVTest()).regular(PaymentMethodEmptyCardListTest()).regular(CheckCvvFieldTest()).regular(CheckExpirationDateFieldTest()).regular(FillAllFieldsAndRotateTest()).regular(RotateAfterSelectPaymentMethodTest()).regular(NonAuthorizedPayWithNewCardTest()).regular(MinimizeKeyboardAfterTapOnCvvFieldTest()).regular(CorrectCardNumberIncorrectDateAndCvvTest()).regular(ValidateBigPaymentMethodsListTest()).regular(PayWithExistingMethod3DSTest()).regular(PayWithExistingMethodTest()).regular(BindCardsAndCheckPaymentMethodsListTest()).regular(BindCardWithValidationTest()).regular(PreselectPayWithExistingCardTest()).regular(PreselectPayWithExistingCardCVVTest()).regular(PreselectPayWithExistingCardCVV3DSTest()).regular(PreselectUnbindCardTest()).regular(PreselectPayWithCardNotEnoughFundsTest()).regular(PreselectPayWithCashTest()).regular(PreselectPayWithNewCardCVVTest()).regular(PreselectPayWithNewCardTest()).regular(LicenseAgreementPayWithNewCardTest()).regular(LicenseAgreementExistingPaymentMethodsTest()).regular(LicenseAgreementPayWithNewCardNoAcquirerTest()).regular(LicenseAgreementBindCardTest()).regular(LicenseAgreementPayWithExistingMethodsNoAcquirerTest()).regular(LicenseAgreementPreselectPayWithExistingCardCVVTest()).regular(LicenseAgreementPreselectPayWithExistingCardCVVNoAcquirerTest()).regular(LicenseAgreementOpenTest()).regular(NewCardTapBackTest()).regular(NewCardAutomaticallyFocusNumberFieldTest()).regular(PayWithExistingMethodClose3DSPageTest()).regular(BindCardWithValidationFailedTest()).regular(CheckCardNumberFieldTest()).regular(PayWithSbpMethodTest()).regular(TrySelectDifferentBanksForSbpMethodTest()).regular(FamilyPayCheckUnbindButtonForOneCard()).regular(FamilyPayCheckUnbindButtonForSeveralCards())
    }
}

public enum class TestScenario(val value: String) {
    existingPaymentMethods("[Existing payment methods]"),
    newCard("[New card]"),
    nonAuthorized("[Non authorized]"),
    cardBinding("[Card binding]"),
    preselect("[Preselect]"),
    licenseAgreement("[License agreement]"),
    ;
    override fun toString(): String = value
}
