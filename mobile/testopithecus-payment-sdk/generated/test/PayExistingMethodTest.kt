// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/pay-existing-method-test.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PayWithExistingMethod3DSCVVTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods}  Test pay with existing payment method (3ds + cvv)") {
    private var card: BoundCard = BoundCard.generated()
    private var code3ds: String = "200"
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(39)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).set3ds(this.code3ds).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class PayWithExistingMethod3DSTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods}  Test pay with existing payment method (3ds)") {
    private var card: BoundCard = BoundCard.generated()
    private var code3ds: String = "200"
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(40)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).set3ds(this.code3ds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class PayWithExistingMethodCVVTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test pay with existing payment method (cvv)") {
    private var card: BoundCard = BoundCard.generated()
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(41)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction())
    }

}

public open class PayWithExistingMethodTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test pay with existing payment method") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(42)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction())
    }

}

public open class PayWithSbpMethodTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test pay with sbp payment method") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(103)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectSbpMethodAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(ApproveSbpPurchaseAction())
    }

}

public open class TrySelectDifferentBanksForSbpMethodTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test bank selection for sbp") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(103)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectSbpMethodAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(SelectAnotherBankAction()).then(AssertAction()).then(SearchQueryActionBankAction("OLOLO")).then(AssertAction()).then(SearchQueryActionBankAction("asdasd")).then(AssertAction()).then(SearchQueryActionBankAction("")).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(ApproveSbpPurchaseAction())
    }

}

public open class PayWithExistingMethodInvalidCvvTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test pay with existing payment method (invalid cvv)") {
    private var card: BoundCard = BoundCard.generated()
    private var code3ds: String = "200"
    private var forceCvv: Boolean = true
    private var cvv: String = "567"
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(44)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv).set3ds(this.code3ds).setCvv(this.cvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(SelectPaymentMethodAction(0)).then(EnterCvvForSelectPaymentMethodAction(this.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class PayWithExistingMethodInvalid3dsTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test pay with existing payment method (invalid 3ds)") {
    private var card: BoundCard = BoundCard.generated()
    private var code3ds: String = "400"
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(62)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv).set3ds(this.code3ds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class PaymentMethodCvvFieldNumericKeyboardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test opening of the numeric keyboard after tap on cvv field") {
    private var card: BoundCard = BoundCard.generated()
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(51)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(TapOnCvvFieldOfSelectPaymentMethodAction())
    }

}

public open class PaymentMethodEmptyCardListTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Test opening new card screen if payment method list is empty") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(1)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class RotateAfterSelectPaymentMethodTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Rotate after select payment method") {
    private var masterCard1: BoundCard = BoundCard.generated()
    private var masterCard2: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(46)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.masterCard1).addBoundCard(this.masterCard2)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(1)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(RotateDeviceAction(DeviceOrientation.landscape))
    }

}

public open class MinimizeKeyboardAfterTapOnCvvFieldTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Minimize keyboard after tap on cvv field") {
    private var card: BoundCard = BoundCard.generated()
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(53).ignoreOn(MBTPlatform.IOS)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(MinimizeKeyboardAction())
    }

}

public open class ValidateBigPaymentMethodsListTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods} Validate big payment methods list") {
    private var card1: BoundCard = BoundCard.generated()
    private var card2: BoundCard = BoundCard.generated()
    private var card3: BoundCard = BoundCard.generated()
    private var card4: BoundCard = BoundCard.generated()
    private var card5: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(67)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card1).addBoundCard(this.card2).addBoundCard(this.card3).addBoundCard(this.card4).addBoundCard(this.card5)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(1)).then(SetPaymentButtonStatusAction(true))
    }

}

public open class PayWithExistingMethodClose3DSPageTest(): MBTTest<PaymentDataPreparer>("${TestScenario.existingPaymentMethods}  Close 3ds page") {
    private var card: BoundCard = BoundCard.generated()
    private var code3ds: String = "200"
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(88).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).set3ds(this.code3ds).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Close3dsAction())
    }

}

