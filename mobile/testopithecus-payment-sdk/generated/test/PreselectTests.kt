// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/preselect-tests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PreselectPayWithExistingCardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with existing card") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(74)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(PressSelectButtonAction())
    }

}

public open class PreselectPayWithExistingCardCVVTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with existing card (cvv)") {
    private var forceCvv: Boolean = true
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(75)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction())
    }

}

public open class PreselectPayWithExistingCardCVV3DSTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with existing card (cvv + 3ds)") {
    private var code3ds: String = "200"
    private var forceCvv: Boolean = true
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(77)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv).set3ds(this.code3ds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class PreselectPayWithCashTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with cash") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(82)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].enableCash().addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(TapOnCashPaymentMethodAction()).then(SetPaymentButtonStatusAction(true)).then(PressSelectButtonAction())
    }

}

public open class PreselectPayWithCardNotEnoughFundsTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with card with not enough funds") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(78)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).forcePaymentError(PaymentErrorType.notEnoughFunds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressSelectButtonAction())
    }

}

public open class PreselectUnbindCardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Unbind card") {
    private var card1: BoundCard = BoundCard.generated()
    private var card2: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(84)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card1).addBoundCard(this.card2)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(TapOnEditButtonAction()).then(AssertAction()).then(UnbindCardAction(0)).then(AssertAction()).then(TapOnDoneButtonAction())
    }

}

public open class PreselectPayWithNewCardCVVTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with new card (cvv)") {
    private var card: BoundCard = BoundCard.generated()
    private var forceCvv: Boolean = true
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(86)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setForceCvv(this.forceCvv).setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(this.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PreselectTapOnAddCardAction()).then(AssertAction()).then(PreselectEnter3dsAction()).then(AssertAction()).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(EnterCvvForSelectPaymentMethodAction(this.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction())
    }

}

public open class PreselectPayWithNewCardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.preselect} Pay with new card") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(87)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(this.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PreselectTapOnAddCardAction()).then(PreselectEnter3dsAction()).then(AssertAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressSelectButtonAction())
    }

}

