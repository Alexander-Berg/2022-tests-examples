// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/card-binding-tests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class BindCardsAndCheckPaymentMethodsListTest(): MBTTest<PaymentDataPreparer>("${TestScenario.cardBinding} Bind cards and check payment methods list") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(3)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(SpecificCards.masterCard, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(SpecificCards.visa, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(SpecificCards.mir, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class BindCardWithValidationTest(): MBTTest<PaymentDataPreparer>("${TestScenario.cardBinding} Bind card with validation") {
    private var code3ds: String = "200"
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(73)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setBindingV2(true).set3ds(this.code3ds).setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(this.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds)).then(ClosePaymentResultScreenAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class BindCardWithValidationFailedTest(): MBTTest<PaymentDataPreparer>("${TestScenario.cardBinding} Bind card with validation failed") {
    private var code3ds: String = "400"
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(90)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setBindingV2(true).set3ds(this.code3ds).setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(this.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds)).then(SetPaymentButtonStatusAction(false)).then(ClosePaymentResultScreenAction()).then(AssertAction()).then(StartRegularPaymentProcessAction())
    }

}

