// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/license-agreement-tests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class LicenseAgreementPayWithNewCardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is shown on the Pay with new card screen") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(91)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setUseYaOplata(true).setAcquirer(Acquirer.kassa).setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class LicenseAgreementExistingPaymentMethodsTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is shown on the Payment methods screen") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(92)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setUseYaOplata(true).setAcquirer(Acquirer.kassa).addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class LicenseAgreementPayWithNewCardNoAcquirerTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is not shown on the Pay with new card screen") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(94)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class LicenseAgreementBindCardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is not shown on the Bind screen") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(95)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setUseYaOplata(true).setAcquirer(Acquirer.kassa)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction())
    }

}

public open class LicenseAgreementPayWithExistingMethodsNoAcquirerTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is not shown on the Payment methods screen") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(97)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class LicenseAgreementPreselectPayWithExistingCardCVVTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is shown on the Preselect screen") {
    private var forceCvv: Boolean = true
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(98)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setUseYaOplata(true).setAcquirer(Acquirer.kassa).addBoundCard(this.card).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false))
    }

}

public open class LicenseAgreementPreselectPayWithExistingCardCVVNoAcquirerTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} License agreement is not shown on the Preselect screen") {
    private var forceCvv: Boolean = true
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(100)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).setForceCvv(this.forceCvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false))
    }

}

public open class LicenseAgreementOpenTest(): MBTTest<PaymentDataPreparer>("${TestScenario.licenseAgreement} Open license agreement screen") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(101)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setUseYaOplata(true).setAcquirer(Acquirer.kassa).addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(OpenFullLicenseAgreementAction()).then(AssertAction()).then(CloseFullLicenseAgreementAction())
    }

}

