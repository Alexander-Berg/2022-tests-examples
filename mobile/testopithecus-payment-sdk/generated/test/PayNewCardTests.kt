// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/pay-new-card-tests.ts >>>

package com.yandex.xplat.testopithecus.payment.sdk

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.testopithecus.common.*
import com.yandex.xplat.payment.sdk.*

public open class PayWithNewCardWithoutSavingTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Pay with new card without saving") {
    private var code3ds: String = "200"
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(2)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false)).set3ds(this.code3ds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(this.card, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class DisablePayButtonTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Pay button disabling if not all required fields are filled") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(4)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cardNumber, this.card.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${this.card.expirationMonth}${this.card.expirationYear}")).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "")).then(TapAndFillNewCardFieldAction(NewCardField.cvv, this.card.cvv))
    }

}

public open class PayWithNewCardWithSavingTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Pay with new card with saving") {
    private var code3ds: String = "200"
    private var card: BoundCard = BoundCard.generated()
    private var newCard: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(15)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).set3ds(this.code3ds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(FillNewCardDataAction(this.newCard, true)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(this.code3ds)).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(AssertAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class PasteValuesToNewCardFieldsTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Paste values into new card fields") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(66)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapAndPasteNewCardFieldAction(NewCardField.cardNumber, this.card.cardNumber)).then(TapAndPasteNewCardFieldAction(NewCardField.expirationDate, "${this.card.expirationMonth}${this.card.expirationYear}")).then(TapAndPasteNewCardFieldAction(NewCardField.cvv, this.card.cvv)).then(SetPaymentButtonStatusAction(true))
    }

}

public open class NewCardFieldsValidatorTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Validate new card fields") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(8)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, "123")).then(TapOnNewCardFieldAction(NewCardField.expirationDate)).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.expirationDate, "123")).then(TapOnNewCardFieldAction(NewCardField.cvv)).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cvv, "1")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cardNumber, this.card.cardNumber))
    }

}

public open class NewCardFieldsNumericKeyboardTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Test opening of the numeric keyboard after tap on the field") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(58)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.expirationDate)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cvv))
    }

}

public open class PayWithNewCardNotEnoughFundsTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Pay with new card with not enough funds") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(61)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).forcePaymentError(PaymentErrorType.notEnoughFunds)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(FillNewCardDataAction(this.card, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction())
    }

}

public open class ValidatePaymentMethodsAndNewCardInLandscapeTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Validate payment methods view and new card view in landscape") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(65)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(RotateDeviceAction(DeviceOrientation.landscape)).then(ClickNewCardPaymentMethodAction()).then(MinimizeKeyboardAction()).then(AssertAction()).then(TapOnNewCardBackButtonAction())
    }

}

public open class NewCardIncorrectCvvTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Enter incorrect cvv") {
    private var card: BoundCard = BoundCard.generated()
    private var code3ds: String = "200"
    private var cvv: String = "456"
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(59)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card).set3ds(this.code3ds).setCvv(this.cvv)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(ClickNewCardPaymentMethodAction()).then(TapAndFillNewCardFieldAction(NewCardField.cardNumber, this.card.cardNumber)).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${this.card.expirationMonth}${this.card.expirationYear}")).then(TapAndFillNewCardFieldAction(NewCardField.cvv, this.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(Enter3dsAction(this.code3ds))
    }

}

public open class CheckExpirationDateFieldTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Check expiration date field") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(60)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${CardGenerator.generateExpirationDate(ExpirationDateType.previousMonth)}")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${CardGenerator.generateExpirationDate(ExpirationDateType.currentMonthAndYear)}")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${CardGenerator.generateExpirationDate(ExpirationDateType.date50YearsInFuture)}")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${CardGenerator.generateExpirationDate(ExpirationDateType.dateMore50YearsInFuture)}")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "${CardGenerator.generateExpirationDate(ExpirationDateType.nonExistentMonth)}")).then(TapOnNewCardFieldAction(NewCardField.cardNumber))
    }

}

public open class CheckCvvFieldTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Check cvv field") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(64)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "1")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "12")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "123")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "1234")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "")).then(PasteNewCardFieldAction(NewCardField.cvv, "!qπ")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "")).then(PasteNewCardFieldAction(NewCardField.cvv, "https://yandex.ru")).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "")).then(PasteNewCardFieldAction(NewCardField.cvv, "3456"))
    }

}

public open class CheckCardNumberFieldTest(): MBTTest<PaymentDataPreparer>("${TestScenario.cardBinding} Check card number field") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(5)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, "!@#$")).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cardNumber, "sadfdsf")).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cardNumber, "s#1234")).then(TapOnNewCardFieldAction(NewCardField.cvv)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, "1234123412341234")).then(TapOnNewCardFieldAction(NewCardField.cvv)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, SpecificCards.visa.cardNumber)).then(TapOnNewCardFieldAction(NewCardField.cvv))
    }

}

public open class FillAllFieldsAndRotateTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Fill all fields and rotate") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(16)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(this.card, true)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(RotateDeviceAction(DeviceOrientation.landscape))
    }

}

public open class PaymentSystemTypeTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Check payment system type icon") {
    private var masterCard: BoundCard = BoundCard.generated(CardPaymentSystem.MasterCard)
    private var maestro: BoundCard = BoundCard.generated(CardPaymentSystem.Maestro)
    private var mir: BoundCard = BoundCard.generated(CardPaymentSystem.MIR)
    private var visa: BoundCard = BoundCard.generated(CardPaymentSystem.VISA)
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(43)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.masterCard).addBoundCard(this.maestro).addBoundCard(this.mir).addBoundCard(this.visa).setDarkMode(true)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
    }

}

public open class CorrectCardNumberIncorrectDateAndCvvTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Correct card number, incorrect expiration date and cvv") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(9)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cardNumber, this.card.cardNumber)).then(TapAndFillNewCardFieldAction(NewCardField.cvv, this.card.cvv)).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, CardGenerator.generateExpirationDate(ExpirationDateType.nonExistentMonth)))
    }

}

public open class NewCardTapBackTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Returning from the NewCard screen") {
    private var card: BoundCard = BoundCard.generated()
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(89)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].addBoundCard(this.card)
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapOnNewCardBackButtonAction())
    }

}

public open class NewCardAutomaticallyFocusNumberFieldTest(): MBTTest<PaymentDataPreparer>("${TestScenario.newCard} Automatically focus card number field") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.commonCase(109)
    }

    open override fun prepareAccounts(preparers: YSArray<PaymentDataPreparer>): Unit {
        preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
    }

    open override fun requiredAccounts(): YSArray<AccountType2> {
        return mutableListOf(AccountType2.YandexTest)
    }

    open override fun scenario(accounts: YSArray<UserAccount>, model: AppModel?, supportedFeatures: YSArray<FeatureID>): TestPlan {
        return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction())
    }

}

