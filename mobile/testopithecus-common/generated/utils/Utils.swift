// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM utils/utils.ts >>>

import Foundation

@discardableResult
public func filterByOrders<T>(_ array: YSArray<T>, _ byOrders: YSSet<Int32>) -> YSArray<T> {
  let result: YSArray<T> = YSArray()
  for i in byOrders.values() {
    result.push(array[i])
  }
  return result
}

@discardableResult
public func valuesArray<K, V>(_ iterable: YSMap<K, V>) -> YSArray<V> {
  let result: YSArray<V> = YSArray()
  for element in iterable.values() {
    result.push(element)
  }
  return result
}

@discardableResult
public func keysArray<K, V>(_ iterable: YSMap<K, V>) -> YSArray<K> {
  let result: YSArray<K> = YSArray()
  for element in iterable.keys() {
    result.push(element)
  }
  return result
}

@discardableResult
public func currentTimeMs() -> Int64 {
  return int64(YSDate.now())
}

@discardableResult
public func copyArray<T>(_ array: YSArray<T>) -> YSArray<T> {
  let result: YSArray<T> = YSArray()
  for element in array {
    result.push(element)
  }
  return result
}

@discardableResult
public func copySet<T>(_ `set`: YSSet<T>) -> YSSet<T> {
  let result: YSSet<T> = YSSet<T>()
  for element in `set`.values() {
    result.add(element)
  }
  return result
}

@discardableResult
public func copyMap<T, S>(_ map: YSMap<T, S>) -> YSMap<T, S> {
  let result: YSMap<T, S> = YSMap<T, S>()
  map.__forEach({
    (value, key) in
    result.set(key, value)
  })
  return result
}

@discardableResult
public func requireNonNull<T>(_ obj: T!, _ message: String) -> T {
  if obj == nil {
    fail(message)
  }
  return obj!
}

@discardableResult
public func getSliceIndexesForBuckets(_ total: Int32, _ bucketsTotal: Int32) -> YSArray<Int32> {
  let buckets: YSArray<Int32> = YSArray()
  let bucketsSliceStartIndexes: YSArray<Int32> = YSArray()
  let remainder: Int32 = total % bucketsTotal
  let intPart: Int32 = (total - remainder) / bucketsTotal
  var currentBucketStartIndex: Int32 = 0
  for `_` in stride(from: 0, to: bucketsTotal, by: 1) {
    buckets.push(intPart)
  }
  for i in stride(from: 0, to: remainder, by: 1) {
    buckets[i] += 1
  }
  for i in stride(from: 0, to: bucketsTotal, by: 1) {
    bucketsSliceStartIndexes.push(currentBucketStartIndex)
    currentBucketStartIndex += buckets[i]
  }
  bucketsSliceStartIndexes.push(currentBucketStartIndex)
  Log.info("All buckets distribution \(buckets)")
  Log.info("All buckets slice start indexes \(bucketsSliceStartIndexes)")
  return bucketsSliceStartIndexes
}

open class TestopithecusConstants {
  public static let SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE: String = "Ignore this param. This is a workaround for constructor override bug in our Swift Generator. See: https://st.yandex-team.ru/SSP-156"
}

@discardableResult
public func getTrustedCases(_ platform: MBTPlatform, _ testPalmToken: String, _ network: SyncNetwork, _ jsonSerializer: JSONSerializer) throws -> YSArray<Int32> {
  let ids: YSArray<Int32> = YSArray()
  if testPalmToken == "" {
    Log.info("No token for testpalm! Can't get trusted tests!")
    return YSArray()
  }
  let response: String = (try network.syncExecuteWithRetries(3, "https://testpalm-api.yandex-team.ru", TestpalmTrustedNetworkRequest(platform), testPalmToken).tryGetValue())
  let json: ArrayJSONItem = jsonSerializer.deserialize(response).getValue() as! ArrayJSONItem
  json.asArray().forEach({
    (tpCase) in
    let id: Int32! = (tpCase as! MapJSONItem).getInt32("id")
    if id != nil {
      ids.push(id)
    }
  })
  return ids
}

@discardableResult
public func extractErrorMessage(_ e: Any) -> String {
  return e is YSError ? (e as! YSError).message : "\(e)"
}

@discardableResult
public func getYSError(_ e: Any) -> YSError {
  return e is YSError ? (e as! YSError) : YSError("\(e)")
}

