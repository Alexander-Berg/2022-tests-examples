// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mbt/walk/hash/hash-builder.ts >>>

import Foundation

open class HashBuilder {
  private static var mod: Int64 = stringToInt64("1125899839733759")!
  private static var multiplier: Int64 = int64(63)
  private var hash: Int64 = int64(0)
  @discardableResult
  private class func getHashOfString(_ str: String) -> Int64 {
    var hash: Int64 = int64(0)
    let multiplier: Int64 = int64(257)
    for i in stride(from: 0 as! Int32, to: str.length, by: 1) {
      let ch = str.charCodeAt(i)
      hash = (hash * multiplier + int64(ch)) % self.mod
    }
    return hash
  }

  @discardableResult
  open func addInt64(_ n: Int64) -> HashBuilder {
    self.hash = (self.hash * HashBuilder.multiplier + n) % HashBuilder.mod
    return self
  }

  @discardableResult
  open func addInt(_ n: Int32) -> HashBuilder {
    return self.addInt64(int64(n))
  }

  @discardableResult
  open func addBoolean(_ condition: Bool) -> HashBuilder {
    return self.addInt64(int64(condition ? 1 : 0))
  }

  @discardableResult
  open func addString(_ str: String) -> HashBuilder {
    return self.addInt64(HashBuilder.getHashOfString(str))
  }

  @discardableResult
  open func build() -> Int64 {
    return self.hash
  }

}

