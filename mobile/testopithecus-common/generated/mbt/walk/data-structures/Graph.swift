// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mbt/walk/data-structures/graph.ts >>>

import Foundation

open class CompressedGraph<EdgeType> {
  public var adjList: YSArray<YSArray<Int32>> = YSArray()
  public var edges: YSArray<Edge<Int32, EdgeType>> = YSArray()
  open func addEdge(_ from: Int32, _ to: Int32, _ action: EdgeType) -> Void {
    while self.adjList.length <= from || self.adjList.length <= to {
      self.adjList.push(YSArray())
    }
    self.adjList[from].push(self.edges.length)
    self.edges.push(Edge(from, to, action))
  }

  @discardableResult
  open func getDegree(_ vertex: Int32) -> Int32 {
    return self.adjList.length > vertex ? self.adjList[vertex].length : 0
  }

  @discardableResult
  open func size() -> Int32 {
    return self.adjList.length
  }

  @discardableResult
  open func countOfEdges() -> Int32 {
    return self.edges.length
  }

  @discardableResult
  open func getEdgesId(_ vertex: Int32) -> YSArray<Int32> {
    while self.adjList.length <= vertex {
      self.adjList.push(YSArray())
    }
    return self.adjList[vertex]
  }

}

open class Graph<EdgeType>: CompressedGraph<EdgeType> {
  private var vertexToId: YSMap<Int64, Int32> = YSMap<Int64, Int32>()
  open func addVertex(_ vertex: Int64) -> Void {
    if !self.vertexToId.has(vertex) {
      self.vertexToId.set(vertex, self.vertexToId.size)
    }
  }

  open func addEdgeVV(_ from: Int64, _ to: Int64, _ action: EdgeType) -> Void {
    self.addVertex(from)
    self.addVertex(to)
    super.addEdge(self.vertexToId.`get`(from)!, self.vertexToId.`get`(to)!, action)
  }

  @discardableResult
  open func getDegreeV(_ vertex: Int64) -> Int32 {
    return super.getDegree(self.vertexToId.`get`(vertex)!)
  }

  open func print(_ logger: Logger) -> Void {
    logger.info("digraph g {")
    logger.info("}")
  }

}

