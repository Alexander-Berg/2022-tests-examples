// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mbt/base-simple-action.ts >>>

import Foundation

open class BaseSimpleAction<F, C>: MBTAction {
  private var type: MBTActionType
  public init(_ type: MBTActionType) {
    self.type = type
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFearures: YSArray<FeatureID>) -> Bool {
    return self.requiredFeature().includedAll(modelFeatures, applicationFearures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let featuredModel = self.requiredFeature().forceCast(model)
    return (try self.canBePerformedImpl(featuredModel))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let currentComponent = history.currentComponent
    let modelFeature: F = self.requiredFeature().forceCast(model)
    let applicationFeature: F = self.requiredFeature().forceCast(application)
    let component = currentComponent as! C
    (try self.performImpl(modelFeature, component))
    return (try self.performImpl(applicationFeature, component))
  }

  @discardableResult
  open func canBePerformedImpl(_ _model: F) throws -> Bool {
    return true
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return self.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func requiredFeature() -> Feature<F> {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: F, _ currentComponent: C) throws -> MBTComponent {
    fatalError("Must be overridden in subclasses")
  }

}

