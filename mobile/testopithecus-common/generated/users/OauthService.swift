// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM users/oauth-service.ts >>>

import Foundation

open class OauthHostsConfig {
  public let yandex: String
  public let yandexTeam: String
  public let yandexTest: String
  public init(_ yandex: String = "https://oauth.yandex.ru", _ yandexTeam: String = "https://oauth.yandex-team.ru", _ yandexTest: String = "https://oauth-test.yandex.ru") {
    self.yandex = yandex
    self.yandexTeam = yandexTeam
    self.yandexTest = yandexTest
  }

}

open class OauthService {
  private var applicationCredentials: OAuthApplicationCredentialsRegistry
  private var network: SyncNetwork
  private var jsonSerializer: JSONSerializer
  private let hostsConfig: OauthHostsConfig
  public init(_ applicationCredentials: OAuthApplicationCredentialsRegistry, _ network: SyncNetwork, _ jsonSerializer: JSONSerializer, _ hostsConfig: OauthHostsConfig = OauthHostsConfig()) {
    self.applicationCredentials = applicationCredentials
    self.network = network
    self.jsonSerializer = jsonSerializer
    self.hostsConfig = hostsConfig
  }

  @discardableResult
  open func getToken(_ account: UserAccount, _ type: AccountType2) throws -> String! {
    let oauthHost = self.getOauthHost(type)
    let credentials: OAuthCredentials! = self.getOAuthCredentials(type)
    if credentials == nil {
      return nil
    }
    return (try self.getTokenForCredentials(account, oauthHost, credentials))
  }

  @discardableResult
  open func getTokenForCredentials(_ account: UserAccount, _ oauthHost: String, _ credentials: OAuthCredentials) throws -> String {
    let response = self.network.syncExecuteWithRetries(3, oauthHost, TokenRequest(account, credentials), nil)
    let json = self.jsonSerializer.deserialize((try response.tryGetValue())).getValue()
    return requireNonNull((json as! MapJSONItem).getString("access_token"), "No access_token!")
  }

  @discardableResult
  private func getOAuthCredentials(_ type: AccountType2) -> OAuthCredentials! {
    return self.applicationCredentials.getCredentials(type)
  }

  @discardableResult
  private func getOauthHost(_ accountType: AccountType2) -> String {
    switch accountType {
      case AccountType2.Yandex:
        return self.hostsConfig.yandex
      case AccountType2.YandexTeam:
        return self.hostsConfig.yandexTeam
      case AccountType2.YandexTest:
        return self.hostsConfig.yandexTest
      default:
        fatalError("Пока неизвестно, как получать токены не в яндексе")
    }
  }

}

fileprivate class TokenRequest: BaseNetworkRequest {
  private let account: UserAccount
  private let oauthCredentials: OAuthCredentials
  public init(_ account: UserAccount, _ oauthCredentials: OAuthCredentials) {
    self.account = account
    self.oauthCredentials = oauthCredentials
    super.init()
  }

  @discardableResult
  public override func encoding() -> RequestEncoding {
    return UrlRequestEncoding()
  }

  @discardableResult
  public override func method() -> NetworkMethod {
    return NetworkMethod.post
  }

  @discardableResult
  public override func params() -> MapJSONItem {
    return MapJSONItem().putString("grant_type", "password").putString("username", self.account.login).putString("password", self.account.password).putString("client_id", self.oauthCredentials.clientId).putString("client_secret", self.oauthCredentials.clientSecret)
  }

  @discardableResult
  public override func targetPath() -> String {
    return "token"
  }

  @discardableResult
  public override func urlExtra() -> MapJSONItem {
    return MapJSONItem()
  }

}

open class OAuthCredentials {
  public let clientId: String
  public let clientSecret: String
  public init(_ clientId: String, _ clientSecret: String) {
    self.clientId = clientId
    self.clientSecret = clientSecret
  }

}

open class OAuthApplicationCredentialsRegistry {
  private var credentials: YSMap<AccountType2, OAuthCredentials> = YSMap<AccountType2, OAuthCredentials>()
  public init() {
  }

  @discardableResult
  open func getCredentials(_ type: AccountType2) -> OAuthCredentials! {
    return undefinedToNull(self.credentials.get(type))
  }

  @discardableResult
  open func register(_ accountType: AccountType2, _ clientData: OAuthCredentials) -> OAuthApplicationCredentialsRegistry {
    self.credentials.set(accountType, clientData)
    return self
  }

}

