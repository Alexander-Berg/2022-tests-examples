// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM users/accounts-manager.ts >>>

import Foundation

open class AccountsManager {
  public let accounts: YSArray<UserAccount>
  public var indexesOfLoggedInAccounts: YSArray<Int32>
  public var currentAccount: Int32!
  public var indexesOfRevokedTokenAccounts: YSArray<Int32>
  public init(_ accounts: YSArray<UserAccount>, _ indexesOfLoggedInAccounts: YSArray<Int32> = YSArray(), _ currentAccount: Int32! = nil, _ indexesOfRevokedTokenAccounts: YSArray<Int32> = YSArray()) {
    self.accounts = accounts
    self.indexesOfLoggedInAccounts = indexesOfLoggedInAccounts
    self.currentAccount = currentAccount
    self.indexesOfRevokedTokenAccounts = indexesOfRevokedTokenAccounts
  }

  open func logInToAccount(_ account: UserAccount) -> Void {
    if self.isAccountLoggedIn(account.login) {
      self.switchToAccount(account.login)
    }
    for i in stride(from: 0, to: self.accounts.length, by: 1) {
      if self.accounts[i].login == account.login && self.accounts[i].password == account.password {
        self.indexesOfLoggedInAccounts.push(i)
        self.currentAccount = i
        return
      }
    }
    fatalError("Account (login=\(account.login);password=\(account.password)) hasn't been downloaded yet")
  }

  open func switchToAccount(_ login: String) -> Void {
    if !self.isAccountLoggedIn(login) {
      fatalError("Account for (login=\(login)) hasn't been logged in yet")
    }
    for i in stride(from: 0, to: self.accounts.length, by: 1) {
      if self.accounts[i].login == login {
        self.currentAccount = i
        return
      }
    }
    fatalError("Account for (login=\(login)) hasn't been logged in yet")
  }

  open func switchToAccountByOrder(_ loginOrder: Int32) -> Void {
    self.switchToAccount(self.accounts[loginOrder].login)
  }

  @discardableResult
  open func isLoggedIn() -> Bool {
    return self.currentAccount != nil
  }

  @discardableResult
  open func isAccountLoggedIn(_ login: String) -> Bool {
    return self.indexesOfLoggedInAccounts.filter({
      (i) in
      self.accounts[i].login == login
    }).length > 0
  }

  @discardableResult
  open func isAccountWithExpiredToken(_ login: String) -> Bool {
    return self.indexesOfRevokedTokenAccounts.filter({
      (i) in
      self.accounts[i].login == login
    }).length > 0
  }

  @discardableResult
  open func getLoggedInAccounts() -> YSArray<UserAccount> {
    let accountsWhichAreLoggedIn: YSArray<UserAccount> = YSArray()
    self.indexesOfLoggedInAccounts.forEach({
      (i) in
      accountsWhichAreLoggedIn.push(self.accounts[i])
    })
    return accountsWhichAreLoggedIn
  }

  open func logoutAccount(_ login: String) -> Void {
    if !self.isAccountLoggedIn(login) {
      fatalError("Account for (login=\(login)) hasn't been logged in yet")
    }
    for i in stride(from: 0, to: self.indexesOfLoggedInAccounts.length, by: 1) {
      if self.accounts[self.indexesOfLoggedInAccounts[i]].login == login {
        self.indexesOfLoggedInAccounts = self.indexesOfLoggedInAccounts.filter({
          (index) in
          index != self.indexesOfLoggedInAccounts[i]
        })
        if self.indexesOfLoggedInAccounts.length == 0 {
          self.currentAccount = nil
        } else if i == 0 {
          self.currentAccount = 0
        } else {
          self.currentAccount = i - 1
        }
        return
      }
    }
    fatalError("Account for (login=\(login)) hasn't been logged in yet")
  }

  open func revokeToken(_ account: UserAccount) -> Void {
    if !self.isAccountLoggedIn(account.login) {
      fatalError("Account for (login=\(account.login)) hasn't been logged in yet")
    }
    for i in stride(from: 0, to: self.indexesOfLoggedInAccounts.length, by: 1) {
      if self.accounts[self.indexesOfLoggedInAccounts[i]].login == account.login {
        self.indexesOfRevokedTokenAccounts.push(self.indexesOfLoggedInAccounts[i])
        return
      }
    }
    fatalError("Account for (login=\(account.login)) hasn't been logged in yet")
  }

  @discardableResult
  open func copy() -> AccountsManager {
    return AccountsManager(copyArray(self.accounts), copyArray(self.indexesOfLoggedInAccounts), self.currentAccount, copyArray(self.indexesOfRevokedTokenAccounts))
  }

  open func exitFromReloginWindow() -> Void {
    self.currentAccount = nil
    var i = 0
    for account in self.accounts {
      if !self.isAccountWithExpiredToken(account.login) {
        self.currentAccount = self.indexesOfLoggedInAccounts[i]
        return
      }
      i = i + 1
    }
  }

}

