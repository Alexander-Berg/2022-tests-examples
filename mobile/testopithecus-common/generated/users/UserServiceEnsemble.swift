// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM users/user-service-ensemble.ts >>>

import Foundation

public enum TusEnv : String {
  case PROD = "prod"
  case TEST = "test"
  case EXTERNAL = "external"
  public func toString() -> String {
    return self.rawValue
  }
}
open class UserServiceEnsemble {
  private var userEnsembleMap: YSMap<AccountType2, UserPool>
  private let userService: UserService
  private let tusConsumer: String
  public init(_ userService: UserService, _ requiredAccounts: YSArray<AccountType2>, _ tusConsumer: String, _ userTags: YSArray<String>) {
    self.userService = userService
    self.tusConsumer = tusConsumer
    self.userEnsembleMap = YSMap<AccountType2, UserPool>()
    for i in stride(from: 0, to: requiredAccounts.length, by: 1) {
      let accountType = requiredAccounts[i]
      self.userEnsembleMap.set(accountType, self.getUserPool(accountType, userTags))
    }
  }

  @discardableResult
  open func getAccountByType(_ type: AccountType2) -> UserPool {
    return requireNonNull(undefinedToNull(self.userEnsembleMap.get(type)), "Пул юзеров не может быть null!")
  }

  @discardableResult
  private func getUserPool(_ accountType: AccountType2, _ userTags: YSArray<String>) -> UserPool {
    let accountToDebug: UserAccount! = self.getDebugAccount(accountType)
    if accountToDebug != nil {
      return DebugUserPool(accountToDebug!)
    }
    let userTag = userTags.length > 0 ? userTags.join(",") : UserServiceEnsemble.getTagByAccountType(accountType)
    let tusEnv = UserServiceEnsemble.getEnvironmentByAccountType(accountType)
    return UserServicePool(self.userService, tusEnv, self.tusConsumer, userTag)
  }

  @discardableResult
  private func getDebugAccount(_ accountType: AccountType2) -> UserAccount! {
    switch accountType {
      default:
        return nil
    }
  }

  @discardableResult
  open class func getTagByAccountType(_ type: AccountType2) -> String {
    switch type {
      case AccountType2.Yandex:
        return "yandex"
      case AccountType2.YandexTeam:
        return "yandex-team"
      case AccountType2.Yahoo:
        return "yahoo"
      case AccountType2.Google:
        return "google"
      case AccountType2.Mail:
        return "mail.ru"
      case AccountType2.Rambler:
        return "rambler"
      case AccountType2.Hotmail:
        return "hotmail"
      case AccountType2.Outlook:
        return "outlook"
      case AccountType2.YandexTest:
        return "yandextest"
      case AccountType2.Other:
        fallthrough
      default:
        return "other"
    }
    return "other"
  }

  @discardableResult
  private class func getEnvironmentByAccountType(_ type: AccountType2) -> TusEnv {
    switch type {
      case AccountType2.YandexTest:
        return TusEnv.TEST
      case AccountType2.Outlook:
        return TusEnv.EXTERNAL
      case AccountType2.Other:
        return TusEnv.EXTERNAL
      default:
        return TusEnv.PROD
    }
  }

}

