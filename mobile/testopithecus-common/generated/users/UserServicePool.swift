// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM users/user-service-pool.ts >>>

import Foundation

open class UserServicePool: UserPool {
  private var userService: UserService
  private var tusEnv: TusEnv
  private var tusConsumer: String
  private var tag: String!
  public init(_ userService: UserService, _ tusEnv: TusEnv, _ tusConsumer: String, _ tag: String!) {
    self.userService = userService
    self.tusEnv = tusEnv
    self.tusConsumer = tusConsumer
    self.tag = tag
  }

  @discardableResult
  open func tryAcquire(_ tryAcquireTimeoutMs: Int64, _ lockTtlMs: Int64) -> UserLock! {
    let start = currentTimeMs()
    while currentTimeMs() < start + tryAcquireTimeoutMs {
      let user: UserServiceAccount! = self.userService.getAccount(self.tusEnv, self.tusConsumer, self.tag, int64ToInt32(lockTtlMs / int64(1000)), false, nil)
      if user != nil {
        return UserServiceLock(self.userService, self.tusEnv, self.tusConsumer, user!)
      }
    }
    return nil
  }

  open func reset() -> Void {
    let account: UserServiceAccount! = self.userService.getAccount(self.tusEnv, self.tusConsumer, self.tag, 0, true, nil)
    if account == nil {
      return
    }
    self.userService.unlockAccount(self.tusEnv, account!.uid)
  }

}

open class UserServiceLock: UserLock {
  private var userService: UserService
  private var tusEnv: TusEnv
  private var tusConsumer: String
  private var account: UserServiceAccount
  public init(_ userService: UserService, _ tusEnv: TusEnv, _ tusConsumer: String, _ account: UserServiceAccount) {
    self.userService = userService
    self.tusEnv = tusEnv
    self.tusConsumer = tusConsumer
    self.account = account
  }

  @discardableResult
  open func lockedAccount() -> UserAccount {
    return UserAccount(self.account.login, self.account.password, self.account.uid)
  }

  open func ping(_ newLockTtlMs: Int64) -> Void {
    self.userService.getAccount(self.tusEnv, self.tusConsumer, nil, int64ToInt32(newLockTtlMs / int64(1000)), true, self.account.uid)
  }

  open func release() -> Void {
    self.userService.unlockAccount(self.tusEnv, self.account.uid)
  }

}

