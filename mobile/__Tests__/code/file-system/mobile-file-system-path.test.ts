import { MobileFileSystemPath } from '../../../code/file-system/mobile-file-system-path'

describe(MobileFileSystemPath, () => {
  const path = new MobileFileSystemPath()

  it('should check absolute paths', () => {
    expect(path.isAbsolute('/foo')).toBe(true)
    expect(path.isAbsolute('foo')).toBe(false)
  })

  it('should return path parent', () => {
    expect(path.dirname('/foo/bar//')).toBe('/foo')
    expect(path.dirname('/foo/bar/')).toBe('/foo')
    expect(path.dirname('/foo/bar')).toBe('/foo')
    expect(path.dirname('/foo')).toBe('/')
    expect(path.dirname('/foo/')).toBe('/')
    expect(path.dirname('/')).toBe('/')
    expect(path.dirname('foo')).toBe('.')
    expect(path.dirname('foo/')).toBe('.')
    expect(path.dirname('foo//')).toBe('.')
    expect(path.dirname('foo/bar')).toBe('foo')
  })

  it('should return path basename', () => {
    expect(path.basename('/foo/bar.txt//')).toBe('bar.txt')
    expect(path.basename('/foo/bar.txt/')).toBe('bar.txt')
    expect(path.basename('/foo/bar.txt')).toBe('bar.txt')
    expect(path.basename('bar.txt//')).toBe('bar.txt')
    expect(path.basename('bar.txt/')).toBe('bar.txt')
    expect(path.basename('bar.txt')).toBe('bar.txt')
    expect(path.basename('/foo/bar.tar.gz')).toBe('bar.tar.gz')
    expect(path.basename('/foo/.bar.tar')).toBe('.bar.tar')
    expect(path.basename('/foo/.bar')).toBe('.bar')
    expect(path.basename('/foo/bar')).toBe('bar')
    expect(path.basename('/foo/bar.')).toBe('bar.')
    expect(path.basename('')).toBe('')
    expect(path.basename('/')).toBe('')
  })

  it('should return path extension', () => {
    expect(path.extname('/foo/bar.txt//')).toBe('.txt')
    expect(path.extname('/foo/bar.txt/')).toBe('.txt')
    expect(path.extname('/foo/bar.txt')).toBe('.txt')
    expect(path.extname('bar.txt//')).toBe('.txt')
    expect(path.extname('bar.txt/')).toBe('.txt')
    expect(path.extname('bar.txt')).toBe('.txt')
    expect(path.extname('/foo/bar.tar.gz')).toBe('.gz')
    expect(path.extname('/foo/.bar.txt')).toBe('.txt')
    expect(path.extname('/foo/.bar')).toBe('')
    expect(path.extname('/foo/bar')).toBe('')
    expect(path.extname('/foo/bar.')).toBe('.')
  })

  it('should return path name', () => {
    expect(path.name('/foo/bar.txt//')).toBe('bar')
    expect(path.name('/foo/bar.txt/')).toBe('bar')
    expect(path.name('/foo/bar.txt')).toBe('bar')
    expect(path.name('bar.txt//')).toBe('bar')
    expect(path.name('bar.txt/')).toBe('bar')
    expect(path.name('bar.txt')).toBe('bar')
    expect(path.name('/foo/bar.tar.gz')).toBe('bar.tar')
    expect(path.name('/foo/.bar.tar')).toBe('.bar')
    expect(path.name('/foo/.bar')).toBe('.bar')
    expect(path.name('/foo/bar')).toBe('bar')
    expect(path.name('/foo/bar.')).toBe('bar')
  })

  it('should return normalized path', () => {
    expect(path.normalize('/foo/bar')).toBe('/foo/bar')
    expect(path.normalize('/foo/bar/')).toBe('/foo/bar/')
    expect(path.normalize('/foo/./bar')).toBe('/foo/bar')
    expect(path.normalize('/foo/../bar')).toBe('/bar')
    expect(path.normalize('/foo/.../bar')).toBe('/foo/.../bar')
    expect(path.normalize('')).toBe('.')
    expect(path.normalize('/')).toBe('/')
    expect(path.normalize('./')).toBe('./')
    expect(path.normalize('/../../bar')).toBe('/bar')
    expect(path.normalize('foo/../bar')).toBe('bar')
    expect(path.normalize('../../foo')).toBe('../../foo')
  })

  it('should return joined paths', () => {
    expect(path.join([])).toBe('.')
    expect(path.join(['/foo/bar'])).toBe('/foo/bar')
    expect(path.join(['/foo', 'bar', 'baz'])).toBe('/foo/bar/baz')
    expect(path.join(['/foo/bar', 'baz'])).toBe('/foo/bar/baz')
    expect(path.join(['/foo/bar', 'baz/'])).toBe('/foo/bar/baz/')
    expect(path.join(['/foo/bar', '/baz'])).toBe('/foo/bar/baz')
    expect(path.join(['/foo/bar', '../baz'])).toBe('/foo/baz')
    expect(path.join(['foo', 'bar'])).toBe('foo/bar')
    expect(path.join(['foo', '', 'bar'])).toBe('foo/bar')
    expect(path.join(['foo', '..'])).toBe('.')
    expect(path.join(['foo', '../..'])).toBe('..')
    expect(path.join(['..', 'foo'])).toBe('../foo')
    expect(path.join(['../..', 'foo'])).toBe('../../foo')
  })

  it('should return parsed path', () => {
    expect(path.parse('/foo/bar.txt//')).toMatchObject({ dir: '/foo', base: 'bar.txt', ext: '.txt', name: 'bar' })
    expect(path.parse('/foo/bar.txt/')).toMatchObject({ dir: '/foo', base: 'bar.txt', ext: '.txt', name: 'bar' })
    expect(path.parse('/foo/bar.txt')).toMatchObject({ dir: '/foo', base: 'bar.txt', ext: '.txt', name: 'bar' })
    expect(path.parse('bar.txt//')).toMatchObject({ dir: '.', base: 'bar.txt', ext: '.txt', name: 'bar' })
    expect(path.parse('bar.txt/')).toMatchObject({ dir: '.', base: 'bar.txt', ext: '.txt', name: 'bar' })
    expect(path.parse('bar.txt')).toMatchObject({ dir: '.', base: 'bar.txt', ext: '.txt', name: 'bar' })
    expect(path.parse('/foo/.bar.txt')).toMatchObject({ dir: '/foo', base: '.bar.txt', ext: '.txt', name: '.bar' })
    expect(path.parse('/foo/.bar')).toMatchObject({ dir: '/foo', base: '.bar', ext: '', name: '.bar' })
    expect(path.parse('/foo/bar')).toMatchObject({ dir: '/foo', base: 'bar', ext: '', name: 'bar' })
    expect(path.parse('/foo/bar.')).toMatchObject({ dir: '/foo', base: 'bar.', ext: '.', name: 'bar' })
  })
})
