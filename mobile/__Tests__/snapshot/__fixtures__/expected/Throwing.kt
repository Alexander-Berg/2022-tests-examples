// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM throwing.ts >>>

package com.yandex.xplat

import com.yandex.ys.*

private fun f(): Unit {
}

private fun f2(): Unit {
}

private fun f3(): Unit {
}

public fun <T> parseJson(item: String, materializer: (String) -> T): T? {
    try {
        return materializer(item)
    } catch (e: RuntimeException) {
        return null
    }
}

public open class MyException(message: String): YSError(message) {
}

private open class B {
    open fun m2(): Boolean {
        val i: I = Impl()
        mutableMapOf<String, String>().__forEach(__LBL__Throwing_1@ {
            value, key ->
            i.`it`()
        })
        throw MyException("pizza")
    }

    private fun m3(callback: (String) -> Boolean?): Boolean {
        try {
            f()
            return this.m2()
        } catch (e: RuntimeException) {
            if (e is MyException) {
                return false
            } else {
                return true
            }
        }
    }

    open fun fatal(): Unit {
        throw Error("fatal")
    }

    open fun fatal2(): Unit {
        throw Error()
    }

}

private abstract class C<T>: B() {
    open override fun m2(): Boolean {
        return false
    }

}

@JsonClass(generateAdapter = true)
private abstract class D: C<Unit>(), Codable {
    abstract fun a(): Boolean
    companion object {
        @JvmStatic fun getRuntimeInfo(): RuntimeClassInfo {
            return RuntimeClassInfo("com.yandex.xplat.D")
        }
    }
}

private interface I {
    fun `it`(): Unit
}

private open class Impl: I {
    open override fun `it`(): Unit {
    }

}

public open class Foo {
    open fun callThrowing(): Foo {
        return this
    }

    open fun testChainedThrowingCalls(): Unit {
        this.callThrowing().callThrowing().callThrowing()
    }

}

