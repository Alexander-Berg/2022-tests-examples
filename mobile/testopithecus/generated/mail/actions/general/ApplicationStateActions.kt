// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/general/application-state-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class GoToBackgroundState: MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return ApplicationRunningStateFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return (ApplicationRunningStateFeature.`get`.forceCast(model).getApplicationRunningState() == AppRunningState.runningForeground)
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ApplicationRunningStateFeature.`get`.forceCast(model).changeApplicationRunningState(AppRunningState.runningBackground)
        ApplicationRunningStateFeature.`get`.forceCast(application).changeApplicationRunningState(AppRunningState.runningBackground)
        return BackgroundRunningStateComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "GoToBackgroundState"
    }

    open override fun getActionType(): String {
        return GoToBackgroundState.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToBackgroundState"
    }
}

public open class GoToForegroundState: MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (ApplicationRunningStateFeature.`get`.includedAll(modelFeatures, applicationFeatures) && PinFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun canBePerformed(model: App): Boolean {
        return (ApplicationRunningStateFeature.`get`.forceCast(model).getApplicationRunningState() == AppRunningState.runningBackground)
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ApplicationRunningStateFeature.`get`.forceCast(model).changeApplicationRunningState(AppRunningState.runningForeground)
        ApplicationRunningStateFeature.`get`.forceCast(application).changeApplicationRunningState(AppRunningState.runningForeground)
        if (PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled()) {
            return PinComponent()
        }
        return requireNonNull(history.previousDifferentComponent, "No previous screen!")
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "GoToForegroundState"
    }

    open override fun getActionType(): String {
        return GoToForegroundState.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToForegroundState"
    }
}

