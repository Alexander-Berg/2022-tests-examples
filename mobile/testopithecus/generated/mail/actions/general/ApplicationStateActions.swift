// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/general/application-state-actions.ts >>>

import Foundation

open class GoToBackgroundState: MBTAction {
  public static let type: MBTActionType = "GoToBackgroundState"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ApplicationRunningStateFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return ((try ApplicationRunningStateFeature.`get`.forceCast(model).getApplicationRunningState()) == AppRunningState.runningForeground)
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ApplicationRunningStateFeature.`get`.forceCast(model).changeApplicationRunningState(AppRunningState.runningBackground))
    (try ApplicationRunningStateFeature.`get`.forceCast(application).changeApplicationRunningState(AppRunningState.runningBackground))
    return BackgroundRunningStateComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "GoToBackgroundState"
  }

  @discardableResult
  open func getActionType() -> String {
    return GoToBackgroundState.type
  }

}

open class GoToForegroundState: MBTAction {
  public static let type: MBTActionType = "GoToForegroundState"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (ApplicationRunningStateFeature.`get`.includedAll(modelFeatures, applicationFeatures) && PinFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return ((try ApplicationRunningStateFeature.`get`.forceCast(model).getApplicationRunningState()) == AppRunningState.runningBackground)
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ApplicationRunningStateFeature.`get`.forceCast(model).changeApplicationRunningState(AppRunningState.runningForeground))
    (try ApplicationRunningStateFeature.`get`.forceCast(application).changeApplicationRunningState(AppRunningState.runningForeground))
    if (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled()) {
      return PinComponent()
    }
    return requireNonNull(history.previousDifferentComponent, "No previous screen!")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "GoToForegroundState"
  }

  @discardableResult
  open func getActionType() -> String {
    return GoToForegroundState.type
  }

}

