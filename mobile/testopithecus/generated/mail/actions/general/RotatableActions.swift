// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/general/rotatable-actions.ts >>>

import Foundation

open class RotatableAction: BaseSimpleAction<Rotatable, MBTComponent> {
  public override init(_ type: MBTActionType) {
    super.init(type)
  }

  open class func addActions(_ actions: YSArray<MBTAction>) -> Void {
    actions.push(RotateToLandscape())
    actions.push(RotateToPortrait())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Rotatable> {
    return RotatableFeature.`get`
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Rotatable, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try self.rotate(modelOrApplication))
    return currentComponent
  }

  @discardableResult
  open func rotate(_ modelOrApplication: Rotatable) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

}

open class RotateToLandscape: RotatableAction {
  public static let type: MBTActionType = "RotateToLandscape"
  public init() {
    super.init(RotateToLandscape.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: Rotatable) throws -> Bool {
    let isInLandscape = (try model.isInLandscape())
    return !isInLandscape
  }

  @discardableResult
  open override func rotate(_ modelOrApplication: Rotatable) throws -> Void {
    (try modelOrApplication.rotateToLandscape())
  }

}

open class RotateToPortrait: RotatableAction {
  public static let type: MBTActionType = "RotateToPortrait"
  public init() {
    super.init(RotateToPortrait.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: Rotatable) throws -> Bool {
    let isInLandscape = (try model.isInLandscape())
    return isInLandscape
  }

  @discardableResult
  open override func rotate(_ modelOrApplication: Rotatable) throws -> Void {
    (try modelOrApplication.rotateToPortrait())
  }

}

