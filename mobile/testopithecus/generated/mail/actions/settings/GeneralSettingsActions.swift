// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/settings/general-settings-actions.ts >>>

import Foundation

open class ClearCacheAction: MBTAction {
  public static let type: MBTActionType = "ClearCache"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try GeneralSettingsFeature.`get`.forceCast(model).clearCache())
    (try GeneralSettingsFeature.`get`.forceCast(application).clearCache())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.settingsEvents.clearCache())
  }

  @discardableResult
  open func tostring() -> String {
    return "ClearCache"
  }

  @discardableResult
  open func getActionType() -> String {
    return ClearCacheAction.type
  }

}

open class OpenGeneralSettingsAction: MBTAction {
  public static let type: MBTActionType = "OpenGeneralSettings"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try GeneralSettingsFeature.`get`.forceCast(model).openGeneralSettings())
    (try GeneralSettingsFeature.`get`.forceCast(application).openGeneralSettings())
    return GeneralSettingsComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenGeneralSettings"
  }

  @discardableResult
  open func getActionType() -> String {
    return OpenGeneralSettingsAction.type
  }

}

open class CloseGeneralSettingsAction: MBTAction {
  public static let type: MBTActionType = "CloseGeneralSettings"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try GeneralSettingsFeature.`get`.forceCast(model).closeGeneralSettings())
    (try GeneralSettingsFeature.`get`.forceCast(application).closeGeneralSettings())
    return RootSettingsComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return CloseGeneralSettingsAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseGeneralSettings"
  }

}

open class SetActionOnSwipe: MBTAction {
  public static let type: MBTActionType = "SetActionOnSwipe"
  private var action: ActionOnSwipe
  public init(_ action: ActionOnSwipe) {
    self.action = action
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try GeneralSettingsFeature.`get`.forceCast(model).setActionOnSwipe(self.action))
    (try GeneralSettingsFeature.`get`.forceCast(application).setActionOnSwipe(self.action))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "Set \(self.action) action on swipe"
  }

  @discardableResult
  open func getActionType() -> String {
    return SetActionOnSwipe.type
  }

}

open class TurnOnCompactMode: MBTAction {
  public static let type: MBTActionType = "TurnOnCompactMode"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isCompactModeEnabled = (try GeneralSettingsFeature.`get`.forceCast(model).isCompactModeEnabled())
    return !isCompactModeEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try GeneralSettingsFeature.`get`.forceCast(model).switchCompactMode())
    (try GeneralSettingsFeature.`get`.forceCast(application).switchCompactMode())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.settingsEvents.toggleCompactMode(true))
  }

  @discardableResult
  open func tostring() -> String {
    return "Turn on compact mode"
  }

  @discardableResult
  open func getActionType() -> String {
    return TurnOnCompactMode.type
  }

}

open class TurnOffCompactMode: MBTAction {
  public static let type: MBTActionType = "TurnOffCompactMode"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try GeneralSettingsFeature.`get`.forceCast(model).isCompactModeEnabled())
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try GeneralSettingsFeature.`get`.forceCast(model).switchCompactMode())
    (try GeneralSettingsFeature.`get`.forceCast(application).switchCompactMode())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.settingsEvents.toggleCompactMode(false))
  }

  @discardableResult
  open func tostring() -> String {
    return "Turn off compact mode"
  }

  @discardableResult
  open func getActionType() -> String {
    return TurnOffCompactMode.type
  }

}

open class TurnOnSmartReplyAction: BaseSimpleAction<GeneralSettings, MBTComponent> {
  public static let type: MBTActionType = "TurnOnSmartReplyAction"
  public init() {
    super.init(TurnOnSmartReplyAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<GeneralSettings> {
    return GeneralSettingsFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: GeneralSettings) throws -> Bool {
    let isSmartRepliesEnabled = (try model.isSmartRepliesEnabled())
    return !isSmartRepliesEnabled
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GeneralSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.switchSmartReplies())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TurnOnSmartReplyAction"
  }

}

open class TurnOffSmartReplyAction: BaseSimpleAction<GeneralSettings, MBTComponent> {
  public static let type: MBTActionType = "TurnOffSmartReplyAction"
  public init() {
    super.init(TurnOffSmartReplyAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<GeneralSettings> {
    return GeneralSettingsFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: GeneralSettings) throws -> Bool {
    return (try model.isSmartRepliesEnabled())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GeneralSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.switchSmartReplies())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TurnOffSmartReplyAction"
  }

}

open class TapToClearCacheAndCancelAction: MBTAction {
  public static let type: MBTActionType = "tapToClearCacheAndCancel"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return GeneralSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AndroidGeneralSettingsFeature.`get`.forceCast(model).tapToClearCacheAndCancel())
    (try AndroidGeneralSettingsFeature.`get`.forceCast(application).tapToClearCacheAndCancel())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "tapToClearCacheAndCancel"
  }

  @discardableResult
  open func getActionType() -> String {
    return TapToClearCacheAndCancelAction.type
  }

}

