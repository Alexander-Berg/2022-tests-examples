// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/settings/filter-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public abstract class BaseFiltersListAction(type: MBTActionType): BaseSimpleAction<FiltersList, MBTComponent>(type) {
    open override fun requiredFeature(): Feature<FiltersList> {
        return FiltersListFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

}

public abstract class BaseFilterCreateOrUpdateAction(type: MBTActionType): BaseSimpleAction<FilterCreateOrUpdateRule, MBTComponent>(type) {
    open override fun requiredFeature(): Feature<FilterCreateOrUpdateRule> {
        return FilterCreateOrUpdateRuleFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

}

public abstract class BaseFilterUpdateRuleMoreAction(type: MBTActionType): BaseSimpleAction<FilterUpdateRuleMore, MBTComponent>(type) {
    open override fun requiredFeature(): Feature<FilterUpdateRuleMore> {
        return FilterUpdateRuleMoreFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

}

public open class FiltersListTapOnCreateRuleButtonAction(): BaseFiltersListAction(FiltersListTapOnCreateRuleButtonAction.type) {
    open override fun performImpl(modelOrApplication: FiltersList, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnCreateRuleButton()
        return FilterCreateOrUpdateComponent()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FiltersListTapOnCreateRuleButtonAction"
    }
}

public open class FiltersListTapOnFilterByIndexAction(private val index: Int): BaseFiltersListAction(FiltersListTapOnFilterByIndexAction.type) {
    open override fun canBePerformedImpl(model: FiltersList): Boolean {
        val filtersListLength = model.getFilterList().size
        return this.index < filtersListLength
    }

    open override fun performImpl(modelOrApplication: FiltersList, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnFilterByIndex(this.index)
        return FilterCreateOrUpdateComponent()
    }

    open override fun tostring(): String {
        return "${FiltersListTapOnFilterByIndexAction.type};index=${this.index}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FiltersListTapOnFilterByIndexAction"
    }
}

public open class FilterCreateUpdateSetActionToggleAction(private val actionToggle: FilterActionToggle, private val value: Boolean): BaseFilterCreateOrUpdateAction(FilterCreateUpdateSetActionToggleAction.type) {
    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setActionToggle(this.actionToggle, this.value)
        return currentComponent
    }

    open override fun tostring(): String {
        return "${FilterCreateUpdateSetActionToggleAction.type};toggle=${this.actionToggle};value=${this.value}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterCreateUpdateSetActionToggleAction"
    }
}

public open class FilterCreateUpdateSetConditionAction(private val conditionField: FilterConditionField, private val value: String): BaseFilterCreateOrUpdateAction(FilterCreateUpdateSetConditionAction.type) {
    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setConditionField(this.conditionField, this.value)
        return currentComponent
    }

    open override fun tostring(): String {
        return "${FilterCreateUpdateSetConditionAction.type};field=${this.conditionField};value=${this.value}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterCreateUpdateSetConditionAction"
    }
}

public open class FilterCreateUpdateTapOnConditionLogicButtonAction(): BaseFilterCreateOrUpdateAction(FilterCreateUpdateTapOnConditionLogicButtonAction.type) {
    open override fun canBePerformedImpl(model: FilterCreateOrUpdateRule): Boolean {
        return model.isConditionLogicButtonShown()
    }

    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnConditionLogicButton()
        return FilterConditionLogicComponent()
    }

    open override fun tostring(): String {
        return "${FilterCreateUpdateTapOnConditionLogicButtonAction.type}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterCreateUpdateTapOnConditionLogicButtonAction"
    }
}

public open class FilterUpdateTapOnMoreButtonAction(): BaseFilterCreateOrUpdateAction(FilterUpdateTapOnMoreButtonAction.type) {
    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnMore()
        return FilterUpdateRuleMoreComponent()
    }

    open override fun tostring(): String {
        return "${FilterCreateUpdateTapOnConditionLogicButtonAction.type}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterUpdateTapOnMoreButtonAction"
    }
}

public open class FilterCreateUpdateTapOnMoveToFolderAction(): BaseFilterCreateOrUpdateAction(FilterCreateUpdateTapOnMoveToFolderAction.type) {
    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnMoveToFolder()
        return MoveToFolderComponent()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterCreateUpdateTapOnMoveToFolderAction"
    }
}

public open class FilterCreateUpdateTapOnApplyLabelAction(): BaseFilterCreateOrUpdateAction(FilterCreateUpdateTapOnApplyLabelAction.type) {
    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnApplyLabel()
        return ApplyLabelComponent()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterCreateUpdateTapOnApplyLabelAction"
    }
}

public open class FilterCreateUpdateTapOnCreateAction(): BaseFilterCreateOrUpdateAction(FilterCreateUpdateTapOnCreateAction.type) {
    open override fun canBePerformedImpl(model: FilterCreateOrUpdateRule): Boolean {
        val conditionsSubject = model.getConditionField(FilterConditionField.subject)
        val conditionsFrom = model.getConditionField(FilterConditionField.from)
        val actionDelete = model.getActionToggle(FilterActionToggle.delete)
        val actionMarkRead = model.getActionToggle(FilterActionToggle.markAsRead)
        val actionMoveToFolder = model.getMoveToFolderValue()
        val actionApplyLabel = model.getApplyLabelValue()
        return ((conditionsSubject.size > 0 || conditionsFrom.size > 0) && (actionDelete || actionMarkRead || actionMoveToFolder != null || actionApplyLabel != null))
    }

    open override fun performImpl(modelOrApplication: FilterCreateOrUpdateRule, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnCreate()
        return FilterListComponent()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterCreateUpdateTapOnCreateAction"
    }
}

public open class FilterSetConditionLogicAction(private val conditionLogic: FilterLogicType): BaseSimpleAction<FilterConditionLogic, MBTComponent>(FilterSetConditionLogicAction.type) {
    open override fun requiredFeature(): Feature<FilterConditionLogic> {
        return FilterConditionLogicFeature.`get`
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun performImpl(modelOrApplication: FilterConditionLogic, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setLogicType(this.conditionLogic)
        return FilterCreateOrUpdateComponent()
    }

    open override fun tostring(): String {
        return "${FilterSetConditionLogicAction.type};logicType=${this.conditionLogic.toString()}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterSetConditionLogicAction"
    }
}

public open class FilterUpdateRuleChangeEnableStatusAction(private val enable: Boolean): BaseFilterUpdateRuleMoreAction(FilterUpdateRuleChangeEnableStatusAction.type) {
    open override fun performImpl(modelOrApplication: FilterUpdateRuleMore, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.changeEnableStatus(this.enable)
        return FilterListComponent()
    }

    open override fun tostring(): String {
        return "${FilterUpdateRuleChangeEnableStatusAction.type};enable=${this.enable}"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterUpdateRuleChangeEnableStatusAction"
    }
}

public open class FilterUpdateRuleDeleteAction(): BaseFilterUpdateRuleMoreAction(FilterUpdateRuleDeleteAction.type) {
    open override fun performImpl(modelOrApplication: FilterUpdateRuleMore, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.delete()
        return FilterListComponent()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "FilterUpdateRuleDeleteAction"
    }
}

