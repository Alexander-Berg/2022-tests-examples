// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/settings/account-settings-actions.ts >>>

import Foundation

open class OpenAccountSettingsAction: MBTAction {
  public static let type: MBTActionType = "OpenAccountSettings"
  public var accountIndex: Int32
  public init(_ accountIndex: Int32) {
    self.accountIndex = accountIndex
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AccountSettingsFeature.`get`.forceCast(model).openAccountSettings(self.accountIndex))
    (try AccountSettingsFeature.`get`.forceCast(application).openAccountSettings(self.accountIndex))
    return AccountSettingsComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.accountSettingsEvents.openAccountSettings())
  }

  @discardableResult
  open func getActionType() -> String {
    return OpenAccountSettingsAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenAccountSettings"
  }

}

open class CloseAccountSettingsAction: MBTAction {
  public static let type: MBTActionType = "CloseAccountSettings"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AccountSettingsFeature.`get`.forceCast(model).closeAccountSettings())
    (try AccountSettingsFeature.`get`.forceCast(application).closeAccountSettings())
    return RootSettingsComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return CloseAccountSettingsAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseAccountSettings"
  }

}

open class ChangeSignatureAction: MBTAction {
  public static let type: MBTActionType = "ChangeSignature"
  private var newSignature: String
  public init(_ newSignature: String) {
    self.newSignature = newSignature
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AccountSettingsFeature.`get`.forceCast(model).changeSignature(self.newSignature))
    (try AccountSettingsFeature.`get`.forceCast(application).changeSignature(self.newSignature))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return ChangeSignatureAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

}

open class BaseGroupBySubjectAction: MBTAction {
  private var type: MBTActionType
  public init(_ type: MBTActionType) {
    self.type = type
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(model))
    (try self.performImpl(application))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountSettingsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: App) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func getActionType() -> MBTComponentType {
    return self.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

}

open class SwitchOnThreadingAction: BaseGroupBySubjectAction {
  public static let type: MBTActionType = "SwitchOnThreading"
  public init() {
    super.init(SwitchOnThreadingAction.type)
  }

  @discardableResult
  open override func canBePerformed(_ model: App) throws -> Bool {
    let isGroupBySubjectEnabled = (try AccountSettingsFeature.`get`.forceCast(model).isGroupBySubjectEnabled())
    return !isGroupBySubjectEnabled
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: App) throws -> Void {
    let modelOrAppImpl = AccountSettingsFeature.`get`.forceCast(modelOrApplication)
    (try modelOrAppImpl.switchGroupBySubject())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.accountSettingsEvents.toggleThreading(true))
  }

}

open class SwitchOffThreadingAction: BaseGroupBySubjectAction {
  public static let type: MBTActionType = "SwitchOffThreading"
  public init() {
    super.init(SwitchOffThreadingAction.type)
  }

  @discardableResult
  open override func canBePerformed(_ model: App) throws -> Bool {
    let isGroupBySubjectEnabled = (try AccountSettingsFeature.`get`.forceCast(model).isGroupBySubjectEnabled())
    return isGroupBySubjectEnabled
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: App) throws -> Void {
    let modelOrAppImpl = AccountSettingsFeature.`get`.forceCast(modelOrApplication)
    (try modelOrAppImpl.switchGroupBySubject())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.accountSettingsEvents.toggleThreading(false))
  }

}

open class BaseTabsActions: MBTAction {
  public var accountType: AccountType
  public init(_ accountType: AccountType) {
    self.accountType = accountType
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && TabsFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    var isAccountTypeYandex = false
    if self.accountType == AccountType.login {
      isAccountTypeYandex = true
    }
    let canPerform = (try self.canBePerformedImpl(model))
    return isAccountTypeYandex && canPerform
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(model))
    (try self.performImpl(application))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func canBePerformedImpl(_ model: App) throws -> Bool {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: App) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func tostring() -> String {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    fatalError("Must be overridden in subclasses")
  }

}

open class SwitchOnTabsAction: BaseTabsActions {
  public static let type: MBTActionType = "SwitchOnTabsAction"
  public override init(_ accountType: AccountType) {
    super.init(accountType)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: App) throws -> Bool {
    let isSortingEmailsByCategoryEnabled = (try AccountSettingsFeature.`get`.forceCast(model).isSortingEmailsByCategoryEnabled())
    return !isSortingEmailsByCategoryEnabled
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: App) throws -> Void {
    (try AccountSettingsFeature.`get`.forceCast(modelOrApplication).switchSortingEmailsByCategory())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SwitchOnTabsAction"
  }

  @discardableResult
  open override func getActionType() -> String {
    return SwitchOnTabsAction.type
  }

}

open class SwitchOffTabsAction: BaseTabsActions {
  public static let type: MBTActionType = "SwitchOffTabsAction"
  public override init(_ accountType: AccountType) {
    super.init(accountType)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: App) throws -> Bool {
    let isSortingEmailsByCategoryEnabled = (try AccountSettingsFeature.`get`.forceCast(model).isSortingEmailsByCategoryEnabled())
    return isSortingEmailsByCategoryEnabled
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: App) throws -> Void {
    (try AccountSettingsFeature.`get`.forceCast(modelOrApplication).switchSortingEmailsByCategory())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SwitchOffTabsAction"
  }

  @discardableResult
  open override func getActionType() -> String {
    return SwitchOffTabsAction.type
  }

}

open class GetThreadingSetting {
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: App) throws -> Void {
    let modelOrAppImpl = AccountSettingsFeature.`get`.forceCast(modelOrApplication)
    (try modelOrAppImpl.isGroupBySubjectEnabled())
  }

  @discardableResult
  open func tostring() -> String {
    return "GetThreadingSetting"
  }

}

open class AccountSettingsOpenFiltersAction: BaseSimpleAction<AccountSettings, MBTComponent> {
  public static let type: MBTActionType = "AccountSettingsOpenFiltersAction"
  public init() {
    super.init(AccountSettingsOpenFiltersAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<AccountSettings> {
    return AccountSettingsFeature.`get`
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: AccountSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.openFilters())
    return FilterListComponent()
  }

}

