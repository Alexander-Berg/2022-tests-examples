// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/pin-actions.ts >>>

import Foundation

open class TurnOnLoginUsingPasswordAction: MBTAction {
  public static let type: MBTActionType = "TurnOnLoginUsingPasswordAction"
  public var password: String
  public init(_ password: String) {
    self.password = password
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PinFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isLoginUsingPasswordEnabled = (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled())
    return !isLoginUsingPasswordEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try PinFeature.`get`.forceCast(model).turnOnLoginUsingPassword(self.password))
    (try PinFeature.`get`.forceCast(application).turnOnLoginUsingPassword(self.password))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "TurnOnLoginUsingPassword"
  }

  @discardableResult
  open func getActionType() -> String {
    return TurnOnLoginUsingPasswordAction.type
  }

}

open class TurnOffLoginUsingPasswordAction: MBTAction {
  public static let type: MBTActionType = "TurnOffLoginUsingPasswordAction"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PinFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isLoginUsingPasswordEnabled = (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled())
    return isLoginUsingPasswordEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try PinFeature.`get`.forceCast(model).turnOffLoginUsingPassword())
    (try PinFeature.`get`.forceCast(application).turnOffLoginUsingPassword())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "TurnOffLoginUsingPassword"
  }

  @discardableResult
  open func getActionType() -> String {
    return TurnOffLoginUsingPasswordAction.type
  }

}

open class ChangePasswordAction: MBTAction {
  public static let type: MBTActionType = "ChangePasswordAction"
  public var newPassword: String
  public init(_ newPassword: String) {
    self.newPassword = newPassword
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PinFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isLoginUsingPasswordEnabled = (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled())
    return isLoginUsingPasswordEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try PinFeature.`get`.forceCast(model).changePassword(self.newPassword))
    (try PinFeature.`get`.forceCast(application).changePassword(self.newPassword))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "ChangePassword"
  }

  @discardableResult
  open func getActionType() -> String {
    return ChangePasswordAction.type
  }

}

open class EnterPasswordAction: MBTAction {
  public static let type: MBTActionType = "EnterPasswordAction"
  public var password: String
  public init(_ password: String) {
    self.password = password
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PinFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isLoginUsingPasswordEnabled = (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled())
    return isLoginUsingPasswordEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try PinFeature.`get`.forceCast(model).enterPassword(self.password))
    (try PinFeature.`get`.forceCast(application).enterPassword(self.password))
    return self.previousComponentsExceptBackgroundAndPin(history)
  }

  @discardableResult
  private func previousComponentsExceptBackgroundAndPin(_ history: MBTHistory) -> MBTComponent {
    var previousComponent: MBTComponent! = nil
    for component in history.allPreviousComponents.reverse() {
      if !YSArray(BackgroundRunningStateComponent.type, PinComponent.type).includes(component.tostring()) {
        previousComponent = component
        break
      }
    }
    return requireNonNull(previousComponent, "No previous component")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "EnterPassword"
  }

  @discardableResult
  open func getActionType() -> String {
    return EnterPasswordAction.type
  }

}

open class ResetPasswordAction: MBTAction {
  public static let type: MBTActionType = "ResetPasswordAction"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PinFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isLoginUsingPasswordEnabled = (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled())
    return isLoginUsingPasswordEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try PinFeature.`get`.forceCast(model).resetPassword())
    (try PinFeature.`get`.forceCast(application).resetPassword())
    return LoginComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "ResetPassword"
  }

  @discardableResult
  open func getActionType() -> String {
    return ResetPasswordAction.type
  }

}

open class WaitForPinToTriggerAction: MBTAction {
  public static let type: MBTActionType = "WaitForPinToTriggerAction"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return PinFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let state = (try ApplicationRunningStateFeature.`get`.forceCast(model).getApplicationRunningState())
    return (try PinFeature.`get`.forceCast(model).isLoginUsingPasswordEnabled()) || state == AppRunningState.runningBackground
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try PinFeature.`get`.forceCast(model).waitForPinToTrigger())
    (try PinFeature.`get`.forceCast(application).waitForPinToTrigger())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "WaitForPinToTriggerAction"
  }

  @discardableResult
  open func getActionType() -> String {
    return WaitForPinToTriggerAction.type
  }

}

