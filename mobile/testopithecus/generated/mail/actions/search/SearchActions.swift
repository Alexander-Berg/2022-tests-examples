// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/search/search-actions.ts >>>

import Foundation

open class SearchAllMessagesAction: MBTAction {
  public static let type: MBTActionType = "SearchAllMessagesAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isInSearch = (try SearchFeature.`get`.forceCast(model).isInSearch())
    return isInSearch
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return SearchAllMessagesAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try SearchFeature.`get`.forceCast(model).searchAllMessages())
    (try SearchFeature.`get`.forceCast(application).searchAllMessages())
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return SearchAllMessagesAction.type
  }

}

open class SearchByRequestAction: MBTAction {
  public static let type: MBTActionType = "SearchByRequestAction"
  public var request: String
  public init(_ request: String) {
    self.request = request
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isInSearch = (try SearchFeature.`get`.forceCast(model).isInSearch())
    return isInSearch
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return SearchByRequestAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try SearchFeature.`get`.forceCast(model).searchByQuery(self.request))
    (try SearchFeature.`get`.forceCast(application).searchByQuery(self.request))
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return SearchByRequestAction.type
  }

}

open class CloseSearchAction: MBTAction {
  public static let type: MBTActionType = "CloseSearchAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isInSearch = (try SearchFeature.`get`.forceCast(model).isInSearch())
    return isInSearch
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return CloseSearchAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try SearchFeature.`get`.forceCast(model).closeSearch())
    (try SearchFeature.`get`.forceCast(application).closeSearch())
    let previousDifferentComponent: MBTComponent! = history.previousDifferentComponent
    if previousDifferentComponent == nil || YSArray(ZeroSuggestComponent().tostring(), MessageComponent().tostring()).includes(previousDifferentComponent.tostring()) {
      return MaillistComponent()
    }
    return previousDifferentComponent!
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return CloseSearchAction.type
  }

}

open class OpenSearchAction: MBTAction {
  public static let type: MBTActionType = "OpenSearchAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isInSearch = (try SearchFeature.`get`.forceCast(model).isInSearch())
    return !isInSearch
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.searchEvents.`open`())
  }

  @discardableResult
  open func getActionType() -> String {
    return OpenSearchAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try SearchFeature.`get`.forceCast(model).openSearch())
    (try SearchFeature.`get`.forceCast(application).openSearch())
    return ZeroSuggestComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return OpenSearchAction.type
  }

}

open class ClearTextFieldAction: MBTAction {
  public static let type: MBTActionType = "ClearTextFieldAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isInSearch = (try SearchFeature.`get`.forceCast(model).isInSearch())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return isInSearch && currentContainer.type == MessageContainerType.search
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return ClearTextFieldAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try SearchFeature.`get`.forceCast(model).clearTextField())
    (try SearchFeature.`get`.forceCast(application).clearTextField())
    return ZeroSuggestComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

}

