// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/search/advanced-search-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class AddFolderToSearchAction(protected var folderName: FolderName): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return ContainerGetterFeature.`get`.castIfSupported(model)!!.getCurrentContainer().type == MessageContainerType.search
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return AddFolderToSearchAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        AdvancedSearchFeature.`get`.forceCast(model).addFolderToSearch(this.folderName)
        AdvancedSearchFeature.`get`.forceCast(application).addFolderToSearch(this.folderName)
        return history.currentComponent
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return AdvancedSearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return AddFolderToSearchAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "AddFolderToSearchAction"
    }
}

public open class AddLabelToSearchAction(protected var labelName: LabelName): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return ContainerGetterFeature.`get`.castIfSupported(model)!!.getCurrentContainer().type == MessageContainerType.search
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return AddLabelToSearchAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        AdvancedSearchFeature.`get`.forceCast(model).addFolderToSearch(this.labelName)
        AdvancedSearchFeature.`get`.forceCast(application).addFolderToSearch(this.labelName)
        return history.currentComponent
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return AdvancedSearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return AddLabelToSearchAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "AddLabelToSearchAction"
    }
}

public open class SearchOnlyImportantAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return ContainerGetterFeature.`get`.castIfSupported(model)!!.getCurrentContainer().type == MessageContainerType.search
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return SearchOnlyImportantAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        AdvancedSearchFeature.`get`.forceCast(model).searchOnlyImportant()
        AdvancedSearchFeature.`get`.forceCast(application).searchOnlyImportant()
        return history.currentComponent
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return AdvancedSearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return SearchOnlyImportantAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SearchOnlyImportantAction"
    }
}

