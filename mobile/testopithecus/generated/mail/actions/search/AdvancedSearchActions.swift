// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/search/advanced-search-actions.ts >>>

import Foundation

open class AddFolderToSearchAction: MBTAction {
  public static let type: MBTActionType = "AddFolderToSearchAction"
  public var folderName: FolderName
  public init(_ folderName: FolderName) {
    self.folderName = folderName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try ContainerGetterFeature.`get`.castIfSupported(model)!.getCurrentContainer()).type == MessageContainerType.search
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return AddFolderToSearchAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AdvancedSearchFeature.`get`.forceCast(model).addFolderToSearch(self.folderName))
    (try AdvancedSearchFeature.`get`.forceCast(application).addFolderToSearch(self.folderName))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AdvancedSearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return AddFolderToSearchAction.type
  }

}

open class AddLabelToSearchAction: MBTAction {
  public static let type: MBTActionType = "AddLabelToSearchAction"
  public var labelName: LabelName
  public init(_ labelName: LabelName) {
    self.labelName = labelName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try ContainerGetterFeature.`get`.castIfSupported(model)!.getCurrentContainer()).type == MessageContainerType.search
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return AddLabelToSearchAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AdvancedSearchFeature.`get`.forceCast(model).addFolderToSearch(self.labelName))
    (try AdvancedSearchFeature.`get`.forceCast(application).addFolderToSearch(self.labelName))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AdvancedSearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return AddLabelToSearchAction.type
  }

}

open class SearchOnlyImportantAction: MBTAction {
  public static let type: MBTActionType = "SearchOnlyImportantAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try ContainerGetterFeature.`get`.castIfSupported(model)!.getCurrentContainer()).type == MessageContainerType.search
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return SearchOnlyImportantAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AdvancedSearchFeature.`get`.forceCast(model).searchOnlyImportant())
    (try AdvancedSearchFeature.`get`.forceCast(application).searchOnlyImportant())
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AdvancedSearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return SearchOnlyImportantAction.type
  }

}

