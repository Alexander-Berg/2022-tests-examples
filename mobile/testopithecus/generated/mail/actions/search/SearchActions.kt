// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/search/search-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class SearchAllMessagesAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val isInSearch = SearchFeature.`get`.forceCast(model).isInSearch()
        return isInSearch
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return SearchAllMessagesAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        SearchFeature.`get`.forceCast(model).searchAllMessages()
        SearchFeature.`get`.forceCast(application).searchAllMessages()
        return MaillistComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return SearchAllMessagesAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SearchAllMessagesAction"
    }
}

public open class SearchByRequestAction(protected var request: String): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val isInSearch = SearchFeature.`get`.forceCast(model).isInSearch()
        return isInSearch
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return SearchByRequestAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        SearchFeature.`get`.forceCast(model).searchByQuery(this.request)
        SearchFeature.`get`.forceCast(application).searchByQuery(this.request)
        return MaillistComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return SearchByRequestAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SearchByRequestAction"
    }
}

public open class CloseSearchAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val isInSearch = SearchFeature.`get`.forceCast(model).isInSearch()
        return isInSearch
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return CloseSearchAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        SearchFeature.`get`.forceCast(model).closeSearch()
        SearchFeature.`get`.forceCast(application).closeSearch()
        val previousDifferentComponent = history.previousDifferentComponent
        if (previousDifferentComponent == null || mutableListOf(ZeroSuggestComponent().tostring(), MessageComponent().tostring()).contains(previousDifferentComponent.tostring())) {
            return MaillistComponent()
        }
        return previousDifferentComponent!!
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return CloseSearchAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "CloseSearchAction"
    }
}

public open class OpenSearchAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val isInSearch = SearchFeature.`get`.forceCast(model).isInSearch()
        return !isInSearch
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf(Eventus.searchEvents.open())
    }

    open override fun getActionType(): String {
        return OpenSearchAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        SearchFeature.`get`.forceCast(model).openSearch()
        SearchFeature.`get`.forceCast(application).openSearch()
        return ZeroSuggestComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return OpenSearchAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenSearchAction"
    }
}

public open class ClearTextFieldAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val isInSearch = SearchFeature.`get`.forceCast(model).isInSearch()
        val currentContainer = ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()
        return isInSearch && currentContainer.type == MessageContainerType.search
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return ClearTextFieldAction.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        SearchFeature.`get`.forceCast(model).clearTextField()
        SearchFeature.`get`.forceCast(application).clearTextField()
        return ZeroSuggestComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return SearchFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return this.getActionType()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ClearTextFieldAction"
    }
}

