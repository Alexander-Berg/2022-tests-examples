// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/base-actions/spamable-actions.ts >>>

import Foundation

open class BaseSpamAction: MBTAction {
  public var order: Int32
  private var type: MBTActionType
  public init(_ order: Int32, _ type: MBTActionType) {
    self.order = order
    self.type = type
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && ContainerGetterFeature.`get`.included(modelFeatures) && SpamableFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListDisplayModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListDisplayModel.getMessageList(self.order + 1))
    let canPerform = (try self.canBePerformedImpl(model))
    return messages.length > self.order && canPerform
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(SpamableFeature.`get`.forceCast(model)))
    (try self.performImpl(SpamableFeature.`get`.forceCast(application)))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.openMessageActions(self.order, int64(-1)))
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return self.type
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: Spamable) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func canBePerformedImpl(_ model: App) throws -> Bool {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func tostring() -> String {
    fatalError("Must be overridden in subclasses")
  }

}

open class MoveFromSpamAction: BaseSpamAction {
  public static let type: MBTActionType = "MoveFromSpam"
  public init(_ order: Int32) {
    super.init(order, MoveFromSpamAction.type)
  }

  @discardableResult
  open override func getActionType() -> MBTActionType {
    return MoveFromSpamAction.type
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Spamable) throws -> Void {
    (try modelOrApplication.moveFromSpam(self.order))
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(MoveFromSpamAction.type)(#\(self.order))"
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    let events = super.events()
    events.push(Eventus.messageListEvents.markMessageAsSpam(self.order, int64(-1)))
    return events
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: App) throws -> Bool {
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return currentContainer.type == MessageContainerType.folder && currentContainer.name == DefaultFolderName.spam
  }

}

open class MoveToSpamAction: BaseSpamAction {
  public static let type: MBTActionType = "MoveToSpam"
  public init(_ order: Int32) {
    super.init(order, MoveToSpamAction.type)
  }

  @discardableResult
  open override func getActionType() -> MBTActionType {
    return MoveToSpamAction.type
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Spamable) throws -> Void {
    (try modelOrApplication.moveToSpam(self.order))
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(MoveToSpamAction.type)(#\(self.order))"
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    let events = super.events()
    events.push(Eventus.messageListEvents.markMessageAsNotSpam(self.order, int64(-1)))
    return events
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: App) throws -> Bool {
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return currentContainer.type == MessageContainerType.folder && currentContainer.name != DefaultFolderName.spam
  }

}

