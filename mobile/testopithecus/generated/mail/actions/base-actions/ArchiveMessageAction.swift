// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/base-actions/archive-message-action.ts >>>

import Foundation

open class ArchiveMessageAction: MBTAction {
  public static let type: MBTActionType = "ArchiveMessage"
  private var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && ContainerGetterFeature.`get`.included(modelFeatures) && ArchiveMessageFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListDisplayModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListDisplayModel.getMessageList(self.order + 1))
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return (currentContainer.type == MessageContainerType.folder && currentContainer.name != DefaultFolderName.archive && self.order < messages.length)
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ArchiveMessageFeature.`get`.forceCast(model).archiveMessage(self.order))
    (try ArchiveMessageFeature.`get`.forceCast(application).archiveMessage(self.order))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return ArchiveMessageAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "MoveToArchive(#\(self.order))"
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.openMessageActions(self.order, int64(-1)), Eventus.messageListEvents.archiveMessage(self.order, int64(-1)))
  }

}

