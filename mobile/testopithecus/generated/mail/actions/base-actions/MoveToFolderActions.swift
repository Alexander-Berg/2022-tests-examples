// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/base-actions/move-to-folder-actions.ts >>>

import Foundation

open class MoveToFolderAction: MBTAction {
  public static let type: MBTActionType = "MoveToFolder"
  private var order: Int32
  private var folderName: FolderName
  public init(_ order: Int32, _ folderName: FolderName) {
    self.order = order
    self.folderName = folderName
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.included(modelFeatures) && MovableToFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ContainerGetterFeature.`get`.included(modelFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let folderNavigatorModel = FolderNavigatorFeature.`get`.forceCast(model)
    let folders = (try folderNavigatorModel.getFoldersList())
    let containerGetterModel = ContainerGetterFeature.`get`.forceCast(model)
    let currentContainer = (try containerGetterModel.getCurrentContainer())
    return (keysArray(folders).filter({
      (folder) in
      folder == self.folderName
    }).length > 0 && currentContainer.type == MessageContainerType.folder && currentContainer.name != self.folderName)
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.openMessageActions(self.order, int64(-1)), Eventus.messageListEvents.moveMessageToFolder(self.order, int64(-1)))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try MovableToFolderFeature.`get`.forceCast(model).moveMessageToFolder(self.order, self.folderName))
    (try MovableToFolderFeature.`get`.forceCast(application).moveMessageToFolder(self.order, self.folderName))
    return history.currentComponent
  }

  @discardableResult
  open func tostring() -> String {
    return "MovableToFolderAction(\(self.order) \(self.folderName))"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return MoveToFolderAction.type
  }

}

open class MoveToFolderTapOnFolderAction: MBTAction {
  public static let type: MBTActionType = "MoveToFolderTapOnFolderAction"
  private let folderName: FolderName
  public init(_ folderName: FolderName) {
    self.folderName = folderName
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.included(modelFeatures) && MoveToFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let folderList = (try FolderNavigatorFeature.`get`.forceCast(model).getFoldersList())
    return folderList.has(self.folderName)
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try MoveToFolderFeature.`get`.forceCast(model).tapOnFolder(self.folderName))
    (try MoveToFolderFeature.`get`.forceCast(application).tapOnFolder(self.folderName))
    return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
  }

  @discardableResult
  open func tostring() -> String {
    return "\(MoveToFolderTapOnFolderAction.type)(\(self.folderName))"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return MoveToFolderTapOnFolderAction.type
  }

}

open class MoveToFolderTapOnCreateFolderAction: MBTAction {
  public static let type: MBTActionType = "MoveToFolderTapOnCreateFolderAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return MoveToFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try MoveToFolderFeature.`get`.forceCast(model).tapOnCreateFolder())
    (try MoveToFolderFeature.`get`.forceCast(application).tapOnCreateFolder())
    return CreateFolderComponent()
  }

  @discardableResult
  open func tostring() -> String {
    return "\(MoveToFolderTapOnCreateFolderAction.type)"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return MoveToFolderTapOnCreateFolderAction.type
  }

}

