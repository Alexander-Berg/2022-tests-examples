// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/message-list-actions.ts >>>

import Foundation

open class RefreshMessageListAction: BaseSimpleAction<MessageListDisplay, MBTComponent> {
  public static let type: MBTActionType = "RefreshMessageList"
  public init() {
    super.init(RefreshMessageListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<MessageListDisplay> {
    return MessageListDisplayFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MessageListDisplay, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.refreshMessageList())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.refreshMessageList())
  }

  @discardableResult
  open override func tostring() -> String {
    return "RefreshMessageList"
  }

}

open class IsDisplayNotificationTabsAction: MBTAction {
  public static let type: MBTActionType = "IsDisplayNotificationTabs"
  private var tabsName: String
  public init(_ tabsName: String) {
    self.tabsName = tabsName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    let isInTabs = (try FolderNavigatorFeature.`get`.forceCast(model).isInTabsMode())
    return (isInTabs && currentContainer.name == DefaultFolderName.inbox && (self.tabsName == DefaultFolderName.mailingLists || self.tabsName == DefaultFolderName.socialNetworks))
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try TabsFeature.`get`.forceCast(model).isDisplayNotificationTabs(self.tabsName))
    (try TabsFeature.`get`.forceCast(application).isDisplayNotificationTabs(self.tabsName))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return TabsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return IsDisplayNotificationTabsAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

}

open class OpenTabByTabNotificationAction: MBTAction {
  public static let type: MBTActionType = "OpenTabByTabNotification"
  private var tabsName: String
  public init(_ tabsName: String) {
    self.tabsName = tabsName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    let isInTabs = (try FolderNavigatorFeature.`get`.forceCast(model).isInTabsMode())
    let isDisplayTabsNotification = (try TabsFeature.`get`.forceCast(model).isDisplayNotificationTabs(self.tabsName))
    return isInTabs && currentContainer.name == DefaultFolderName.inbox && isDisplayTabsNotification
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try TabsFeature.`get`.forceCast(model).goToTabByNotification(self.tabsName))
    (try TabsFeature.`get`.forceCast(application).goToTabByNotification(self.tabsName))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return TabsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenTabByTabNotificationAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

}

open class GetPositionTabsNotificationInMessageList: MBTAction {
  public static let type: MBTActionType = "GetPositionTabsNotificationInMessageList"
  private var tabsName: String
  public init(_ tabsName: String) {
    self.tabsName = tabsName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    let isInTabs = (try FolderNavigatorFeature.`get`.forceCast(model).isInTabsMode())
    return (isInTabs && currentContainer.name == DefaultFolderName.inbox && (self.tabsName == DefaultFolderName.mailingLists || self.tabsName == DefaultFolderName.socialNetworks))
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try TabsFeature.`get`.forceCast(model).getPositionTabsNotification(self.tabsName))
    (try TabsFeature.`get`.forceCast(application).getPositionTabsNotification(self.tabsName))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return TabsFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return GetPositionTabsNotificationInMessageList.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

}

open class SwipeDownMessageListAction: BaseSimpleAction<MessageListDisplay, MBTComponent> {
  public static let type: MBTActionType = "SwipeDownMessageList"
  public init() {
    super.init(SwipeDownMessageListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<MessageListDisplay> {
    return MessageListDisplayFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MessageListDisplay, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.swipeDownMessageList())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SwipeDownMessageList"
  }

}

