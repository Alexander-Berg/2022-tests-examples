// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/short-swipe-actions.ts >>>

import Foundation

open class DeleteMessageByShortSwipeAction: MBTAction {
  public static let type: MBTActionType = "DeleteMessageByShortSwipeAction"
  public var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ShortSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    let actionOnSwipe = (try GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return (self.order < messages.length && (actionOnSwipe == ActionOnSwipe.delete || currentContainer.name == DefaultFolderName.archive))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ShortSwipeFeature.`get`.forceCast(model).deleteMessageByShortSwipe(self.order))
    (try ShortSwipeFeature.`get`.forceCast(application).deleteMessageByShortSwipe(self.order))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.deleteMessage(self.order, fakeMid()))
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return DeleteMessageByShortSwipeAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "DeleteMessageByShortSwipeAction(\(self.order))"
  }

}

open class ArchiveMessageByShortSwipeAction: MBTAction {
  public static let type: MBTActionType = "ArchiveMessageByShortSwipeAction"
  public var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ShortSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    let actionOnSwipe = (try GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return (self.order < messages.length && actionOnSwipe == ActionOnSwipe.archive && (currentContainer.type == MessageContainerType.folder || currentContainer.type == MessageContainerType.search) && currentContainer.name != DefaultFolderName.archive)
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ShortSwipeFeature.`get`.forceCast(model).archiveMessageByShortSwipe(self.order))
    (try ShortSwipeFeature.`get`.forceCast(application).archiveMessageByShortSwipe(self.order))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return ArchiveMessageByShortSwipeAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "ArchiveMessageByShortSwipeAction(\(self.order))"
  }

}

open class MarkAsUnreadFromShortSwipeAction: MBTAction {
  public static let type: MBTActionType = "MarkAsUnreadFromShortSwipeAction"
  public var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    return self.order < messages.length && messages[self.order].read
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.markMessageAsUnread(self.order, fakeMid()))
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return MarkAsUnreadFromShortSwipeAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ShortSwipeFeature.`get`.forceCast(model).markAsUnread(self.order))
    (try ShortSwipeFeature.`get`.forceCast(application).markAsUnread(self.order))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ShortSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return "MarkAsUnreadFromShortSwipeAction(\(self.order))"
  }

}

open class MarkAsReadFromShortSwipeAction: MBTAction {
  public static let type: MBTActionType = "MarkAsReadFromShortSwipeAction"
  public var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    return self.order < messages.length && !messages[self.order].read
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.markMessageAsRead(self.order, fakeMid()))
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return MarkAsReadFromShortSwipeAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ShortSwipeFeature.`get`.forceCast(model).markAsRead(self.order))
    (try ShortSwipeFeature.`get`.forceCast(application).markAsRead(self.order))
    return history.currentComponent
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ShortSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return "MarkAsReadFromShortSwipeAction(\(self.order))"
  }

}

