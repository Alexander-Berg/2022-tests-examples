// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/long-swipe-actions.ts >>>

import Foundation

open class DeleteMessageByLongSwipeAction: MBTAction {
  public static let type: MBTActionType = "DeleteMessageByLongSwipeAction"
  public var order: Int32
  public var confirmDeletionIfNeeded: Bool
  public init(_ order: Int32, _ confirmDeletionIfNeeded: Bool = true) {
    self.order = order
    self.confirmDeletionIfNeeded = confirmDeletionIfNeeded
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return LongSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    let actionOnSwipe = (try GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return (self.order < messages.length && (actionOnSwipe == ActionOnSwipe.delete || currentContainer.name == DefaultFolderName.archive))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try LongSwipeFeature.`get`.forceCast(model).deleteMessageByLongSwipe(self.order, self.confirmDeletionIfNeeded))
    (try LongSwipeFeature.`get`.forceCast(application).deleteMessageByLongSwipe(self.order, self.confirmDeletionIfNeeded))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.deleteMessage(self.order, fakeMid()))
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return DeleteMessageByLongSwipeAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "DeleteMessageByLongSwipeAction(\(self.order))"
  }

}

open class ArchiveMessageByLongSwipeAction: MBTAction {
  public static let type: MBTActionType = "ArchiveMessageByLongSwipeAction"
  public var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return LongSwipeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    let actionOnSwipe = (try GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return (self.order < messages.length && actionOnSwipe == ActionOnSwipe.archive && YSArray(MessageContainerType.folder, MessageContainerType.label, MessageContainerType.search).includes(currentContainer.type) && currentContainer.name != DefaultFolderName.archive)
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try LongSwipeFeature.`get`.forceCast(model).archiveMessageByLongSwipe(self.order))
    (try LongSwipeFeature.`get`.forceCast(application).archiveMessageByLongSwipe(self.order))
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return ArchiveMessageByLongSwipeAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "ArchiveMessageByLongSwipeAction(\(self.order))"
  }

}

