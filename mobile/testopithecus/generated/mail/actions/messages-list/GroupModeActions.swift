// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/group-mode-actions.ts >>>

import Foundation

open class BaseGroupModeAction: MBTAction {
  private var type: MBTActionType
  public init(_ type: MBTActionType) {
    self.type = type
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ContainerGetterFeature.`get`.included(modelFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let groupModeModel = GroupModeFeature.`get`.forceCast(model)
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let containersModel = ContainerGetterFeature.`get`.forceCast(model)
    let messages = (try messageListModel.getMessageList(10))
    let selectedMessageOrders = (try groupModeModel.getSelectedMessages())
    if selectedMessageOrders == nil {
      return false
    }
    let selectedMessages: YSArray<MessageView> = YSArray()
    for order in selectedMessageOrders.values() {
      selectedMessages.push(messages[order])
    }
    let currentContainer = (try containersModel.getCurrentContainer())
    if currentContainer.type != MessageContainerType.folder {
      return false
    }
    return (try self.canBePerformedImpl(selectedMessages, selectedMessageOrders, requireNonNull(currentContainer.name, "Мы не находимся в папке")))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(GroupModeFeature.`get`.forceCast(model)))
    (try self.performImpl(GroupModeFeature.`get`.forceCast(application)))
    return MaillistComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return self.type
  }

  @discardableResult
  open func canBePerformedImpl(_ messages: YSArray<MessageView>, _ selectedOrders: YSSet<Int32>, _ currentFolder: FolderName) throws -> Bool {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func tostring() -> String {
    fatalError("Must be overridden in subclasses")
  }

}

open class BaseMarkSelectedMessages: MBTAction {
  private var type: MBTActionType
  public init(_ type: MBTActionType) {
    self.type = type
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let messageListModel = MessageListDisplayFeature.`get`.forceCast(model)
    let groupModeModel = GroupModeFeature.`get`.forceCast(model)
    let selectedMessageOrders = (try groupModeModel.getSelectedMessages())
    if selectedMessageOrders == nil {
      return false
    }
    let messages = (try messageListModel.getMessageList(10))
    let unreadCount = filterByOrders(messages, selectedMessageOrders).filter({
      (message) in
      !message.read
    }).length
    return (try self.canBePerformedImpl(unreadCount))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(GroupModeFeature.`get`.forceCast(model)))
    (try self.performImpl(GroupModeFeature.`get`.forceCast(application)))
    return MaillistComponent()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return self.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func canBePerformedImpl(_ selectedUnreadCount: Int32) throws -> Bool {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

}

open class GroupModeInitialSelectAction: BaseSimpleAction<GroupMode, MaillistComponent> {
  public static let type: MBTActionType = "GroupModeInitialSelectAction"
  private var order: Int32
  public init(_ order: Int32) {
    self.order = order
    super.init(GroupModeSelectAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<GroupMode> {
    return GroupModeFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: GroupMode) throws -> Bool {
    let isInGroupMode = (try model.isInGroupMode())
    return !isInGroupMode
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.groupActionsEvents.selectMessage(self.order, int64(-1)))
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode, _ _currentComponent: MaillistComponent) throws -> MBTComponent {
    (try modelOrApplication.initialMessageSelect(self.order))
    return GroupOperationsComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(GroupModeInitialSelectAction.type)(\(self.order))"
  }

}

open class GroupModeSelectAction: BaseSimpleAction<GroupMode, GroupOperationsComponent> {
  public static let type: MBTActionType = "GroupModeSelectAction"
  private var order: Int32
  public init(_ order: Int32) {
    self.order = order
    super.init(GroupModeSelectAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<GroupMode> {
    return GroupModeFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: GroupMode) throws -> Bool {
    return (try model.isInGroupMode())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.groupActionsEvents.selectMessage(self.order, int64(-1)))
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode, _ _currentComponent: GroupOperationsComponent) throws -> MBTComponent {
    (try modelOrApplication.selectMessage(self.order))
    return GroupOperationsComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(GroupModeSelectAction.type)(\(self.order))"
  }

}

open class GroupModeSelectAllAction: BaseSimpleAction<GroupMode, GroupOperationsComponent> {
  public static let type: MBTActionType = "GroupModeSelectAllAction"
  public init() {
    super.init(GroupModeSelectAllAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<GroupMode> {
    return GroupModeFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: GroupMode) throws -> Bool {
    return (try model.isInGroupMode())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode, _ _currentComponent: GroupOperationsComponent) throws -> MBTComponent {
    (try modelOrApplication.selectAllMessages())
    return GroupOperationsComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(GroupModeSelectAllAction.type)"
  }

}

open class GroupModeMarkAsReadAction: BaseMarkSelectedMessages {
  public static let type: MBTActionType = "GroupModeMarkAsUnreadAction"
  public init() {
    super.init(GroupModeMarkAsReadAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ selectedUnreadCount: Int32) throws -> Bool {
    return selectedUnreadCount > 0
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.markAsRead())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.groupActionsEvents.markAsReadSelectedMessages())
  }

}

open class GroupModeMarkAsUnreadAction: BaseMarkSelectedMessages {
  public static let type: MBTActionType = "GroupModeMarkAsUnreadAction"
  public init() {
    super.init(GroupModeMarkAsUnreadAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ selectedUnreadCount: Int32) throws -> Bool {
    return selectedUnreadCount == 0
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.markAsUnread())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.groupActionsEvents.markAsUnreadSelectedMessages())
  }

}

open class GroupModeDeleteAction: MBTAction {
  public static let type: MBTActionType = "GroupModeDeleteAction"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try GroupModeFeature.`get`.forceCast(model).delete())
    (try GroupModeFeature.`get`.forceCast(application).delete())
    return MaillistComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.groupActionsEvents.deleteSelectedMessages())
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return GroupModeDeleteAction.type
  }

}

open class GroupModeArchiveAction: MBTAction {
  public static let type: MBTActionType = "GroupModeArchiveAction"
  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try ContainerGetterFeature.`get`.castIfSupported(model)!.getCurrentContainer()).name != DefaultFolderName.archive
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try GroupModeFeature.`get`.forceCast(model).archive())
    (try GroupModeFeature.`get`.forceCast(application).archive())
    return MaillistComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return self.getActionType()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return GroupModeArchiveAction.type
  }

}

open class GroupModeMarkImportantAction: BaseGroupModeAction {
  public static let type: MBTActionType = "GroupModeMarkImportantAction"
  public init() {
    super.init(GroupModeMarkImportantAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ messages: YSArray<MessageView>, _ _selectedOrders: YSSet<Int32>, _ _currentFolder: FolderName) throws -> Bool {
    return messages.map({
      (m) in
      !m.important
    }).includes(true)
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.markAsImportant())
  }

  @discardableResult
  open override func tostring() -> String {
    return GroupModeMarkImportantAction.type
  }

}

open class GroupModeMarkUnimportantAction: BaseGroupModeAction {
  public static let type: MBTActionType = "GroupModeMarkUnimportantAction"
  public init() {
    super.init(GroupModeMarkUnimportantAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ messages: YSArray<MessageView>, _ _selectedOrders: YSSet<Int32>, _ _currentFolder: FolderName) throws -> Bool {
    return messages.map({
      (m) in
      !m.important
    }).includes(false)
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.markAsUnimportant())
  }

  @discardableResult
  open override func tostring() -> String {
    return GroupModeMarkUnimportantAction.type
  }

}

open class GroupModeMarkSpamAction: BaseGroupModeAction {
  public static let type: MBTActionType = "GroupModeMarkSpamAction"
  public init() {
    super.init(GroupModeMarkSpamAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ messages: YSArray<MessageView>, _ selectedOrders: YSSet<Int32>, _ currentFolder: FolderName) throws -> Bool {
    return currentFolder != DefaultFolderName.spam
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.markAsSpam())
  }

  @discardableResult
  open override func tostring() -> String {
    return GroupModeMarkSpamAction.type
  }

}

open class GroupModeMarkNotSpamAction: BaseGroupModeAction {
  public static let type: MBTActionType = "GroupModeMarkNotSpamAction"
  public init() {
    super.init(GroupModeMarkNotSpamAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ messages: YSArray<MessageView>, _ selectedOrders: YSSet<Int32>, _ currentFolder: FolderName) throws -> Bool {
    return currentFolder == DefaultFolderName.spam
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.markAsNotSpam())
  }

  @discardableResult
  open override func tostring() -> String {
    return GroupModeMarkNotSpamAction.type
  }

}

open class GroupModeMoveToFolderAction: MBTAction {
  public static let type: MBTActionType = "GroupModeMoveToFolderAction"
  private var folderName: FolderName
  public init(_ folderName: FolderName) {
    self.folderName = folderName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let currentContainer = (try ContainerGetterFeature.`get`.castIfSupported(model)!.getCurrentContainer())
    return currentContainer.type == MessageContainerType.folder && currentContainer.name != self.folderName
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return GroupModeMoveToFolderAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try GroupModeFeature.`get`.forceCast(model).openMoveToFolderScreen())
    (try GroupModeFeature.`get`.forceCast(application).openMoveToFolderScreen())
    (try MoveToFolderFeature.`get`.forceCast(model).tapOnFolder(self.folderName))
    (try MoveToFolderFeature.`get`.forceCast(application).tapOnFolder(self.folderName))
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func tostring() -> String {
    return "\(GroupModeMoveToFolderAction.type)(\(self.folderName))"
  }

}

open class GroupModeApplyLabelsAction: MBTAction {
  public static let type: MBTActionType = "GroupModeApplyLabelsAction"
  private var labelNames: YSArray<LabelName>
  public init(_ labelNames: YSArray<LabelName>) {
    self.labelNames = labelNames
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return !YSArray(DefaultFolderName.spam, DefaultFolderName.trash).includes((try ContainerGetterFeature.`get`.castIfSupported(model)!.getCurrentContainer()).name)
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return GroupModeApplyLabelsAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try GroupModeFeature.`get`.forceCast(model).openApplyLabelsScreen())
    (try GroupModeFeature.`get`.forceCast(application).openApplyLabelsScreen())
    let modelApplyLabel = ApplyLabelFeature.`get`.forceCast(model)
    let appApplyLabel = ApplyLabelFeature.`get`.forceCast(application)
    (try modelApplyLabel.selectLabelsToAdd(self.labelNames))
    (try appApplyLabel.selectLabelsToAdd(self.labelNames))
    (try modelApplyLabel.tapOnDoneButton())
    (try appApplyLabel.tapOnDoneButton())
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ApplyLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func tostring() -> String {
    return "\(GroupModeApplyLabelsAction.type)(\(self.labelNames))"
  }

}

open class GroupModeRemoveLabelsAction: MBTAction {
  public static let type: MBTActionType = "GroupModeRemoveLabelsAction"
  private var labelNames: YSArray<LabelName>
  public init(_ labelNames: YSArray<LabelName>) {
    self.labelNames = labelNames
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return !YSArray(DefaultFolderName.spam, DefaultFolderName.trash).includes((try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()).name)
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return GroupModeRemoveLabelsAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try GroupModeFeature.`get`.forceCast(model).openApplyLabelsScreen())
    (try GroupModeFeature.`get`.forceCast(application).openApplyLabelsScreen())
    let modelApplyLabel = ApplyLabelFeature.`get`.forceCast(model)
    let appApplyLabel = ApplyLabelFeature.`get`.forceCast(application)
    (try modelApplyLabel.deselectLabelsToRemove(self.labelNames))
    (try appApplyLabel.deselectLabelsToRemove(self.labelNames))
    (try modelApplyLabel.tapOnDoneButton())
    (try appApplyLabel.tapOnDoneButton())
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (MessageListDisplayFeature.`get`.included(modelFeatures) && GroupModeFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func tostring() -> String {
    return "\(GroupModeRemoveLabelsAction.type)(\(self.labelNames))"
  }

}

open class GroupModeUnselectMessageAction: BaseGroupModeAction {
  public static let type: MBTActionType = "GroupModeUnselectMessageAction"
  private var order: Int32
  public init(_ order: Int32) {
    self.order = order
    super.init(GroupModeUnselectMessageAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ messages: YSArray<MessageView>, _ selectedOrders: YSSet<Int32>, _ _currentFolder: FolderName) throws -> Bool {
    return selectedOrders.has(self.order)
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.groupActionsEvents.deselectMessage(self.order, fakeMid()))
  }

  @discardableResult
  open override func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(GroupModeFeature.`get`.forceCast(model)))
    (try self.performImpl(GroupModeFeature.`get`.forceCast(application)))
    if (try GroupModeFeature.`get`.forceCast(model).isInGroupMode()) {
      return history.currentComponent
    } else {
      return MaillistComponent()
    }
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.unselectMessage(self.order))
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(GroupModeUnselectMessageAction.type)(\(self.order))"
  }

}

open class GroupModeUnselectAllAction: BaseGroupModeAction {
  public static let type: MBTActionType = "GroupModeUnselectAllAction"
  public init() {
    super.init(GroupModeUnselectAllAction.type)
  }

  @discardableResult
  open func requiredFeature() -> Feature<GroupMode> {
    return GroupModeFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ messages: YSArray<MessageView>, _ selectedOrders: YSSet<Int32>, _ _currentFolder: FolderName) throws -> Bool {
    return selectedOrders.size >= 1
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GroupMode) throws -> Void {
    (try modelOrApplication.unselectAllMessages())
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return GroupModeUnselectAllAction.type
  }

}

