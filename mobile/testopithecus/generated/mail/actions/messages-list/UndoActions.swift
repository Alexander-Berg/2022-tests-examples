// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/undo-actions.ts >>>

import Foundation

open class UndoDeleteAction: MBTAction {
  public static let type: MBTActionType = "UndoDeleteAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return UndoFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let undoModel = UndoFeature.`get`.forceCast(model)
    return (try undoModel.isUndoDeleteToastShown()) != UndoState.notShown
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try UndoFeature.`get`.forceCast(model).undoDelete())
    (try UndoFeature.`get`.forceCast(application).undoDelete())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return UndoDeleteAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "UndoDeleteMessage"
  }

}

open class UndoArchiveAction: MBTAction {
  public static let type: MBTActionType = "UndoArchiveAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return UndoFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let undoModel = UndoFeature.`get`.forceCast(model)
    return (try undoModel.isUndoArchiveToastShown()) != UndoState.notShown
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try UndoFeature.`get`.forceCast(model).undoArchive())
    (try UndoFeature.`get`.forceCast(application).undoArchive())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return UndoArchiveAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "UndoArchiveMessage"
  }

}

open class UndoSpamAction: MBTAction {
  public static let type: MBTActionType = "UndoSpamAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return UndoFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let undoModel = UndoFeature.`get`.forceCast(model)
    return (try undoModel.isUndoSpamToastShown()) != UndoState.notShown
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try UndoFeature.`get`.forceCast(model).undoSpam())
    (try UndoFeature.`get`.forceCast(application).undoSpam())
    return history.currentComponent
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return UndoSpamAction.type
  }

  @discardableResult
  open func tostring() -> String {
    return "UndoSpamMessage"
  }

}

