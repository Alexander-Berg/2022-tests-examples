// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/translator-actions.ts >>>

import Foundation

open class TranslatorBarTapOnSourceLanguageAction: BaseSimpleAction<TranslatorBar, MBTComponent> {
  public static let type: MBTActionType = "TranslatorBarTapOnSourceLanguageAction"
  public init() {
    super.init(TranslatorBarTapOnSourceLanguageAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorBar> {
    return TranslatorBarFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorBar) throws -> Bool {
    return (try model.isTranslatorBarShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorBar, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnSourceLanguage())
    return SourceLanguageListComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorBarTapOnSourceLanguageAction"
  }

}

open class TranslatorBarTapOnTargetLanguageAction: BaseSimpleAction<TranslatorBar, MBTComponent> {
  public static let type: MBTActionType = "TranslatorBarTapOnTargetLanguageAction"
  public init() {
    super.init(TranslatorBarTapOnTargetLanguageAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorBar> {
    return TranslatorBarFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorBar) throws -> Bool {
    return (try model.isTranslatorBarShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorBar, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnTargetLanguage())
    return TargetLanguageListComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorBarTapOnTargetLanguageAction"
  }

}

open class TranslatorBarTapOnCloseButtonAction: BaseSimpleAction<TranslatorBar, MBTComponent> {
  public static let type: MBTActionType = "TranslatorBarTapOnCloseButtonAction"
  private let hideTranslatorForThisLanguage: Bool
  public init(_ hideTranslatorForThisLanguage: Bool, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.hideTranslatorForThisLanguage = hideTranslatorForThisLanguage
    super.init(TranslatorBarTapOnCloseButtonAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorBar> {
    return TranslatorBarFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorBar) throws -> Bool {
    return (try model.isTranslatorBarShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorBar, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnCloseBarButton(self.hideTranslatorForThisLanguage))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorBarTapOnCloseButtonAction"
  }

}

open class TranslatorBarTapOnTranslateButtonAction: BaseSimpleAction<TranslatorBar, MBTComponent> {
  public static let type: MBTActionType = "TranslatorBarTapOnTranslateButtonAction"
  public init() {
    super.init(TranslatorBarTapOnTranslateButtonAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorBar> {
    return TranslatorBarFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorBar) throws -> Bool {
    return (try model.isTranslatorBarShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorBar, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnTranslateButton())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorBarTapOnTranslateButtonAction"
  }

}

open class TranslatorBarTapOnRevertButtonAction: BaseSimpleAction<TranslatorBar, MBTComponent> {
  public static let type: MBTActionType = "TranslatorBarTapOnRevertButtonAction"
  public init() {
    super.init(TranslatorBarTapOnRevertButtonAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorBar> {
    return TranslatorBarFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorBar) throws -> Bool {
    return (try model.isTranslatorBarShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorBar, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnRevertButton())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorBarTapOnRevertButtonAction"
  }

}

open class TranslatorSetTargetLanguageAction: BaseSimpleAction<TranslatorLanguageList, TargetLanguageListComponent> {
  public static let type: MBTActionType = "TranslatorSetTargetLanguageAction"
  private let language: LanguageName
  public init(_ language: LanguageName, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.language = language
    super.init(TranslatorSetTargetLanguageAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorLanguageList> {
    return TranslatorLanguageListFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorLanguageList) throws -> Bool {
    return model.getAllTargetLanguages().includes(self.language)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorLanguageList, _ currentComponent: TargetLanguageListComponent) throws -> MBTComponent {
    (try modelOrApplication.setTargetLanguage(self.language, true))
    return MessageComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorSetTargetLanguageAction(language=\(self.language))"
  }

}

open class TranslatorSetSourceLanguageAction: BaseSimpleAction<TranslatorLanguageList, SourceLanguageListComponent> {
  public static let type: MBTActionType = "TranslatorSetSourceLanguageAction"
  private let language: LanguageName
  public init(_ language: LanguageName, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.language = language
    super.init(TranslatorSetSourceLanguageAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorLanguageList> {
    return TranslatorLanguageListFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorLanguageList) throws -> Bool {
    return model.getAllSourceLanguages().includes(self.language)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorLanguageList, _ currentComponent: SourceLanguageListComponent) throws -> MBTComponent {
    (try modelOrApplication.setSourceLanguage(self.language))
    return MessageComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorSetSourceLanguageAction(language=\(self.language))"
  }

}

open class TranslatorTapOnSearchTextFieldAction: BaseSimpleAction<TranslatorLanguageListSearch, MBTComponent> {
  public static let type: MBTActionType = "TranslatorTapOnSearchTextFieldAction"
  public init() {
    super.init(TranslatorTapOnSearchTextFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorLanguageListSearch> {
    return TranslatorLanguageListSearchFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorLanguageListSearch, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnSearchTextField())
    return SearchLanguageComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorTapOnSearchTextFieldAction"
  }

}

open class TranslatorTapOnSearchCancelButtonAction: MBTAction {
  public static let type: MBTActionType = "TranslatorTapOnSearchCancelButtonAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return TranslatorLanguageListSearchFeature.`get`.included(modelFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try TranslatorLanguageListSearchFeature.`get`.forceCast(model).isSearchTextFieldFocused())
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    let modelTranslatorLanguageListSearch = TranslatorLanguageListSearchFeature.`get`.forceCast(model)
    let appTranslatorLanguageListSearch = TranslatorLanguageListSearchFeature.`get`.forceCast(application)
    (try modelTranslatorLanguageListSearch.tapOnCancelButton())
    (try appTranslatorLanguageListSearch.tapOnCancelButton())
    return requireNonNull(history.previousDifferentComponent, "There is no previous screen")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "TranslatorTapOnSearchCancelButtonAction"
  }

  @discardableResult
  open func getActionType() -> String {
    return TranslatorTapOnSearchCancelButtonAction.type
  }

}

open class TranslatorEnterSearchQueryAction: BaseSimpleAction<TranslatorLanguageListSearch, MBTComponent> {
  public static let type: MBTActionType = "TranslatorEnterSearchQueryAction"
  private let query: String
  public init(_ query: String, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.query = query
    super.init(TranslatorEnterSearchQueryAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorLanguageListSearch> {
    return TranslatorLanguageListSearchFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorLanguageListSearch) throws -> Bool {
    return (try model.isSearchTextFieldFocused())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorLanguageListSearch, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.enterSearchQuery(self.query))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorEnterSearchQueryAction(query=\(self.query))"
  }

}

open class TranslatorTapOnClearSearchButtonAction: BaseSimpleAction<TranslatorLanguageListSearch, MBTComponent> {
  public static let type: MBTActionType = "TranslatorTapOnClearSearchButtonAction"
  public init() {
    super.init(TranslatorTapOnClearSearchButtonAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorLanguageListSearch> {
    return TranslatorLanguageListSearchFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorLanguageListSearch) throws -> Bool {
    return (try model.getSearchQuery()) != ""
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorLanguageListSearch, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnClearSearchFieldButton())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "TranslatorTapOnClearSearchButtonAction"
  }

}

open class SettingsSwitchTranslatorAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsSwitchTranslatorAction"
  public init() {
    super.init(SettingsSwitchTranslatorAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.switchTranslator())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsSwitchTranslatorAction"
  }

}

open class SettingsOpenIgnoredTranslationLanguageListAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsOpenIgnoredTranslationLanguageListAction"
  public init() {
    super.init(SettingsOpenIgnoredTranslationLanguageListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorSettings) throws -> Bool {
    let hasIgnoredLanguages = (try model.getIgnoredTranslationLanguages()).length > 0
    return (try model.isTranslatorEnabled()) && hasIgnoredLanguages
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.openIgnoredTranslationLanguageList())
    return SettingsIgnoredLanguageListComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsOpenIgnoredTranslationLanguageListAction"
  }

}

open class SettingsDeleteLanguageFromIgnoredAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsDeleteLanguageFromIgnoredAction"
  private let language: LanguageName
  public init(_ language: LanguageName, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.language = language
    super.init(SettingsDeleteLanguageFromIgnoredAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.removeTranslationLanguageFromIgnored(self.language))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsDeleteLanguageFromIgnoredAction"
  }

}

open class SettingsCloseIgnoredTranslationLanguageListAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsCloseIgnoredTranslationLanguageListAction"
  public init() {
    super.init(SettingsCloseIgnoredTranslationLanguageListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.closeIgnoredTranslationLanguageList())
    return GeneralSettingsComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsCloseIgnoredTranslationLanguageListAction"
  }

}

open class SettingsOpenDefaultTranslationLanguageListAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsOpenDefaultTranslationLanguageListAction"
  public init() {
    super.init(SettingsOpenDefaultTranslationLanguageListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TranslatorSettings) throws -> Bool {
    return (try model.isTranslatorEnabled())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.openDefaultTranslationLanguageList())
    return SettingsDefaultLanguageListComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsOpenDefaultTranslationLanguageListAction"
  }

}

open class SettingsSetDefaultTranslationLanguageAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsSetDefaultTranslationLanguageAction"
  private let language: LanguageName
  public init(_ language: LanguageName, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.language = language
    super.init(SettingsSetDefaultTranslationLanguageAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setDefaultTranslationLanguage(self.language))
    return GeneralSettingsComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsSetDefaultTranslationLanguageAction"
  }

}

open class SettingsCloseDefaultTranslationLanguageListAction: BaseSimpleAction<TranslatorSettings, MBTComponent> {
  public static let type: MBTActionType = "SettingsCloseDefaultTranslationLanguageListAction"
  public init() {
    super.init(SettingsCloseDefaultTranslationLanguageListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TranslatorSettings> {
    return TranslatorSettingsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TranslatorSettings, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.closeDefaultTranslationLanguageList())
    return GeneralSettingsComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SettingsCloseDefaultTranslationLanguageListAction"
  }

}

