// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/opened-message/thread-view-navigator-actions.ts >>>

import Foundation

open class DeleteCurrentThreadAction: MBTAction {
  private var type: MBTActionType = "DeleteCurrentThreadAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let actionOnSwipe = (try GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return actionOnSwipe == ActionOnSwipe.delete || currentContainer.name == DefaultFolderName.archive
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return self.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ThreadViewNavigatorFeature.`get`.forceCast(model).deleteCurrentThread())
    (try ThreadViewNavigatorFeature.`get`.forceCast(application).deleteCurrentThread())
    return history.previousDifferentComponent!
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ThreadViewNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return self.type
  }

}

open class ArchiveCurrentThreadAction: MBTAction {
  private var type: MBTActionType = "ArchiveCurrentThreadAction"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let actionOnSwipe = (try GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe())
    let currentContainer = (try ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer())
    return actionOnSwipe == ActionOnSwipe.archive && currentContainer.name != DefaultFolderName.archive
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return self.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ThreadViewNavigatorFeature.`get`.forceCast(model).archiveCurrentThread())
    (try ThreadViewNavigatorFeature.`get`.forceCast(application).archiveCurrentThread())
    return history.previousDifferentComponent!
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ThreadViewNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return self.type
  }

}

