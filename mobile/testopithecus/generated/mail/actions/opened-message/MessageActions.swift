// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/opened-message/message-actions.ts >>>

import Foundation

open class OpenMessageAction: MBTAction {
  public static let type: MBTActionType = "OpenMessageAction"
  private var order: Int32
  public init(_ order: Int32) {
    self.order = order
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return MessageViewerFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let isInGroupMode = (try GroupModeFeature.`get`.castIfSupported(model)!.isInGroupMode())
    return !isInGroupMode
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try MessageViewerFeature.`get`.forceCast(model).openMessage(self.order))
    (try MessageViewerFeature.`get`.forceCast(application).openMessage(self.order))
    return MessageComponent()
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageListEvents.openMessage(self.order, int64(-1)))
  }

  @discardableResult
  open func tostring() -> String {
    return "\(OpenMessageAction.type)(\(self.order))"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenMessageAction.type
  }

}

open class MessageViewBackToMailListAction: BaseSimpleAction<MessageViewer, MBTComponent> {
  public static let type: MBTActionType = "MessageViewBackToMailListAction"
  public init() {
    super.init(MessageViewBackToMailListAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<MessageViewer> {
    return MessageViewerFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MessageViewer, _ _currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.closeMessage())
    return MaillistComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageViewEvents.backToMailList())
  }

}

open class MessageViewDeleteMessageByIconAction: BaseSimpleAction<MessageViewerAndroid, MessageComponent> {
  public static let type: MBTActionType = "MessageViewDeleteMessageByIconAction"
  public init() {
    super.init(MessageViewDeleteMessageByIconAction.type)
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.messageViewEvents.deleteMessage())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MessageViewerAndroid, _ currentComponent: MessageComponent) throws -> MBTComponent {
    (try modelOrApplication.deleteMessageByIcon())
    return MaillistComponent()
  }

  @discardableResult
  open override func requiredFeature() -> Feature<MessageViewerAndroid> {
    return MessageViewerAndroidFeature.`get`
  }

}

open class ArrowDownClickAction: BaseSimpleAction<MessageViewer, MessageComponent> {
  public static let type: MBTActionType = "ArrowDownClickAction"
  private var order: Int32
  public init(_ order: Int32) {
    self.order = order
    super.init(ArrowDownClickAction.type)
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func canBePerformed(_ model: App) throws -> Bool {
    let messageListDisplayModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListDisplayModel.getMessageList(self.order + 1))
    return self.order < messages.length
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MessageViewer, _ currentComponent: MessageComponent) throws -> MBTComponent {
    (try modelOrApplication.arrowDownClick())
    return MessageComponent()
  }

  @discardableResult
  open override func requiredFeature() -> Feature<MessageViewer> {
    return MessageViewerFeature.`get`
  }

}

open class ArrowUpClickAction: BaseSimpleAction<MessageViewer, MessageComponent> {
  public static let type: MBTActionType = "ArrowUpClickAction"
  public init() {
    super.init(ArrowUpClickAction.type)
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func canBePerformed(_ model: App) throws -> Bool {
    let openedMessage = (try MessageViewerFeature.`get`.forceCast(model).getOpenedMessage()).head.timestamp
    let messageListDisplayModel = MessageListDisplayFeature.`get`.forceCast(model)
    let messages = (try messageListDisplayModel.getMessageList(10))[0].timestamp
    return openedMessage != messages
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MessageViewer, _ currentComponent: MessageComponent) throws -> MBTComponent {
    (try modelOrApplication.arrowUpClick())
    return MessageComponent()
  }

  @discardableResult
  open override func requiredFeature() -> Feature<MessageViewer> {
    return MessageViewerFeature.`get`
  }

}

