// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/compose/compose-actions.ts >>>

import Foundation

open class ComposeOpenAction: BaseSimpleAction<Compose, MBTComponent> {
  public static let type: MBTActionType = "ComposeOpenAction"
  public init() {
    super.init(ComposeOpenAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: Compose) throws -> Bool {
    return !(try model.isComposeOpened())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Compose> {
    return ComposeFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Compose, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.openCompose())
    return ComposeComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeCloseAction: MBTAction {
  public static let type: MBTActionType = "ComposeCloseAction"
  private let saveDraft: Bool
  public init(_ saveDraft: Bool) {
    self.saveDraft = saveDraft
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ComposeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return (try ComposeFeature.`get`.forceCast(model).isComposeOpened())
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ComposeFeature.`get`.forceCast(model).closeCompose(self.saveDraft))
    (try ComposeFeature.`get`.forceCast(application).closeCompose(self.saveDraft))
    return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "ComposeCloseAction"
  }

  @discardableResult
  open func getActionType() -> String {
    return ComposeCloseAction.type
  }

}

open class ComposeSendAction: MBTAction {
  public static let type: MBTActionType = "ComposeSendAction"
  public init() {
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return ComposeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let composeModel = ComposeFeature.`get`.forceCast(model)
    let isComposeOpened = (try composeModel.isComposeOpened())
    let isSendButtonEnabled = (try composeModel.isSendButtonEnabled())
    return isComposeOpened && isSendButtonEnabled
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ComposeFeature.`get`.forceCast(model).sendMessage())
    (try ComposeFeature.`get`.forceCast(application).sendMessage())
    return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "ComposeSendAction"
  }

  @discardableResult
  open func getActionType() -> String {
    return ComposeSendAction.type
  }

}

open class ComposeTapOnRecipientFieldAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnRecipientFieldAction"
  private let field: ComposeRecipientFieldType
  public init(_ field: ComposeRecipientFieldType) {
    self.field = field
    super.init(ComposeTapOnRecipientFieldAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    return self.field == ComposeRecipientFieldType.to ? true : (try model.isExtendedRecipientFormShown())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnRecipientField(self.field))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeSetRecipientFieldAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeSetRecipientFieldAction"
  private let field: ComposeRecipientFieldType
  private let value: String
  private let generateYabble: Bool
  public init(_ field: ComposeRecipientFieldType, _ value: String, _ generateYabble: Bool = true) {
    self.field = field
    self.value = value
    self.generateYabble = generateYabble
    super.init(ComposeSetRecipientFieldAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    return self.field == ComposeRecipientFieldType.to ? true : (try model.isExtendedRecipientFormShown())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setRecipientField(self.field, self.value, self.generateYabble))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposePasteToRecipientFieldAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposePasteToRecipientFieldAction"
  private let field: ComposeRecipientFieldType
  private let value: String
  private let generateYabble: Bool
  public init(_ field: ComposeRecipientFieldType, _ value: String, _ generateYabble: Bool = true) {
    self.field = field
    self.value = value
    self.generateYabble = generateYabble
    super.init(ComposePasteToRecipientFieldAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    return self.field == ComposeRecipientFieldType.to ? true : (try model.isExtendedRecipientFormShown())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.pasteToRecipientField(self.field, self.value, self.generateYabble))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeGenerateYabbleByTapOnEnterAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeGenerateYabbleByTapOnEnterAction"
  public init() {
    super.init(ComposeGenerateYabbleByTapOnEnterAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.generateYabbleByTapOnEnter())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnRecipientAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnRecipientAction"
  private let field: ComposeRecipientFieldType
  private let index: Int32
  public init(_ field: ComposeRecipientFieldType, _ index: Int32) {
    self.field = field
    self.index = index
    super.init(ComposeTapOnRecipientAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    let isRecipientExists = (try model.getRecipientFieldValue(self.field)).length > self.index
    let isFieldShown = self.field == ComposeRecipientFieldType.to ? true : (try model.isExtendedRecipientFormShown())
    return isRecipientExists && isFieldShown
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnRecipient(self.field, self.index))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeDeleteRecipientByTapOnCrossAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeDeleteRecipientByTapOnCrossAction"
  private let field: ComposeRecipientFieldType
  private let index: Int32
  public init(_ field: ComposeRecipientFieldType, _ index: Int32) {
    self.field = field
    self.index = index
    super.init(ComposeDeleteRecipientByTapOnCrossAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    let isRecipientExists = (try model.getRecipientFieldValue(self.field)).length > self.index
    let isFieldShown = self.field == ComposeRecipientFieldType.to ? true : (try model.isExtendedRecipientFormShown())
    return isRecipientExists && isFieldShown
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.deleteRecipientByTapOnCross(self.field, self.index))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeDeleteLastRecipientByTapOnBackspaceAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeDeleteLastRecipientByTapOnBackspaceAction"
  private let field: ComposeRecipientFieldType
  public init(_ field: ComposeRecipientFieldType) {
    self.field = field
    super.init(ComposeDeleteLastRecipientByTapOnBackspaceAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    let isRecipientExists = (try model.getRecipientFieldValue(self.field)).length > 0
    let isFieldShown = self.field == ComposeRecipientFieldType.to ? true : (try model.isExtendedRecipientFormShown())
    return isRecipientExists && isFieldShown
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.deleteLastRecipientByTapOnBackspace(self.field))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnSenderFieldAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnSenderFieldAction"
  public init() {
    super.init(ComposeTapOnSenderFieldAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    return (try model.isExtendedRecipientFormShown())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnSenderField())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeExpandExtendedRecipientFormAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeExpandExtendedRecipientFormAction"
  public init() {
    super.init(ComposeExpandExtendedRecipientFormAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    return !(try model.isExtendedRecipientFormShown())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.expandExtendedRecipientForm())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeMinimizeExtendedRecipientFormAction: BaseSimpleAction<ComposeRecipientFields, MBTComponent> {
  public static let type: MBTActionType = "ComposeMinimizeExtendedRecipientFormAction"
  public init() {
    super.init(ComposeMinimizeExtendedRecipientFormAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientFields) throws -> Bool {
    return (try model.isExtendedRecipientFormShown())
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientFields> {
    return ComposeRecipientFieldsFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientFields, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.minimizeExtendedRecipientForm())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnRecipientSuggestByEmailAction: BaseSimpleAction<ComposeRecipientSuggest, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnRecipientSuggestByEmailAction"
  private let email: String
  public init(_ email: String, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.email = email
    super.init(ComposeTapOnRecipientSuggestByEmailAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientSuggest) throws -> Bool {
    return (try model.getRecipientSuggest()).map({
      (suggest) in
      suggest.email
    }).includes(self.email)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientSuggest> {
    return ComposeRecipientSuggestFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientSuggest, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnRecipientSuggestByEmail(self.email))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnRecipientSuggestByIndexAction: BaseSimpleAction<ComposeRecipientSuggest, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnRecipientSuggestByIndexAction"
  private let index: Int32
  public init(_ index: Int32) {
    self.index = index
    super.init(ComposeTapOnRecipientSuggestByIndexAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeRecipientSuggest) throws -> Bool {
    return (try model.getRecipientSuggest()).length > self.index
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeRecipientSuggest> {
    return ComposeRecipientSuggestFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeRecipientSuggest, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnRecipientSuggestByIndex(self.index))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnSenderSuggestByEmailAction: BaseSimpleAction<ComposeSenderSuggest, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnSenderSuggestByEmailAction"
  private let email: String
  public init(_ email: String, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.email = email
    super.init(ComposeTapOnSenderSuggestByEmailAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeSenderSuggest) throws -> Bool {
    return (try model.getSenderSuggest()).includes(self.email)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeSenderSuggest> {
    return ComposeSenderSuggestFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeSenderSuggest, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnSenderSuggestByEmail(self.email))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnSenderSuggestByIndexAction: BaseSimpleAction<ComposeSenderSuggest, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnSenderSuggestByIndexAction"
  private let index: Int32
  public init(_ index: Int32) {
    self.index = index
    super.init(ComposeTapOnSenderSuggestByIndexAction.type)
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: ComposeSenderSuggest) throws -> Bool {
    return (try model.getSenderSuggest()).length > self.index
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeSenderSuggest> {
    return ComposeSenderSuggestFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeSenderSuggest, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnSenderSuggestByIndex(self.index))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeSetSubjectAction: BaseSimpleAction<ComposeSubject, MBTComponent> {
  public static let type: MBTActionType = "ComposeSetSubjectAction"
  private let subject: String
  public init(_ subject: String, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.subject = subject
    super.init(ComposeSetSubjectAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeSubject> {
    return ComposeSubjectFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeSubject, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setSubject(self.subject))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeClearSubjectAction: BaseSimpleAction<ComposeSubject, MBTComponent> {
  public static let type: MBTActionType = "ComposeClearSubjectAction"
  public init() {
    super.init(ComposeClearSubjectAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeSubject> {
    return ComposeSubjectFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeSubject, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setSubject(""))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnSubjectFieldAction: BaseSimpleAction<ComposeSubject, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnSubjectFieldAction"
  public init() {
    super.init(ComposeTapOnSubjectFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeSubject> {
    return ComposeSubjectFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeSubject, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnSubjectField())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeSetBodyAction: BaseSimpleAction<ComposeBody, MBTComponent> {
  public static let type: MBTActionType = "ComposeSetBodyAction"
  private let body: String
  public init(_ body: String, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.body = body
    super.init(ComposeSetBodyAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeBody> {
    return ComposeBodyFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeBody, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setBody(self.body))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposePasteBodyAction: BaseSimpleAction<ComposeBody, MBTComponent> {
  public static let type: MBTActionType = "ComposePasteBodyAction"
  private let body: String
  public init(_ body: String, _ unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE) {
    self.body = body
    super.init(ComposeSetBodyAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeBody> {
    return ComposeBodyFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeBody, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.pasteBody(self.body))
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeClearBodyAction: BaseSimpleAction<ComposeBody, MBTComponent> {
  public static let type: MBTActionType = "ComposeClearBodyAction"
  public init() {
    super.init(ComposeClearBodyAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeBody> {
    return ComposeBodyFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeBody, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.clearBody())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ComposeTapOnBodyFieldAction: BaseSimpleAction<ComposeBody, MBTComponent> {
  public static let type: MBTActionType = "ComposeTapOnBodyFieldAction"
  public init() {
    super.init(ComposeTapOnBodyFieldAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<ComposeBody> {
    return ComposeBodyFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: ComposeBody, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnBodyField())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

