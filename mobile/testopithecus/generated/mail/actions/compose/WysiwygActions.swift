// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/compose/wysiwyg-actions.ts >>>

import Foundation

open class WysiwygBaseAction: BaseSimpleAction<WYSIWIG, MBTComponent> {
  public override init(_ type: MBTActionType) {
    super.init(type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<WYSIWIG> {
    return WysiwygFeature.`get`
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ClearFormatting: WysiwygBaseAction {
  public static let type: MBTActionType = "ClearFormatting"
  private var from: Int32
  private var to: Int32
  public init(_ from: Int32, _ to: Int32) {
    self.from = from
    self.to = to
    super.init(ClearFormatting.type)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: WYSIWIG, _ _currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.clearFormatting(self.from, self.to))
    return ComposeComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "ClearFormatting(from=\(self.from), to=\(self.to))"
  }

}

open class SetStrong: WysiwygBaseAction {
  public static let type: MBTActionType = "SetStrong"
  private var from: Int32
  private var to: Int32
  public init(_ from: Int32, _ to: Int32) {
    self.from = from
    self.to = to
    super.init(SetStrong.type)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: WYSIWIG, _ _currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setStrong(self.from, self.to))
    return ComposeComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SetStrong(from=\(self.from), to=\(self.to))"
  }

}

open class SetItalic: WysiwygBaseAction {
  public static let type: MBTActionType = "SetItalic"
  private var from: Int32
  private var to: Int32
  public init(_ from: Int32, _ to: Int32) {
    self.from = from
    self.to = to
    super.init(SetItalic.type)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: WYSIWIG, _ _currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.setItalic(self.from, self.to))
    return ComposeComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "SetItalic(from=\(self.from), to=\(self.to))"
  }

}

open class AppendToBody: WysiwygBaseAction {
  public static let type: MBTActionType = "AppendToBody"
  private var index: Int32
  private var text: String
  public init(_ index: Int32, _ text: String) {
    self.index = index
    self.text = text
    super.init(AppendToBody.type)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: WYSIWIG, _ _currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.appendText(self.index, self.text))
    return ComposeComponent()
  }

  @discardableResult
  open override func tostring() -> String {
    return "AppendToBody(index=\(self.index), text=\(self.text))"
  }

}

