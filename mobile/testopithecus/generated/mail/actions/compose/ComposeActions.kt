// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/compose/compose-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class ComposeOpenAction(): BaseSimpleAction<Compose, MBTComponent>(ComposeOpenAction.type) {
    open override fun canBePerformedImpl(model: Compose): Boolean {
        return !model.isComposeOpened()
    }

    open override fun requiredFeature(): Feature<Compose> {
        return ComposeFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Compose, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.openCompose()
        return ComposeComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeOpenAction"
    }
}

public open class ComposeCloseAction(private val saveDraft: Boolean): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return ComposeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return ComposeFeature.`get`.forceCast(model).isComposeOpened()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ComposeFeature.`get`.forceCast(model).closeCompose(this.saveDraft)
        ComposeFeature.`get`.forceCast(application).closeCompose(this.saveDraft)
        return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "ComposeCloseAction"
    }

    open override fun getActionType(): String {
        return ComposeCloseAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeCloseAction"
    }
}

public open class ComposeSendAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return ComposeFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        val composeModel = ComposeFeature.`get`.forceCast(model)
        val isComposeOpened = composeModel.isComposeOpened()
        val isSendButtonEnabled = composeModel.isSendButtonEnabled()
        return isComposeOpened && isSendButtonEnabled
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ComposeFeature.`get`.forceCast(model).sendMessage()
        ComposeFeature.`get`.forceCast(application).sendMessage()
        return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "ComposeSendAction"
    }

    open override fun getActionType(): String {
        return ComposeSendAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeSendAction"
    }
}

public open class ComposeTapOnRecipientFieldAction(private val `field`: ComposeRecipientFieldType): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeTapOnRecipientFieldAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        return if (this.`field` == ComposeRecipientFieldType.to) true else model.isExtendedRecipientFormShown()
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnRecipientField(this.`field`)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnRecipientFieldAction"
    }
}

public open class ComposeSetRecipientFieldAction(private val `field`: ComposeRecipientFieldType, private val value: String, private val generateYabble: Boolean = true): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeSetRecipientFieldAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        return if (this.`field` == ComposeRecipientFieldType.to) true else model.isExtendedRecipientFormShown()
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setRecipientField(this.`field`, this.value, this.generateYabble)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeSetRecipientFieldAction"
    }
}

public open class ComposePasteToRecipientFieldAction(private val `field`: ComposeRecipientFieldType, private val value: String, private val generateYabble: Boolean = true): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposePasteToRecipientFieldAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        return if (this.`field` == ComposeRecipientFieldType.to) true else model.isExtendedRecipientFormShown()
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.pasteToRecipientField(this.`field`, this.value, this.generateYabble)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposePasteToRecipientFieldAction"
    }
}

public open class ComposeGenerateYabbleByTapOnEnterAction(): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeGenerateYabbleByTapOnEnterAction.type) {
    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.generateYabbleByTapOnEnter()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeGenerateYabbleByTapOnEnterAction"
    }
}

public open class ComposeTapOnRecipientAction(private val `field`: ComposeRecipientFieldType, private val index: Int): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeTapOnRecipientAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        val isRecipientExists = model.getRecipientFieldValue(this.`field`).size > this.index
        val isFieldShown = if (this.`field` == ComposeRecipientFieldType.to) true else model.isExtendedRecipientFormShown()
        return isRecipientExists && isFieldShown
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnRecipient(this.`field`, this.index)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnRecipientAction"
    }
}

public open class ComposeDeleteRecipientByTapOnCrossAction(private val `field`: ComposeRecipientFieldType, private val index: Int): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeDeleteRecipientByTapOnCrossAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        val isRecipientExists = model.getRecipientFieldValue(this.`field`).size > this.index
        val isFieldShown = if (this.`field` == ComposeRecipientFieldType.to) true else model.isExtendedRecipientFormShown()
        return isRecipientExists && isFieldShown
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.deleteRecipientByTapOnCross(this.`field`, this.index)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeDeleteRecipientByTapOnCrossAction"
    }
}

public open class ComposeDeleteLastRecipientByTapOnBackspaceAction(private val `field`: ComposeRecipientFieldType): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeDeleteLastRecipientByTapOnBackspaceAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        val isRecipientExists = model.getRecipientFieldValue(this.`field`).size > 0
        val isFieldShown = if (this.`field` == ComposeRecipientFieldType.to) true else model.isExtendedRecipientFormShown()
        return isRecipientExists && isFieldShown
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.deleteLastRecipientByTapOnBackspace(this.`field`)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeDeleteLastRecipientByTapOnBackspaceAction"
    }
}

public open class ComposeTapOnSenderFieldAction(): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeTapOnSenderFieldAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        return model.isExtendedRecipientFormShown()
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnSenderField()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnSenderFieldAction"
    }
}

public open class ComposeExpandExtendedRecipientFormAction(): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeExpandExtendedRecipientFormAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        return !model.isExtendedRecipientFormShown()
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.expandExtendedRecipientForm()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeExpandExtendedRecipientFormAction"
    }
}

public open class ComposeMinimizeExtendedRecipientFormAction(): BaseSimpleAction<ComposeRecipientFields, MBTComponent>(ComposeMinimizeExtendedRecipientFormAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientFields): Boolean {
        return model.isExtendedRecipientFormShown()
    }

    open override fun requiredFeature(): Feature<ComposeRecipientFields> {
        return ComposeRecipientFieldsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientFields, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.minimizeExtendedRecipientForm()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeMinimizeExtendedRecipientFormAction"
    }
}

public open class ComposeTapOnRecipientSuggestByEmailAction(private val email: String, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<ComposeRecipientSuggest, MBTComponent>(ComposeTapOnRecipientSuggestByEmailAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientSuggest): Boolean {
        return model.getRecipientSuggest().map( {
            suggest ->
            suggest.email
        }).contains(this.email)
    }

    open override fun requiredFeature(): Feature<ComposeRecipientSuggest> {
        return ComposeRecipientSuggestFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientSuggest, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnRecipientSuggestByEmail(this.email)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnRecipientSuggestByEmailAction"
    }
}

public open class ComposeTapOnRecipientSuggestByIndexAction(private val index: Int): BaseSimpleAction<ComposeRecipientSuggest, MBTComponent>(ComposeTapOnRecipientSuggestByIndexAction.type) {
    open override fun canBePerformedImpl(model: ComposeRecipientSuggest): Boolean {
        return model.getRecipientSuggest().size > this.index
    }

    open override fun requiredFeature(): Feature<ComposeRecipientSuggest> {
        return ComposeRecipientSuggestFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeRecipientSuggest, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnRecipientSuggestByIndex(this.index)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnRecipientSuggestByIndexAction"
    }
}

public open class ComposeTapOnSenderSuggestByEmailAction(private val email: String, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<ComposeSenderSuggest, MBTComponent>(ComposeTapOnSenderSuggestByEmailAction.type) {
    open override fun canBePerformedImpl(model: ComposeSenderSuggest): Boolean {
        return model.getSenderSuggest().contains(this.email)
    }

    open override fun requiredFeature(): Feature<ComposeSenderSuggest> {
        return ComposeSenderSuggestFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeSenderSuggest, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnSenderSuggestByEmail(this.email)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnSenderSuggestByEmailAction"
    }
}

public open class ComposeTapOnSenderSuggestByIndexAction(private val index: Int): BaseSimpleAction<ComposeSenderSuggest, MBTComponent>(ComposeTapOnSenderSuggestByIndexAction.type) {
    open override fun canBePerformedImpl(model: ComposeSenderSuggest): Boolean {
        return model.getSenderSuggest().size > this.index
    }

    open override fun requiredFeature(): Feature<ComposeSenderSuggest> {
        return ComposeSenderSuggestFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeSenderSuggest, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnSenderSuggestByIndex(this.index)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnSenderSuggestByIndexAction"
    }
}

public open class ComposeSetSubjectAction(private val subject: String, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<ComposeSubject, MBTComponent>(ComposeSetSubjectAction.type) {
    open override fun requiredFeature(): Feature<ComposeSubject> {
        return ComposeSubjectFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeSubject, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setSubject(this.subject)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeSetSubjectAction"
    }
}

public open class ComposeClearSubjectAction(): BaseSimpleAction<ComposeSubject, MBTComponent>(ComposeClearSubjectAction.type) {
    open override fun requiredFeature(): Feature<ComposeSubject> {
        return ComposeSubjectFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeSubject, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setSubject("")
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeClearSubjectAction"
    }
}

public open class ComposeTapOnSubjectFieldAction(): BaseSimpleAction<ComposeSubject, MBTComponent>(ComposeTapOnSubjectFieldAction.type) {
    open override fun requiredFeature(): Feature<ComposeSubject> {
        return ComposeSubjectFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeSubject, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnSubjectField()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnSubjectFieldAction"
    }
}

public open class ComposeSetBodyAction(private val body: String, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<ComposeBody, MBTComponent>(ComposeSetBodyAction.type) {
    open override fun requiredFeature(): Feature<ComposeBody> {
        return ComposeBodyFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeBody, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setBody(this.body)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeSetBodyAction"
    }
}

public open class ComposePasteBodyAction(private val body: String, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<ComposeBody, MBTComponent>(ComposeSetBodyAction.type) {
    open override fun requiredFeature(): Feature<ComposeBody> {
        return ComposeBodyFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeBody, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.pasteBody(this.body)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposePasteBodyAction"
    }
}

public open class ComposeClearBodyAction(): BaseSimpleAction<ComposeBody, MBTComponent>(ComposeClearBodyAction.type) {
    open override fun requiredFeature(): Feature<ComposeBody> {
        return ComposeBodyFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeBody, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.clearBody()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeClearBodyAction"
    }
}

public open class ComposeTapOnBodyFieldAction(): BaseSimpleAction<ComposeBody, MBTComponent>(ComposeTapOnBodyFieldAction.type) {
    open override fun requiredFeature(): Feature<ComposeBody> {
        return ComposeBodyFeature.`get`
    }

    open override fun performImpl(modelOrApplication: ComposeBody, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnBodyField()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ComposeTapOnBodyFieldAction"
    }
}

