// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/tab-bar-actions.ts >>>

import Foundation

open class TabBarTapOnItemAction: BaseSimpleAction<TabBar, MBTComponent> {
  public static let type: MBTActionType = "TabBarTapOnItemAction"
  private let item: TabBarItem
  public init(_ item: TabBarItem) {
    self.item = item
    super.init(TabBarTapOnItemAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<TabBar> {
    return TabBarFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: TabBar) throws -> Bool {
    return (try model.isShown())
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: TabBar, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnItem(self.item))
    switch self.item {
      case TabBarItem.mail:
        return MaillistComponent()
      case TabBarItem.calendar:
        return CalendarMailComponent()
      case TabBarItem.documents:
        return DocumentsMailComponent()
      case TabBarItem.contacts:
        return ContactsListComponent()
      case TabBarItem.more:
        return ShtorkaComponent()
      case TabBarItem.telemost:
        return TelemostComponent()
      default:
        throw YSError("Unknown tabbar item \(self.item)")
    }
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(TabBarTapOnItemAction.type)(item=\(self.item))"
  }

}

open class ShtorkaTapOnItemAction: BaseSimpleAction<Shtorka, MBTComponent> {
  public static let type: MBTActionType = "ShtorkaTapOnItemAction"
  private let item: TabBarItem
  public init(_ item: TabBarItem) {
    self.item = item
    super.init(ShtorkaTapOnItemAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Shtorka> {
    return ShtorkaFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Shtorka, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnItem(self.item))
    switch self.item {
      case TabBarItem.mail:
        return MaillistComponent()
      case TabBarItem.calendar:
        return CalendarMailComponent()
      case TabBarItem.documents:
        return DocumentsMailComponent()
      case TabBarItem.contacts:
        return ContactsListComponent()
      case TabBarItem.disk:
        return DiskWebViewComponent()
      case TabBarItem.notes:
        return NotesWebViewComponent()
      case TabBarItem.telemost:
        return TelemostComponent()
      case TabBarItem.subscriptions:
        return SubscriptionsComponent()
      default:
        throw YSError("Unknown shtorka item \(self.item)")
    }
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open override func tostring() -> String {
    return "\(ShtorkaTapOnItemAction.type)(item=\(self.item))"
  }

}

open class ShtorkaTapOnTryItAction: BaseSimpleAction<Shtorka, MBTComponent> {
  public static let type: MBTActionType = "ShtorkaTapOnTryItAction"
  public init() {
    super.init(ShtorkaTapOnTryItAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Shtorka> {
    return ShtorkaFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: Shtorka) throws -> Bool {
    return (try model.getShownBannerType()) != nil
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Shtorka, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.tapOnBanner())
    return SubscriptionsComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ShtorkaCloseBannerAction: BaseSimpleAction<Shtorka, MBTComponent> {
  public static let type: MBTActionType = "ShtorkaCloseBannerAction"
  public init() {
    super.init(ShtorkaCloseBannerAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Shtorka> {
    return ShtorkaFeature.`get`
  }

  @discardableResult
  open override func canBePerformedImpl(_ model: Shtorka) throws -> Bool {
    return (try model.getShownBannerType()) != nil
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Shtorka, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.closeBanner())
    return currentComponent
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ShtorkaCloseBySwipeAction: BaseSimpleAction<Shtorka, MBTComponent> {
  public static let type: MBTActionType = "ShtorkaCloseBySwipeAction"
  public init() {
    super.init(ShtorkaCloseBySwipeAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Shtorka> {
    return ShtorkaFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Shtorka, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.closeBySwipe())
    return MaillistComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

open class ShtorkaCloseByTapOverAction: BaseSimpleAction<Shtorka, MBTComponent> {
  public static let type: MBTActionType = "ShtorkaCloseByTapOverAction"
  public init() {
    super.init(ShtorkaCloseByTapOverAction.type)
  }

  @discardableResult
  open override func requiredFeature() -> Feature<Shtorka> {
    return ShtorkaFeature.`get`
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: Shtorka, _ currentComponent: MBTComponent) throws -> MBTComponent {
    (try modelOrApplication.closeByTapOver())
    return MaillistComponent()
  }

  @discardableResult
  open override func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

}

