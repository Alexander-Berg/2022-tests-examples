// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/left-column/manage-labels-actions.ts >>>

import Foundation

open class DeleteLabelAction: MBTAction {
  public static let type: MBTActionType = "DeleteLabel"
  private var labelName: LabelName
  private var deletionMethod: ContainerDeletionMethod
  public init(_ labelName: LabelName, _ deletionMethod: ContainerDeletionMethod = ContainerDeletionMethod.tap) {
    self.labelName = labelName
    self.deletionMethod = deletionMethod
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let labelNavigatorModel = LabelNavigatorFeature.`get`.forceCast(model)
    let labels = (try labelNavigatorModel.getLabelList())
    return labels.includes(self.labelName)
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).deleteLabel(self.labelName, self.deletionMethod))
    (try ManageableLabelFeature.`get`.forceCast(application).deleteLabel(self.labelName, self.deletionMethod))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return DeleteLabelAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "DeleteLabel(\(self.labelName))"
  }

}

open class SubmitEditedLabelAction: MBTAction {
  public static let type: MBTActionType = "SubmitEditedLabel"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).submitEditedLabel())
    (try ManageableLabelFeature.`get`.forceCast(application).submitEditedLabel())
    return ManageLabelsComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SubmitEditedLabelAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SubmitEditedLabel"
  }

}

open class SetEditedLabelColorAction: MBTAction {
  public static let type: MBTActionType = "SetEditedLabelColor"
  private var colorIndex: Int32
  public init(_ colorIndex: Int32) {
    self.colorIndex = colorIndex
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).setEditedLabelColor(self.colorIndex))
    (try ManageableLabelFeature.`get`.forceCast(application).setEditedLabelColor(self.colorIndex))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SetEditedLabelColorAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SetEditedLabelColor"
  }

}

open class EnterNameForEditedLabelAction: MBTAction {
  public static let type: MBTActionType = "EnterNameForEditedLabel"
  private var labelName: LabelName
  public init(_ labelName: LabelName) {
    self.labelName = labelName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).enterNameForEditedLabel(self.labelName))
    (try ManageableLabelFeature.`get`.forceCast(application).enterNameForEditedLabel(self.labelName))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return EnterNameForEditedLabelAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "EnterNameForEditedLabel"
  }

}

open class CloseEditLabelScreenAction: MBTAction {
  public static let type: MBTActionType = "CloseEditLabelScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).closeEditLabelScreen())
    (try ManageableLabelFeature.`get`.forceCast(application).closeEditLabelScreen())
    return ManageLabelsComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseEditLabelScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseEditLabelScreen"
  }

}

open class OpenEditLabelScreenAction: MBTAction {
  public static let type: MBTActionType = "OpenEditLabelScreen"
  private var labelName: LabelName
  public init(_ labelName: LabelName) {
    self.labelName = labelName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).openEditLabelScreen(self.labelName))
    (try ManageableLabelFeature.`get`.forceCast(application).openEditLabelScreen(self.labelName))
    return EditLabelComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenEditLabelScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenEditLabelScreen"
  }

}

open class SubmitNewLabelAction: MBTAction {
  public static let type: MBTActionType = "SubmitNewLabel"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).submitNewLabel())
    (try ManageableLabelFeature.`get`.forceCast(application).submitNewLabel())
    return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SubmitNewLabelAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SubmitNewLabel"
  }

}

open class SetNewLabelColorAction: MBTAction {
  public static let type: MBTActionType = "SetNewLabelColor"
  private var colorIndex: Int32
  public init(_ colorIndex: Int32) {
    self.colorIndex = colorIndex
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).setNewLabelColor(self.colorIndex))
    (try ManageableLabelFeature.`get`.forceCast(application).setNewLabelColor(self.colorIndex))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SetNewLabelColorAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SetNewLabelColor"
  }

}

open class EnterNameForNewLabelAction: MBTAction {
  public static let type: MBTActionType = "EnterNameForNewLabel"
  private var labelName: LabelName
  public init(_ labelName: LabelName) {
    self.labelName = labelName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).enterNameForNewLabel(self.labelName))
    (try ManageableLabelFeature.`get`.forceCast(application).enterNameForNewLabel(self.labelName))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return EnterNameForNewLabelAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "EnterNameForNewLabel"
  }

}

open class CloseCreateLabelScreenAction: MBTAction {
  public static let type: MBTActionType = "CloseCreateLabelScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).closeCreateLabelScreen())
    (try ManageableLabelFeature.`get`.forceCast(application).closeCreateLabelScreen())
    return ManageLabelsComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseCreateLabelScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseCreateLabelScreen"
  }

}

open class OpenCreateLabelScreenAction: MBTAction {
  public static let type: MBTActionType = "OpenCreateLabelScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).openCreateLabelScreen())
    (try ManageableLabelFeature.`get`.forceCast(application).openCreateLabelScreen())
    return CreateLabelComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenCreateLabelScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenCreateLabelScreen"
  }

}

open class OpenLabelManagerAction: MBTAction {
  public static let type: MBTActionType = "OpenLabelManager"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).openLabelManager())
    (try ManageableLabelFeature.`get`.forceCast(application).openLabelManager())
    return ManageLabelsComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenLabelManagerAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenLabelManager"
  }

}

open class CloseLabelManagerAction: MBTAction {
  public static let type: MBTActionType = "CloseLabelManager"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableLabelFeature.`get`.forceCast(model).closeLabelManager())
    (try ManageableLabelFeature.`get`.forceCast(application).closeLabelManager())
    return FolderListComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseLabelManagerAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseLabelManager"
  }

}

