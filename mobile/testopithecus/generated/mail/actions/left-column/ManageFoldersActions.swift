// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/left-column/manage-folders-actions.ts >>>

import Foundation

open class DeleteFolderAction: MBTAction {
  public static let type: MBTActionType = "DeleteFolder"
  private var folderName: FolderName
  private var parentFolders: YSArray<FolderName>
  private var deletionMethod: ContainerDeletionMethod
  public init(_ folderName: FolderName, _ parentFolders: YSArray<FolderName> = YSArray(), _ deletionMethod: ContainerDeletionMethod = ContainerDeletionMethod.tap) {
    self.folderName = folderName
    self.parentFolders = parentFolders
    self.deletionMethod = deletionMethod
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let folderNavigatorModel = FolderNavigatorFeature.`get`.forceCast(model)
    let folders = (try folderNavigatorModel.getFoldersList())
    return folders.has(self.folderName)
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).deleteFolder(self.folderName, self.parentFolders, self.deletionMethod))
    (try ManageableFolderFeature.`get`.forceCast(application).deleteFolder(self.folderName, self.parentFolders, self.deletionMethod))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return DeleteFolderAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "Delete folder \(self.folderName) by \(self.deletionMethod)"
  }

}

open class SelectParentFolderAction: MBTAction {
  public static let type: MBTActionType = "SelectParentFolder"
  private var parentFolder: YSArray<FolderName>
  public init(_ parentFolder: YSArray<FolderName>) {
    self.parentFolder = parentFolder
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).selectParentFolder(self.parentFolder))
    (try ManageableFolderFeature.`get`.forceCast(application).selectParentFolder(self.parentFolder))
    return requireNonNull(history.previousDifferentComponent, "There is no previous screen")
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SelectParentFolderAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SelectParentFolder"
  }

}

open class CloseFolderLocationScreenAction: MBTAction {
  public static let type: MBTActionType = "CloseFolderLocationScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).closeFolderLocationScreen())
    (try ManageableFolderFeature.`get`.forceCast(application).closeFolderLocationScreen())
    return requireNonNull(history.previousDifferentComponent, "There is no previous screen")
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseFolderLocationScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseFolderLocationScreen"
  }

}

open class OpenFolderLocationScreenAction: MBTAction {
  public static let type: MBTActionType = "OpenFolderLocationScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).openFolderLocationScreen())
    (try ManageableFolderFeature.`get`.forceCast(application).openFolderLocationScreen())
    return SelectParentFolderComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenFolderLocationScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenFolderLocationScreen"
  }

}

open class SubmitEditedFolderAction: MBTAction {
  public static let type: MBTActionType = "SubmitEditedFolder"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).submitEditedFolder())
    (try ManageableFolderFeature.`get`.forceCast(application).submitEditedFolder())
    return ManageFoldersComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SubmitEditedFolderAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SubmitEditedFolder"
  }

}

open class EnterNameForEditedFolderAction: MBTAction {
  public static let type: MBTActionType = "EnterNameForEditedFolder"
  private var folderName: FolderName
  public init(_ folderName: FolderName) {
    self.folderName = folderName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).enterNameForEditedFolder(self.folderName))
    (try ManageableFolderFeature.`get`.forceCast(application).enterNameForEditedFolder(self.folderName))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return EnterNameForEditedFolderAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "EnterNameForEditedFolder"
  }

}

open class CloseEditFolderScreenAction: MBTAction {
  public static let type: MBTActionType = "CloseEditFolderScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).closeEditFolderScreen())
    (try ManageableFolderFeature.`get`.forceCast(application).closeEditFolderScreen())
    return ManageFoldersComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseEditFolderScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseEditFolderScreen"
  }

}

open class OpenEditFolderScreenAction: MBTAction {
  public static let type: MBTActionType = "OpenEditFolderScreen"
  private var folderName: FolderName
  private var parentFolders: YSArray<FolderName>
  public init(_ folderName: FolderName, _ parentFolders: YSArray<FolderName> = YSArray()) {
    self.folderName = folderName
    self.parentFolders = parentFolders
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    let folderNavigatorModel = FolderNavigatorFeature.`get`.forceCast(model)
    let folders = (try folderNavigatorModel.getFoldersList())
    return folders.has(formatFolderName(self.folderName, self.parentFolders))
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).openEditFolderScreen(self.folderName, self.parentFolders))
    (try ManageableFolderFeature.`get`.forceCast(application).openEditFolderScreen(self.folderName, self.parentFolders))
    return EditFolderComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenEditFolderScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenEditFolderScreen"
  }

}

open class SubmitNewFolderAction: MBTAction {
  public static let type: MBTActionType = "SubmitNewFolder"
  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).submitNewFolder())
    (try ManageableFolderFeature.`get`.forceCast(application).submitNewFolder())
    return ManageFoldersComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return SubmitNewFolderAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "SubmitNewFolder"
  }

}

open class EnterNameForNewFolderAction: MBTAction {
  public static let type: MBTActionType = "EnterNameForNewFolder"
  private var folderName: FolderName
  public init(_ folderName: FolderName) {
    self.folderName = folderName
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).enterNameForNewFolder(self.folderName))
    (try ManageableFolderFeature.`get`.forceCast(application).enterNameForNewFolder(self.folderName))
    return history.currentComponent
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return EnterNameForNewFolderAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "EnterNameForNewFolder"
  }

}

open class CloseCreateFolderScreenAction: MBTAction {
  public static let type: MBTActionType = "CloseCreateFolderScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).closeCreateFolderScreen())
    (try ManageableFolderFeature.`get`.forceCast(application).closeCreateFolderScreen())
    return ManageFoldersComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseCreateFolderScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseCreateFolderScreen"
  }

}

open class OpenCreateFolderScreenAction: MBTAction {
  public static let type: MBTActionType = "OpenCreateFolderScreen"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).openCreateFolderScreen())
    (try ManageableFolderFeature.`get`.forceCast(application).openCreateFolderScreen())
    return CreateFolderComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenCreateFolderScreenAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenCreateFolderScreen"
  }

}

open class OpenFolderManagerAction: MBTAction {
  public static let type: MBTActionType = "OpenFolderManager"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).openFolderManager())
    (try ManageableFolderFeature.`get`.forceCast(application).openFolderManager())
    return ManageFoldersComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return OpenFolderManagerAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "OpenFolderManager"
  }

}

open class CloseFolderManagerAction: MBTAction {
  public static let type: MBTActionType = "CloseFolderManager"
  public init() {
  }

  @discardableResult
  open func canBePerformed(_ model: App) throws -> Bool {
    return true
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return (FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ManageableFolderFeature.`get`.forceCast(model).closeFolderManager())
    (try ManageableFolderFeature.`get`.forceCast(application).closeFolderManager())
    return FolderListComponent()
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return CloseFolderManagerAction.type
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func tostring() -> String {
    return "CloseFolderManager"
  }

}

