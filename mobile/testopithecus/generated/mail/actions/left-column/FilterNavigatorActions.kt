// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/left-column/filter-navigator-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class GoToFilterImportantAction: MBTAction {
    open override fun canBePerformed(_model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return GoToFilterImportantAction.type
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        FilterNavigatorFeature.`get`.forceCast(model).goToFilterImportant()
        FilterNavigatorFeature.`get`.forceCast(application).goToFilterImportant()
        return MaillistComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FilterNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return "GoToFilterImportant"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToFilterImportant"
    }
}

public open class GoToFilterUnreadAction: MBTAction {
    open override fun canBePerformed(_model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return GoToFilterUnreadAction.type
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        FilterNavigatorFeature.`get`.forceCast(model).goToFilterUnread()
        FilterNavigatorFeature.`get`.forceCast(application).goToFilterUnread()
        return MaillistComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FilterNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return "GoToFilterUnread"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToFilterUnread"
    }
}

public open class GoToFilterWithAttachmentsAction: MBTAction {
    open override fun canBePerformed(_model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): String {
        return GoToFilterWithAttachmentsAction.type
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        FilterNavigatorFeature.`get`.forceCast(model).goToFilterWithAttachments()
        FilterNavigatorFeature.`get`.forceCast(application).goToFilterWithAttachments()
        return MaillistComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FilterNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return "GoToFilterWithAttachments"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToFilterWithAttachments"
    }
}

