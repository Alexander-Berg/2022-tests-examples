// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/left-column/filter-navigator-actions.ts >>>

import Foundation

open class GoToFilterImportantAction: MBTAction {
  public static let type: MBTActionType = "GoToFilterImportant"
  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return GoToFilterImportantAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try FilterNavigatorFeature.`get`.forceCast(model).goToFilterImportant())
    (try FilterNavigatorFeature.`get`.forceCast(application).goToFilterImportant())
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return FilterNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return "GoToFilterImportant"
  }

}

open class GoToFilterUnreadAction: MBTAction {
  public static let type: MBTActionType = "GoToFilterUnread"
  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return GoToFilterUnreadAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try FilterNavigatorFeature.`get`.forceCast(model).goToFilterUnread())
    (try FilterNavigatorFeature.`get`.forceCast(application).goToFilterUnread())
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return FilterNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return "GoToFilterUnread"
  }

}

open class GoToFilterWithAttachmentsAction: MBTAction {
  public static let type: MBTActionType = "GoToFilterWithAttachments"
  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func getActionType() -> String {
    return GoToFilterWithAttachmentsAction.type
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try FilterNavigatorFeature.`get`.forceCast(model).goToFilterWithAttachments())
    (try FilterNavigatorFeature.`get`.forceCast(application).goToFilterWithAttachments())
    return MaillistComponent()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return FilterNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func tostring() -> String {
    return "GoToFilterWithAttachments"
  }

}

