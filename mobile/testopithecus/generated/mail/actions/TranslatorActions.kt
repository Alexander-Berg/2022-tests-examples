// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/translator-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class TranslatorBarTapOnSourceLanguageAction(): BaseSimpleAction<TranslatorBar, MBTComponent>(TranslatorBarTapOnSourceLanguageAction.type) {
    open override fun requiredFeature(): Feature<TranslatorBar> {
        return TranslatorBarFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorBar): Boolean {
        return model.isTranslatorBarShown()
    }

    open override fun performImpl(modelOrApplication: TranslatorBar, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnSourceLanguage()
        return SourceLanguageListComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorBarTapOnSourceLanguageAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorBarTapOnSourceLanguageAction"
    }
}

public open class TranslatorBarTapOnTargetLanguageAction(): BaseSimpleAction<TranslatorBar, MBTComponent>(TranslatorBarTapOnTargetLanguageAction.type) {
    open override fun requiredFeature(): Feature<TranslatorBar> {
        return TranslatorBarFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorBar): Boolean {
        return model.isTranslatorBarShown()
    }

    open override fun performImpl(modelOrApplication: TranslatorBar, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnTargetLanguage()
        return TargetLanguageListComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorBarTapOnTargetLanguageAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorBarTapOnTargetLanguageAction"
    }
}

public open class TranslatorBarTapOnCloseButtonAction(private val hideTranslatorForThisLanguage: Boolean, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<TranslatorBar, MBTComponent>(TranslatorBarTapOnCloseButtonAction.type) {
    open override fun requiredFeature(): Feature<TranslatorBar> {
        return TranslatorBarFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorBar): Boolean {
        return model.isTranslatorBarShown()
    }

    open override fun performImpl(modelOrApplication: TranslatorBar, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnCloseBarButton(this.hideTranslatorForThisLanguage)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorBarTapOnCloseButtonAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorBarTapOnCloseButtonAction"
    }
}

public open class TranslatorBarTapOnTranslateButtonAction(): BaseSimpleAction<TranslatorBar, MBTComponent>(TranslatorBarTapOnTranslateButtonAction.type) {
    open override fun requiredFeature(): Feature<TranslatorBar> {
        return TranslatorBarFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorBar): Boolean {
        return model.isTranslatorBarShown()
    }

    open override fun performImpl(modelOrApplication: TranslatorBar, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnTranslateButton()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorBarTapOnTranslateButtonAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorBarTapOnTranslateButtonAction"
    }
}

public open class TranslatorBarTapOnRevertButtonAction(): BaseSimpleAction<TranslatorBar, MBTComponent>(TranslatorBarTapOnRevertButtonAction.type) {
    open override fun requiredFeature(): Feature<TranslatorBar> {
        return TranslatorBarFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorBar): Boolean {
        return model.isTranslatorBarShown()
    }

    open override fun performImpl(modelOrApplication: TranslatorBar, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnRevertButton()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorBarTapOnRevertButtonAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorBarTapOnRevertButtonAction"
    }
}

public open class TranslatorSetTargetLanguageAction(private val language: LanguageName, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<TranslatorLanguageList, TargetLanguageListComponent>(TranslatorSetTargetLanguageAction.type) {
    open override fun requiredFeature(): Feature<TranslatorLanguageList> {
        return TranslatorLanguageListFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorLanguageList): Boolean {
        return model.getAllTargetLanguages().contains(this.language)
    }

    open override fun performImpl(modelOrApplication: TranslatorLanguageList, currentComponent: TargetLanguageListComponent): MBTComponent {
        modelOrApplication.setTargetLanguage(this.language, true)
        return MessageComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorSetTargetLanguageAction(language=${this.language})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorSetTargetLanguageAction"
    }
}

public open class TranslatorSetSourceLanguageAction(private val language: LanguageName, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<TranslatorLanguageList, SourceLanguageListComponent>(TranslatorSetSourceLanguageAction.type) {
    open override fun requiredFeature(): Feature<TranslatorLanguageList> {
        return TranslatorLanguageListFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorLanguageList): Boolean {
        return model.getAllSourceLanguages().contains(this.language)
    }

    open override fun performImpl(modelOrApplication: TranslatorLanguageList, currentComponent: SourceLanguageListComponent): MBTComponent {
        modelOrApplication.setSourceLanguage(this.language)
        return MessageComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorSetSourceLanguageAction(language=${this.language})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorSetSourceLanguageAction"
    }
}

public open class TranslatorTapOnSearchTextFieldAction(): BaseSimpleAction<TranslatorLanguageListSearch, MBTComponent>(TranslatorTapOnSearchTextFieldAction.type) {
    open override fun requiredFeature(): Feature<TranslatorLanguageListSearch> {
        return TranslatorLanguageListSearchFeature.`get`
    }

    open override fun performImpl(modelOrApplication: TranslatorLanguageListSearch, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnSearchTextField()
        return SearchLanguageComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorTapOnSearchTextFieldAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorTapOnSearchTextFieldAction"
    }
}

public open class TranslatorTapOnSearchCancelButtonAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return TranslatorLanguageListSearchFeature.`get`.included(modelFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return TranslatorLanguageListSearchFeature.`get`.forceCast(model).isSearchTextFieldFocused()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        val modelTranslatorLanguageListSearch = TranslatorLanguageListSearchFeature.`get`.forceCast(model)
        val appTranslatorLanguageListSearch = TranslatorLanguageListSearchFeature.`get`.forceCast(application)
        modelTranslatorLanguageListSearch.tapOnCancelButton()
        appTranslatorLanguageListSearch.tapOnCancelButton()
        return requireNonNull(history.previousDifferentComponent, "There is no previous screen")
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorTapOnSearchCancelButtonAction"
    }

    open override fun getActionType(): String {
        return TranslatorTapOnSearchCancelButtonAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorTapOnSearchCancelButtonAction"
    }
}

public open class TranslatorEnterSearchQueryAction(private val query: String, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<TranslatorLanguageListSearch, MBTComponent>(TranslatorEnterSearchQueryAction.type) {
    open override fun requiredFeature(): Feature<TranslatorLanguageListSearch> {
        return TranslatorLanguageListSearchFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorLanguageListSearch): Boolean {
        return model.isSearchTextFieldFocused()
    }

    open override fun performImpl(modelOrApplication: TranslatorLanguageListSearch, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.enterSearchQuery(this.query)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorEnterSearchQueryAction(query=${this.query})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorEnterSearchQueryAction"
    }
}

public open class TranslatorTapOnClearSearchButtonAction(): BaseSimpleAction<TranslatorLanguageListSearch, MBTComponent>(TranslatorTapOnClearSearchButtonAction.type) {
    open override fun requiredFeature(): Feature<TranslatorLanguageListSearch> {
        return TranslatorLanguageListSearchFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorLanguageListSearch): Boolean {
        return model.getSearchQuery() != ""
    }

    open override fun performImpl(modelOrApplication: TranslatorLanguageListSearch, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnClearSearchFieldButton()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "TranslatorTapOnClearSearchButtonAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TranslatorTapOnClearSearchButtonAction"
    }
}

public open class SettingsSwitchTranslatorAction(): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsSwitchTranslatorAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.switchTranslator()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsSwitchTranslatorAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsSwitchTranslatorAction"
    }
}

public open class SettingsOpenIgnoredTranslationLanguageListAction(): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsOpenIgnoredTranslationLanguageListAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorSettings): Boolean {
        val hasIgnoredLanguages = model.getIgnoredTranslationLanguages().size > 0
        return model.isTranslatorEnabled() && hasIgnoredLanguages
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.openIgnoredTranslationLanguageList()
        return SettingsIgnoredLanguageListComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsOpenIgnoredTranslationLanguageListAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsOpenIgnoredTranslationLanguageListAction"
    }
}

public open class SettingsDeleteLanguageFromIgnoredAction(private val language: LanguageName, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsDeleteLanguageFromIgnoredAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.removeTranslationLanguageFromIgnored(this.language)
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsDeleteLanguageFromIgnoredAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsDeleteLanguageFromIgnoredAction"
    }
}

public open class SettingsCloseIgnoredTranslationLanguageListAction(): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsCloseIgnoredTranslationLanguageListAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.closeIgnoredTranslationLanguageList()
        return GeneralSettingsComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsCloseIgnoredTranslationLanguageListAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsCloseIgnoredTranslationLanguageListAction"
    }
}

public open class SettingsOpenDefaultTranslationLanguageListAction(): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsOpenDefaultTranslationLanguageListAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun canBePerformedImpl(model: TranslatorSettings): Boolean {
        return model.isTranslatorEnabled()
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.openDefaultTranslationLanguageList()
        return SettingsDefaultLanguageListComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsOpenDefaultTranslationLanguageListAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsOpenDefaultTranslationLanguageListAction"
    }
}

public open class SettingsSetDefaultTranslationLanguageAction(private val language: LanguageName, unusedValue: String = TestopithecusConstants.SWIFT_CONSTRUCTOR_VARIABLE_WORKAROUND_TITLE): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsSetDefaultTranslationLanguageAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.setDefaultTranslationLanguage(this.language)
        return GeneralSettingsComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsSetDefaultTranslationLanguageAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsSetDefaultTranslationLanguageAction"
    }
}

public open class SettingsCloseDefaultTranslationLanguageListAction(): BaseSimpleAction<TranslatorSettings, MBTComponent>(SettingsCloseDefaultTranslationLanguageListAction.type) {
    open override fun requiredFeature(): Feature<TranslatorSettings> {
        return TranslatorSettingsFeature.`get`
    }

    open override fun performImpl(modelOrApplication: TranslatorSettings, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.closeDefaultTranslationLanguageList()
        return GeneralSettingsComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SettingsCloseDefaultTranslationLanguageListAction"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SettingsCloseDefaultTranslationLanguageListAction"
    }
}

