// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/login/login-actions.ts >>>

import Foundation

open class LoginAction<T>: MBTAction {
  public var account: UserAccount
  public var feature: Feature<T>
  public init(_ account: UserAccount, _ feature: Feature<T>) {
    self.account = account
    self.feature = feature
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return self.feature.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray(Eventus.startEvents.startWithMessageListShow())
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ _history: MBTHistory) throws -> MBTComponent {
    (try self.performImpl(self.feature.forceCast(model)))
    (try self.performImpl(self.feature.forceCast(application)))
    return MaillistComponent()
  }

  @discardableResult
  open func tostring() -> String {
    return "\(self.getActionType())(login=\(self.account.login), password=\(self.account.password))"
  }

  @discardableResult
  open func getActionType() -> String {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func performImpl(_ modelOrApplication: T) throws -> Void {
    fatalError("Must be overridden in subclasses")
  }

}

open class YandexLoginAction: LoginAction<YandexLogin> {
  public static let type: String = "YandexLogin"
  public init(_ account: UserAccount) {
    super.init(account, YandexLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: YandexLogin) throws -> Void {
    (try modelOrApplication.loginWithYandexAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return YandexLoginAction.type
  }

}

open class YandexTeamLoginAction: LoginAction<YandexTeamLogin> {
  public static let type: String = "YandexTeamLogin"
  public init(_ account: UserAccount) {
    super.init(account, YandexTeamLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: YandexTeamLogin) throws -> Void {
    (try modelOrApplication.loginWithYandexTeamAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return YandexTeamLoginAction.type
  }

}

open class MailRuLoginAction: LoginAction<MailRuLogin> {
  public static let type: String = "MailRuLogin"
  public init(_ account: UserAccount) {
    super.init(account, MailRuLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: MailRuLogin) throws -> Void {
    (try modelOrApplication.loginWithMailRuAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return MailRuLoginAction.type
  }

}

open class GoogleLoginAction: LoginAction<GoogleLogin> {
  public static let type: String = "GoogleLogin"
  public init(_ account: UserAccount) {
    super.init(account, GoogleLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: GoogleLogin) throws -> Void {
    (try modelOrApplication.loginWithGoogleAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return GoogleLoginAction.type
  }

}

open class OutlookLoginAction: LoginAction<OutlookLogin> {
  public static let type: String = "OutlookLogin"
  public init(_ account: UserAccount) {
    super.init(account, OutlookLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: OutlookLogin) throws -> Void {
    (try modelOrApplication.loginWithOutlookAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return OutlookLoginAction.type
  }

}

open class HotmailLoginAction: LoginAction<HotmailLogin> {
  public static let type: String = "HotmailLogin"
  public init(_ account: UserAccount) {
    super.init(account, HotmailLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: HotmailLogin) throws -> Void {
    (try modelOrApplication.loginWithHotmailAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return HotmailLoginAction.type
  }

}

open class RamblerlLoginAction: LoginAction<RamblerLogin> {
  public static let type: String = "RamblerLogin"
  public init(_ account: UserAccount) {
    super.init(account, RamblerLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: RamblerLogin) throws -> Void {
    (try modelOrApplication.loginWithRamblerAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return RamblerlLoginAction.type
  }

}

open class YahooLoginAction: LoginAction<YahooLogin> {
  public static let type: String = "YahooLogin"
  public init(_ account: UserAccount) {
    super.init(account, YahooLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: YahooLogin) throws -> Void {
    (try modelOrApplication.loginWithYahooAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return YandexLoginAction.type
  }

}

open class CustomMailServiceLoginAction: LoginAction<CustomMailServiceLogin> {
  public static let type: String = "CustomMailServiceLogin"
  public init(_ account: UserAccount) {
    super.init(account, CustomMailServiceLoginFeature.`get`)
  }

  @discardableResult
  open override func performImpl(_ modelOrApplication: CustomMailServiceLogin) throws -> Void {
    (try modelOrApplication.loginWithCustomMailServiceAccount(self.account))
  }

  @discardableResult
  open override func getActionType() -> String {
    return CustomMailServiceLoginAction.type
  }

}

@discardableResult
public func loginAction(_ account: UserAccount, _ accountType: AccountType2) -> MBTAction {
  switch accountType {
    case AccountType2.Yandex:
      return YandexLoginAction(account)
    case AccountType2.YandexTeam:
      return YandexTeamLoginAction(account)
    case AccountType2.Google:
      return GoogleLoginAction(account)
    case AccountType2.Hotmail:
      return HotmailLoginAction(account)
    case AccountType2.Mail:
      return MailRuLoginAction(account)
    case AccountType2.Outlook:
      return OutlookLoginAction(account)
    case AccountType2.Rambler:
      return RamblerlLoginAction(account)
    case AccountType2.Yahoo:
      return YahooLoginAction(account)
    case AccountType2.Other:
      return CustomMailServiceLoginAction(account)
    default:
      fatalError("Unsupported account type: " + accountType.toString())
  }
}

open class ChoseAccountFromAccountsListAction: MBTAction {
  public static let type: String = "ChoseAccountFromAccountsList"
  private var account: UserAccount
  public init(_ account: UserAccount) {
    self.account = account
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountsListFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try AccountsListFeature.`get`.forceCast(model).choseAccountFromAccountsList(self.account))
    (try AccountsListFeature.`get`.forceCast(application).choseAccountFromAccountsList(self.account))
    return MaillistComponent()
  }

  @discardableResult
  open func tostring() -> String {
    return "Chose account from accounts list"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return ChoseAccountFromAccountsListAction.type
  }

}

open class RevokeTokenForAccount: MBTAction {
  public static let type: String = "RevokeTokenForAccount"
  private var account: UserAccount
  public init(_ account: UserAccount) {
    self.account = account
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountsListFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ExpiringTokenFeature.`get`.forceCast(model).revokeToken(self.account))
    (try ExpiringTokenFeature.`get`.forceCast(application).revokeToken(self.account))
    return ReloginComponent()
  }

  @discardableResult
  open func tostring() -> String {
    return "RevokeTokenForAccount"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return RevokeTokenForAccount.type
  }

}

open class ExitReloginWindowAction: MBTAction {
  public static let type: String = "ExitReloginWindow"
  public init() {
  }

  @discardableResult
  open func events() -> YSArray<EventusEvent> {
    return YSArray()
  }

  @discardableResult
  open func supported(_ modelFeatures: YSArray<FeatureID>, _ applicationFeatures: YSArray<FeatureID>) -> Bool {
    return AccountsListFeature.`get`.includedAll(modelFeatures, applicationFeatures)
  }

  @discardableResult
  open func canBePerformed(_ _model: App) -> Bool {
    return true
  }

  @discardableResult
  open func perform(_ model: App, _ application: App, _ history: MBTHistory) throws -> MBTComponent {
    (try ExpiringTokenFeature.`get`.forceCast(model).exitFromReloginWindow())
    (try ExpiringTokenFeature.`get`.forceCast(application).exitFromReloginWindow())
    return MaillistComponent()
  }

  @discardableResult
  open func tostring() -> String {
    return "ExitReloginWindow"
  }

  @discardableResult
  open func getActionType() -> MBTActionType {
    return ExitReloginWindowAction.type
  }

}

