// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/translator-models.ts >>>

import Foundation

open class TranslatorLanguageName {
  public static let auto: LanguageName = "auto"
  public static let select: LanguageName = "select"
  public static let english: LanguageName = "English"
  public static let russian: LanguageName = "Russian"
  public static let afrikaans: LanguageName = "Afrikaans"
  public static let albanian: LanguageName = "Albanian"
  public static let amharic: LanguageName = "Amharic"
  public static let arabic: LanguageName = "Arabic"
}

open class TranslatorLanguageCode {
  public static let english: LanguageCode = "en"
  public static let russian: LanguageCode = "ru"
}

open class TranslatorSubmitButtonLabel {
  public static let translate: String = "Translate"
  public static let revert: String = "Revert"
}

open class TranslatorBarModel: TranslatorBar {
  private var sourceLanguage: LanguageName = TranslatorLanguageName.auto
  private var targetLanguage: LanguageName = TranslatorLanguageName.english
  private var messageTranslated: Bool = false
  private var translateBarShown: Bool = true
  private var isBarForced: Bool = false
  private let translatorSettingsModel: TranslatorSettingsModel
  public init(_ translatorSettingsModel: TranslatorSettingsModel) {
    self.translatorSettingsModel = translatorSettingsModel
  }

  open func setSourceLanguage(_ language: LanguageName) -> Void {
    self.sourceLanguage = language
  }

  open func setTargetLanguage(_ language: LanguageName) -> Void {
    self.targetLanguage = language
  }

  @discardableResult
  open func getSourceLanguage() throws -> LanguageName {
    return self.sourceLanguage
  }

  @discardableResult
  open func getTargetLanguage() throws -> LanguageName {
    return self.targetLanguage
  }

  @discardableResult
  open func forceShowBar() throws -> Void {
    self.isBarForced = true
  }

  @discardableResult
  open func isTranslatorBarShown() throws -> Bool {
    return self.isBarForced || (self.sourceLanguage != self.targetLanguage && self.translateBarShown)
  }

  open func setTranslateBarState(_ shown: Bool) -> Void {
    self.translateBarShown = shown
  }

  @discardableResult
  open func tapOnCloseBarButton(_ hideTranslatorForThisLanguage: Bool) throws -> Void {
    self.setTranslateBarState(false)
    if self.sourceLanguage != TranslatorLanguageName.auto && hideTranslatorForThisLanguage {
      (try self.translatorSettingsModel.addTranslationLanguageToIgnored(self.sourceLanguage))
    }
  }

  @discardableResult
  open func tapOnRevertButton() throws -> Void {
    self.messageTranslated = false
  }

  @discardableResult
  open func tapOnSourceLanguage() throws -> Void {
  }

  @discardableResult
  open func tapOnTargetLanguage() throws -> Void {
  }

  @discardableResult
  open func tapOnTranslateButton() throws -> Void {
    self.messageTranslated = true
  }

  @discardableResult
  open func getSubmitButtonLabel() throws -> String {
    return self.messageTranslated ? TranslatorSubmitButtonLabel.revert : TranslatorSubmitButtonLabel.translate
  }

  open func setMessageTranslateStatus(_ status: Bool) -> Void {
    self.messageTranslated = status
  }

  @discardableResult
  open func isMessageTranslated() throws -> Bool {
    return self.messageTranslated
  }

}

open class TranslatorLanguageListModel: TranslatorLanguageList {
  private var recentSourceLanguages: YSArray<LanguageName> = YSArray()
  private var recentTargetLanguages: YSArray<LanguageName> = YSArray()
  private var currentSourceLanguage: LanguageName = TranslatorLanguageName.english
  private var currentTargetLanguage: LanguageName = TranslatorLanguageName.english
  private var defaultTargetLanguage: LanguageName
  private var determinedAutomaticallySourceLanguage: LanguageName = TranslatorLanguageName.english
  private let translatorSettingsModel: TranslatorSettingsModel
  private let mailAppModelHandler: MailAppModelHandler
  private let translatorBarModel: TranslatorBarModel
  public init(_ translatorSettingsModel: TranslatorSettingsModel, _ mailAppModelHandler: MailAppModelHandler, _ translatorBarModel: TranslatorBarModel) {
    self.translatorSettingsModel = translatorSettingsModel
    self.mailAppModelHandler = mailAppModelHandler
    self.translatorBarModel = translatorBarModel
    self.defaultTargetLanguage = self.translatorSettingsModel.getDefaultTranslationLanguage()
  }

  @discardableResult
  open func getAllLanguages() -> YSArray<LanguageName> {
    return self.mailAppModelHandler.getCurrentAccount().translationLangs
  }

  @discardableResult
  open func getAllSourceLanguages() -> YSArray<LanguageName> {
    return self.getAllLanguages()
  }

  @discardableResult
  open func getAllTargetLanguages() -> YSArray<LanguageName> {
    return self.getAllLanguages()
  }

  @discardableResult
  open func getCurrentSourceLanguage() throws -> LanguageName! {
    return self.currentSourceLanguage == self.determinedAutomaticallySourceLanguage ? nil : self.currentSourceLanguage
  }

  @discardableResult
  open func getCurrentTargetLanguage() throws -> LanguageName! {
    return self.currentTargetLanguage == self.defaultTargetLanguage ? nil : self.currentTargetLanguage
  }

  @discardableResult
  open func getDefaultTargetLanguage() throws -> LanguageName {
    let newDefaultLanguage = self.translatorSettingsModel.getDefaultTranslationLanguage()
    if self.defaultTargetLanguage != newDefaultLanguage {
      self.defaultTargetLanguage = newDefaultLanguage
    }
    return self.defaultTargetLanguage
  }

  @discardableResult
  open func getDeterminedAutomaticallySourceLanguage() throws -> LanguageName {
    return self.determinedAutomaticallySourceLanguage
  }

  @discardableResult
  open func getRecentSourceLanguages() throws -> YSArray<LanguageName> {
    return self.recentSourceLanguages.filter({
      (language) in
      !YSArray(self.currentSourceLanguage, self.determinedAutomaticallySourceLanguage).includes(language)
    }).slice(0, 3)
  }

  @discardableResult
  open func getRecentTargetLanguages() throws -> YSArray<LanguageName> {
    return self.recentTargetLanguages.filter({
      (language) in
      !YSArray(self.currentTargetLanguage, self.defaultTargetLanguage).includes(language)
    }).slice(0, 3)
  }

  @discardableResult
  open func setSourceLanguage(_ language: LanguageName) throws -> Void {
    self.currentSourceLanguage = language
    self.translatorBarModel.setSourceLanguage(language)
    self.recentSourceLanguages.unshift(language)
  }

  @discardableResult
  open func setTargetLanguage(_ language: LanguageName, _ addToRecent: Bool) throws -> Void {
    self.currentTargetLanguage = language
    self.translatorBarModel.setTargetLanguage(language)
    if addToRecent {
      self.recentTargetLanguages.unshift(language)
    }
  }

  @discardableResult
  open func setDeterminedAutomaticallySourceLanguage(_ language: LanguageName) throws -> Void {
    self.determinedAutomaticallySourceLanguage = language
  }

}

open class TranslatorLanguageListSearchModel: TranslatorLanguageListSearch {
  private var searchQuery: String = ""
  private var searchTextFieldFocused: Bool = false
  private let translatorLanguageListModel: TranslatorLanguageListModel
  public init(_ translatorLanguageListModel: TranslatorLanguageListModel) {
    self.translatorLanguageListModel = translatorLanguageListModel
  }

  @discardableResult
  open func enterSearchQuery(_ query: String) throws -> Void {
    self.searchQuery = query
  }

  @discardableResult
  open func getSearchQuery() throws -> String {
    return self.searchQuery
  }

  @discardableResult
  open func tapOnCancelButton() throws -> Void {
    self.searchTextFieldFocused = false
    self.searchQuery = ""
  }

  @discardableResult
  open func tapOnClearSearchFieldButton() throws -> Void {
    self.searchQuery = ""
  }

  @discardableResult
  open func tapOnSearchTextField() throws -> Void {
    self.searchTextFieldFocused = true
  }

  @discardableResult
  open func isSearchTextFieldFocused() throws -> Bool {
    return self.searchTextFieldFocused
  }

  @discardableResult
  open func getSearchedLanguageList() throws -> YSArray<LanguageName> {
    return self.translatorLanguageListModel.getAllLanguages().filter({
      (language) in
      language.includes(self.searchQuery)
    })
  }

}

open class TranslatorSettingsModel: TranslatorSettings {
  private var translatorEnabled: Bool = true
  private var defaultTranslationLanguage: LanguageName = TranslatorLanguageName.english
  private var ignoredTranslationLanguages: YSArray<LanguageName> = YSArray()
  @discardableResult
  open func closeDefaultTranslationLanguageList() throws -> Void {
  }

  @discardableResult
  open func closeIgnoredTranslationLanguageList() throws -> Void {
  }

  @discardableResult
  open func getDefaultTranslationLanguage() -> LanguageName {
    return self.defaultTranslationLanguage
  }

  @discardableResult
  open func getIgnoredTranslationLanguages() throws -> YSArray<LanguageName> {
    return self.ignoredTranslationLanguages
  }

  @discardableResult
  open func isLanguageIgnored(_ lang: LanguageName) -> Bool {
    return self.ignoredTranslationLanguages.includes(lang)
  }

  @discardableResult
  open func isTranslatorEnabled() throws -> Bool {
    return self.translatorEnabled
  }

  @discardableResult
  open func openDefaultTranslationLanguageList() throws -> Void {
  }

  @discardableResult
  open func openIgnoredTranslationLanguageList() throws -> Void {
  }

  @discardableResult
  open func addTranslationLanguageToIgnored(_ language: LanguageName) throws -> Void {
    self.ignoredTranslationLanguages.push(language)
  }

  @discardableResult
  open func removeTranslationLanguageFromIgnored(_ language: LanguageName) throws -> Void {
    let index = self.ignoredTranslationLanguages.lastIndexOf(language)
    if index != -1 {
      self.ignoredTranslationLanguages.splice(index, 1)
    }
  }

  @discardableResult
  open func setDefaultTranslationLanguage(_ language: LanguageName) throws -> Void {
    self.defaultTranslationLanguage = language
  }

  @discardableResult
  open func switchTranslator() throws -> Void {
    self.translatorEnabled = !self.translatorEnabled
  }

  @discardableResult
  open func getDefaultTranslationLanguageFromGeneralSettingsPage() -> LanguageName {
    return self.defaultTranslationLanguage
  }

  @discardableResult
  open func isIgnoredLanguageCellShown() throws -> Bool {
    return self.ignoredTranslationLanguages.length > 0
  }

}

