// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/left-column/tabs-model.ts >>>

import Foundation

open class TabsModel: Tabs {
  public var model: MessageListDisplayModel
  private var accHandler: MailAppModelHandler
  private var undoModel: UndoModel
  public init(_ model: MessageListDisplayModel, _ accHandler: MailAppModelHandler, _ undoModel: UndoModel) {
    self.model = model
    self.accHandler = accHandler
    self.undoModel = undoModel
  }

  @discardableResult
  open func isEnableTabs() throws -> Bool {
    return self.accHandler.getCurrentAccount().accountSettings.sortingEmailsByCategoryEnabled
  }

  @discardableResult
  open func SwitchOffTabs() throws -> Void {
    self.accHandler.getCurrentAccount().accountSettings.sortingEmailsByCategoryEnabled = false
  }

  @discardableResult
  open func SwitchOnTabs() throws -> Void {
    self.accHandler.getCurrentAccount().accountSettings.sortingEmailsByCategoryEnabled = true
  }

  @discardableResult
  open func isDisplayNotificationTabs(_ tabsName: FolderName) throws -> Bool {
    return (self.model.getCurrentContainer().name == DefaultFolderName.inbox && self.accHandler.getCurrentAccount().messagesDB.getTabsToMessage(tabsName).size != 0)
  }

  @discardableResult
  open func isUnreadNotificationTabs(_ tabsName: FolderName) throws -> Bool {
    let messageListInTab = self.accHandler.getCurrentAccount().messagesDB.getMessageList(MessageListDatabaseFilter().withFolder(tabsName))
    for msg in messageListInTab {
      if !msg.read {
        return true
      }
    }
    return false
  }

  @discardableResult
  private func isFirstTabNotificationInMessageList(_ firstMessage: MessageView, _ firstMessageInOtherTabs: MessageView) throws -> Bool {
    return firstMessage.timestamp > firstMessageInOtherTabs.timestamp
  }

  @discardableResult
  open func getPositionTabsNotification(_ tabsName: FolderName) throws -> Int32 {
    let messageList = (try self.model.getMessageList(10))
    let msgListInMailingLists = self.accHandler.getCurrentAccount().messagesDB.getMessageList(MessageListDatabaseFilter().withFolder(DefaultFolderName.mailingLists))
    let msgListInSocialNetworks = self.accHandler.getCurrentAccount().messagesDB.getMessageList(MessageListDatabaseFilter().withFolder(DefaultFolderName.socialNetworks))
    var position: Int32 = 0
    var firstMessage: MessageView
    var firstMessageinOtherTabs: MessageView!
    if tabsName == DefaultFolderName.mailingLists {
      firstMessage = msgListInMailingLists[0]
      firstMessageinOtherTabs = msgListInSocialNetworks.length != 0 ? msgListInSocialNetworks[0] : nil
    } else {
      firstMessage = msgListInSocialNetworks[0]
      firstMessageinOtherTabs = msgListInMailingLists.length != 0 ? msgListInMailingLists[0] : nil
    }
    for msg in messageList {
      if msg.timestamp < firstMessage.timestamp {
        break
      }
      position = position + 1
    }
    if firstMessageinOtherTabs != nil {
      position = (try self.isFirstTabNotificationInMessageList(firstMessage, firstMessageinOtherTabs)) ? position : position + 1
    }
    return position
  }

  @discardableResult
  open func goToTabByNotification(_ tabsName: FolderName) throws -> Void {
    self.model.setCurrentContainer(MessageContainer(formatFolderName(tabsName), MessageContainerType.folder))
    self.undoModel.resetUndoShowing()
  }

}

