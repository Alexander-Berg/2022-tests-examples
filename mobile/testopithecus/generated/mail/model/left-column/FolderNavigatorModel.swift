// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/left-column/folder-navigator-model.ts >>>

import Foundation

open class FolderNavigatorModel: FolderNavigator, LabelNavigator, FilterNavigator {
  private var openedFolderList: Bool = false
  public var model: MessageListDisplayModel
  private var accHandler: MailAppModelHandler
  private var undoModel: UndoModel
  public init(_ model: MessageListDisplayModel, _ accHandler: MailAppModelHandler, _ undoModel: UndoModel) {
    self.model = model
    self.accHandler = accHandler
    self.undoModel = undoModel
  }

  @discardableResult
  open func getFoldersList() throws -> YSMap<FolderName, Int32> {
    let folders = self.accHandler.getCurrentAccount().messagesDB.getFolderList()
    let foldersToUnread = YSMap<FolderName, Int32>()
    folders.forEach({
      (folderName) in
      foldersToUnread.set(folderName, self.getUnreadCounterForFolder(folderName))
    })
    return foldersToUnread
  }

  @discardableResult
  open func goToFolder(_ folderDisplayName: String, _ parentFolders: YSArray<String>) throws -> Void {
    (try self.goToContainer(formatFolderName(folderDisplayName, parentFolders), MessageContainerType.folder))
  }

  @discardableResult
  open func isInTabsMode() throws -> Bool {
    return self.accHandler.getCurrentAccount().accountSettings.sortingEmailsByCategoryEnabled
  }

  @discardableResult
  open func isOpened() throws -> Bool {
    return self.openedFolderList
  }

  @discardableResult
  open func closeFolderList() throws -> Void {
    self.openedFolderList = false
  }

  @discardableResult
  open func openFolderList() throws -> Void {
    self.openedFolderList = true
    self.undoModel.resetUndoShowing()
  }

  @discardableResult
  open func ptrFoldersList() throws -> Void {
  }

  @discardableResult
  open func getCurrentContainer() throws -> String! {
    if self.model.getCurrentContainer().type != MessageContainerType.search {
      return self.model.getCurrentContainer().name
    }
    return nil
  }

  @discardableResult
  open func getLabelList() throws -> YSArray<LabelName> {
    return self.accHandler.getCurrentAccount().messagesDB.getLabelList()
  }

  @discardableResult
  open func goToLabel(_ labelName: String) throws -> Void {
    (try self.goToContainer(labelName, MessageContainerType.label))
  }

  @discardableResult
  open func goToFilterImportant() throws -> Void {
    (try self.goToContainer("Important", MessageContainerType.importantFilter))
  }

  @discardableResult
  open func goToFilterUnread() throws -> Void {
    (try self.goToContainer("Unread", MessageContainerType.unreadFilter))
  }

  @discardableResult
  open func goToFilterWithAttachments() throws -> Void {
    (try self.goToContainer("With attachments", MessageContainerType.withAttachmentsFilter))
  }

  @discardableResult
  private func goToContainer(_ containerName: String, _ containerType: MessageContainerType) throws -> Void {
    self.model.setCurrentContainer(MessageContainer(containerName, containerType))
    (try self.closeFolderList())
  }

  @discardableResult
  private func getUnreadCounterForFolder(_ folder: FolderName) -> Int32 {
    if YSArray(DefaultFolderName.trash, DefaultFolderName.draft, DefaultFolderName.spam, DefaultFolderName.sent, DefaultFolderName.template).includes(folder) {
      return 0
    }
    return self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(folder).withIsUnreadOnly().withIsInThreadMode(false).withLimit(100)).length
  }

}

