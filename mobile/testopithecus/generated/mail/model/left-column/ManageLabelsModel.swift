// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/left-column/manage-labels-model.ts >>>

import Foundation

open class ManageLabelsModel: ManageableLabel {
  private var nameOfCreatedLabel: LabelName! = nil
  private var colorIndex: Int32! = nil
  private var oldNameOfEditedLabel: LabelName! = nil
  private var newNameOfEditedLabel: LabelName! = nil
  private var oldColorIndexOfEditedLabel: Int32! = nil
  private var newColorIndexOfEditedLabel: Int32! = nil
  private var accHandler: MailAppModelHandler
  public init(_ accHandler: MailAppModelHandler) {
    self.accHandler = accHandler
  }

  @discardableResult
  open func openLabelManager() throws -> Void {
  }

  @discardableResult
  open func closeLabelManager() throws -> Void {
  }

  @discardableResult
  open func deleteLabel(_ labelName: LabelName, _ deletionMethod: ContainerDeletionMethod) throws -> Void {
    self.accHandler.getCurrentAccount().messagesDB.removeLabel(labelName)
  }

  @discardableResult
  open func getLabelList() throws -> YSArray<LabelName> {
    return self.accHandler.getCurrentAccount().messagesDB.getLabelList()
  }

  @discardableResult
  open func closeCreateLabelScreen() throws -> Void {
    self.dropAll()
  }

  @discardableResult
  open func closeEditLabelScreen() throws -> Void {
    self.dropAll()
  }

  @discardableResult
  open func enterNameForEditedLabel(_ labelName: LabelName) throws -> Void {
    self.newNameOfEditedLabel = labelName
  }

  @discardableResult
  open func enterNameForNewLabel(_ labelName: LabelName) throws -> Void {
    self.nameOfCreatedLabel = labelName
  }

  @discardableResult
  open func getCurrentEditedLabelColorIndex() throws -> Int32 {
    if self.newColorIndexOfEditedLabel == nil {
      return self.oldColorIndexOfEditedLabel!
    }
    return self.newColorIndexOfEditedLabel!
  }

  @discardableResult
  open func getCurrentEditedLabelName() throws -> LabelName {
    if self.newNameOfEditedLabel == nil {
      return self.oldNameOfEditedLabel!
    }
    return self.newNameOfEditedLabel!
  }

  @discardableResult
  open func getCurrentNewLabelColorIndex() throws -> Int32 {
    return requireNonNull(self.colorIndex, "Color is not set")
  }

  @discardableResult
  open func getCurrentNewLabelName() throws -> LabelName {
    if self.nameOfCreatedLabel == nil {
      return ""
    }
    return self.nameOfCreatedLabel!
  }

  @discardableResult
  open func openCreateLabelScreen() throws -> Void {
    self.colorIndex = 0
  }

  @discardableResult
  open func openEditLabelScreen(_ labelName: LabelName) throws -> Void {
    self.oldNameOfEditedLabel = labelName
    self.oldColorIndexOfEditedLabel = 0
  }

  @discardableResult
  open func setEditedLabelColor(_ index: Int32) throws -> Void {
    self.newColorIndexOfEditedLabel = index
  }

  @discardableResult
  open func setNewLabelColor(_ index: Int32) throws -> Void {
    self.colorIndex = index
  }

  @discardableResult
  open func submitEditedLabel() throws -> Void {
    self.accHandler.getCurrentAccount().messagesDB.renameLabel(requireNonNull(self.oldNameOfEditedLabel, "Old label name is not set"), requireNonNull(self.newNameOfEditedLabel, "New label name is not set"))
    self.dropAll()
  }

  @discardableResult
  open func submitNewLabel() throws -> Void {
    self.accHandler.getCurrentAccount().messagesDB.createLabel(requireNonNull(self.nameOfCreatedLabel, "Label name is not set"))
    self.dropAll()
  }

  private func dropAll() -> Void {
    self.oldColorIndexOfEditedLabel = nil
    self.newColorIndexOfEditedLabel = nil
    self.oldNameOfEditedLabel = nil
    self.newNameOfEditedLabel = nil
  }

}

