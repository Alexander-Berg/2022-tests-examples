// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/left-column/manage-folders-model.ts >>>

import Foundation

open class ManageFoldersModel: ManageableFolder {
  private var nameOfCreatedFolder: FolderName! = nil
  private var oldNameOfEditedFolder: FolderName! = nil
  private var oldParentFoldersOfEditedFolder: YSArray<FolderName> = YSArray()
  private var newNameOfEditedFolder: FolderName! = nil
  private var parentFolders: YSArray<FolderName> = YSArray()
  private var accHandler: MailAppModelHandler
  public init(_ accHandler: MailAppModelHandler) {
    self.accHandler = accHandler
  }

  @discardableResult
  open func closeFolderManager() throws -> Void {
  }

  @discardableResult
  open func openFolderManager() throws -> Void {
  }

  @discardableResult
  open func deleteFolder(_ folderDisplayName: FolderName, _ parentFolders: YSArray<FolderName>, _ deletionMethod: ContainerDeletionMethod) throws -> Void {
    self.accHandler.getCurrentAccount().messagesDB.removeFolder(formatFolderName(folderDisplayName, parentFolders))
    let folders = self.accHandler.getCurrentAccount().messagesDB.getUserFolders()
    for folder in folders {
      if folder.split("\(folderDisplayName)|").length > 1 {
        self.accHandler.getCurrentAccount().messagesDB.removeFolder(folder)
      }
    }
  }

  @discardableResult
  open func getFolderListForManageFolderScreen() throws -> YSArray<FolderName> {
    return self.accHandler.getCurrentAccount().messagesDB.getUserFolders()
  }

  @discardableResult
  open func closeCreateFolderScreen() throws -> Void {
    self.dropAll()
  }

  @discardableResult
  open func closeEditFolderScreen() throws -> Void {
    self.dropAll()
  }

  @discardableResult
  open func closeFolderLocationScreen() throws -> Void {
    self.parentFolders = YSArray()
  }

  @discardableResult
  open func enterNameForNewFolder(_ folderName: FolderName) throws -> Void {
    self.nameOfCreatedFolder = folderName
  }

  @discardableResult
  open func enterNameForEditedFolder(_ folderName: FolderName) throws -> Void {
    self.newNameOfEditedFolder = folderName
  }

  @discardableResult
  open func getFolderListForFolderLocationScreen() throws -> YSArray<FolderName> {
    let userFolders = self.accHandler.getCurrentAccount().messagesDB.getUserFolders()
    userFolders.push(self.accHandler.getCurrentAccount().client.oauthAccount.account.login as! FolderName)
    return userFolders
  }

  @discardableResult
  open func openCreateFolderScreen() throws -> Void {
  }

  @discardableResult
  open func openEditFolderScreen(_ folderName: FolderName, _ parentFolders: YSArray<FolderName>) throws -> Void {
    self.oldNameOfEditedFolder = folderName
    self.oldParentFoldersOfEditedFolder = parentFolders
  }

  @discardableResult
  open func openFolderLocationScreen() throws -> Void {
  }

  @discardableResult
  open func selectParentFolder(_ parentFolders: YSArray<FolderName>) throws -> Void {
    self.parentFolders = parentFolders
  }

  @discardableResult
  open func submitNewFolder() throws -> Void {
    self.accHandler.getCurrentAccount().messagesDB.createFolder(formatFolderName(requireNonNull(self.nameOfCreatedFolder, "Folder name is not set"), self.parentFolders))
    self.dropAll()
  }

  @discardableResult
  open func submitEditedFolder() throws -> Void {
    self.accHandler.getCurrentAccount().messagesDB.renameFolder(formatFolderName(requireNonNull(self.oldNameOfEditedFolder, "Old folder name is not set"), self.oldParentFoldersOfEditedFolder), formatFolderName(requireNonNull(self.newNameOfEditedFolder, "New folder name is not set"), self.parentFolders))
    self.dropAll()
  }

  @discardableResult
  open func getCurrentParentFolderForEditedFolder() throws -> String {
    if self.parentFolders.length == 0 && self.oldParentFoldersOfEditedFolder.length == 0 {
      return self.accHandler.getCurrentAccount().client.oauthAccount.account.login
    } else if self.parentFolders.length == 0 {
      return self.oldParentFoldersOfEditedFolder[self.oldParentFoldersOfEditedFolder.length - 1]
    } else {
      return self.parentFolders[self.parentFolders.length - 1]
    }
  }

  @discardableResult
  open func getCurrentParentFolderForNewFolder() throws -> String {
    if self.parentFolders.length == 0 {
      return self.accHandler.getCurrentAccount().client.oauthAccount.account.login
    } else {
      return self.parentFolders[self.parentFolders.length - 1]
    }
  }

  @discardableResult
  open func getCurrentEditedFolderName() throws -> FolderName {
    if self.newNameOfEditedFolder == nil {
      return self.oldNameOfEditedFolder!
    }
    return self.newNameOfEditedFolder!
  }

  @discardableResult
  open func getCurrentNewFolderName() throws -> FolderName {
    if self.nameOfCreatedFolder == nil {
      return ""
    }
    return self.nameOfCreatedFolder!
  }

  private func dropAll() -> Void {
    self.oldNameOfEditedFolder = nil
    self.oldParentFoldersOfEditedFolder = YSArray()
    self.newNameOfEditedFolder = nil
    self.parentFolders = YSArray()
  }

}

