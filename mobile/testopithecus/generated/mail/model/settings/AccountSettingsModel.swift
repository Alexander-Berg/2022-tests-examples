// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/settings/account-settings-model.ts >>>

import Foundation

open class AccountSettingModel: AccountSettings, AndroidAccountSettings, IosAccountSettings {
  private var syncCalendar: Bool = false
  private var filterScreenOpenCounter: Int32 = 0
  public let accountsSettings: YSArray<AccountSettingsModel>
  public let accountsManager: AccountsManager
  private var accHandler: MailAppModelHandler
  private var openedAccount: Int32!
  public init(_ accountsSettings: YSArray<AccountSettingsModel>, _ accountsManager: AccountsManager, _ accHandler: MailAppModelHandler, _ openedAccount: Int32! = nil) {
    self.accountsSettings = accountsSettings
    self.accountsManager = accountsManager
    self.accHandler = accHandler
    self.openedAccount = openedAccount
  }

  @discardableResult
  open func openAccountSettings(_ accountIndex: Int32) throws -> Void {
    self.openedAccount = self.accountsManager.indexesOfLoggedInAccounts[accountIndex]
  }

  @discardableResult
  open func closeAccountSettings() throws -> Void {
    self.openedAccount = nil
  }

  @discardableResult
  private func getOpenedAccountSettings() -> AccountSettingsModel {
    return self.accountsSettings[self.demandRequiredAccountIndex()]
  }

  @discardableResult
  open func isGroupBySubjectEnabled() throws -> Bool {
    return self.getOpenedAccountSettings().groupBySubjectEnabled
  }

  @discardableResult
  open func getFolderToNotificationOption() throws -> YSMap<FolderName, NotificationOption> {
    return self.getOpenedAccountSettings().folderToNotificationOption
  }

  @discardableResult
  open func switchGroupBySubject() throws -> Void {
    self.getOpenedAccountSettings().groupBySubjectEnabled = !self.getOpenedAccountSettings().groupBySubjectEnabled
  }

  @discardableResult
  open func changePhoneNumber(_ newPhoneNumber: String) throws -> Void {
    self.getOpenedAccountSettings().phoneNumber = newPhoneNumber
  }

  @discardableResult
  open func changeSignature(_ newSignature: String) throws -> Void {
    self.getOpenedAccountSettings().signature = newSignature
  }

  @discardableResult
  open func getNotificationOptionForFolder(_ folder: FolderName) throws -> NotificationOption {
    return self.getOpenedAccountSettings().folderToNotificationOption.`get`(folder)!
  }

  @discardableResult
  open func getPlaceForSignature() throws -> SignaturePlace {
    return self.getOpenedAccountSettings().placeForSignature
  }

  @discardableResult
  open func getPushNotificationSound() throws -> NotificationSound {
    return self.getOpenedAccountSettings().notificationSound
  }

  @discardableResult
  open func getSignature() throws -> String {
    return self.getOpenedAccountSettings().signature
  }

  @discardableResult
  open func isAccountUsingEnabled() throws -> Bool {
    return self.getOpenedAccountSettings().accountUsingEnabled
  }

  @discardableResult
  open func isPushNotificationForAllEnabled() throws -> Bool {
    return self.getOpenedAccountSettings().pushNotificationForAllEnabled
  }

  @discardableResult
  open func isSortingEmailsByCategoryEnabled() throws -> Bool {
    return self.getOpenedAccountSettings().sortingEmailsByCategoryEnabled
  }

  @discardableResult
  open func isThemeEnabled() throws -> Bool {
    return self.getOpenedAccountSettings().themeEnabled
  }

  @discardableResult
  open func openFolderManager() throws -> Void {
  }

  @discardableResult
  open func openLabelManager() throws -> Void {
  }

  @discardableResult
  open func openMailingListsManager() throws -> Void {
  }

  @discardableResult
  open func openPassport() throws -> Void {
  }

  @discardableResult
  open func openFilters() throws -> Void {
    self.filterScreenOpenCounter += 1
  }

  @discardableResult
  open func getFilterScreenOpenCounter() -> Int32 {
    return self.filterScreenOpenCounter
  }

  @discardableResult
  open func isSyncCalendarEnabled() throws -> Bool {
    return self.syncCalendar
  }

  @discardableResult
  open func switchSyncCalendar() throws -> Void {
    self.syncCalendar = !self.syncCalendar
  }

  @discardableResult
  open func setNotificationOptionForFolder(_ folder: FolderName, _ option: NotificationOption) throws -> Void {
    self.getOpenedAccountSettings().folderToNotificationOption.set(folder, option)
  }

  @discardableResult
  open func setPlaceForSignature(_ place: SignaturePlace) throws -> Void {
    self.getOpenedAccountSettings().placeForSignature = place
  }

  @discardableResult
  open func setPushNotificationSound(_ sound: NotificationSound) throws -> Void {
    self.getOpenedAccountSettings().notificationSound = sound
  }

  @discardableResult
  open func switchPushNotification() throws -> Void {
    let currentAccountSettings: AccountSettingsModel = self.getOpenedAccountSettings()
    currentAccountSettings.pushNotificationForAllEnabled = !currentAccountSettings.pushNotificationForAllEnabled
  }

  @discardableResult
  open func switchSortingEmailsByCategory() throws -> Void {
    let currentAccountSettings: AccountSettingsModel = self.getOpenedAccountSettings()
    currentAccountSettings.sortingEmailsByCategoryEnabled = !currentAccountSettings.sortingEmailsByCategoryEnabled
    if currentAccountSettings.sortingEmailsByCategoryEnabled {
      self.accHandler.getCurrentAccount().messagesDB.createFolder(DefaultFolderName.mailingLists)
      self.accHandler.getCurrentAccount().messagesDB.createFolder(DefaultFolderName.socialNetworks)
      let msgs = self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(DefaultFolderName.inbox))
      let msgInSocialMedia = self.accHandler.getCurrentAccount().messagesDB.getTabsToMessage(DefaultFolderName.socialNetworks)
      let msgInSubscriptions = self.accHandler.getCurrentAccount().messagesDB.getTabsToMessage(DefaultFolderName.mailingLists)
      for index in stride(from: 0, to: msgs.length, by: 1) {
        if msgInSocialMedia.has(msgs[index]) {
          self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(msgs[index], DefaultFolderName.socialNetworks)
        }
        if msgInSubscriptions.has(msgs[index]) {
          self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(msgs[index], DefaultFolderName.mailingLists)
        }
      }
    } else {
      var msgs = self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(DefaultFolderName.socialNetworks))
      for index in stride(from: 0, to: msgs.length, by: 1) {
        self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(msgs[index], DefaultFolderName.inbox, false)
      }
      msgs = self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(DefaultFolderName.mailingLists))
      for index in stride(from: 0, to: msgs.length, by: 1) {
        self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(msgs[index], DefaultFolderName.inbox, false)
      }
      self.accHandler.getCurrentAccount().messagesDB.removeFolder(DefaultFolderName.mailingLists)
      self.accHandler.getCurrentAccount().messagesDB.removeFolder(DefaultFolderName.socialNetworks)
    }
  }

  @discardableResult
  open func switchTheme() throws -> Void {
    let currentAccountSettings: AccountSettingsModel = self.getOpenedAccountSettings()
    currentAccountSettings.themeEnabled = !currentAccountSettings.themeEnabled
  }

  @discardableResult
  open func switchUseAccountSetting() throws -> Void {
    let currentAccountSettings: AccountSettingsModel = self.getOpenedAccountSettings()
    currentAccountSettings.accountUsingEnabled = !currentAccountSettings.accountUsingEnabled
  }

  @discardableResult
  private func demandRequiredAccountIndex() -> Int32 {
    return requireNonNull(self.openedAccount, "Необходимо зайти в настройки аккаунта")
  }

}

