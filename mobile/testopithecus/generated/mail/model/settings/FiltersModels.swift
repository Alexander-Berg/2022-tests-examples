// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/settings/filters-models.ts >>>

import Foundation

open class FiltersListModel: FiltersList {
  private let maxPromoShowNumber: Int32 = 3
  private let accountSettingModel: AccountSettingModel
  public init(_ accountSettingModel: AccountSettingModel) {
    self.accountSettingModel = accountSettingModel
  }

  @discardableResult
  open func getFilterList() throws -> YSArray<FilterView> {
    return YSArray()
  }

  @discardableResult
  open func isPromoShown() throws -> Bool {
    return self.accountSettingModel.getFilterScreenOpenCounter() <= self.maxPromoShowNumber
  }

  @discardableResult
  open func tapOnCreateRuleButton() throws -> Void {
  }

  @discardableResult
  open func tapOnFilterByIndex(_ index: Int32) throws -> Void {
  }

}

open class FilterCreateOrUpdateRuleModel: FilterCreateOrUpdateRule {
  private var markAsReadToggle: Bool = false
  private var deleteToggle: Bool = false
  private var applyToExistingEmailsToggle: Bool = false
  private var applyLabelValue: LabelName! = nil
  private var moveToFolderValue: FolderName! = nil
  private var subjects: YSArray<String> = YSArray()
  private var froms: YSArray<String> = YSArray()
  private let filterConditionLogicModel: FilterConditionLogicModel
  public init(_ filterConditionLogicModel: FilterConditionLogicModel) {
    self.filterConditionLogicModel = filterConditionLogicModel
  }

  @discardableResult
  open func getActionToggle(_ actionToggle: FilterActionToggle) throws -> Bool {
    switch actionToggle {
      case FilterActionToggle.applyToExistingEmails:
        return self.applyToExistingEmailsToggle
      case FilterActionToggle.delete:
        return self.deleteToggle
      case FilterActionToggle.markAsRead:
        return self.markAsReadToggle
    }
  }

  @discardableResult
  open func getApplyLabelValue() throws -> LabelName! {
    return self.applyLabelValue
  }

  @discardableResult
  open func getConditionField(_ conditionField: FilterConditionField) throws -> YSArray<String> {
    switch conditionField {
      case FilterConditionField.subject:
        return self.subjects
      case FilterConditionField.from:
        return self.froms
    }
  }

  @discardableResult
  open func isConditionLogicButtonShown() throws -> Bool {
    return self.subjects.length > 0 && self.froms.length > 0
  }

  @discardableResult
  open func tapOnConditionLogicButton() throws -> Void {
  }

  @discardableResult
  open func getConditionLogic() throws -> FilterLogicType! {
    return (try self.filterConditionLogicModel.getLogicType())
  }

  @discardableResult
  open func getMoveToFolderValue() throws -> FolderName! {
    return self.moveToFolderValue
  }

  @discardableResult
  open func setActionToggle(_ actionToggle: FilterActionToggle, _ value: Bool) throws -> Void {
    switch actionToggle {
      case FilterActionToggle.applyToExistingEmails:
        self.applyToExistingEmailsToggle = value
      case FilterActionToggle.delete:
        self.deleteToggle = value
      case FilterActionToggle.markAsRead:
        self.markAsReadToggle = value
    }
  }

  @discardableResult
  open func setConditionField(_ conditionField: FilterConditionField, _ value: String) throws -> Void {
    switch conditionField {
      case FilterConditionField.subject:
        self.subjects.push(value)
      case FilterConditionField.from:
        self.froms.push(value)
    }
  }

  @discardableResult
  open func tapOnApplyLabel() throws -> Void {
  }

  @discardableResult
  open func tapOnConditionField(_ conditionField: FilterConditionField) throws -> Void {
  }

  @discardableResult
  open func tapOnCreate() throws -> Void {
  }

  @discardableResult
  open func tapOnMoveToFolder() throws -> Void {
  }

  @discardableResult
  open func tapOnMore() throws -> Void {
  }

}

open class FilterConditionLogicModel: FilterConditionLogic {
  private var conditionalLogic: FilterLogicType! = nil
  @discardableResult
  open func getLogicTypes() throws -> YSArray<FilterLogicType> {
    return YSArray(FilterLogicType.and, FilterLogicType.or)
  }

  @discardableResult
  open func setLogicType(_ logicType: FilterLogicType) throws -> Void {
    self.conditionalLogic = logicType
  }

  @discardableResult
  open func getLogicType() throws -> FilterLogicType! {
    return self.conditionalLogic
  }

}

open class FilterUpdateRuleMoreModel: FilterUpdateRuleMore {
  @discardableResult
  open func changeEnableStatus(_ enable: Bool) throws -> Void {
  }

  @discardableResult
  open func delete() throws -> Void {
  }

}

