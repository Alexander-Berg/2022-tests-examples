// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/messages-list/group-mode-model.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class GroupModeModel(private var markableModel: MarkableReadModel, private var deleteMessageModel: DeleteMessageModel, private var archiveModel: ArchiveMessageModel, private var important: MarkableImportantModel, private var spam: SpamableModel, private var messageListDisplay: MessageListDisplayModel): GroupMode {
    var selectedOrders: YSSet<Int> = YSSet<Int>()
    open override fun getNumberOfSelectedMessages(): Int {
        val selectedMessages = this.messageListDisplay.getMidsByOrders(this.selectedOrders)
        return selectedMessages.size
    }

    open override fun getSelectedMessages(): YSSet<Int> {
        return this.selectedOrders
    }

    open override fun isInGroupMode(): Boolean {
        return this.selectedOrders.size != 0
    }

    open override fun markAsRead(): Unit {
        for (order in this.selectedOrders.values()) {
            this.markableModel.markAsRead(order)
        }
        this.selectedOrders = YSSet<Int>()
    }

    open override fun markAsUnread(): Unit {
        for (order in this.selectedOrders.values()) {
            this.markableModel.markAsUnread(order)
        }
        this.selectedOrders = YSSet<Int>()
    }

    open override fun delete(): Unit {
        this.deleteMessageModel.deleteMessages(this.selectedOrders)
        this.selectedOrders = YSSet<Int>()
    }

    open override fun selectMessage(byOrder: Int): Unit {
        this.selectedOrders.add(byOrder)
    }

    open override fun archive(): Unit {
        this.archiveModel.archiveMessages(this.selectedOrders)
        this.selectedOrders = YSSet<Int>()
    }

    open override fun markAsImportant(): Unit {
        for (order in this.selectedOrders.values()) {
            this.important.markAsImportant(order)
        }
        this.selectedOrders = YSSet<Int>()
    }

    open override fun markAsNotSpam(): Unit {
        this.spam.moveFromSpamMessages(this.selectedOrders)
        this.selectedOrders = YSSet<Int>()
    }

    open override fun markAsSpam(): Unit {
        this.spam.moveToSpamMessages(this.selectedOrders)
        this.selectedOrders = YSSet<Int>()
    }

    open override fun markAsUnimportant(): Unit {
        for (order in this.selectedOrders.values()) {
            this.important.markAsUnimportant(order)
        }
        this.selectedOrders = YSSet<Int>()
    }

    open override fun openMoveToFolderScreen(): Unit {
    }

    open override fun unselectAllMessages(): Unit {
        this.selectedOrders = YSSet<Int>()
    }

    open override fun unselectMessage(byOrder: Int): Unit {
        this.selectedOrders.delete(byOrder)
    }

    open fun copy(): GroupModeModel {
        val copy = GroupModeModel(this.markableModel, this.deleteMessageModel, this.archiveModel, this.important, this.spam, this.messageListDisplay)
        copy.selectedOrders = this.selectedOrders
        return copy
    }

    open override fun initialMessageSelect(byOrder: Int): Unit {
        this.selectedOrders = YSSet<Int>(mutableListOf(byOrder))
    }

    open override fun selectAllMessages(): Unit {
        val storedMessages: YSArray<Int> = mutableListOf()
        for (i in (0 until this.messageListDisplay.getMessageList(20).size step 1)) {
            storedMessages.add(i)
        }
        this.selectedOrders = YSSet<Int>(storedMessages)
    }

    open override fun openApplyLabelsScreen(): Unit {
    }

}

