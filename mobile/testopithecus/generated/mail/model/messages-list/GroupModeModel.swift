// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/messages-list/group-mode-model.ts >>>

import Foundation

open class GroupModeModel: GroupMode {
  public var selectedOrders: YSSet<Int32> = YSSet<Int32>()
  private var markableModel: MarkableReadModel
  private var deleteMessageModel: DeleteMessageModel
  private var archiveModel: ArchiveMessageModel
  private var important: MarkableImportantModel
  private var spam: SpamableModel
  private var messageListDisplay: MessageListDisplayModel
  public init(_ markableModel: MarkableReadModel, _ deleteMessageModel: DeleteMessageModel, _ archiveModel: ArchiveMessageModel, _ important: MarkableImportantModel, _ spam: SpamableModel, _ messageListDisplay: MessageListDisplayModel) {
    self.markableModel = markableModel
    self.deleteMessageModel = deleteMessageModel
    self.archiveModel = archiveModel
    self.important = important
    self.spam = spam
    self.messageListDisplay = messageListDisplay
  }

  @discardableResult
  open func getNumberOfSelectedMessages() throws -> Int32 {
    let selectedMessages = self.messageListDisplay.getMidsByOrders(self.selectedOrders)
    return selectedMessages.length
  }

  @discardableResult
  open func getSelectedMessages() throws -> YSSet<Int32> {
    return self.selectedOrders
  }

  @discardableResult
  open func isInGroupMode() throws -> Bool {
    return self.selectedOrders.size != 0
  }

  @discardableResult
  open func markAsRead() throws -> Void {
    for order in self.selectedOrders.values() {
      (try self.markableModel.markAsRead(order))
    }
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func markAsUnread() throws -> Void {
    for order in self.selectedOrders.values() {
      (try self.markableModel.markAsUnread(order))
    }
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func delete() throws -> Void {
    self.deleteMessageModel.deleteMessages(self.selectedOrders)
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func selectMessage(_ byOrder: Int32) throws -> Void {
    self.selectedOrders.add(byOrder)
  }

  @discardableResult
  open func archive() throws -> Void {
    self.archiveModel.archiveMessages(self.selectedOrders)
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func markAsImportant() throws -> Void {
    for order in self.selectedOrders.values() {
      (try self.important.markAsImportant(order))
    }
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func markAsNotSpam() throws -> Void {
    self.spam.moveFromSpamMessages(self.selectedOrders)
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func markAsSpam() throws -> Void {
    self.spam.moveToSpamMessages(self.selectedOrders)
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func markAsUnimportant() throws -> Void {
    for order in self.selectedOrders.values() {
      (try self.important.markAsUnimportant(order))
    }
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func openMoveToFolderScreen() throws -> Void {
  }

  @discardableResult
  open func unselectAllMessages() throws -> Void {
    self.selectedOrders = YSSet<Int32>()
  }

  @discardableResult
  open func unselectMessage(_ byOrder: Int32) throws -> Void {
    self.selectedOrders.delete(byOrder)
  }

  @discardableResult
  open func copy() -> GroupModeModel {
    let copy = GroupModeModel(self.markableModel, self.deleteMessageModel, self.archiveModel, self.important, self.spam, self.messageListDisplay)
    copy.selectedOrders = self.selectedOrders
    return copy
  }

  @discardableResult
  open func initialMessageSelect(_ byOrder: Int32) throws -> Void {
    self.selectedOrders = YSSet<Int32>(YSArray(byOrder))
  }

  @discardableResult
  open func selectAllMessages() throws -> Void {
    let storedMessages: YSArray<Int32> = YSArray()
    for i in stride(from: 0, to: (try self.messageListDisplay.getMessageList(20)).length, by: 1) {
      storedMessages.push(i)
    }
    self.selectedOrders = YSSet<Int32>(storedMessages)
  }

  @discardableResult
  open func openApplyLabelsScreen() throws -> Void {
  }

}

