// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/messages-list/context-menu-model.ts >>>

import Foundation

open class MessageActionItem {
  public static let reply: MessageActionName = "Reply"
  public static let replyAll: MessageActionName = "Reply to all"
  public static let forward: MessageActionName = "Forward"
  public static let delete: MessageActionName = "Delete"
  public static let markAsUnread: MessageActionName = "Mark as unread"
  public static let markAsRead: MessageActionName = "Mark as read"
  public static let spam: MessageActionName = "Spam!"
  public static let notSpam: MessageActionName = "Not spam!"
  public static let markAsImportant: MessageActionName = "Mark as important"
  public static let markAsNotImportant: MessageActionName = "Mark as not important"
  public static let moveToFolder: MessageActionName = "Move to folder"
  public static let applyLabel: MessageActionName = "Apply label"
  public static let archive: MessageActionName = "Archive"
  public static let showTranslator: MessageActionName = "Show translator"
  public static let print: MessageActionName = "Print"
  public static let allActions: YSArray<MessageActionName> = YSArray(MessageActionItem.reply, MessageActionItem.replyAll, MessageActionItem.forward, MessageActionItem.delete, MessageActionItem.markAsRead, MessageActionItem.markAsUnread, MessageActionItem.spam, MessageActionItem.notSpam, MessageActionItem.markAsImportant, MessageActionItem.markAsNotImportant, MessageActionItem.moveToFolder, MessageActionItem.applyLabel, MessageActionItem.archive, MessageActionItem.showTranslator, MessageActionItem.print)
}

open class ContextMenuModel: ContextMenu {
  private var order: Int32 = -1
  private var deleteMessageModel: DeleteMessageModel
  private var importantMessage: MarkableImportantModel
  private var markableRead: MarkableReadModel
  private var accHandler: MailAppModelHandler
  private var messageListDisplayModel: MessageListDisplayModel
  private var spammable: SpamableModel
  private var compose: ComposeModel
  private var archiveMessage: ArchiveMessageModel
  private var openMessageModel: OpenMessageModel
  private var translatorBarModel: TranslatorBarModel
  public init(_ deleteMessageModel: DeleteMessageModel, _ importantMessage: MarkableImportantModel, _ markableRead: MarkableReadModel, _ accHandler: MailAppModelHandler, _ messageListDisplayModel: MessageListDisplayModel, _ spammable: SpamableModel, _ compose: ComposeModel, _ archiveMessage: ArchiveMessageModel, _ openMessageModel: OpenMessageModel, _ translatorBarModel: TranslatorBarModel) {
    self.deleteMessageModel = deleteMessageModel
    self.importantMessage = importantMessage
    self.markableRead = markableRead
    self.accHandler = accHandler
    self.messageListDisplayModel = messageListDisplayModel
    self.spammable = spammable
    self.compose = compose
    self.archiveMessage = archiveMessage
    self.openMessageModel = openMessageModel
    self.translatorBarModel = translatorBarModel
  }

  @discardableResult
  open func openFromShortSwipe(_ order: Int32) throws -> Void {
    self.order = order
  }

  @discardableResult
  open func openFromMessageView() throws -> Void {
    self.order = requireNonNull(self.openMessageModel.getOrder(), "There is no opened message")
  }

  @discardableResult
  open func close() throws -> Void {
    if self.openMessageModel.getOrder() == nil {
      self.order = -1
    }
  }

  @discardableResult
  open func getAvailableActions() throws -> YSArray<MessageActionName> {
    let mid = self.messageListDisplayModel.getMessageId(self.order)
    let folder = self.accHandler.getCurrentAccount().messagesDB.storedFolder(mid)
    let actions = self.messageActionsByFolder(folder)
    let message = self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid)
    let isRead = message.mutableHead.read
    let isImportant = message.mutableHead.important
    let isOneRecipient = message.to.size < 2
    let indexRead = actions.lastIndexOf(MessageActionItem.markAsRead)
    let indexUnread = actions.lastIndexOf(MessageActionItem.markAsUnread)
    if indexRead != -1 && indexUnread != -1 {
      isRead ? actions.splice(indexRead, 1) : actions.splice(indexUnread, 1)
    }
    let indexImportant = actions.lastIndexOf(MessageActionItem.markAsImportant)
    let indexUnimportant = actions.lastIndexOf(MessageActionItem.markAsNotImportant)
    if indexImportant != -1 && indexUnimportant != -1 {
      isImportant ? actions.splice(indexImportant, 1) : actions.splice(indexUnimportant, 1)
    }
    let indexReplyAll = actions.lastIndexOf(MessageActionItem.replyAll)
    if indexReplyAll != -1 && isOneRecipient {
      actions.splice(indexReplyAll, 1)
    }
    let indexTranslator = actions.lastIndexOf(MessageActionItem.showTranslator)
    let isShowTranslatorButtonShown = (try self.isShowTranslatorButtonShown())
    if !isShowTranslatorButtonShown && indexTranslator != -1 {
      actions.splice(indexTranslator, 1)
    }
    return actions
  }

  @discardableResult
  open func getOrderOfMessageWithOpenedContextMenu() throws -> Int32 {
    return self.order
  }

  @discardableResult
  private func getMidOfMessageWithOpenedContextMenu() -> MessageId {
    return self.messageListDisplayModel.getMessageId(self.order)
  }

  @discardableResult
  open func deleteMessage() throws -> Void {
    (try self.deleteMessageModel.deleteMessage(self.order))
    (try self.close())
    (try self.closeMessageIfOpened())
  }

  @discardableResult
  open func markAsImportant() throws -> Void {
    (try self.importantMessage.markAsImportant(self.order))
    (try self.close())
  }

  @discardableResult
  open func markAsUnimportant() throws -> Void {
    (try self.importantMessage.markAsUnimportant(self.order))
    (try self.close())
  }

  @discardableResult
  open func markAsRead() throws -> Void {
    (try self.markableRead.markAsRead(self.order))
    (try self.close())
  }

  @discardableResult
  open func markAsUnread() throws -> Void {
    (try self.markableRead.markAsUnread(self.order))
    (try self.close())
  }

  @discardableResult
  open func openMoveToFolderScreen() throws -> Void {
  }

  @discardableResult
  open func archive() throws -> Void {
    self.archiveMessage.archiveMessage(self.order)
    (try self.close())
    (try self.closeMessageIfOpened())
  }

  @discardableResult
  open func markAsNotSpam() throws -> Void {
    (try self.spammable.moveFromSpam(self.order))
    (try self.close())
    (try self.closeMessageIfOpened())
  }

  @discardableResult
  open func markAsSpam() throws -> Void {
    (try self.spammable.moveToSpam(self.order))
    (try self.close())
    (try self.closeMessageIfOpened())
  }

  @discardableResult
  open func openApplyLabelsScreen() throws -> Void {
  }

  @discardableResult
  open func openForwardCompose() throws -> Void {
    (try self.compose.openForwardCompose(self.getMidOfMessageWithOpenedContextMenu()))
    (try self.close())
  }

  @discardableResult
  open func openReplyAllCompose() throws -> Void {
    (try self.compose.openReplyAllCompose(self.getMidOfMessageWithOpenedContextMenu()))
    (try self.close())
  }

  @discardableResult
  open func openReplyCompose() throws -> Void {
    (try self.compose.openReplyCompose(self.getMidOfMessageWithOpenedContextMenu()))
    (try self.close())
  }

  @discardableResult
  open func showTranslator() throws -> Void {
    return (try self.translatorBarModel.forceShowBar())
  }

  @discardableResult
  private func isShowTranslatorButtonShown() throws -> Bool {
    let isMessageOpened = self.openMessageModel.openedMessage != int64(-1)
    let isTranslatorBarShown = (try self.translatorBarModel.isTranslatorBarShown())
    return !isTranslatorBarShown && isMessageOpened
  }

  @discardableResult
  private func messageActionsByFolder(_ folder: FolderName) -> YSArray<MessageActionName> {
    let actions = copyArray(MessageActionItem.allActions)
    switch folder {
      case DefaultFolderName.archive:
        for folder in YSArray(MessageActionItem.archive, MessageActionItem.notSpam) {
          actions.splice(actions.lastIndexOf(folder), 1)
        }
        return actions
      case DefaultFolderName.sent:
        for folder in YSArray(MessageActionItem.spam, MessageActionItem.notSpam) {
          actions.splice(actions.lastIndexOf(folder), 1)
        }
        return actions
      case DefaultFolderName.trash:
        for folder in YSArray(MessageActionItem.markAsNotImportant, MessageActionItem.markAsImportant, MessageActionItem.notSpam, MessageActionItem.applyLabel) {
          actions.splice(actions.lastIndexOf(folder), 1)
        }
        return actions
      case DefaultFolderName.spam:
        for folder in YSArray(MessageActionItem.markAsNotImportant, MessageActionItem.markAsImportant, MessageActionItem.spam, MessageActionItem.applyLabel) {
          actions.splice(actions.lastIndexOf(folder), 1)
        }
        return actions
      case DefaultFolderName.draft:
        return YSArray(MessageActionItem.forward, MessageActionItem.delete)
      case DefaultFolderName.template:
        return YSArray(MessageActionItem.delete)
      default:
        actions.splice(actions.lastIndexOf(MessageActionItem.notSpam), 1)
        return actions
    }
  }

  @discardableResult
  private func closeMessageIfOpened() throws -> Void {
    if self.openMessageModel.openedMessage != int64(-1) {
      (try self.openMessageModel.closeMessage())
    }
  }

}

