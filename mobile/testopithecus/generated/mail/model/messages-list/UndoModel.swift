// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/messages-list/undo-model.ts >>>

import Foundation

open class UndoModel: Undo {
  private var deleteModel: DeleteMessageModel
  private var archiveModel: ArchiveMessageModel
  private var spamModel: SpamableModel
  private var accHandler: MailAppModelHandler
  private var messageListDisplayModel: MessageListDisplayModel
  public init(_ deleteModel: DeleteMessageModel, _ archiveModel: ArchiveMessageModel, _ spamModel: SpamableModel, _ accHandler: MailAppModelHandler, _ messageListDisplayModel: MessageListDisplayModel) {
    self.deleteModel = deleteModel
    self.archiveModel = archiveModel
    self.spamModel = spamModel
    self.accHandler = accHandler
    self.messageListDisplayModel = messageListDisplayModel
  }

  open func resetUndoShowing() -> Void {
    self.deleteModel.resetLastDeleteMessageTime()
    self.archiveModel.resetLastArchiveMessageTime()
    self.spamModel.resetLastSpamMessageTime()
  }

  @discardableResult
  open func isUndoArchiveToastShown() throws -> UndoState {
    let lastArchiveMessageTime: Int64! = self.archiveModel.getLastArchiveMessageTime()
    if lastArchiveMessageTime == nil {
      return UndoState.notShown
    }
    let duration = currentTimeMs() - lastArchiveMessageTime!
    return self.getUndoToastShowingState(duration)
  }

  @discardableResult
  open func isUndoDeleteToastShown() throws -> UndoState {
    let lastDeleteMessageTime: Int64! = self.deleteModel.getLastDeleteMessageTime()
    if lastDeleteMessageTime == nil || self.messageListDisplayModel.getCurrentContainer().name == DefaultFolderName.trash {
      return UndoState.notShown
    }
    let duration = currentTimeMs() - lastDeleteMessageTime!
    return self.getUndoToastShowingState(duration)
  }

  @discardableResult
  open func isUndoSpamToastShown() throws -> UndoState {
    let lastSpamMessageTime: Int64! = self.spamModel.getLastSpamMessageTime()
    if lastSpamMessageTime == nil {
      return UndoState.notShown
    }
    let duration = currentTimeMs() - lastSpamMessageTime!
    return self.getUndoToastShowingState(duration)
  }

  @discardableResult
  open func isUndoSendingToastShown() throws -> UndoState {
    return UndoState.notShown
  }

  @discardableResult
  open func undoArchive() throws -> Void {
    let archivedMessageIdToFolder = self.archiveModel.getArchivedMessageIdToFolder()
    archivedMessageIdToFolder.__forEach({
      (folderName, mid) in
      self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(mid, folderName)
    })
    self.archiveModel.resetLastArchiveMessageTime()
  }

  @discardableResult
  open func undoDelete() throws -> Void {
    let deletedMessageIdToFolder = self.deleteModel.getDeletedMessageIdToFolder()
    deletedMessageIdToFolder.__forEach({
      (folderName, mid) in
      if folderName != DefaultFolderName.trash {
        self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(mid, folderName)
      }
    })
    self.deleteModel.resetLastDeleteMessageTime()
  }

  @discardableResult
  open func undoSpam() throws -> Void {
    let spammedMessageIdToFolder = self.spamModel.getSpammedMessageIdToFolder()
    let midToReadStatus = self.spamModel.getMidToReadStatus()
    let notSpamMessages = self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withExcludedFolders(YSArray(DefaultFolderName.spam)))
    spammedMessageIdToFolder.__forEach({
      (folderName, mid) in
      self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.read = midToReadStatus.`get`(mid)!
      self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(mid, folderName)
      self.spamModel.addThreadCounter(notSpamMessages, mid)
      notSpamMessages.push(mid)
    })
    self.spamModel.resetLastSpamMessageTime()
  }

  @discardableResult
  open func undoSending() throws -> Void {
  }

  @discardableResult
  private func getUndoToastShowingState(_ duration: Int64) -> UndoState {
    let SHOWING_DURATION = 5000
    let TIMING_MARGIN = 10000
    if duration <= SHOWING_DURATION {
      return UndoState.shown
    } else if duration > SHOWING_DURATION && duration <= TIMING_MARGIN {
      return UndoState.undefined
    } else {
      return UndoState.notShown
    }
  }

}

