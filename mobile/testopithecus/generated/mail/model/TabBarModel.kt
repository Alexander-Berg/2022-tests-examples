// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/tab-bar-model.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class TabBarModel(private val messageListDisplayModel: MessageListDisplayModel, private val openMessageModel: OpenMessageModel, private val groupModeModel: GroupModeModel, private val zeroSuggestModel: ZeroSuggestModel, private val rootSettingsModel: RootSettingsModel, private val composeModel: ComposeModel, private val folderNavigatorModel: FolderNavigatorModel, private val deviceTypeModel: DeviceTypeModel): TabBar {
    private var currentItem: TabBarItem = TabBarItem.mail
    open override fun getCurrentItem(): TabBarItem {
        return this.currentItem
    }

    open fun setCurrentItem(item: TabBarItem): Unit {
        this.currentItem = item
    }

    open override fun isShown(): Boolean {
        val inGroupMode = this.groupModeModel.isInGroupMode()
        val isZeroSuggestOpened = this.zeroSuggestModel.isShown()
        val isSettingsOpened = this.rootSettingsModel.isOpened()
        val isComposeOpened = this.composeModel.isComposeOpened()
        val isFolderListOpened = this.folderNavigatorModel.isOpened()
        val isTab = this.deviceTypeModel.getDeviceType() == DeviceType.Tab
        return (this.messageListDisplayModel.getCurrentContainer().type != MessageContainerType.search && (!this.openMessageModel.isMessageOpened() || isTab) && !inGroupMode && !isZeroSuggestOpened && !isSettingsOpened && !isComposeOpened && !isFolderListOpened)
    }

    open override fun tapOnItem(item: TabBarItem): Unit {
        if (item != TabBarItem.more) {
            this.currentItem = item
        }
    }

}

public open class TabBarIOSModel(private val mailAppModelHandler: MailAppModelHandler): TabBarIOS {
    open override fun getItems(): YSArray<TabBarItem> {
        val accountType = this.mailAppModelHandler.getCurrentAccountType()
        val yandexTabBarItems = mutableListOf(TabBarItem.mail, TabBarItem.calendar, TabBarItem.documents, TabBarItem.telemost, TabBarItem.more)
        val yandexTeamTabBarItems = mutableListOf(TabBarItem.mail, TabBarItem.calendar)
        val otherMailTabBarItems = mutableListOf(TabBarItem.mail, TabBarItem.telemost)
        when (accountType) {
            AccountType2.Yandex -> {
                return yandexTabBarItems
            }
            AccountType2.YandexTeam -> {
                return yandexTeamTabBarItems
            }
            else -> {
                return otherMailTabBarItems
            }
        }
    }

    open override fun getCalendarIconDate(): String {
        val accountType = this.mailAppModelHandler.getCurrentAccountType()
        val currentDate = int32ToString(YSDate().getDate())
        when (accountType) {
            AccountType2.Yandex -> {
                return currentDate
            }
            AccountType2.YandexTeam -> {
                return currentDate
            }
            else -> {
                return ""
            }
        }
    }

}

public open class TabBarAndroidModel(private val mailAppModelHandler: MailAppModelHandler): TabBarAndroid {
    open override fun getItems(): YSArray<TabBarItem> {
        val accountType = this.mailAppModelHandler.getCurrentAccountType()
        val yandexTabBarItems = mutableListOf(TabBarItem.mail, TabBarItem.contacts, TabBarItem.documents, TabBarItem.telemost, TabBarItem.more)
        val yandexTeamTabBarItems = mutableListOf(TabBarItem.mail, TabBarItem.contacts, TabBarItem.calendar)
        val otherMailTabBarItems = mutableListOf(TabBarItem.mail, TabBarItem.telemost)
        when (accountType) {
            AccountType2.Yandex -> {
                return yandexTabBarItems
            }
            AccountType2.YandexTeam -> {
                return yandexTeamTabBarItems
            }
            else -> {
                return otherMailTabBarItems
            }
        }
    }

}

public open class ShtorkaModel(private val mailAppModelHandler: MailAppModelHandler, private val tabBarModel: TabBarModel): Shtorka {
    private var isBannerClosedInCurrentShtorkaSession: Boolean = false
    private var bannersToShow: YSArray<ShtorkaBannerType> = mutableListOf(ShtorkaBannerType.docs, ShtorkaBannerType.scanner, ShtorkaBannerType.mail360)
    open override fun closeBySwipe(): Unit {
        this.close()
    }

    open override fun closeByTapOver(): Unit {
        this.close()
    }

    private fun close(): Unit {
        this.isBannerClosedInCurrentShtorkaSession = false
    }

    open override fun tapOnItem(item: TabBarItem): Unit {
        when (item) {
            TabBarItem.notes -> {
                this.tabBarModel.setCurrentItem(TabBarItem.more)
            }
            TabBarItem.disk -> {
                this.tabBarModel.setCurrentItem(TabBarItem.more)
            }
            TabBarItem.subscriptions -> {
            }
            TabBarItem.scanner -> {
            }
            else -> {
                this.tabBarModel.setCurrentItem(item)
            }
        }
        this.close()
    }

    open override fun closeBanner(): Unit {
        this.bannersToShow.splice(0, 1)
        this.isBannerClosedInCurrentShtorkaSession = true
    }

    open override fun getShownBannerType(): ShtorkaBannerType? {
        if (this.bannersToShow.size == 0 || this.isBannerClosedInCurrentShtorkaSession) {
            return null
        }
        val currentBanner = this.bannersToShow[0]
        if (currentBanner == ShtorkaBannerType.mail360) {
            val promoteMail360 = !this.mailAppModelHandler.getCurrentAccount().promoteMail360
            return if (promoteMail360) currentBanner else null
        }
        return currentBanner
    }

    open override fun tapOnBanner(): Unit {
        this.close()
    }

}

public open class ShtorkaIOSModel(): ShtorkaIOS {
    open override fun getItems(): YSArray<TabBarItem> {
        return mutableListOf(TabBarItem.disk, TabBarItem.notes, TabBarItem.scanner, TabBarItem.subscriptions)
    }

}

public open class ShtorkaAndroidModel(): ShtorkaAndroid {
    open override fun getItems(): YSArray<TabBarItem> {
        return mutableListOf(TabBarItem.contacts, TabBarItem.disk, TabBarItem.notes, TabBarItem.scanner, TabBarItem.subscriptions)
    }

}

