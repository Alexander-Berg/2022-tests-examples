// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/translator-models.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class TranslatorLanguageName {
    companion object {
        @JvmStatic val auto: LanguageName = "auto"
        @JvmStatic val select: LanguageName = "select"
        @JvmStatic val english: LanguageName = "English"
        @JvmStatic val russian: LanguageName = "Russian"
        @JvmStatic val afrikaans: LanguageName = "Afrikaans"
        @JvmStatic val albanian: LanguageName = "Albanian"
        @JvmStatic val amharic: LanguageName = "Amharic"
        @JvmStatic val arabic: LanguageName = "Arabic"
    }
}

public open class TranslatorLanguageCode {
    companion object {
        @JvmStatic val english: LanguageCode = "en"
        @JvmStatic val russian: LanguageCode = "ru"
    }
}

public open class TranslatorSubmitButtonLabel {
    companion object {
        @JvmStatic val translate: String = "Translate"
        @JvmStatic val revert: String = "Revert"
    }
}

public open class TranslatorBarModel(private val translatorSettingsModel: TranslatorSettingsModel): TranslatorBar {
    private var sourceLanguage: LanguageName = TranslatorLanguageName.auto
    private var targetLanguage: LanguageName = TranslatorLanguageName.english
    private var messageTranslated: Boolean = false
    private var translateBarShown: Boolean = true
    private var isBarForced: Boolean = false
    open fun setSourceLanguage(language: LanguageName): Unit {
        this.sourceLanguage = language
    }

    open fun setTargetLanguage(language: LanguageName): Unit {
        this.targetLanguage = language
    }

    open override fun getSourceLanguage(): LanguageName {
        return this.sourceLanguage
    }

    open override fun getTargetLanguage(): LanguageName {
        return this.targetLanguage
    }

    open fun forceShowBar(): Unit {
        this.isBarForced = true
    }

    open override fun isTranslatorBarShown(): Boolean {
        return this.isBarForced || (this.sourceLanguage != this.targetLanguage && this.translateBarShown)
    }

    open fun setTranslateBarState(shown: Boolean): Unit {
        this.translateBarShown = shown
    }

    open override fun tapOnCloseBarButton(hideTranslatorForThisLanguage: Boolean): Unit {
        this.setTranslateBarState(false)
        if (this.sourceLanguage != TranslatorLanguageName.auto && hideTranslatorForThisLanguage) {
            this.translatorSettingsModel.addTranslationLanguageToIgnored(this.sourceLanguage)
        }
    }

    open override fun tapOnRevertButton(): Unit {
        this.messageTranslated = false
    }

    open override fun tapOnSourceLanguage(): Unit {
    }

    open override fun tapOnTargetLanguage(): Unit {
    }

    open override fun tapOnTranslateButton(): Unit {
        this.messageTranslated = true
    }

    open override fun getSubmitButtonLabel(): String {
        return if (this.messageTranslated) TranslatorSubmitButtonLabel.revert else TranslatorSubmitButtonLabel.translate
    }

    open fun setMessageTranslateStatus(status: Boolean): Unit {
        this.messageTranslated = status
    }

    open override fun isMessageTranslated(): Boolean {
        return this.messageTranslated
    }

}

public open class TranslatorLanguageListModel(private val translatorSettingsModel: TranslatorSettingsModel, private val mailAppModelHandler: MailAppModelHandler, private val translatorBarModel: TranslatorBarModel): TranslatorLanguageList {
    private var recentSourceLanguages: YSArray<LanguageName> = mutableListOf()
    private var recentTargetLanguages: YSArray<LanguageName> = mutableListOf()
    private var currentSourceLanguage: LanguageName = TranslatorLanguageName.english
    private var currentTargetLanguage: LanguageName = TranslatorLanguageName.english
    private var defaultTargetLanguage: LanguageName
    private var determinedAutomaticallySourceLanguage: LanguageName = TranslatorLanguageName.english
    init {
        this.defaultTargetLanguage = this.translatorSettingsModel.getDefaultTranslationLanguage()
    }
    open fun getAllLanguages(): YSArray<LanguageName> {
        return this.mailAppModelHandler.getCurrentAccount().translationLangs
    }

    open override fun getAllSourceLanguages(): YSArray<LanguageName> {
        return this.getAllLanguages()
    }

    open override fun getAllTargetLanguages(): YSArray<LanguageName> {
        return this.getAllLanguages()
    }

    open override fun getCurrentSourceLanguage(): LanguageName? {
        return if (this.currentSourceLanguage == this.determinedAutomaticallySourceLanguage) null else this.currentSourceLanguage
    }

    open override fun getCurrentTargetLanguage(): LanguageName? {
        return if (this.currentTargetLanguage == this.defaultTargetLanguage) null else this.currentTargetLanguage
    }

    open override fun getDefaultTargetLanguage(): LanguageName {
        val newDefaultLanguage = this.translatorSettingsModel.getDefaultTranslationLanguage()
        if (this.defaultTargetLanguage != newDefaultLanguage) {
            this.defaultTargetLanguage = newDefaultLanguage
        }
        return this.defaultTargetLanguage
    }

    open override fun getDeterminedAutomaticallySourceLanguage(): LanguageName {
        return this.determinedAutomaticallySourceLanguage
    }

    open override fun getRecentSourceLanguages(): YSArray<LanguageName> {
        return this.recentSourceLanguages.filter( {
            language ->
            !mutableListOf(this.currentSourceLanguage, this.determinedAutomaticallySourceLanguage).contains(language)
        }).slice(0, 3)
    }

    open override fun getRecentTargetLanguages(): YSArray<LanguageName> {
        return this.recentTargetLanguages.filter( {
            language ->
            !mutableListOf(this.currentTargetLanguage, this.defaultTargetLanguage).contains(language)
        }).slice(0, 3)
    }

    open override fun setSourceLanguage(language: LanguageName): Unit {
        this.currentSourceLanguage = language
        this.translatorBarModel.setSourceLanguage(language)
        this.recentSourceLanguages.unshift(language)
    }

    open override fun setTargetLanguage(language: LanguageName, addToRecent: Boolean): Unit {
        this.currentTargetLanguage = language
        this.translatorBarModel.setTargetLanguage(language)
        if (addToRecent) {
            this.recentTargetLanguages.unshift(language)
        }
    }

    open fun setDeterminedAutomaticallySourceLanguage(language: LanguageName): Unit {
        this.determinedAutomaticallySourceLanguage = language
    }

}

public open class TranslatorLanguageListSearchModel(private val translatorLanguageListModel: TranslatorLanguageListModel): TranslatorLanguageListSearch {
    private var searchQuery: String = ""
    private var searchTextFieldFocused: Boolean = false
    open override fun enterSearchQuery(query: String): Unit {
        this.searchQuery = query
    }

    open override fun getSearchQuery(): String {
        return this.searchQuery
    }

    open override fun tapOnCancelButton(): Unit {
        this.searchTextFieldFocused = false
        this.searchQuery = ""
    }

    open override fun tapOnClearSearchFieldButton(): Unit {
        this.searchQuery = ""
    }

    open override fun tapOnSearchTextField(): Unit {
        this.searchTextFieldFocused = true
    }

    open override fun isSearchTextFieldFocused(): Boolean {
        return this.searchTextFieldFocused
    }

    open override fun getSearchedLanguageList(): YSArray<LanguageName> {
        return this.translatorLanguageListModel.getAllLanguages().filter( {
            language ->
            language.includes(this.searchQuery)
        })
    }

}

public open class TranslatorSettingsModel: TranslatorSettings {
    private var translatorEnabled: Boolean = true
    private var defaultTranslationLanguage: LanguageName = TranslatorLanguageName.english
    private var ignoredTranslationLanguages: YSArray<LanguageName> = mutableListOf()
    open override fun closeDefaultTranslationLanguageList(): Unit {
    }

    open override fun closeIgnoredTranslationLanguageList(): Unit {
    }

    open override fun getDefaultTranslationLanguage(): LanguageName {
        return this.defaultTranslationLanguage
    }

    open override fun getIgnoredTranslationLanguages(): YSArray<LanguageName> {
        return this.ignoredTranslationLanguages
    }

    open fun isLanguageIgnored(lang: LanguageName): Boolean {
        return this.ignoredTranslationLanguages.contains(lang)
    }

    open override fun isTranslatorEnabled(): Boolean {
        return this.translatorEnabled
    }

    open override fun openDefaultTranslationLanguageList(): Unit {
    }

    open override fun openIgnoredTranslationLanguageList(): Unit {
    }

    open fun addTranslationLanguageToIgnored(language: LanguageName): Unit {
        this.ignoredTranslationLanguages.add(language)
    }

    open override fun removeTranslationLanguageFromIgnored(language: LanguageName): Unit {
        val index = this.ignoredTranslationLanguages.lastIndexOf(language)
        if (index != -1) {
            this.ignoredTranslationLanguages.splice(index, 1)
        }
    }

    open override fun setDefaultTranslationLanguage(language: LanguageName): Unit {
        this.defaultTranslationLanguage = language
    }

    open override fun switchTranslator(): Unit {
        this.translatorEnabled = !this.translatorEnabled
    }

    open override fun getDefaultTranslationLanguageFromGeneralSettingsPage(): LanguageName {
        return this.defaultTranslationLanguage
    }

    open override fun isIgnoredLanguageCellShown(): Boolean {
        return this.ignoredTranslationLanguages.size > 0
    }

}

