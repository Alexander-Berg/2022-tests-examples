// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/opened-message/quick-reply-models.ts >>>

import Foundation

open class QuickReplyModel: QuickReply {
  private var textFieldValue: String = ""
  private var quickReplyShown: Bool = false
  private var openedMessageId: MessageId = int64(-1)
  private var composeModel: ComposeModel
  public init(_ composeModel: ComposeModel) {
    self.composeModel = composeModel
  }

  @discardableResult
  open func getTextFieldValue() throws -> String {
    return self.textFieldValue
  }

  @discardableResult
  open func isSendButtonEnabled() throws -> Bool {
    return !self.isTextFieldEmpty()
  }

  @discardableResult
  open func isTextFieldEmpty() -> Bool {
    return self.textFieldValue == ""
  }

  open func setMidOfOpenedMessage(_ mid: MessageId) -> Void {
    self.openedMessageId = mid
  }

  @discardableResult
  open func setTextFieldValue(_ message: String) throws -> Void {
    self.textFieldValue = message
    (try self.setDataToComposeModel())
  }

  @discardableResult
  open func isQuickReplyTextFieldExpanded() throws -> Bool {
    return self.textFieldValue.includes("\n")
  }

  @discardableResult
  open func pasteTextFieldValue(_ message: String) throws -> Void {
    self.textFieldValue = message
    (try self.setDataToComposeModel())
  }

  @discardableResult
  open func tapOnComposeButton() throws -> Void {
    (try self.setDataToComposeModel())
  }

  @discardableResult
  open func tapOnSendButton() throws -> Void {
    (try self.composeModel.sendMessage())
    self.textFieldValue = ""
  }

  @discardableResult
  open func tapOnTextField() throws -> Void {
  }

  @discardableResult
  open func setQuickReplyShown(_ shown: Bool) throws -> Void {
    self.quickReplyShown = shown
  }

  @discardableResult
  open func isQuickReplyShown() throws -> Bool {
    return self.quickReplyShown
  }

  @discardableResult
  private func setDataToComposeModel() throws -> Void {
    (try self.composeModel.openReplyCompose(self.openedMessageId))
    (try self.composeModel.setBody(self.textFieldValue))
  }

}

open class SmartReplyModel: SmartReply {
  private var smartReplies: YSArray<String> = YSArray()
  private var quickReplyModel: QuickReplyModel
  private var generalSettingsModel: GeneralSettingsModel
  public init(_ quickReplyModel: QuickReplyModel, _ generalSettingsModel: GeneralSettingsModel) {
    self.quickReplyModel = quickReplyModel
    self.generalSettingsModel = generalSettingsModel
  }

  @discardableResult
  open func setSmartReplies(_ smartReplies: YSArray<String>) throws -> Void {
    self.smartReplies = copyArray(smartReplies)
  }

  @discardableResult
  open func closeAllSmartReplies() throws -> Void {
    self.smartReplies = YSArray()
  }

  @discardableResult
  open func closeSmartReply(_ order: Int32) throws -> Void {
    self.smartReplies.splice(order, 1)
  }

  @discardableResult
  open func getSmartReply(_ order: Int32) throws -> String {
    return self.smartReplies[order]
  }

  @discardableResult
  open func tapOnSmartReply(_ order: Int32) throws -> Void {
    (try self.quickReplyModel.setTextFieldValue(self.smartReplies[order]))
  }

  @discardableResult
  open func isSmartRepliesShown() throws -> Bool {
    let isSmartRepliesEnabledInSettings = (try self.generalSettingsModel.isSmartRepliesEnabled())
    return self.smartReplies.length > 0 && isSmartRepliesEnabledInSettings && self.quickReplyModel.isTextFieldEmpty()
  }

  @discardableResult
  open func getSmartReplies() throws -> YSArray<String> {
    return (try self.isSmartRepliesShown()) ? self.smartReplies : YSArray()
  }

}

