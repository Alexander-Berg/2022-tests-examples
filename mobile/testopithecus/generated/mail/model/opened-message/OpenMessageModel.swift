// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/opened-message/open-message-model.ts >>>

import Foundation

open class OpenMessageModel: MessageViewer, ThreadViewNavigator, MessageViewerAndroid {
  public var openedMessage: MessageId = int64(-1)
  private var order: Int32! = nil
  private var markableImportant: MarkableImportant
  private var expandableThreads: ExpandableThreads
  private var messageListDisplay: MessageListDisplayModel
  private var creatableLabel: LabelModel
  private var deleteMessageModel: DeleteMessageModel
  private var accHandler: MailAppModelHandler
  private var archiveMessageModel: ArchiveMessageModel
  private var translatorBarModel: TranslatorBarModel
  private var translatorLanguageListModel: TranslatorLanguageListModel
  private var translatorSettingsModel: TranslatorSettingsModel
  private var smartReplyModel: SmartReplyModel
  private var quickReplyModel: QuickReplyModel
  public init(_ markableImportant: MarkableImportant, _ expandableThreads: ExpandableThreads, _ messageListDisplay: MessageListDisplayModel, _ creatableLabel: LabelModel, _ deleteMessageModel: DeleteMessageModel, _ accHandler: MailAppModelHandler, _ archiveMessageModel: ArchiveMessageModel, _ translatorBarModel: TranslatorBarModel, _ translatorLanguageListModel: TranslatorLanguageListModel, _ translatorSettingsModel: TranslatorSettingsModel, _ smartReplyModel: SmartReplyModel, _ quickReplyModel: QuickReplyModel) {
    self.markableImportant = markableImportant
    self.expandableThreads = expandableThreads
    self.messageListDisplay = messageListDisplay
    self.creatableLabel = creatableLabel
    self.deleteMessageModel = deleteMessageModel
    self.accHandler = accHandler
    self.archiveMessageModel = archiveMessageModel
    self.translatorBarModel = translatorBarModel
    self.translatorLanguageListModel = translatorLanguageListModel
    self.translatorSettingsModel = translatorSettingsModel
    self.smartReplyModel = smartReplyModel
    self.quickReplyModel = quickReplyModel
  }

  @discardableResult
  open func closeMessage() throws -> Void {
    self.openedMessage = int64(-1)
    self.quickReplyModel.setMidOfOpenedMessage(self.openedMessage)
    self.order = nil
    self.translatorBarModel.setMessageTranslateStatus(false)
  }

  @discardableResult
  open func deleteCurrentMessage() throws -> Void {
    let openedMessage = self.openedMessage
    if openedMessage == int64(-1) {
      fail("No opened message!")
    }
    (try self.closeMessage())
    self.deleteMessageModel.deleteOpenedMessage(openedMessage)
  }

  @discardableResult
  open func deleteMessageByIcon() throws -> Void {
    let openedMessage = self.openedMessage
    if openedMessage == int64(-1) {
      fail("No opened message!")
    }
    self.deleteMessageModel.deleteOpenedMessage(openedMessage)
  }

  @discardableResult
  open func getDefaultSourceLanguage() throws -> LanguageName {
    return (try self.getOpenedMessage()).lang
  }

  @discardableResult
  open func deleteCurrentThread() throws -> Void {
    (try self.deleteMessageModel.deleteMessage((try self.getMessageOrder())))
    (try self.closeMessage())
  }

  @discardableResult
  open func archiveCurrentThread() throws -> Void {
    self.archiveMessageModel.archiveMessage((try self.getMessageOrder()))
    (try self.closeMessage())
  }

  @discardableResult
  open func isMessageOpened() -> Bool {
    return self.openedMessage != int64(-1)
  }

  @discardableResult
  open func openMessage(_ order: Int32) throws -> Void {
    self.order = order
    if self.messageListDisplay.getCurrentContainer().type == MessageContainerType.search {
      self.accHandler.getCurrentAccount().zeroSuggest.unshift(self.messageListDisplay.getCurrentContainer().name)
    }
    (try self.expandableThreads.markThreadMessageAsRead(order, 0))
    self.openedMessage = self.messageListDisplay.getMessageId(order)
    self.quickReplyModel.setMidOfOpenedMessage(self.openedMessage)
    let lang = (try self.getOpenedMessage()).lang
    let defaultLanguage = (try self.translatorLanguageListModel.getDefaultTargetLanguage())
    (try self.translatorLanguageListModel.setSourceLanguage(lang))
    (try self.translatorLanguageListModel.setDeterminedAutomaticallySourceLanguage(lang))
    (try self.translatorLanguageListModel.setTargetLanguage(defaultLanguage, false))
    self.translatorBarModel.setSourceLanguage(TranslatorLanguageName.auto)
    self.translatorBarModel.setTranslateBarState(!(lang == defaultLanguage || self.translatorSettingsModel.isLanguageIgnored(lang)))
    (try self.smartReplyModel.setSmartReplies((try self.getOpenedMessage()).smartReplies))
    (try self.quickReplyModel.setQuickReplyShown((try self.getOpenedMessage()).quickReply))
  }

  @discardableResult
  open func getOrder() -> Int32! {
    return self.order
  }

  @discardableResult
  open func getOpenedMessage() throws -> FullMessageView {
    return self.accHandler.getCurrentAccount().messagesDB.storedMessage(self.openedMessage, (try self.translatorBarModel.isMessageTranslated()) ? (try self.translatorBarModel.getTargetLanguage()) : nil)
  }

  @discardableResult
  open func checkIfRead() throws -> Bool {
    return self.accHandler.getCurrentAccount().messagesDB.storedMessage(self.openedMessage).head.read
  }

  @discardableResult
  open func getLabels() throws -> YSSet<String> {
    return self.creatableLabel.getMessageLabels(self.openedMessage)
  }

  @discardableResult
  open func checkIfImportant() throws -> Bool {
    return self.accHandler.getCurrentAccount().messagesDB.storedMessage(self.openedMessage).head.important
  }

  @discardableResult
  open func checkIfSpam() throws -> Bool {
    if !self.accHandler.getCurrentAccount().messagesDB.getFolderList().includes(DefaultFolderName.spam) {
      return false
    }
    return self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(DefaultFolderName.spam)).includes(self.openedMessage)
  }

  @discardableResult
  open func deleteLabelsFromHeader(_ labels: YSArray<LabelName>) throws -> Void {
    self.creatableLabel.removeLabelsFromMessages(YSSet(YSArray(self.openedMessage)), labels)
  }

  @discardableResult
  open func markAsUnimportantFromHeader() throws -> Void {
    (try self.markableImportant.markAsUnimportant((try self.getMessageOrder())))
  }

  @discardableResult
  open func arrowDownClick() throws -> Void {
    (try self.openMessage((try self.getMessageOrder()) + 1))
  }

  @discardableResult
  open func arrowUpClick() throws -> Void {
    (try self.openMessage((try self.getMessageOrder()) - 1))
  }

  @discardableResult
  private func getMessageOrder() throws -> Int32 {
    return requireNonNull(self.order, "No opened message!")
  }

}

