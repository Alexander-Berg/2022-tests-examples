// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/opened-message/open-message-model.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class OpenMessageModel(private var markableImportant: MarkableImportant, private var expandableThreads: ExpandableThreads, private var messageListDisplay: MessageListDisplayModel, private var creatableLabel: LabelModel, private var deleteMessageModel: DeleteMessageModel, private var accHandler: MailAppModelHandler, private var archiveMessageModel: ArchiveMessageModel, private var translatorBarModel: TranslatorBarModel, private var translatorLanguageListModel: TranslatorLanguageListModel, private var translatorSettingsModel: TranslatorSettingsModel, private var smartReplyModel: SmartReplyModel, private var quickReplyModel: QuickReplyModel): MessageViewer, ThreadViewNavigator, MessageViewerAndroid {
    var openedMessage: MessageId = int64(-1)
    private var order: Int? = null
    open override fun closeMessage(): Unit {
        this.openedMessage = int64(-1)
        this.quickReplyModel.setMidOfOpenedMessage(this.openedMessage)
        this.order = null
        this.translatorBarModel.setMessageTranslateStatus(false)
    }

    open fun deleteCurrentMessage(): Unit {
        val openedMessage = this.openedMessage
        if (openedMessage == int64(-1)) {
            fail("No opened message!")
        }
        this.closeMessage()
        this.deleteMessageModel.deleteOpenedMessage(openedMessage)
    }

    open override fun deleteMessageByIcon(): Unit {
        val openedMessage = this.openedMessage
        if (openedMessage == int64(-1)) {
            fail("No opened message!")
        }
        this.deleteMessageModel.deleteOpenedMessage(openedMessage)
    }

    open override fun getDefaultSourceLanguage(): LanguageName {
        return this.getOpenedMessage().lang
    }

    open override fun deleteCurrentThread(): Unit {
        this.deleteMessageModel.deleteMessage(this.getMessageOrder())
        this.closeMessage()
    }

    open override fun archiveCurrentThread(): Unit {
        this.archiveMessageModel.archiveMessage(this.getMessageOrder())
        this.closeMessage()
    }

    open override fun isMessageOpened(): Boolean {
        return this.openedMessage != int64(-1)
    }

    open override fun openMessage(order: Int): Unit {
        this.order = order
        if (this.messageListDisplay.getCurrentContainer().type == MessageContainerType.search) {
            this.accHandler.getCurrentAccount().zeroSuggest.unshift(this.messageListDisplay.getCurrentContainer().name)
        }
        this.expandableThreads.markThreadMessageAsRead(order, 0)
        this.openedMessage = this.messageListDisplay.getMessageId(order)
        this.quickReplyModel.setMidOfOpenedMessage(this.openedMessage)
        val lang = this.getOpenedMessage().lang
        val defaultLanguage = this.translatorLanguageListModel.getDefaultTargetLanguage()
        this.translatorLanguageListModel.setSourceLanguage(lang)
        this.translatorLanguageListModel.setDeterminedAutomaticallySourceLanguage(lang)
        this.translatorLanguageListModel.setTargetLanguage(defaultLanguage, false)
        this.translatorBarModel.setSourceLanguage(TranslatorLanguageName.auto)
        this.translatorBarModel.setTranslateBarState(!(lang == defaultLanguage || this.translatorSettingsModel.isLanguageIgnored(lang)))
        this.smartReplyModel.setSmartReplies(this.getOpenedMessage().smartReplies)
        this.quickReplyModel.setQuickReplyShown(this.getOpenedMessage().quickReply)
    }

    open fun getOrder(): Int? {
        return this.order
    }

    open override fun getOpenedMessage(): FullMessageView {
        return this.accHandler.getCurrentAccount().messagesDB.storedMessage(this.openedMessage, if (this.translatorBarModel.isMessageTranslated()) this.translatorBarModel.getTargetLanguage() else null)
    }

    open override fun checkIfRead(): Boolean {
        return this.accHandler.getCurrentAccount().messagesDB.storedMessage(this.openedMessage).head.read
    }

    open override fun getLabels(): YSSet<String> {
        return this.creatableLabel.getMessageLabels(this.openedMessage)
    }

    open override fun checkIfImportant(): Boolean {
        return this.accHandler.getCurrentAccount().messagesDB.storedMessage(this.openedMessage).head.important
    }

    open override fun checkIfSpam(): Boolean {
        if (!this.accHandler.getCurrentAccount().messagesDB.getFolderList().contains(DefaultFolderName.spam)) {
            return false
        }
        return this.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(DefaultFolderName.spam)).contains(this.openedMessage)
    }

    open override fun deleteLabelsFromHeader(labels: YSArray<LabelName>): Unit {
        this.creatableLabel.removeLabelsFromMessages(YSSet(mutableListOf(this.openedMessage)), labels)
    }

    open override fun markAsUnimportantFromHeader(): Unit {
        this.markableImportant.markAsUnimportant(this.getMessageOrder())
    }

    open override fun arrowDownClick(): Unit {
        this.openMessage(this.getMessageOrder() + 1)
    }

    open override fun arrowUpClick(): Unit {
        this.openMessage(this.getMessageOrder() - 1)
    }

    private fun getMessageOrder(): Int {
        return requireNonNull(this.order, "No opened message!")
    }

}

