// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/tab-bar-model.ts >>>

import Foundation

open class TabBarModel: TabBar {
  private var currentItem: TabBarItem = TabBarItem.mail
  private let messageListDisplayModel: MessageListDisplayModel
  private let openMessageModel: OpenMessageModel
  private let groupModeModel: GroupModeModel
  private let zeroSuggestModel: ZeroSuggestModel
  private let rootSettingsModel: RootSettingsModel
  private let composeModel: ComposeModel
  private let folderNavigatorModel: FolderNavigatorModel
  private let deviceTypeModel: DeviceTypeModel
  public init(_ messageListDisplayModel: MessageListDisplayModel, _ openMessageModel: OpenMessageModel, _ groupModeModel: GroupModeModel, _ zeroSuggestModel: ZeroSuggestModel, _ rootSettingsModel: RootSettingsModel, _ composeModel: ComposeModel, _ folderNavigatorModel: FolderNavigatorModel, _ deviceTypeModel: DeviceTypeModel) {
    self.messageListDisplayModel = messageListDisplayModel
    self.openMessageModel = openMessageModel
    self.groupModeModel = groupModeModel
    self.zeroSuggestModel = zeroSuggestModel
    self.rootSettingsModel = rootSettingsModel
    self.composeModel = composeModel
    self.folderNavigatorModel = folderNavigatorModel
    self.deviceTypeModel = deviceTypeModel
  }

  @discardableResult
  open func getCurrentItem() throws -> TabBarItem {
    return self.currentItem
  }

  open func setCurrentItem(_ item: TabBarItem) -> Void {
    self.currentItem = item
  }

  @discardableResult
  open func isShown() throws -> Bool {
    let inGroupMode = (try self.groupModeModel.isInGroupMode())
    let isZeroSuggestOpened = (try self.zeroSuggestModel.isShown())
    let isSettingsOpened = self.rootSettingsModel.isOpened()
    let isComposeOpened = (try self.composeModel.isComposeOpened())
    let isFolderListOpened = (try self.folderNavigatorModel.isOpened())
    let isTab = self.deviceTypeModel.getDeviceType() == DeviceType.Tab
    return (self.messageListDisplayModel.getCurrentContainer().type != MessageContainerType.search && (!self.openMessageModel.isMessageOpened() || isTab) && !inGroupMode && !isZeroSuggestOpened && !isSettingsOpened && !isComposeOpened && !isFolderListOpened)
  }

  @discardableResult
  open func tapOnItem(_ item: TabBarItem) throws -> Void {
    if item != TabBarItem.more {
      self.currentItem = item
    }
  }

}

open class TabBarIOSModel: TabBarIOS {
  private let mailAppModelHandler: MailAppModelHandler
  public init(_ mailAppModelHandler: MailAppModelHandler) {
    self.mailAppModelHandler = mailAppModelHandler
  }

  @discardableResult
  open func getItems() throws -> YSArray<TabBarItem> {
    let accountType = self.mailAppModelHandler.getCurrentAccountType()
    let yandexTabBarItems = YSArray(TabBarItem.mail, TabBarItem.calendar, TabBarItem.documents, TabBarItem.telemost, TabBarItem.more)
    let yandexTeamTabBarItems = YSArray(TabBarItem.mail, TabBarItem.calendar)
    let otherMailTabBarItems = YSArray(TabBarItem.mail, TabBarItem.telemost)
    switch accountType {
      case AccountType2.Yandex:
        return yandexTabBarItems
      case AccountType2.YandexTeam:
        return yandexTeamTabBarItems
      default:
        return otherMailTabBarItems
    }
  }

  @discardableResult
  open func getCalendarIconDate() throws -> String {
    let accountType = self.mailAppModelHandler.getCurrentAccountType()
    let currentDate = int32ToString(YSDate().getDate())
    switch accountType {
      case AccountType2.Yandex:
        return currentDate
      case AccountType2.YandexTeam:
        return currentDate
      default:
        return ""
    }
  }

}

open class TabBarAndroidModel: TabBarAndroid {
  private let mailAppModelHandler: MailAppModelHandler
  public init(_ mailAppModelHandler: MailAppModelHandler) {
    self.mailAppModelHandler = mailAppModelHandler
  }

  @discardableResult
  open func getItems() throws -> YSArray<TabBarItem> {
    let accountType = self.mailAppModelHandler.getCurrentAccountType()
    let yandexTabBarItems = YSArray(TabBarItem.mail, TabBarItem.contacts, TabBarItem.documents, TabBarItem.telemost, TabBarItem.more)
    let yandexTeamTabBarItems = YSArray(TabBarItem.mail, TabBarItem.contacts, TabBarItem.calendar)
    let otherMailTabBarItems = YSArray(TabBarItem.mail, TabBarItem.telemost)
    switch accountType {
      case AccountType2.Yandex:
        return yandexTabBarItems
      case AccountType2.YandexTeam:
        return yandexTeamTabBarItems
      default:
        return otherMailTabBarItems
    }
  }

}

open class ShtorkaModel: Shtorka {
  private var isBannerClosedInCurrentShtorkaSession: Bool = false
  private var bannersToShow: YSArray<ShtorkaBannerType> = YSArray(ShtorkaBannerType.docs, ShtorkaBannerType.scanner, ShtorkaBannerType.mail360)
  private let mailAppModelHandler: MailAppModelHandler
  private let tabBarModel: TabBarModel
  public init(_ mailAppModelHandler: MailAppModelHandler, _ tabBarModel: TabBarModel) {
    self.mailAppModelHandler = mailAppModelHandler
    self.tabBarModel = tabBarModel
  }

  @discardableResult
  open func closeBySwipe() throws -> Void {
    self.close()
  }

  @discardableResult
  open func closeByTapOver() throws -> Void {
    self.close()
  }

  private func close() -> Void {
    self.isBannerClosedInCurrentShtorkaSession = false
  }

  @discardableResult
  open func tapOnItem(_ item: TabBarItem) throws -> Void {
    switch item {
      case TabBarItem.notes:
        self.tabBarModel.setCurrentItem(TabBarItem.more)
      case TabBarItem.disk:
        self.tabBarModel.setCurrentItem(TabBarItem.more)
      case TabBarItem.subscriptions:
        break
      case TabBarItem.scanner:
        break
      default:
        self.tabBarModel.setCurrentItem(item)
    }
    self.close()
  }

  @discardableResult
  open func closeBanner() throws -> Void {
    self.bannersToShow.splice(0, 1)
    self.isBannerClosedInCurrentShtorkaSession = true
  }

  @discardableResult
  open func getShownBannerType() throws -> ShtorkaBannerType! {
    if self.bannersToShow.length == 0 || self.isBannerClosedInCurrentShtorkaSession {
      return nil
    }
    let currentBanner = self.bannersToShow[0]
    if currentBanner == ShtorkaBannerType.mail360 {
      let promoteMail360 = !self.mailAppModelHandler.getCurrentAccount().promoteMail360
      return promoteMail360 ? currentBanner : nil
    }
    return currentBanner
  }

  @discardableResult
  open func tapOnBanner() throws -> Void {
    self.close()
  }

}

open class ShtorkaIOSModel: ShtorkaIOS {
  public init() {
  }

  @discardableResult
  open func getItems() throws -> YSArray<TabBarItem> {
    return YSArray(TabBarItem.disk, TabBarItem.notes, TabBarItem.scanner, TabBarItem.subscriptions)
  }

}

open class ShtorkaAndroidModel: ShtorkaAndroid {
  public init() {
  }

  @discardableResult
  open func getItems() throws -> YSArray<TabBarItem> {
    return YSArray(TabBarItem.contacts, TabBarItem.disk, TabBarItem.notes, TabBarItem.scanner, TabBarItem.subscriptions)
  }

}

