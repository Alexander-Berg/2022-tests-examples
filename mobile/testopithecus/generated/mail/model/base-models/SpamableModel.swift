// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/base-models/spamable-model.ts >>>

import Foundation

open class SpamableModel: Spamable {
  private var lastSpamActionTime: Int64! = nil
  private var spammedMessageIdToFolder: YSMap<MessageId, FolderName> = YSMap<MessageId, FolderName>()
  private var midToReadStatus: YSMap<MessageId, Bool> = YSMap<MessageId, Bool>()
  private var model: MessageListDisplayModel
  private var accHandler: MailAppModelHandler
  public init(_ model: MessageListDisplayModel, _ accHandler: MailAppModelHandler) {
    self.model = model
    self.accHandler = accHandler
  }

  open func resetLastSpamMessageTime() -> Void {
    self.lastSpamActionTime = nil
  }

  @discardableResult
  open func getLastSpamMessageTime() -> Int64! {
    return self.lastSpamActionTime
  }

  @discardableResult
  open func getSpammedMessageIdToFolder() -> YSMap<MessageId, FolderName> {
    return self.spammedMessageIdToFolder
  }

  @discardableResult
  open func getMidToReadStatus() -> YSMap<MessageId, Bool> {
    return self.midToReadStatus
  }

  @discardableResult
  open func moveToSpam(_ order: Int32) throws -> Void {
    self.moveToSpamMessages(YSSet<Int32>(YSArray(order)))
  }

  open func moveToSpamMessages(_ orders: YSSet<Int32>) -> Void {
    let mids: YSArray<MessageId> = YSArray()
    self.spammedMessageIdToFolder.clear()
    self.midToReadStatus.clear()
    for order in orders.values() {
      self.model.getThreadByOrder(order).forEach({
        (mid) in
        mids.push(mid)
      })
    }
    let notSpamMessages = self.accHandler.getCurrentAccount().messagesDB.getMessages().filter({
      (mid) in
      !mids.includes(mid)
    })
    for mid in mids {
      let folderName = self.accHandler.getCurrentAccount().messagesDB.storedFolder(mid)
      self.spammedMessageIdToFolder.set(mid, folderName)
      self.midToReadStatus.set(mid, self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.read)
      self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.read = true
      self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.threadCounter = nil
      self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(mid, DefaultFolderName.spam)
      for itemMid in notSpamMessages {
        let threadCounter: Int32! = self.accHandler.getCurrentAccount().messagesDB.storedMessage(itemMid).mutableHead.threadCounter
        if self.accHandler.getCurrentAccount().messagesDB.storedMessage(itemMid).mutableHead.subject == self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.subject && threadCounter != nil {
          self.accHandler.getCurrentAccount().messagesDB.storedMessage(itemMid).mutableHead.threadCounter = threadCounter - 1
        }
      }
    }
    self.lastSpamActionTime = currentTimeMs()
  }

  @discardableResult
  open func moveFromSpam(_ order: Int32) throws -> Void {
    self.moveFromSpamMessages(YSSet<Int32>(YSArray(order)))
  }

  open func addThreadCounter(_ notSpamMessages: YSArray<MessageId>, _ mid: MessageId) -> Void {
    var threadCounter: Int32 = 1
    for itemMid in notSpamMessages {
      if self.accHandler.getCurrentAccount().messagesDB.storedMessage(itemMid).mutableHead.subject == self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.subject {
        let counter: Int32! = self.accHandler.getCurrentAccount().messagesDB.storedMessage(itemMid).mutableHead.threadCounter
        self.accHandler.getCurrentAccount().messagesDB.storedMessage(itemMid).mutableHead.threadCounter = counter == nil ? 2 : counter + 1
        threadCounter = threadCounter + 1
      }
    }
    self.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.threadCounter = threadCounter != 1 ? threadCounter : nil
  }

  open func moveFromSpamMessages(_ orders: YSSet<Int32>, _ folder: FolderName = DefaultFolderName.inbox) -> Void {
    let notSpamMessages = self.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withExcludedFolders(YSArray(DefaultFolderName.spam)))
    for mid in self.model.getMidsByOrders(orders) {
      self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(mid, folder)
      self.addThreadCounter(notSpamMessages, mid)
    }
    self.resetLastSpamMessageTime()
  }

}

