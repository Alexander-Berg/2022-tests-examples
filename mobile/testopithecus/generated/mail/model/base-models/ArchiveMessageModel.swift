// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/base-models/archive-message-model.ts >>>

import Foundation

open class ArchiveMessageModel: ArchiveMessage {
  private var lastArchiveMessageTime: Int64! = nil
  private var archivedMessageIdToFolder: YSMap<MessageId, FolderName> = YSMap<MessageId, FolderName>()
  private var model: MessageListDisplayModel
  private var accHandler: MailAppModelHandler
  public init(_ model: MessageListDisplayModel, _ accHandler: MailAppModelHandler) {
    self.model = model
    self.accHandler = accHandler
  }

  open func resetLastArchiveMessageTime() -> Void {
    self.lastArchiveMessageTime = nil
  }

  @discardableResult
  open func getLastArchiveMessageTime() -> Int64! {
    return self.lastArchiveMessageTime
  }

  @discardableResult
  open func getArchivedMessageIdToFolder() -> YSMap<MessageId, FolderName> {
    return self.archivedMessageIdToFolder
  }

  open func archiveMessage(_ order: Int32) -> Void {
    self.archiveMessages(YSSet<Int32>(YSArray(order)))
  }

  open func archiveMessages(_ orders: YSSet<Int32>) -> Void {
    if !self.accHandler.getCurrentAccount().messagesDB.getFolderList().includes(DefaultFolderName.archive) {
      self.accHandler.getCurrentAccount().messagesDB.createFolder(DefaultFolderName.archive)
    }
    self.archivedMessageIdToFolder.clear()
    for mid in self.model.getMidsByOrders(orders) {
      let folderName = self.accHandler.getCurrentAccount().messagesDB.storedFolder(mid)
      self.archivedMessageIdToFolder.set(mid, folderName)
      self.accHandler.getCurrentAccount().messagesDB.moveMessageToFolder(mid, DefaultFolderName.archive)
    }
    self.lastArchiveMessageTime = currentTimeMs()
  }

}

