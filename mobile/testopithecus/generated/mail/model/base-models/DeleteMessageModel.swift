// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/base-models/delete-message-model.ts >>>

import Foundation

open class DeleteMessageModel: DeleteMessage {
  private var lastDeleteMessageTime: Int64! = nil
  private var deletedMessageIdToFolder: YSMap<MessageId, FolderName> = YSMap<MessageId, FolderName>()
  private var model: MessageListDisplayModel
  private var accHandler: MailAppModelHandler
  public init(_ model: MessageListDisplayModel, _ accHandler: MailAppModelHandler) {
    self.model = model
    self.accHandler = accHandler
  }

  open func resetLastDeleteMessageTime() -> Void {
    self.lastDeleteMessageTime = nil
  }

  @discardableResult
  open func getLastDeleteMessageTime() -> Int64! {
    return self.lastDeleteMessageTime
  }

  @discardableResult
  open func getDeletedMessageIdToFolder() -> YSMap<MessageId, FolderName> {
    return self.deletedMessageIdToFolder
  }

  @discardableResult
  open func deleteMessage(_ order: Int32) throws -> Void {
    self.deleteMessages(YSSet<Int32>(YSArray(order)))
  }

  open func deleteOpenedMessage(_ mid: MessageId) -> Void {
    self.deletedMessageIdToFolder.clear()
    self.deleteMessageByMid(mid)
    self.lastDeleteMessageTime = currentTimeMs()
  }

  private func deleteMessageByMid(_ mid: MessageId) -> Void {
    let folderName = self.accHandler.getCurrentAccount().messagesDB.storedFolder(mid)
    self.deletedMessageIdToFolder.set(mid, folderName)
    self.accHandler.getCurrentAccount().messagesDB.removeMessage(mid)
  }

  open func deleteMessages(_ orders: YSSet<Int32>) -> Void {
    self.deletedMessageIdToFolder.clear()
    for mid in self.model.getMidsByOrders(orders) {
      self.deleteMessageByMid(mid)
    }
    self.lastDeleteMessageTime = currentTimeMs()
  }

}

