// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/base-models/label-model.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class MarkableImportantModel(private var model: MessageListDisplayModel, private var accHandler: MailAppModelHandler): MarkableImportant {
    open override fun markAsImportant(order: Int): Unit {
        for (mid in this.model.getThreadByOrder(order)) {
            this.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.important = true
        }
    }

    open override fun markAsUnimportant(order: Int): Unit {
        for (mid in this.model.getThreadByOrder(order)) {
            this.accHandler.getCurrentAccount().messagesDB.storedMessage(mid).mutableHead.important = false
        }
    }

}

public open class LabelModel(private var accHandler: MailAppModelHandler): CreatableLabel {
    open fun applyLabelsToMessages(mids: YSSet<MessageId>, labelNames: YSArray<LabelName>): Unit {
        labelNames.forEach(__LBL__LabelModel_1@ {
            labelName ->
            if (!this.accHandler.getCurrentAccount().messagesDB.getLabelList().contains(labelName)) {
                resolveThrow( {
                     ->
                    this.createLabel(labelName)
                }
, null)
            }
            this.accHandler.getCurrentAccount().messagesDB.applyLabelToMessages(labelName, mids)
        })
    }

    open fun removeLabelsFromMessages(mids: YSSet<MessageId>, labelNames: YSArray<LabelName>): Unit {
        labelNames.forEach(__LBL__LabelModel_2@ {
            labelName ->
            this.accHandler.getCurrentAccount().messagesDB.removeLabelFromMessages(labelName, mids)
        })
    }

    open fun getMessageLabels(mid: MessageId): YSSet<LabelName> {
        return this.accHandler.getCurrentAccount().messagesDB.getMessageLabels(mid)
    }

    open fun getMessagesLabels(mids: YSSet<MessageId>): YSSet<LabelName> {
        val labels = YSSet<LabelName>()
        for (mid in setToArray(mids)) {
            this.getMessageLabels(mid).forEach( {
                label ->
                labels.add(label)
            })
        }
        return labels
    }

    open override fun createLabel(labelName: String): Unit {
        this.accHandler.getCurrentAccount().messagesDB.createLabel(labelName)
    }

    open override fun removeLabel(labelName: String): Unit {
        this.accHandler.getCurrentAccount().messagesDB.removeLabel(labelName)
    }

}

public open class ApplyLabelModel(private var accHandler: MailAppModelHandler, private var openMessageModel: OpenMessageModel, private var contextMenuModel: ContextMenuModel, private var messageListDisplayModel: MessageListDisplayModel, private var groupModeModel: GroupModeModel, private var labelModel: LabelModel): ApplyLabel {
    private var selectedToAdd: YSArray<LabelName> = mutableListOf()
    private var deselectedToRemove: YSArray<LabelName> = mutableListOf()
    private fun getMids(): YSSet<MessageId>? {
        if (this.openMessageModel.openedMessage != int64(-1)) {
            return YSSet(mutableListOf(this.openMessageModel.openedMessage))
        }
        val contextMenuOrder = this.contextMenuModel.getOrderOfMessageWithOpenedContextMenu()
        if (contextMenuOrder != -1) {
            return YSSet(mutableListOf(this.messageListDisplayModel.getMessageId(contextMenuOrder)))
        }
        val groupModeSelectedOrders = this.groupModeModel.getSelectedMessages()
        if (groupModeSelectedOrders.size > 0) {
            return YSSet(this.messageListDisplayModel.getMidsByOrders(groupModeSelectedOrders))
        }
        return null
    }

    open override fun tapOnCreateLabel(): Unit {
    }

    open override fun getLabelList(): YSArray<LabelName> {
        return this.accHandler.getCurrentAccount().messagesDB.getLabelList()
    }

    open override fun getSelectedLabels(): YSArray<LabelName> {
        val selected = this.labelModel.getMessagesLabels(requireNonNull(this.getMids(), "There is no opened/selected messages"))
        this.deselectedToRemove.forEach( {
            label ->
            selected.delete(label)
        })
        this.selectedToAdd.forEach( {
            label ->
            selected.add(label)
        })
        return setToArray(selected)
    }

    open override fun selectLabelsToAdd(labelNames: YSArray<LabelName>): Unit {
        this.selectedToAdd = labelNames
    }

    open override fun deselectLabelsToRemove(labelNames: YSArray<LabelName>): Unit {
        this.deselectedToRemove = labelNames
    }

    open override fun tapOnDoneButton(): Unit {
        val mids = requireNonNull(this.getMids(), "There is no opened/selected messages")
        this.labelModel.removeLabelsFromMessages(mids, this.deselectedToRemove)
        this.labelModel.applyLabelsToMessages(mids, this.selectedToAdd)
        this.selectedToAdd = mutableListOf()
        this.deselectedToRemove = mutableListOf()
        this.contextMenuModel.close()
        this.groupModeModel.unselectAllMessages()
    }

}

