// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/folder-data-model.ts >>>

import Foundation

open class DefaultFolderName {
  public static var inbox: FolderName = "Inbox"
  public static var mailingLists: FolderName = "Mailing lists"
  public static var socialNetworks: FolderName = "Social networks"
  public static var sent: FolderName = "Sent"
  public static var outgoing: FolderName = "Outbox"
  public static var trash: FolderName = "Trash"
  public static var spam: FolderName = "Spam"
  public static var draft: FolderName = "Drafts"
  public static var template: FolderName = "Templates"
  public static var archive: FolderName = "Archive"
}

open class FolderBackendName {
  public static var inbox: FolderName = "relevant"
  public static var mailingLists: FolderName = "news"
  public static var socialNetworks: FolderName = "social"
  public static var templates: FolderName = "Drafts|template"
}

@discardableResult
public func formatFolderNameIfNeeded(_ folderName: FolderName) -> FolderName {
  switch folderName {
    case FolderBackendName.inbox:
      return DefaultFolderName.inbox
    case FolderBackendName.socialNetworks:
      return DefaultFolderName.socialNetworks
    case FolderBackendName.mailingLists:
      return DefaultFolderName.mailingLists
    case FolderBackendName.templates:
      return DefaultFolderName.template
    default:
      return folderName
  }
}

@discardableResult
public func isTab(_ name: FolderName) -> Bool {
  return YSArray(FolderBackendName.socialNetworks, FolderBackendName.mailingLists, FolderBackendName.inbox).includes(name)
}

@discardableResult
public func tabNameToFid(_ tabName: FolderName) -> ID {
  switch tabName {
    case FolderBackendName.inbox:
      return int64(-10)
    case FolderBackendName.mailingLists:
      return int64(-11)
    case FolderBackendName.socialNetworks:
      return int64(-12)
    default:
      fatalError("This is no tab")
  }
}

@discardableResult
public func toBackendFolderName(_ folderDisplayName: String, _ parentFolders: YSArray<String>) -> String {
  switch folderDisplayName {
    case DefaultFolderName.inbox:
      return "Inbox"
    case DefaultFolderName.sent:
      return "Sent"
    case DefaultFolderName.outgoing:
      return "Outbox"
    case DefaultFolderName.trash:
      return "Trash"
    case DefaultFolderName.spam:
      return "Spam"
    case DefaultFolderName.draft:
      return "Drafts"
    case DefaultFolderName.archive:
      return "Archive"
    default:
      return formatFolderName(folderDisplayName, parentFolders)
  }
}

