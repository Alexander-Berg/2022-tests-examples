// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/compose/compose-features.ts >>>

import Foundation

open class WysiwygFeature: Feature<WYSIWIG> {
  public static var `get`: WysiwygFeature = WysiwygFeature()
  private init() {
    super.init("WYSIWYG", "Фича написания письма с форматированием (What You See Is What You Get).")
  }

}

public protocol WYSIWIG {
  @discardableResult
  func setStrong(_ from: Int32, _ to: Int32) throws -> Void
  @discardableResult
  func setItalic(_ from: Int32, _ to: Int32) throws -> Void
  @discardableResult
  func clearFormatting(_ from: Int32, _ to: Int32) throws -> Void
  @discardableResult
  func appendText(_ index: Int32, _ text: String) throws -> Void
}

public protocol DraftView {
  var to: YSSet<String> { get set }
  var subject: String! { get set }
  @discardableResult
  func getWysiwyg() throws -> WysiwygView
  @discardableResult
  func tostring() -> String
}

public protocol WysiwygView {
  @discardableResult
  func getText() throws -> String
  @discardableResult
  func getStyles(_ i: Int32) throws -> YSSet<String>
  @discardableResult
  func getRichBody() throws -> String
}

open class ComposeEmailProvider {
  public static let instance: ComposeEmailProvider = ComposeEmailProvider()
  public let emailToReceiveFwdMessage: String = "yndx-test-acc-to-receive-email@yandex.ru"
  public let emailWithLatinAndCyrillicLetters: String = "yandex-team-user@штаны.админкапдд.рф"
  public let validEmails: YSArray<String> = YSArray("account name<test.email@yandex.ru>", "name <test@test.tt>", "\"test@test.com\"", "yndx-test-acc-to-receive-email@yandex.ru", "yandex-team-user@штаны.админкапдд.рф")
  public let invalidEmails: YSArray<String> = YSArray("a", "3", "ц@", "@", "@.", "te st@te st.te st")
  @discardableResult
  open func getRandomValidEmail() -> String {
    return self.validEmails[getRandomInt32(self.validEmails.length)]
  }

  @discardableResult
  open func getRandomInvalidEmail() -> String {
    return self.invalidEmails[getRandomInt32(self.invalidEmails.length)]
  }

}

public enum YabbleType : String {
  case suggested = "suggested"
  case manual = "manual"
  case invalid = "invalid"
  case new = "new"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum ComposeRecipientFieldType : String {
  case to = "to"
  case cc = "cc"
  case bcc = "bcc"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum ComposeFieldType : String {
  case to = "to"
  case cc = "cc"
  case bcc = "bcc"
  case from = "from"
  case subject = "subject"
  case body = "body"
  public func toString() -> String {
    return self.rawValue
  }
}
open class Draft {
  public var to: YSArray<Yabble>
  public var cc: YSArray<Yabble>
  public var bcc: YSArray<Yabble>
  public var from: String
  public var subject: String
  public var body: String
  public var attachments: YSArray<ComposeAttachment>
  public var timestamp: Int64
  public init(_ to: YSArray<Yabble> = YSArray(), _ cc: YSArray<Yabble> = YSArray(), _ bcc: YSArray<Yabble> = YSArray(), _ from: String = "", _ subject: String = "", _ body: String = "", _ attachments: YSArray<ComposeAttachment> = YSArray(), _ timestamp: Int64 = currentTimeMs()) {
    self.to = to
    self.cc = cc
    self.bcc = bcc
    self.from = from
    self.subject = subject
    self.body = body
    self.attachments = attachments
    self.timestamp = timestamp
  }

  @discardableResult
  open class func matches(_ first: Draft, _ second: Draft) -> Bool {
    return (self.isRecipientsEqual(first.to, second.to) && self.isRecipientsEqual(first.cc, second.cc) && self.isRecipientsEqual(first.bcc, second.bcc) && first.from == second.from && first.subject == second.subject && first.body == second.body && self.isAttachmentsEqual(first.attachments, second.attachments))
  }

  @discardableResult
  private class func isAttachmentsEqual(_ attachments1: YSArray<ComposeAttachment>, _ attachments2: YSArray<ComposeAttachment>) -> Bool {
    if attachments1.length != attachments2.length {
      Log.error("Different number of attachments. Attachments1: \(attachments1), Attachments2: \(attachments2)")
      return false
    }
    for i in stride(from: 0, to: attachments1.length, by: 1) {
      if !ComposeAttachment.matches(attachments1[i], attachments2[i]) {
        Log.error("Different attachment: \(attachments1[i]), \(attachments2[i])")
        return false
      }
    }
    return true
  }

  @discardableResult
  private class func isRecipientsEqual(_ recipients1: YSArray<Yabble>, _ recipients2: YSArray<Yabble>) -> Bool {
    if recipients1.length != recipients2.length {
      Log.error("Different number of yabbles. Recipients1: \(recipients1), Recipients2: \(recipients2)")
      return false
    }
    for i in stride(from: 0, to: recipients1.length, by: 1) {
      if !Yabble.matches(recipients1[i], recipients2[i]) {
        Log.error("Different yabbles: \(recipients1[i]), \(recipients2[i])")
        return false
      }
    }
    return true
  }

  @discardableResult
  open func copy() -> Draft {
    return Draft(copyArray(self.to), copyArray(self.cc), copyArray(self.bcc), self.from, self.subject, self.body, copyArray(self.attachments))
  }

  @discardableResult
  open func toFullMessage(_ threadCounter: Int32, _ read: Bool) -> FullMessage {
    return FullMessage(Message(self.from, self.subject == "" ? "(No subject)" : self.subject.slice(0, 767), self.timestamp, self.getFirstline(self.body), threadCounter, read, false, self.attachments.map({
      (attachment) in
      attachment.toMessageAttach()
    }), self.to.concat(self.cc).map({
      (to) in
      to.emailOrName()
    })[0]), YSSet<String>(self.to.map({
      (to) in
      to.emailOrName()
    })), self.body)
  }

  @discardableResult
  private func getFirstline(_ body: String) -> String {
    return stringReplaceAll(body.split("--")[0], "\n", "")
  }

  @discardableResult
  open func tostring() -> String {
    return "To: \(self.to), Cc: \(self.cc), Bcc: \(self.bcc), From: \(self.from), Subject: \(self.subject), Body: \(self.body), Attachments: \(self.attachments) "
  }

}

open class ComposeAttachment {
  public var name: String
  public var size: String
  public init(_ name: String, _ size: String) {
    self.name = name
    self.size = size
  }

  @discardableResult
  open class func matches(_ first: ComposeAttachment, _ second: ComposeAttachment) -> Bool {
    return first.name == second.name && first.size == second.size
  }

  @discardableResult
  open func toMessageAttach() -> AttachmentView {
    return MessageAttach(self.name)
  }

}

public protocol YabbleView {
  var email: String { get }
  var name: String { get }
  var type: YabbleType { get }
  var isActive: Bool { get }
}

open class Yabble: YabbleView {
  public var email: String
  public var name: String
  public var type: YabbleType
  public var isActive: Bool
  public init(_ email: String, _ name: String = "", _ type: YabbleType = YabbleType.manual, _ isActive: Bool = false) {
    self.email = email
    self.name = name
    self.type = type
    self.isActive = isActive
  }

  @discardableResult
  open func emailOrName() -> String {
    return self.type == YabbleType.suggested && !self.isActive && self.name.length > 0 ? self.name : self.email
  }

  @discardableResult
  open class func matches(_ first: Yabble, _ second: Yabble) -> Bool {
    return (first.emailOrName() == second.emailOrName() && first.type == second.type && first.isActive == second.isActive)
  }

  @discardableResult
  open func copy() -> Yabble {
    return Yabble(self.email, self.name, self.type, self.isActive)
  }

  @discardableResult
  open func tostring() -> String {
    return "Email: \(self.email), name: \(self.name), type: \(self.type.toString()), active: \(self.isActive)"
  }

}

public enum ComposeType {
  case clean
  case reply
  case replyAll
  case forward
}
public protocol Compose {
  @discardableResult
  func openCompose() throws -> Void
  @discardableResult
  func isComposeOpened() throws -> Bool
  @discardableResult
  func closeCompose(_ saveDraft: Bool) throws -> Void
  @discardableResult
  func sendMessage() throws -> Void
  @discardableResult
  func isSendButtonEnabled() throws -> Bool
}

open class ComposeFeature: Feature<Compose> {
  public static var `get`: ComposeFeature = ComposeFeature()
  private init() {
    super.init("Compose", "Открытие/закрытие компоуза, отправка письма")
  }

}

open class ComposeRecipientFieldsFeature: Feature<ComposeRecipientFields> {
  public static var `get`: ComposeRecipientFieldsFeature = ComposeRecipientFieldsFeature()
  private init() {
    super.init("ComposeRecipientFields", "Взаимодействие с полями получателей (Кому/Копия/Скрытая копия) и отправителя (От кого) в Компоузе")
  }

}

public protocol ComposeRecipientFields {
  @discardableResult
  func tapOnRecipientField(_ field: ComposeRecipientFieldType) throws -> Void
  @discardableResult
  func pasteToRecipientField(_ field: ComposeRecipientFieldType, _ value: String, _ generateYabble: Bool) throws -> Void
  @discardableResult
  func setRecipientField(_ field: ComposeRecipientFieldType, _ value: String, _ generateYabble: Bool) throws -> Void
  @discardableResult
  func generateYabbleByTapOnEnter() throws -> Void
  @discardableResult
  func getRecipientFieldValue(_ field: ComposeRecipientFieldType) throws -> YSArray<Yabble>
  @discardableResult
  func getCompactRecipientFieldValue() throws -> String
  @discardableResult
  func tapOnRecipient(_ field: ComposeRecipientFieldType, _ index: Int32) throws -> Void
  @discardableResult
  func deleteRecipientByTapOnCross(_ field: ComposeRecipientFieldType, _ index: Int32) throws -> Void
  @discardableResult
  func deleteLastRecipientByTapOnBackspace(_ field: ComposeRecipientFieldType) throws -> Void
  @discardableResult
  func tapOnSenderField() throws -> Void
  @discardableResult
  func getSenderFieldValue() throws -> String
  @discardableResult
  func expandExtendedRecipientForm() throws -> Void
  @discardableResult
  func minimizeExtendedRecipientForm() throws -> Void
  @discardableResult
  func isExtendedRecipientFormShown() throws -> Bool
}

open class ComposeRecipientSuggestFeature: Feature<ComposeRecipientSuggest> {
  public static var `get`: ComposeRecipientSuggestFeature = ComposeRecipientSuggestFeature()
  private init() {
    super.init("ComposeRecipientSuggest", "Взаимодействие с саджестом получателей для полей Кому/Копия/Скрытая копия в Компоузе")
  }

}

public protocol ComposeRecipientSuggest {
  @discardableResult
  func isRecipientSuggestShown() throws -> Bool
  @discardableResult
  func getRecipientSuggest() throws -> YSArray<Contact>
  @discardableResult
  func tapOnRecipientSuggestByEmail(_ email: String) throws -> Void
  @discardableResult
  func tapOnRecipientSuggestByIndex(_ index: Int32) throws -> Void
}

open class ComposeSenderSuggestFeature: Feature<ComposeSenderSuggest> {
  public static var `get`: ComposeSenderSuggestFeature = ComposeSenderSuggestFeature()
  private init() {
    super.init("ComposeSenderSuggest", "Взаимодействие с саджестом адресов отправителя в Компоузе")
  }

}

public protocol ComposeSenderSuggest {
  @discardableResult
  func isSenderSuggestShown() throws -> Bool
  @discardableResult
  func getSenderSuggest() throws -> YSArray<String>
  @discardableResult
  func tapOnSenderSuggestByEmail(_ email: String) throws -> Void
  @discardableResult
  func tapOnSenderSuggestByIndex(_ index: Int32) throws -> Void
}

open class ComposeSubjectFeature: Feature<ComposeSubject> {
  public static var `get`: ComposeSubjectFeature = ComposeSubjectFeature()
  private init() {
    super.init("ComposeSubject", "Взаимодействие с полем Тема в Компоузе")
  }

}

public protocol ComposeSubject {
  @discardableResult
  func getSubject() throws -> String
  @discardableResult
  func setSubject(_ subject: String) throws -> Void
  @discardableResult
  func tapOnSubjectField() throws -> Void
}

open class ComposeBodyFeature: Feature<ComposeBody> {
  public static var `get`: ComposeBodyFeature = ComposeBodyFeature()
  private init() {
    super.init("ComposeBody", "Взаимодействие с полем Тело в Компоузе")
  }

}

public protocol ComposeBody {
  @discardableResult
  func getBody() throws -> String
  @discardableResult
  func setBody(_ body: String) throws -> Void
  @discardableResult
  func pasteBody(_ body: String) throws -> Void
  @discardableResult
  func clearBody() throws -> Void
  @discardableResult
  func tapOnBodyField() throws -> Void
}

