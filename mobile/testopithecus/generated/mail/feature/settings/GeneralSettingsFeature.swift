// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/settings/general-settings-feature.ts >>>

import Foundation

public protocol AndroidGeneralSettings {
  @discardableResult
  func isDoNotDisturbModeEnabled() throws -> Bool
  @discardableResult
  func switchDoNotDisturbMode() throws -> Void
  @discardableResult
  func tapToClearCacheAndCancel() throws -> Void
  @discardableResult
  func switchAds() throws -> Void
  @discardableResult
  func isAdsEnabled() throws -> Bool
}

open class AndroidGeneralSettingsFeature: Feature<AndroidGeneralSettings> {
  public static var `get`: AndroidGeneralSettingsFeature = AndroidGeneralSettingsFeature()
  private init() {
    super.init("AndroidGeneralSettings", "Специфичные для Android основные настройки приложения.")
  }

}

public protocol IosGeneralSettings {
  @discardableResult
  func switchIconBadgeForActiveAccount() throws -> Void
  @discardableResult
  func isIconBadgeForActiveAccountEnabled() throws -> Bool
  @discardableResult
  func switchSystemThemeSync() throws -> Void
  @discardableResult
  func isSystemThemeSyncEnabled() throws -> Bool
  @discardableResult
  func openLinksIn(_ browser: Browser) throws -> Void
  @discardableResult
  func getSelectedBrowser() throws -> Browser
}

open class IosGeneralSettingsFeature: Feature<IosGeneralSettings> {
  public static var `get`: IosGeneralSettingsFeature = IosGeneralSettingsFeature()
  private init() {
    super.init("IosGeneralSettings", "Специфичные для iOS основные настройки приложения.")
  }

}

public protocol GeneralSettings {
  @discardableResult
  func openGeneralSettings() throws -> Void
  @discardableResult
  func closeGeneralSettings() throws -> Void
  @discardableResult
  func setActionOnSwipe(_ action: ActionOnSwipe) throws -> Void
  @discardableResult
  func getActionOnSwipe() throws -> ActionOnSwipe
  @discardableResult
  func isLoginUsingPasswordEnabled() throws -> Bool
  @discardableResult
  func switchCompactMode() throws -> Void
  @discardableResult
  func isCompactModeEnabled() throws -> Bool
  @discardableResult
  func switchDarkTheme() throws -> Void
  @discardableResult
  func isDarkThemeEnabled() throws -> Bool
  @discardableResult
  func switchVoiceControl() throws -> Void
  @discardableResult
  func isVoiceControlEnabled() throws -> Bool
  @discardableResult
  func setVoiceControlLanguage(_ language: Language) throws -> Void
  @discardableResult
  func getVoiceControlLanguage() throws -> Language
  @discardableResult
  func switchSmartReplies() throws -> Void
  @discardableResult
  func isSmartRepliesEnabled() throws -> Bool
  @discardableResult
  func clearCache() throws -> Void
  @discardableResult
  func setCancelSendingEmail(_ option: CancelSendingOption) throws -> Void
  @discardableResult
  func getCancelSendingEmail() throws -> CancelSendingOption
}

open class GeneralSettingsFeature: Feature<GeneralSettings> {
  public static var `get`: GeneralSettingsFeature = GeneralSettingsFeature()
  private init() {
    super.init("GeneralSettings", "Основные настройки приложения, не зависящие от аккаунта." + "Доступ в iOS открывается по тапу на кнопку General settings в Root settings" + "в Android - сразу при попадании в Root setting")
  }

}

public enum ActionOnSwipe : String {
  case archive = "Archive"
  case delete = "Delete"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum Language : String {
  case russian = "Russian"
  case english = "English"
  case ukrainian = "Ukrainian"
  case turkish = "Turkish"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum Browser : String {
  case yandexBrowser = "Yandex Browser"
  case safari = "Safari"
  case builtIn = "Built-in browser"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum CancelSendingOption : String {
  case turnOff = "Turn off"
  case threeSeconds = "3 seconds"
  case fiveSeconds = "5 seconds"
  case tenSeconds = "10 seconds"
  public func toString() -> String {
    return self.rawValue
  }
}
