// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/settings/account-settings-feature.ts >>>

import Foundation

public protocol AccountSettings {
  @discardableResult
  func openAccountSettings(_ accountIndex: Int32) throws -> Void
  @discardableResult
  func closeAccountSettings() throws -> Void
  @discardableResult
  func isGroupBySubjectEnabled() throws -> Bool
  @discardableResult
  func switchGroupBySubject() throws -> Void
  @discardableResult
  func switchSortingEmailsByCategory() throws -> Void
  @discardableResult
  func isSortingEmailsByCategoryEnabled() throws -> Bool
  @discardableResult
  func openMailingListsManager() throws -> Void
  @discardableResult
  func getSignature() throws -> String
  @discardableResult
  func changeSignature(_ newSignature: String) throws -> Void
  @discardableResult
  func switchTheme() throws -> Void
  @discardableResult
  func isThemeEnabled() throws -> Bool
  @discardableResult
  func getFolderToNotificationOption() throws -> YSMap<FolderName, NotificationOption>
  @discardableResult
  func setNotificationOptionForFolder(_ folder: FolderName, _ option: NotificationOption) throws -> Void
  @discardableResult
  func getNotificationOptionForFolder(_ folder: FolderName) throws -> NotificationOption
  @discardableResult
  func openFilters() throws -> Void
}

open class AccountSettingsFeature: Feature<AccountSettings> {
  public static var `get`: AccountSettingsFeature = AccountSettingsFeature()
  private init() {
    super.init("AccountSettings", "Общие для iOS и Android настройки аккаунта пользователя. И в iOS, и в Android открываются с экрана Root Settings")
  }

}

public protocol IosAccountSettings {
  @discardableResult
  func changePhoneNumber(_ newPhoneNumber: String) throws -> Void
  @discardableResult
  func getPushNotificationSound() throws -> NotificationSound
  @discardableResult
  func setPushNotificationSound(_ sound: NotificationSound) throws -> Void
  @discardableResult
  func switchPushNotification() throws -> Void
  @discardableResult
  func isPushNotificationForAllEnabled() throws -> Bool
}

open class IosAccountSettingsFeature: Feature<IosAccountSettings> {
  public static var `get`: IosAccountSettingsFeature = IosAccountSettingsFeature()
  private init() {
    super.init("IosAccountSettings", "Специфичные для iOS настройки аккаунта пользователя.")
  }

}

public protocol AndroidAccountSettings {
  @discardableResult
  func switchUseAccountSetting() throws -> Void
  @discardableResult
  func isAccountUsingEnabled() throws -> Bool
  @discardableResult
  func openFolderManager() throws -> Void
  @discardableResult
  func openLabelManager() throws -> Void
  @discardableResult
  func openPassport() throws -> Void
  @discardableResult
  func setPlaceForSignature(_ place: SignaturePlace) throws -> Void
  @discardableResult
  func getPlaceForSignature() throws -> SignaturePlace
  @discardableResult
  func isSyncCalendarEnabled() throws -> Bool
  @discardableResult
  func switchSyncCalendar() throws -> Void
}

open class AndroidAccountSettingsFeature: Feature<AndroidAccountSettings> {
  public static var `get`: AndroidAccountSettingsFeature = AndroidAccountSettingsFeature()
  private init() {
    super.init("AndroidAccountSettings", "Специфичные для Android настройки аккаунта пользователя.")
  }

}

public enum NotificationSound : String {
  case standard = "Standard"
  case yandexMail = "Yandex Mail"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum NotificationOption : String {
  case doNotSync = "Do not sync"
  case syncWithoutNotification = "Sync without notification"
  case syncAndNotifyMe = "Sync and notify me"
  public func toString() -> String {
    return self.rawValue
  }
}
