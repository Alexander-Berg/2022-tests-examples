// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/settings/filters-features.ts >>>

import Foundation

open class FiltersListFeature: Feature<FiltersList> {
  public static var `get`: FiltersListFeature = FiltersListFeature()
  private init() {
    super.init("FiltersList", "Экран с промо и списком фильтров")
  }

}

public protocol FiltersList {
  @discardableResult
  func isPromoShown() throws -> Bool
  @discardableResult
  func getFilterList() throws -> YSArray<FilterView>
  @discardableResult
  func tapOnCreateRuleButton() throws -> Void
  @discardableResult
  func tapOnFilterByIndex(_ index: Int32) throws -> Void
}

open class FilterView {
  public let conditions: String
  public let actions: String
  public let isCanBeEditedOnlyOnComputer: Bool
  public let isEnabled: Bool
  public init(_ conditions: String, _ actions: String, _ isCanBeEditedOnlyOnComputer: Bool, _ isEnabled: Bool) {
    self.conditions = conditions
    self.actions = actions
    self.isCanBeEditedOnlyOnComputer = isCanBeEditedOnlyOnComputer
    self.isEnabled = isEnabled
  }

  @discardableResult
  open class func matches(_ first: FilterView, _ second: FilterView) -> Bool {
    return (first.conditions == second.conditions && first.actions == second.actions && first.isCanBeEditedOnlyOnComputer == second.isCanBeEditedOnlyOnComputer && first.isEnabled == second.isEnabled)
  }

  @discardableResult
  open func tostring() -> String {
    return ("Conditions: \(self.conditions),\n" + "Actions: \(self.actions),\n" + "isCanBeEditedOnlyOnComputer: \(self.isCanBeEditedOnlyOnComputer),\n" + "isEnabled: \(self.isEnabled)")
  }

}

open class FilterCreateOrUpdateRuleFeature: Feature<FilterCreateOrUpdateRule> {
  public static var `get`: FilterCreateOrUpdateRuleFeature = FilterCreateOrUpdateRuleFeature()
  private init() {
    super.init("FilterCreateOrUpdateRule", "Экран создания/редактирования фильтра")
  }

}

public enum FilterConditionField {
  case from
  case subject
}
public enum FilterActionToggle {
  case markAsRead
  case delete
  case applyToExistingEmails
}
public protocol FilterCreateOrUpdateRule {
  @discardableResult
  func tapOnConditionField(_ conditionField: FilterConditionField) throws -> Void
  @discardableResult
  func setConditionField(_ conditionField: FilterConditionField, _ value: String) throws -> Void
  @discardableResult
  func getConditionField(_ conditionField: FilterConditionField) throws -> YSArray<String>
  @discardableResult
  func isConditionLogicButtonShown() throws -> Bool
  @discardableResult
  func tapOnConditionLogicButton() throws -> Void
  @discardableResult
  func getConditionLogic() throws -> FilterLogicType!
  @discardableResult
  func getActionToggle(_ actionToggle: FilterActionToggle) throws -> Bool
  @discardableResult
  func setActionToggle(_ actionToggle: FilterActionToggle, _ value: Bool) throws -> Void
  @discardableResult
  func getMoveToFolderValue() throws -> FolderName!
  @discardableResult
  func tapOnMoveToFolder() throws -> Void
  @discardableResult
  func getApplyLabelValue() throws -> LabelName!
  @discardableResult
  func tapOnApplyLabel() throws -> Void
  @discardableResult
  func tapOnCreate() throws -> Void
  @discardableResult
  func tapOnMore() throws -> Void
}

open class FilterConditionLogicFeature: Feature<FilterConditionLogic> {
  public static var `get`: FilterConditionLogicFeature = FilterConditionLogicFeature()
  private init() {
    super.init("FilterConditionLogic", "Модальное окно выбора логики выполнения условий")
  }

}

public protocol FilterConditionLogic {
  @discardableResult
  func getLogicTypes() throws -> YSArray<FilterLogicType>
  @discardableResult
  func setLogicType(_ logicType: FilterLogicType) throws -> Void
}

open class FilterUpdateRuleMoreFeature: Feature<FilterUpdateRuleMore> {
  public static var `get`: FilterUpdateRuleMoreFeature = FilterUpdateRuleMoreFeature()
  private init() {
    super.init("FilterUpdateRuleMore", "Модальное окно включения/отключения/удаления правила. Открывается с экрана редактирования правила")
  }

}

public protocol FilterUpdateRuleMore {
  @discardableResult
  func changeEnableStatus(_ enable: Bool) throws -> Void
  @discardableResult
  func delete() throws -> Void
}

open class FilterConditionText {
  public static let allEmails: String = "All emails"
  public static let allEmailsWithAttachments: String = "All emails with attachments"
  public static let allEmailsWithouAttachments: String = "All emails without attachments"
  public static let body: String = "\"Body of the email\""
  public static let cc: String = "\"Cc\""
  public static let attachmentName: String = "\"Attachment name\""
  public static let from: String = "\"From\""
  public static let subject: String = "\"Subject\""
  public static let to: String = "\"To\""
  public static let toOrCc: String = "\"To or cc\""
  public static let header: String = "header \"%@\""
  public static let allEmailsExceptSpam: String = "All emails except spam"
  public static let allEmailsWithAttachmentsExceptSpam: String = "All emails with attachments except spam"
  public static let allEmailsWithoutAttachmentsExceptSpam: String = "All emails without attachments except spam"
  public static let contains: String = "contains"
  public static let doesntMatch: String = "\"doesn't match\""
  public static let matches: String = "matches"
  public static let doesntContain: String = "\"doesn't contain\""
  public static let onlySpam: String = "Only spam"
  public static let onlySpamWithAttachments: String = "Only spam with attachments"
  public static let onlySpamWithoutAttachments: String = "Only spam without attachments"
  public static let and: String = "and"
  public static let `if`: String = "If"
  public static let or: String = "or"
  public static let template: String = "%1$@ %2$@ \"%3$@\""
}

open class FilterActionText {
  public static let delete: String = "— Delete"
  public static let forward: String = "— Forward email to \"%@\""
  public static let applyLabel: String = "— Add label \"%@\""
  public static let markAsRead: String = "— Mark as read"
  public static let moveToFolder: String = "— Move to folder \"%@\""
  public static let notify: String = "— Notify at %@"
  public static let reply: String = "— Automatic response"
  public static let actionStop: String = "\"— Don't apply other rules\""
}

