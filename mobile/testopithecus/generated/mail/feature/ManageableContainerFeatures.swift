// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/manageable-container-features.ts >>>

import Foundation

open class ManageableFolderFeature: Feature<ManageableFolder> {
  public static var `get`: ManageableFolderFeature = ManageableFolderFeature()
  private init() {
    super.init("ManageableFolder", "Создание/изменение/удаление папок. Открывается из списка папок.")
  }

}

public protocol ManageableFolder {
  @discardableResult
  func openFolderManager() throws -> Void
  @discardableResult
  func closeFolderManager() throws -> Void
  @discardableResult
  func openCreateFolderScreen() throws -> Void
  @discardableResult
  func closeCreateFolderScreen() throws -> Void
  @discardableResult
  func enterNameForNewFolder(_ folderName: FolderName) throws -> Void
  @discardableResult
  func getCurrentNewFolderName() throws -> FolderName
  @discardableResult
  func getCurrentParentFolderForNewFolder() throws -> String
  @discardableResult
  func submitNewFolder() throws -> Void
  @discardableResult
  func openEditFolderScreen(_ folderName: FolderName, _ parentFolders: YSArray<FolderName>) throws -> Void
  @discardableResult
  func closeEditFolderScreen() throws -> Void
  @discardableResult
  func enterNameForEditedFolder(_ folderName: FolderName) throws -> Void
  @discardableResult
  func getCurrentEditedFolderName() throws -> FolderName
  @discardableResult
  func getCurrentParentFolderForEditedFolder() throws -> String
  @discardableResult
  func submitEditedFolder() throws -> Void
  @discardableResult
  func selectParentFolder(_ parentFolders: YSArray<FolderName>) throws -> Void
  @discardableResult
  func openFolderLocationScreen() throws -> Void
  @discardableResult
  func getFolderListForFolderLocationScreen() throws -> YSArray<FolderName>
  @discardableResult
  func closeFolderLocationScreen() throws -> Void
  @discardableResult
  func deleteFolder(_ folderDisplayName: FolderName, _ parentFolders: YSArray<FolderName>, _ deletionMethod: ContainerDeletionMethod) throws -> Void
  @discardableResult
  func getFolderListForManageFolderScreen() throws -> YSArray<FolderName>
}

open class CreatableFolderFeature: Feature<CreatableFolder> {
  public static var `get`: CreatableFolderFeature = CreatableFolderFeature()
  private init() {
    super.init("CreatableFolder", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol CreatableFolder {
  @discardableResult
  func createFolder(_ folderDisplayName: String) throws -> Void
}

open class ManageableLabelFeature: Feature<ManageableLabel> {
  public static var `get`: ManageableLabelFeature = ManageableLabelFeature()
  private init() {
    super.init("ManageableLabel", "Создание/изменение/удаление меток. Открывается из списка папок.")
  }

}

public protocol ManageableLabel {
  @discardableResult
  func openLabelManager() throws -> Void
  @discardableResult
  func closeLabelManager() throws -> Void
  @discardableResult
  func openCreateLabelScreen() throws -> Void
  @discardableResult
  func closeCreateLabelScreen() throws -> Void
  @discardableResult
  func enterNameForNewLabel(_ labelName: LabelName) throws -> Void
  @discardableResult
  func getCurrentNewLabelName() throws -> LabelName
  @discardableResult
  func setNewLabelColor(_ index: Int32) throws -> Void
  @discardableResult
  func getCurrentNewLabelColorIndex() throws -> Int32
  @discardableResult
  func submitNewLabel() throws -> Void
  @discardableResult
  func openEditLabelScreen(_ labelName: LabelName) throws -> Void
  @discardableResult
  func closeEditLabelScreen() throws -> Void
  @discardableResult
  func enterNameForEditedLabel(_ labelName: LabelName) throws -> Void
  @discardableResult
  func getCurrentEditedLabelName() throws -> LabelName
  @discardableResult
  func getCurrentEditedLabelColorIndex() throws -> Int32
  @discardableResult
  func setEditedLabelColor(_ index: Int32) throws -> Void
  @discardableResult
  func submitEditedLabel() throws -> Void
  @discardableResult
  func deleteLabel(_ labelName: LabelName, _ deletionMethod: ContainerDeletionMethod) throws -> Void
  @discardableResult
  func getLabelList() throws -> YSArray<LabelName>
}

open class CreatableLabelFeature: Feature<CreatableLabel> {
  public static var `get`: CreatableLabelFeature = CreatableLabelFeature()
  public init() {
    super.init("CreatableLabel", "Фича для создания и удаления метки из списка меток. Открывается через меню письма.")
  }

}

public protocol CreatableLabel {
  @discardableResult
  func createLabel(_ labelName: String) throws -> Void
  @discardableResult
  func removeLabel(_ labelName: String) throws -> Void
}

public enum ContainerDeletionMethod {
  case longSwipe
  case shortSwipe
  case tap
}
