// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/base-action-features.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class ArchiveMessageFeature private constructor(): Feature<ArchiveMessage>("ArchiveMessage", "Базовая фича архивации сообщения. В мобильных по дефолту выполняется через Short swipe.") {
    companion object {
        @JvmStatic var `get`: ArchiveMessageFeature = ArchiveMessageFeature()
    }
}

public interface ArchiveMessage {
    fun archiveMessage(order: Int): Unit
}

public open class DeleteMessageFeature private constructor(): Feature<DeleteMessage>("DeleteMessage", "Дефолтная фича удаления сообщения." + "В мобильных реализуется через full swipe, в Лизе через тулбар.") {
    companion object {
        @JvmStatic var `get`: DeleteMessageFeature = DeleteMessageFeature()
    }
}

public interface DeleteMessage {
    fun deleteMessage(order: Int): Unit
}

public open class MarkableImportantFeature private constructor(): Feature<MarkableImportant>("MarkableImportant", "Базовая фича метки важности. В мобильных по дефолту выполняется через Short swipe.") {
    companion object {
        @JvmStatic var `get`: MarkableImportantFeature = MarkableImportantFeature()
    }
}

public interface MarkableImportant {
    fun markAsImportant(order: Int): Unit
    fun markAsUnimportant(order: Int): Unit
}

public open class MarkableReadFeature private constructor(): Feature<MarkableRead>("MarkableRead", "Дефолтная фича управления статусом прочитанности письма." + "В мобильных реализуется через full swipe, в Лизе через тулбар.") {
    companion object {
        @JvmStatic var `get`: MarkableReadFeature = MarkableReadFeature()
    }
}

public interface MarkableRead {
    fun markAsRead(order: Int): Unit
    fun markAsUnread(order: Int): Unit
}

public open class MovableToFolderFeature private constructor(): Feature<MovableToFolder>("MovableToFolder", "Фича переноса соообщения в другую папку. На мобильных по дефолту реализуется через Short swipe.") {
    companion object {
        @JvmStatic var `get`: MovableToFolderFeature = MovableToFolderFeature()
    }
}

public interface MovableToFolder {
    fun moveMessageToFolder(order: Int, folderName: FolderName): Unit
}

public open class SpamableFeature private constructor(): Feature<Spamable>("Spamable", "Фича пометки письма спамом. По дефолту в мобильных осуществляется через Short swipe.") {
    companion object {
        @JvmStatic var `get`: SpamableFeature = SpamableFeature()
    }
}

public interface Spamable {
    fun moveToSpam(order: Int): Unit
    fun moveFromSpam(order: Int): Unit
}

