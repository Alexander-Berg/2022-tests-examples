// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/tab-bar-feature.ts >>>

import Foundation

open class TabBarFeature: Feature<TabBar> {
  public static var `get`: TabBarFeature = TabBarFeature()
  private init() {
    super.init("TabBar", "Таббар")
  }

}

public protocol TabBar {
  @discardableResult
  func isShown() throws -> Bool
  @discardableResult
  func getCurrentItem() throws -> TabBarItem
  @discardableResult
  func tapOnItem(_ item: TabBarItem) throws -> Void
}

open class TabBarIOSFeature: Feature<TabBarIOS> {
  public static var `get`: TabBarIOSFeature = TabBarIOSFeature()
  private init() {
    super.init("TabBarIOS", "Специфичные для таббара на iOS методы")
  }

}

public protocol TabBarIOS {
  @discardableResult
  func getItems() throws -> YSArray<TabBarItem>
  @discardableResult
  func getCalendarIconDate() throws -> String
}

open class TabBarAndroidFeature: Feature<TabBarAndroid> {
  public static var `get`: TabBarAndroidFeature = TabBarAndroidFeature()
  private init() {
    super.init("TabBarAndroid", "Специфичные для таббара на Android методы")
  }

}

public protocol TabBarAndroid {
  @discardableResult
  func getItems() throws -> YSArray<TabBarItem>
}

open class ShtorkaFeature: Feature<Shtorka> {
  public static var `get`: ShtorkaFeature = ShtorkaFeature()
  private init() {
    super.init("Shtorka", "Шторка с сервисами, которая открывается по тапу на More в таббаре")
  }

}

public protocol Shtorka {
  @discardableResult
  func closeBySwipe() throws -> Void
  @discardableResult
  func closeByTapOver() throws -> Void
  @discardableResult
  func getShownBannerType() throws -> ShtorkaBannerType!
  @discardableResult
  func tapOnBanner() throws -> Void
  @discardableResult
  func closeBanner() throws -> Void
  @discardableResult
  func tapOnItem(_ item: TabBarItem) throws -> Void
}

open class ShtorkaAndroidFeature: Feature<ShtorkaAndroid> {
  public static var `get`: ShtorkaAndroidFeature = ShtorkaAndroidFeature()
  private init() {
    super.init("ShtorkaAndroid", "Специфичные для шторки на Android методы")
  }

}

public protocol ShtorkaAndroid {
  @discardableResult
  func getItems() throws -> YSArray<TabBarItem>
}

open class ShtorkaIOSFeature: Feature<ShtorkaIOS> {
  public static var `get`: ShtorkaIOSFeature = ShtorkaIOSFeature()
  private init() {
    super.init("ShtorkaIOS", "Специфичные для шторки на iOS методы")
  }

}

public protocol ShtorkaIOS {
  @discardableResult
  func getItems() throws -> YSArray<TabBarItem>
}

public enum ShtorkaBannerType {
  case docs
  case scanner
  case mail360
}
public enum TabBarItem : String {
  case mail = "Mail"
  case calendar = "Calendar"
  case documents = "Documents"
  case telemost = "Telemost"
  case contacts = "Contacts"
  case more = "More"
  case disk = "Disk"
  case notes = "Notes"
  case scanner = "Scanner"
  case subscriptions = "Subscriptions"
  public func toString() -> String {
    return self.rawValue
  }
}
