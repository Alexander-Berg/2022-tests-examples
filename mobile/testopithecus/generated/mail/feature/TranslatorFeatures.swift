// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/translator-features.ts >>>

import Foundation

public typealias LanguageName = String

public typealias LanguageCode = String

open class TranslatorBarFeature: Feature<TranslatorBar> {
  public static var `get`: TranslatorBarFeature = TranslatorBarFeature()
  private init() {
    super.init("TranslatorBar", "Плашка переводчика в просмотре письма")
  }

}

public protocol TranslatorBar {
  @discardableResult
  func isTranslatorBarShown() throws -> Bool
  @discardableResult
  func isMessageTranslated() throws -> Bool
  @discardableResult
  func getSourceLanguage() throws -> LanguageName
  @discardableResult
  func tapOnSourceLanguage() throws -> Void
  @discardableResult
  func getTargetLanguage() throws -> LanguageName
  @discardableResult
  func tapOnTargetLanguage() throws -> Void
  @discardableResult
  func tapOnTranslateButton() throws -> Void
  @discardableResult
  func tapOnRevertButton() throws -> Void
  @discardableResult
  func getSubmitButtonLabel() throws -> String
  @discardableResult
  func tapOnCloseBarButton(_ hideTranslatorForThisLanguage: Bool) throws -> Void
}

open class TranslatorLanguageListFeature: Feature<TranslatorLanguageList> {
  public static var `get`: TranslatorLanguageListFeature = TranslatorLanguageListFeature()
  private init() {
    super.init("TranslatorLanguageListFeature", "Список языков, появляющийся при тапе на язык письма/язык перевода")
  }

}

public protocol TranslatorLanguageList {
  @discardableResult
  func getAllSourceLanguages() -> YSArray<LanguageName>
  @discardableResult
  func setSourceLanguage(_ language: LanguageName) throws -> Void
  @discardableResult
  func getCurrentSourceLanguage() throws -> LanguageName!
  @discardableResult
  func getDeterminedAutomaticallySourceLanguage() throws -> LanguageName
  @discardableResult
  func getRecentSourceLanguages() throws -> YSArray<LanguageName>
  @discardableResult
  func getAllTargetLanguages() -> YSArray<LanguageName>
  @discardableResult
  func setTargetLanguage(_ language: LanguageName, _ addToRecent: Bool) throws -> Void
  @discardableResult
  func getCurrentTargetLanguage() throws -> LanguageName!
  @discardableResult
  func getDefaultTargetLanguage() throws -> LanguageName
  @discardableResult
  func getRecentTargetLanguages() throws -> YSArray<LanguageName>
}

open class TranslatorLanguageListSearchFeature: Feature<TranslatorLanguageListSearch> {
  public static var `get`: TranslatorLanguageListSearchFeature = TranslatorLanguageListSearchFeature()
  private init() {
    super.init("TranslatorLanguageListSearchFeature", "Поиск на экране выбора языка в перводчике")
  }

}

public protocol TranslatorLanguageListSearch {
  @discardableResult
  func tapOnSearchTextField() throws -> Void
  @discardableResult
  func isSearchTextFieldFocused() throws -> Bool
  @discardableResult
  func tapOnCancelButton() throws -> Void
  @discardableResult
  func enterSearchQuery(_ query: String) throws -> Void
  @discardableResult
  func getSearchQuery() throws -> String
  @discardableResult
  func getSearchedLanguageList() throws -> YSArray<LanguageName>
  @discardableResult
  func tapOnClearSearchFieldButton() throws -> Void
}

open class TranslatorSettingsFeature: Feature<TranslatorSettings> {
  public static var `get`: TranslatorSettingsFeature = TranslatorSettingsFeature()
  private init() {
    super.init("TranslatorSettingsFeature", "Переводчик в настройках")
  }

}

public protocol TranslatorSettings {
  @discardableResult
  func switchTranslator() throws -> Void
  @discardableResult
  func isTranslatorEnabled() throws -> Bool
  @discardableResult
  func isIgnoredLanguageCellShown() throws -> Bool
  @discardableResult
  func openIgnoredTranslationLanguageList() throws -> Void
  @discardableResult
  func removeTranslationLanguageFromIgnored(_ language: LanguageName) throws -> Void
  @discardableResult
  func getIgnoredTranslationLanguages() throws -> YSArray<LanguageName>
  @discardableResult
  func closeIgnoredTranslationLanguageList() throws -> Void
  @discardableResult
  func openDefaultTranslationLanguageList() throws -> Void
  @discardableResult
  func setDefaultTranslationLanguage(_ language: LanguageName) throws -> Void
  @discardableResult
  func getDefaultTranslationLanguage() -> LanguageName
  @discardableResult
  func getDefaultTranslationLanguageFromGeneralSettingsPage() -> LanguageName
  @discardableResult
  func closeDefaultTranslationLanguageList() throws -> Void
}

