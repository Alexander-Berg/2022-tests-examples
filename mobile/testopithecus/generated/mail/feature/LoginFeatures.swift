// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/login-features.ts >>>

import Foundation

public typealias Login = String

open class MultiAccountFeature: Feature<MultiAccount> {
  public static var `get`: MultiAccountFeature = MultiAccountFeature()
  private init() {
    super.init("MultiAccount", "Фича переключения между аккаунтами, логина и разлогина")
  }

}

public protocol MultiAccount {
  @discardableResult
  func switchToAccount(_ login: Login) throws -> Void
  @discardableResult
  func logoutFromAccount(_ login: Login) throws -> Void
  @discardableResult
  func getCurrentAccount() throws -> Login
  @discardableResult
  func getNumberOfAccounts() throws -> Int32
  @discardableResult
  func addNewAccount() throws -> Void
  @discardableResult
  func getLoggedInAccountsList() throws -> YSArray<Login>
}

open class AccountsListFeature: Feature<AccountsList> {
  public static var `get`: AccountsListFeature = AccountsListFeature()
  private init() {
    super.init("AccountsList", "Список аккаунтов на экране с каруселью аккаунтов АМа")
  }

}

public protocol AccountsList {
  @discardableResult
  func choseAccountFromAccountsList(_ account: UserAccount) throws -> Void
  @discardableResult
  func getAccountsList() throws -> YSArray<UserAccount>
}

open class ExpiringTokenFeature: Feature<ExpiringToken> {
  public static var `get`: ExpiringTokenFeature = ExpiringTokenFeature()
  private init() {
    super.init("ExpiringToken", "Фича, позволяющая инвалидировать токен yandex-аккаунта")
  }

}

public protocol ExpiringToken {
  @discardableResult
  func revokeToken(_ account: UserAccount) throws -> Void
  @discardableResult
  func exitFromReloginWindow() throws -> Void
}

open class YandexLoginFeature: Feature<YandexLogin> {
  public static var `get`: YandexLoginFeature = YandexLoginFeature()
  private init() {
    super.init("YandexLogin", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol YandexLogin {
  @discardableResult
  func loginWithYandexAccount(_ account: UserAccount) throws -> Void
}

open class YandexTeamLoginFeature: Feature<YandexTeamLogin> {
  public static var `get`: YandexTeamLoginFeature = YandexTeamLoginFeature()
  private init() {
    super.init("YandexTeamLogin", "Залогин yandex-team аккаунтом. Ввод логина, пароля и переход к списку писем.")
  }

}

public protocol YandexTeamLogin {
  @discardableResult
  func loginWithYandexTeamAccount(_ account: UserAccount) throws -> Void
}

open class MailRuLoginFeature: Feature<MailRuLogin> {
  public static var `get`: MailRuLoginFeature = MailRuLoginFeature()
  private init() {
    super.init("MailRuLogin", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol MailRuLogin {
  @discardableResult
  func loginWithMailRuAccount(_ account: UserAccount) throws -> Void
}

open class GoogleLoginFeature: Feature<GoogleLogin> {
  public static var `get`: GoogleLoginFeature = GoogleLoginFeature()
  private init() {
    super.init("GoogleLogin", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol GoogleLogin {
  @discardableResult
  func loginWithGoogleAccount(_ account: UserAccount) throws -> Void
}

open class OutlookLoginFeature: Feature<OutlookLogin> {
  public static var `get`: OutlookLoginFeature = OutlookLoginFeature()
  private init() {
    super.init("OutlookLogin", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol OutlookLogin {
  @discardableResult
  func loginWithOutlookAccount(_ account: UserAccount) throws -> Void
}

open class HotmailLoginFeature: Feature<HotmailLogin> {
  public static var `get`: HotmailLoginFeature = HotmailLoginFeature()
  private init() {
    super.init("HotmailLogin", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol HotmailLogin {
  @discardableResult
  func loginWithHotmailAccount(_ account: UserAccount) throws -> Void
}

open class RamblerLoginFeature: Feature<RamblerLogin> {
  public static var `get`: RamblerLoginFeature = RamblerLoginFeature()
  private init() {
    super.init("RamblerLogin", "TODO: добрый человек, напиши тут описание этой фичи")
  }

}

public protocol RamblerLogin {
  @discardableResult
  func loginWithRamblerAccount(_ account: UserAccount) throws -> Void
}

open class YahooLoginFeature: Feature<YahooLogin> {
  public static var `get`: YahooLoginFeature = YahooLoginFeature()
  private init() {
    super.init("YahooLogin", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol YahooLogin {
  @discardableResult
  func loginWithYahooAccount(_ account: UserAccount) throws -> Void
}

open class CustomMailServiceLoginFeature: Feature<CustomMailServiceLogin> {
  public static var `get`: CustomMailServiceLoginFeature = CustomMailServiceLoginFeature()
  private init() {
    super.init("CustomMailService", "TODO: добрый человек, напиши тут, про что эта фича")
  }

}

public protocol CustomMailServiceLogin {
  @discardableResult
  func loginWithCustomMailServiceAccount(_ account: UserAccount) throws -> Void
}

