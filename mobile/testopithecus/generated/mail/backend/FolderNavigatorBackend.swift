// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/backend/folder-navigator-backend.ts >>>

import Foundation

open class FolderNavigatorBackend: FolderNavigator {
  private var mailListDisplayBackend: MessageListDisplayBackend
  private var clientsHandler: MailboxClientHandler
  public init(_ mailListDisplayBackend: MessageListDisplayBackend, _ clientsHandler: MailboxClientHandler) {
    self.mailListDisplayBackend = mailListDisplayBackend
    self.clientsHandler = clientsHandler
  }

  open func ptrFoldersList() -> Void {
  }

  @discardableResult
  open func getFoldersList() throws -> YSMap<FolderName, Int32> {
    let folderToUnread = YSMap<FolderName, Int32>()
    self.clientsHandler.getCurrentClient().getFolderList().forEach({
      (meta) in
      folderToUnread.set(meta.name!, meta.unreadCounter)
    })
    return folderToUnread
  }

  @discardableResult
  open func goToFolder(_ folderDisplayName: String, _ parentFolders: YSArray<String>) throws -> Void {
    let folderBackendName = toBackendFolderName(folderDisplayName, parentFolders)
    let folder = self.clientsHandler.getCurrentClient().getFolderList().filter({
      (f) in
      f.name == folderBackendName
    })[0]
    self.mailListDisplayBackend.setCurrentFolderId(folder.fid)
  }

  @discardableResult
  open func getCurrentContainer() throws -> String! {
    let currentFolderName = self.clientsHandler.getCurrentClient().getFolderList().filter({
      (meta) in
      meta.fid == self.mailListDisplayBackend.getCurrentFolderId()
    })[0].name!
    return currentFolderName
  }

  @discardableResult
  open func closeFolderList() throws -> Void {
  }

  @discardableResult
  open func openFolderList() throws -> Void {
  }

  @discardableResult
  open func isInTabsMode() throws -> Bool {
    let currentSettings = self.clientsHandler.getCurrentClient().getSettings()
    return currentSettings.payload!.userParameters.showFoldersTabs
  }

}

