// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/backend/message-list-display-backend.ts >>>

import Foundation

open class MessageListDisplayBackend: MessageListDisplay {
  private var currentFolderId: FolderId! = nil
  private var clientsHandler: MailboxClientHandler
  public init(_ clientsHandler: MailboxClientHandler) {
    self.clientsHandler = clientsHandler
  }

  open func swipeDownMessageList() -> Void {
    return
  }

  @discardableResult
  private class func getInbox(_ client: MailboxClient) -> Folder {
    return MessageListDisplayBackend.getFolderByType(client, FolderType.inbox)
  }

  @discardableResult
  private class func getFolderByType(_ client: MailboxClient, _ type: FolderType) -> Folder {
    return client.getFolderList().filter({
      (f) in
      f.type == type
    })[0]
  }

  @discardableResult
  open func getCurrentFolderId() -> FolderId {
    if self.currentFolderId == nil {
      self.currentFolderId = MessageListDisplayBackend.getInbox(self.clientsHandler.getCurrentClient()).fid
    }
    return self.currentFolderId!
  }

  open func setCurrentFolderId(_ folderId: FolderId) -> Void {
    self.currentFolderId = folderId
  }

  @discardableResult
  open func getMessageList(_ limit: Int32) throws -> YSArray<MessageView> {
    return self.getMessageDTOList(limit).map({
      (meta) in
      Message.fromMeta(meta)
    })
  }

  @discardableResult
  open func getMessageDTOList(_ limit: Int32) -> YSArray<MessageMeta> {
    return self.isInThreadMode() ? self.clientsHandler.getCurrentClient().getThreadsInFolder(self.getCurrentFolderId(), limit) : self.clientsHandler.getCurrentClient().getMessagesInFolder(self.getCurrentFolderId(), limit)
  }

  @discardableResult
  open func unreadCounter() throws -> Int32 {
    return self.getCurrentFolder().unreadCounter
  }

  @discardableResult
  open func refreshMessageList() throws -> Void {
    return
  }

  @discardableResult
  open func getThreadMessage(_ byOrder: Int32) -> MessageMeta {
    let threads = self.getMessageDTOList(byOrder + 1)
    let threadsCount = threads.length
    if threadsCount <= byOrder {
      fail("No thread in folder \(self.getCurrentFolderId()) by order \(byOrder), there are \(threadsCount) threads")
    }
    return threads[byOrder]
  }

  @discardableResult
  open func getFolder(_ id: FolderId) -> Folder {
    return self.clientsHandler.getCurrentClient().getFolderList().filter({
      (f) in
      f.fid == id
    })[0]
  }

  @discardableResult
  open func getCurrentFolder() -> Folder {
    return self.getFolder(self.getCurrentFolderId())
  }

  @discardableResult
  open func getFolderByType(_ type: FolderType) -> Folder {
    return MessageListDisplayBackend.getFolderByType(self.clientsHandler.getCurrentClient(), type)
  }

  @discardableResult
  open func getInbox() -> Folder {
    return self.getFolderByType(FolderType.inbox)
  }

  @discardableResult
  open func isInThreadMode() -> Bool {
    let folderType = self.getCurrentFolder().type
    return isFolderOfThreadedType(folderType)
  }

  @discardableResult
  open func goToAccountSwitcher() throws -> Void {
  }

}

