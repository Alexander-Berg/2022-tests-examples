// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/backend/mobile-mail-backend.ts >>>

import Foundation

open class MobileMailBackend: App {
  public static var allSupportedFeatures: YSArray<FeatureID> = YSArray(ArchiveMessageFeature.`get`.name, MessageListDisplayFeature.`get`.name, MarkableReadFeature.`get`.name, MarkableImportantFeature.`get`.name, ExpandableThreadsFeature.`get`.name, DeleteMessageFeature.`get`.name, SpamableFeature.`get`.name, MovableToFolderFeature.`get`.name, CreatableFolderFeature.`get`.name, FolderNavigatorFeature.`get`.name, YandexLoginFeature.`get`.name, YandexTeamLoginFeature.`get`.name, MultiAccountFeature.`get`.name, MailRuLoginFeature.`get`.name, GoogleLoginFeature.`get`.name, OutlookLoginFeature.`get`.name, HotmailLoginFeature.`get`.name, RamblerLoginFeature.`get`.name, YahooLoginFeature.`get`.name)
  public var supportedFeatures: YSArray<FeatureID> = MobileMailBackend.allSupportedFeatures
  public var archive: ArchiveMessageBackend
  public var messageListDisplay: MessageListDisplayBackend
  public var folderNavigator: FolderNavigatorBackend
  public var markable: MarkableBackend
  public var markableImportant: MarkableImportantBackend
  public var deleteMessage: DeleteMessageBackend
  public var spamable: SpamableBackend
  public var movableToFolder: MovableToFolderBackend
  public var creatableFolder: CreatableFolderBackend
  public var expandableThreads: ExpandableThreadsBackend
  public var loginBackend: LoginBackend
  public var multiAccount: MultiAccountBackend
  public let clientsHandler: MailboxClientHandler
  public init(_ clientsHandler: MailboxClientHandler) {
    self.clientsHandler = clientsHandler
    self.messageListDisplay = MessageListDisplayBackend(clientsHandler)
    self.folderNavigator = FolderNavigatorBackend(self.messageListDisplay, clientsHandler)
    self.markable = MarkableBackend(self.messageListDisplay, clientsHandler)
    self.markableImportant = MarkableImportantBackend(self.messageListDisplay, clientsHandler)
    self.deleteMessage = DeleteMessageBackend(self.messageListDisplay, clientsHandler)
    self.spamable = SpamableBackend(self.messageListDisplay, clientsHandler)
    self.movableToFolder = MovableToFolderBackend(self.messageListDisplay, clientsHandler)
    self.creatableFolder = CreatableFolderBackend(clientsHandler)
    self.expandableThreads = ExpandableThreadsBackend(self.messageListDisplay, clientsHandler)
    self.loginBackend = LoginBackend(clientsHandler)
    self.archive = ArchiveMessageBackend(self.messageListDisplay, clientsHandler)
    self.multiAccount = MultiAccountBackend(clientsHandler)
  }

  @discardableResult
  open func getFeature(_ feature: FeatureID) -> Any {
    return FeatureRegistry().register(MessageListDisplayFeature.`get`, self.messageListDisplay).register(MarkableReadFeature.`get`, self.markable).register(MarkableImportantFeature.`get`, self.markableImportant).register(ExpandableThreadsFeature.`get`, self.expandableThreads).register(DeleteMessageFeature.`get`, self.deleteMessage).register(SpamableFeature.`get`, self.spamable).register(FolderNavigatorFeature.`get`, self.folderNavigator).register(MovableToFolderFeature.`get`, self.movableToFolder).register(CreatableFolderFeature.`get`, self.creatableFolder).register(YandexLoginFeature.`get`, self.loginBackend).register(YandexTeamLoginFeature.`get`, self.loginBackend).register(ArchiveMessageFeature.`get`, self.archive).register(MultiAccountFeature.`get`, self.multiAccount).register(MailRuLoginFeature.`get`, self.loginBackend).register(GoogleLoginFeature.`get`, self.loginBackend).register(OutlookLoginFeature.`get`, self.loginBackend).register(HotmailLoginFeature.`get`, self.loginBackend).register(RamblerLoginFeature.`get`, self.loginBackend).register(YahooLoginFeature.`get`, self.loginBackend).register(CustomMailServiceLoginFeature.`get`, self.loginBackend).`get`(feature)
  }

  @discardableResult
  open func dump(_ model: App) -> String {
    var s = "\(self.messageListDisplay.getCurrentFolder().name)\n"
    let threads = self.messageListDisplay.getMessageDTOList(3)
    for thread in threads {
      let threadSelector = thread.threadCount != nil ? "\(thread.threadCount!)v" : ""
      s += "\(reduced(thread.mid)) \(thread.sender)\t\(thread.unread ? "*" : "o")\t\(thread.subjectText)\t\(threadSelector)\t\(thread.timestamp)\n"
      let threadSize: Int32! = Message.fromMeta(thread).threadCounter
      if threadSize != nil {
        for message in self.clientsHandler.getCurrentClient().getMessagesInThread(thread.tid!, threadSize) {
          s += "\t\t\(reduced(message.mid)) \(message.sender)\t\(message.unread ? "*" : "o")\t\(message.subjectText)\t\(message.fid)\t\(thread.timestamp)\n"
        }
      }
    }
    return s
  }

}

