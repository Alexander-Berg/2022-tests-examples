// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/label-manager/create-label-component.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class CreateLabelComponent: MBTComponent {
    open override fun getComponentType(): String {
        return CreateLabelComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
        val manageableLabelModel = ManageableLabelFeature.`get`.castIfSupported(model)
        val manageableLabelApplication = ManageableLabelFeature.`get`.castIfSupported(application)
        if (manageableLabelModel != null && manageableLabelApplication != null) {
            val currentLabelNameModel = manageableLabelModel.getCurrentNewLabelName()
            val currentLabelNameApplication = manageableLabelApplication.getCurrentNewLabelName()
            assertStringEquals(currentLabelNameModel, currentLabelNameApplication, "Label name is incorrect")
            val currentColorIndexModel = manageableLabelModel.getCurrentNewLabelColorIndex()
            val currentColorIndexApplication = manageableLabelApplication.getCurrentNewLabelColorIndex()
            assertInt32Equals(currentColorIndexModel, currentColorIndexApplication, "Color index is incorrect")
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "CreateLabelComponent"
    }
}

public open class CreateLabelActions: MBTComponentActions {
    open override fun getActions(_model: App): YSArray<MBTAction> {
        val actions: YSArray<MBTAction> = mutableListOf()
        return actions
    }

}

