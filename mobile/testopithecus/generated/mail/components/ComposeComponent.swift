// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/compose-component.ts >>>

import Foundation

open class ComposeComponent: MBTComponent {
  public static let type: MBTComponentType = "ComposeComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let composeRecipientFieldsModel: ComposeRecipientFields! = ComposeRecipientFieldsFeature.`get`.castIfSupported(model)
    let composeRecipientFieldsApp: ComposeRecipientFields! = ComposeRecipientFieldsFeature.`get`.castIfSupported(application)
    if composeRecipientFieldsModel != nil && composeRecipientFieldsApp != nil {
      let isCcBccFromFieldsShownModel = (try composeRecipientFieldsModel.isExtendedRecipientFormShown())
      let isCcBccFromFieldsShownApp = (try composeRecipientFieldsApp.isExtendedRecipientFormShown())
      (try assertBooleanEquals(isCcBccFromFieldsShownModel, isCcBccFromFieldsShownApp, "Cc/Bcc/From fields showing status is incorrect"))
      if isCcBccFromFieldsShownModel {
        for field in YSArray(ComposeRecipientFieldType.to, ComposeRecipientFieldType.cc, ComposeRecipientFieldType.bcc) {
          let fieldValueModel = (try composeRecipientFieldsModel.getRecipientFieldValue(field))
          let fieldValueApp = (try composeRecipientFieldsApp.getRecipientFieldValue(field))
          (try assertInt32Equals(fieldValueModel.length, fieldValueApp.length, "Different number of yabbles in \(field) field"))
          for i in stride(from: 0, to: fieldValueModel.length, by: 1) {
            let fieldModel = fieldValueModel[i]
            let fieldApp = fieldValueModel[i]
            (try assertTrue(Yabble.matches(fieldModel, fieldApp), "Different yabble in field \(ComposeRecipientFieldType.to.toString()) at index \(i). Model: \(fieldModel.tostring()), app: \(fieldApp.tostring())"))
          }
        }
        let fromFieldValueModel = (try composeRecipientFieldsModel.getSenderFieldValue())
        let fromFieldValueApp = (try composeRecipientFieldsApp.getSenderFieldValue())
        (try assertStringEquals(fromFieldValueModel, fromFieldValueApp, "Incorrect From field value"))
      } else {
        let compactRecipientsFieldValueModel = (try composeRecipientFieldsModel.getCompactRecipientFieldValue())
        let compactRecipientsFieldValueApp = (try composeRecipientFieldsApp.getCompactRecipientFieldValue())
        (try assertStringEquals(compactRecipientsFieldValueModel, compactRecipientsFieldValueApp, "Incorrect compact recipients field value"))
      }
    }
    let toCcBccSuggestModel: ComposeRecipientSuggest! = ComposeRecipientSuggestFeature.`get`.castIfSupported(model)
    let toCcBccSuggestApp: ComposeRecipientSuggest! = ComposeRecipientSuggestFeature.`get`.castIfSupported(application)
    if toCcBccSuggestModel != nil && toCcBccSuggestApp != nil {
      let isToCcBccSuggestShownModel = (try toCcBccSuggestModel.isRecipientSuggestShown())
      let isToCcBccSuggestShownApp = (try toCcBccSuggestApp.isRecipientSuggestShown())
      (try assertBooleanEquals(isToCcBccSuggestShownModel, isToCcBccSuggestShownApp, "To/cc/bcc suggest showing state is incorrect"))
      if isToCcBccSuggestShownModel {
        let toCcBccSuggestsModel = (try toCcBccSuggestModel.getRecipientSuggest())
        let toCcBccSuggestsApp = (try toCcBccSuggestApp.getRecipientSuggest())
        (try assertInt32Equals(toCcBccSuggestsModel.length, toCcBccSuggestsApp.length, "Incorrect number of to/cc/bcc suggests"))
        for i in stride(from: 0, to: toCcBccSuggestsModel.length, by: 1) {
          let suggestModel = toCcBccSuggestsModel[i]
          let suggestApp = toCcBccSuggestsApp[i]
          (try assertTrue(Contact.matches(suggestModel, suggestApp), "Different From suggest at \(i) index. Model: \(suggestModel.tostring()), app: \(suggestApp.tostring())"))
        }
      }
    }
    let fromSuggestModel: ComposeSenderSuggest! = ComposeSenderSuggestFeature.`get`.castIfSupported(model)
    let fromSuggestApp: ComposeSenderSuggest! = ComposeSenderSuggestFeature.`get`.castIfSupported(application)
    if fromSuggestModel != nil && fromSuggestApp != nil {
      let isFromSuggestShownModel = (try fromSuggestModel.isSenderSuggestShown())
      let isFromSuggestShownApp = (try fromSuggestApp.isSenderSuggestShown())
      (try assertBooleanEquals(isFromSuggestShownModel, isFromSuggestShownApp, "From suggest showing state is incorrect"))
      if isFromSuggestShownModel {
        let fromSuggestsModel = (try fromSuggestModel.getSenderSuggest())
        let fromSuggestsApp = (try fromSuggestApp.getSenderSuggest())
        (try assertInt32Equals(fromSuggestsModel.length, fromSuggestsApp.length, "Incorrect number of From suggests"))
        for fromSuggestModel in fromSuggestsModel {
          (try assertTrue(fromSuggestsApp.includes(fromSuggestModel), "There is no \(fromSuggestModel) suggest in app"))
        }
      }
    }
    let subjectModel: ComposeSubject! = ComposeSubjectFeature.`get`.castIfSupported(model)
    let subjectApp: ComposeSubject! = ComposeSubjectFeature.`get`.castIfSupported(application)
    if subjectModel != nil && subjectApp != nil {
      let subjModel = (try subjectModel.getSubject())
      let subjApp = (try subjectApp.getSubject())
      (try assertStringEquals(subjModel, subjApp, "Incorrect subject"))
    }
    let bodyModel: ComposeBody! = ComposeBodyFeature.`get`.castIfSupported(model)
    let bodyApp: ComposeBody! = ComposeBodyFeature.`get`.castIfSupported(application)
    if bodyModel != nil && bodyApp != nil {
      let bModel = (try bodyModel.getBody())
      let bApp = (try bodyApp.getBody())
      (try assertStringEquals(bModel, bApp, "Incorrect body"))
    }
    (try TabBarComponent().assertMatches(model, application))
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return ComposeComponent.type
  }

}

