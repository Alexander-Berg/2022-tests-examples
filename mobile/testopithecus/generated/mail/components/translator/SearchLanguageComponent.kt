// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/translator/search-language-component.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class SearchLanguageComponent: MBTComponent {
    open override fun getComponentType(): MBTComponentType {
        return SearchLanguageComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
        val modelTranslatorLanguageListSearch = TranslatorLanguageListSearchFeature.`get`.castIfSupported(model)
        val appTranslatorLanguageListSearch = TranslatorLanguageListSearchFeature.`get`.castIfSupported(application)
        if (modelTranslatorLanguageListSearch != null && appTranslatorLanguageListSearch != null) {
            val modelSearchQuery = modelTranslatorLanguageListSearch.getSearchQuery()
            val appSearchQuery = appTranslatorLanguageListSearch.getSearchQuery()
            assertStringEquals(modelSearchQuery, appSearchQuery, "Search query is incorrect")
            val modelSearchTextFieldFocused = modelTranslatorLanguageListSearch.isSearchTextFieldFocused()
            val appSearchTextFieldFocused = appTranslatorLanguageListSearch.isSearchTextFieldFocused()
            assertBooleanEquals(modelSearchTextFieldFocused, appSearchTextFieldFocused, "Search text field focus status is incorrect")
            val modelSearchedLanguageList = modelTranslatorLanguageListSearch.getSearchedLanguageList()
            val appSearchedLanguageList = appTranslatorLanguageListSearch.getSearchedLanguageList()
            assertInt32Equals(modelSearchedLanguageList.size, appSearchedLanguageList.size, "Incorrect number of searched languages")
            for (modelLanguage in modelSearchedLanguageList) {
                assertTrue(appSearchedLanguageList.contains(modelLanguage), "Application list of searched languages not include ${modelLanguage}")
            }
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "SearchLanguageComponent"
    }
}

