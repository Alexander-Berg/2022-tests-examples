// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/translator/target-language-list-component.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class TargetLanguageListComponent: MBTComponent {
    open override fun getComponentType(): MBTComponentType {
        return TargetLanguageListComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
        val modelTranslatorLanguageList = TranslatorLanguageListFeature.`get`.castIfSupported(model)
        val appTranslatorLanguageList = TranslatorLanguageListFeature.`get`.castIfSupported(application)
        if (modelTranslatorLanguageList != null && appTranslatorLanguageList != null) {
            val modelCurrentTargetLanguage = modelTranslatorLanguageList.getCurrentTargetLanguage()
            val appCurrentTargetLanguage = appTranslatorLanguageList.getCurrentTargetLanguage()
            assertTrue(modelCurrentTargetLanguage == appCurrentTargetLanguage, "Current target language is incorrect")
            val modelDefaultTargetLanguage = modelTranslatorLanguageList.getDefaultTargetLanguage()
            val appDefaultTargetLanguage = appTranslatorLanguageList.getDefaultTargetLanguage()
            assertStringEquals(modelDefaultTargetLanguage, appDefaultTargetLanguage, "Default target language is incorrect")
            val modelRecentTargetLanguages = modelTranslatorLanguageList.getRecentTargetLanguages()
            val appRecentTargetLanguages = appTranslatorLanguageList.getRecentTargetLanguages()
            assertInt32Equals(modelRecentTargetLanguages.size, appRecentTargetLanguages.size, "Incorrect number of recent languages")
            for (modelLanguage in modelRecentTargetLanguages) {
                assertTrue(appRecentTargetLanguages.contains(modelLanguage), "Application list of recent target languages not include ${modelLanguage}")
            }
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: String = "TranslatorTargetLanguageListComponent"
    }
}

