// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/settings/filter-create-or-update-components.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class FilterCreateOrUpdateComponent: MBTComponent {
    open override fun getComponentType(): MBTComponentType {
        return FilterCreateOrUpdateComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
        val filterCreateModel = FilterCreateOrUpdateRuleFeature.`get`.castIfSupported(model)
        val filterCreateApp = FilterCreateOrUpdateRuleFeature.`get`.castIfSupported(application)
        if (filterCreateModel != null && filterCreateApp != null) {
            for (conditionField in mutableListOf(FilterConditionField.subject, FilterConditionField.from)) {
                val modelFieldValues = filterCreateModel.getConditionField(conditionField)
                val appFieldValues = filterCreateApp.getConditionField(conditionField)
                assertInt32Equals(modelFieldValues.size, appFieldValues.size, "Incorrect number of conditions in field ${conditionField}")
                for (value in appFieldValues) {
                    assertTrue(modelFieldValues.contains(value), "There is no value \"${value}\" in field \"${conditionField}\" in model")
                }
            }
            for (actionToggle in mutableListOf(FilterActionToggle.delete, FilterActionToggle.applyToExistingEmails, FilterActionToggle.markAsRead)) {
                val modelToggleValue = filterCreateModel.getActionToggle(actionToggle)
                val appToggleValue = filterCreateApp.getActionToggle(actionToggle)
                assertBooleanEquals(modelToggleValue, appToggleValue, "Incorrect state of toggle ${actionToggle}")
            }
            assertTrue(filterCreateModel.getApplyLabelValue() == filterCreateApp.getApplyLabelValue(), "Incorrect \"apply label\" value. Expected: ${filterCreateModel.getApplyLabelValue()}; Actual: ${filterCreateApp.getApplyLabelValue()}")
            assertTrue(filterCreateModel.getMoveToFolderValue() == filterCreateApp.getMoveToFolderValue(), "Incorrect \"move to folder\" value. Expected: ${filterCreateModel.getMoveToFolderValue()}; Actual: ${filterCreateApp.getMoveToFolderValue()}")
            assertTrue(filterCreateModel.getConditionLogic() == filterCreateApp.getConditionLogic(), "Incorrect conditional logic. Expected: ${filterCreateModel.getConditionLogic()}; Actual: ${filterCreateApp.getConditionLogic()}")
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: MBTComponentType = "FilterCreateOrUpdateComponent"
    }
}

public open class FilterConditionLogicComponent: MBTComponent {
    open override fun getComponentType(): MBTComponentType {
        return FilterConditionLogicComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
        val filterConditionLogicModel = FilterConditionLogicFeature.`get`.castIfSupported(model)
        val filterConditionLogicApp = FilterConditionLogicFeature.`get`.castIfSupported(application)
        if (filterConditionLogicModel != null && filterConditionLogicApp != null) {
            val modelLogicTypes = filterConditionLogicModel.getLogicTypes()
            val appLogicTypes = filterConditionLogicApp.getLogicTypes()
            assertInt32Equals(modelLogicTypes.size, appLogicTypes.size, "Incorrect number of logic types")
            for (appLogicType in appLogicTypes) {
                assertTrue(modelLogicTypes.contains(appLogicType), "There is no ${appLogicType} logic type in model")
            }
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: MBTComponentType = "FilterConditionLogicComponent"
    }
}

public open class FilterUpdateRuleMoreComponent: MBTComponent {
    open override fun getComponentType(): MBTComponentType {
        return FilterUpdateRuleMoreComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: MBTComponentType = "FilterUpdateRuleMoreComponent"
    }
}

