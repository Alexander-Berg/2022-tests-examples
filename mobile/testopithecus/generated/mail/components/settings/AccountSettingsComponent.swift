// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/settings/account-settings-component.ts >>>

import Foundation

open class AccountSettingsComponent: MBTComponent {
  public static let type: String = "AccountSettingsComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let accountSettingsModel: AccountSettings! = AccountSettingsFeature.`get`.castIfSupported(model)
    let accountSettingsApplication: AccountSettings! = AccountSettingsFeature.`get`.castIfSupported(application)
    let androidAccountSettingsModel: AndroidAccountSettings! = AndroidAccountSettingsFeature.`get`.castIfSupported(model)
    let androidAccountSettingsApplication: AndroidAccountSettings! = AndroidAccountSettingsFeature.`get`.castIfSupported(application)
    let iOSAccountSettingsModel: IosAccountSettings! = IosAccountSettingsFeature.`get`.castIfSupported(model)
    let iOSAccountSettingsApplication: IosAccountSettings! = IosAccountSettingsFeature.`get`.castIfSupported(application)
    if accountSettingsModel != nil && accountSettingsApplication != nil {
      (try assertBooleanEquals((try accountSettingsModel.isGroupBySubjectEnabled()), (try accountSettingsApplication.isGroupBySubjectEnabled()), "Group by subject status is incorrect"))
      (try assertBooleanEquals((try accountSettingsModel.isThemeEnabled()), (try accountSettingsApplication.isThemeEnabled()), "FolderList theme status is incorrect"))
      (try assertBooleanEquals((try accountSettingsModel.isSortingEmailsByCategoryEnabled()), (try accountSettingsApplication.isSortingEmailsByCategoryEnabled()), "Tabs status is incorrect"))
      (try assertStringEquals(self.setStandartSignatureIfNeeded((try accountSettingsModel.getSignature())), self.setStandartSignatureIfNeeded((try accountSettingsApplication.getSignature())), "Signature is incorrect"))
      let applicationFolderToNotificationOption = (try accountSettingsApplication.getFolderToNotificationOption())
      for folderName in applicationFolderToNotificationOption.keys() {
        (try assertStringEquals(applicationFolderToNotificationOption.`get`(folderName)!.toString(), (try accountSettingsModel.getNotificationOptionForFolder(folderName)).toString(), "Notification option for folder \(folderName) is incorrect"))
      }
    }
    if iOSAccountSettingsModel != nil && iOSAccountSettingsApplication != nil {
      (try assertStringEquals((try iOSAccountSettingsModel.getPushNotificationSound()).toString(), (try iOSAccountSettingsApplication.getPushNotificationSound()).toString(), "Notification sound is incorrect"))
      (try assertBooleanEquals((try iOSAccountSettingsModel.isPushNotificationForAllEnabled()), (try iOSAccountSettingsApplication.isPushNotificationForAllEnabled()), "Push notification for all status is incorrect"))
    }
    if androidAccountSettingsModel != nil && androidAccountSettingsApplication != nil {
      (try assertBooleanEquals((try androidAccountSettingsModel.isAccountUsingEnabled()), (try androidAccountSettingsApplication.isAccountUsingEnabled()), "Account using status is incorrect"))
      (try assertInt32Equals(signaturePlaceToInt32((try androidAccountSettingsModel.getPlaceForSignature())), signaturePlaceToInt32((try androidAccountSettingsApplication.getPlaceForSignature())), "Place for signature is incorrect"))
    }
  }

  @discardableResult
  private func setStandartSignatureIfNeeded(_ signature: String) -> String {
    return signature == "" ? "Sent from Yandex Mail for mobile" : signature.substr(-32)
  }

  @discardableResult
  open func getComponentType() -> String {
    return AccountSettingsComponent.type
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

open class AllAccountSettingsActions: MBTComponentActions {
  public let accountType: AccountType
  public init(_ accountType: AccountType) {
    self.accountType = accountType
  }

  @discardableResult
  open func getActions(_ model: App) -> YSArray<MBTAction> {
    let actions: YSArray<MBTAction> = YSArray()
    MultiAccountFeature.`get`.performIfSupported(model, {
      (mailboxModel) in
      actions.push(CloseAccountSettingsAction())
      actions.push(SwitchOnThreadingAction())
      actions.push(SwitchOffThreadingAction())
      actions.push(SwitchOnTabsAction(self.accountType))
      actions.push(SwitchOffTabsAction(self.accountType))
    })
    return actions
  }

}

