// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/settings/root-settings-component.ts >>>

import Foundation

open class RootSettingsComponent: MBTComponent {
  public static let type: String = "RootSettingsComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let rootSettingsModel: RootSettings! = RootSettingsFeature.`get`.castIfSupported(model)
    let rootSettingsApplication: RootSettings! = RootSettingsFeature.`get`.castIfSupported(application)
    let iOSRootSettingsModel: IOSRootSettings! = IOSRootSettingsFeature.`get`.castIfSupported(model)
    let iOSRootSettingsApplication: IOSRootSettings! = IOSRootSettingsFeature.`get`.castIfSupported(application)
    if iOSRootSettingsModel != nil && iOSRootSettingsApplication != nil {
      let generalSettingCellModel = (try iOSRootSettingsModel.isGeneralSettingsCellExists())
      let generalSettingCellApp = (try iOSRootSettingsApplication.isGeneralSettingsCellExists())
      (try assertBooleanEquals(generalSettingCellModel, generalSettingCellApp, "There is no General settings cell"))
    }
    let androidRootSettingsModel: AndroidRootSettings! = AndroidRootSettingsFeature.`get`.castIfSupported(model)
    let androidRootSettingsApplication: AndroidRootSettings! = AndroidRootSettingsFeature.`get`.castIfSupported(application)
    if androidRootSettingsModel != nil && androidRootSettingsApplication != nil {
      let addAccCellModel = (try androidRootSettingsModel.isAddAccountCellExists())
      let addAccCellApp = (try androidRootSettingsApplication.isAddAccountCellExists())
      (try assertBooleanEquals(addAccCellModel, addAccCellApp, "There is no Add account cell"))
    }
    if rootSettingsModel != nil && rootSettingsApplication != nil {
      let titleModel = (try rootSettingsModel.getTitle())
      let titleApp = (try rootSettingsApplication.getTitle())
      (try assertStringEquals(titleModel, titleApp, "Incorrect root settings title"))
      let accountsModel = (try rootSettingsModel.getAccounts())
      let accountsApplication = (try rootSettingsApplication.getAccounts())
      (try assertInt32Equals(accountsModel.length, accountsApplication.length, "There is different number of accounts"))
      for accountModel in accountsModel {
        (try assertTrue(accountsApplication.includes(accountModel), "There is no account with name \(accountModel)"))
      }
      let aboutCellModel = (try rootSettingsModel.isAboutCellExists())
      let aboutCellApp = (try rootSettingsApplication.isAboutCellExists())
      (try assertBooleanEquals(aboutCellModel, aboutCellApp, "There is no About cell"))
      let helpAndFeedbackCellModel = (try rootSettingsModel.isHelpAndFeedbackCellExists())
      let helpAndFeedbackCellApp = (try rootSettingsApplication.isHelpAndFeedbackCellExists())
      (try assertBooleanEquals(helpAndFeedbackCellModel, helpAndFeedbackCellApp, "There is no Help and feedback cell"))
    }
    (try TabBarComponent().assertMatches(model, application))
  }

  @discardableResult
  open func tostring() -> String {
    return "RootSettingsComponent"
  }

  @discardableResult
  open func getComponentType() -> String {
    return RootSettingsComponent.type
  }

}

open class AllRootSettingsActions: MBTComponentActions {
  @discardableResult
  open func getActions(_ model: App) -> YSArray<MBTAction> {
    let actions: YSArray<MBTAction> = YSArray()
    actions.push(CloseRootSettings())
    actions.push(OpenGeneralSettingsAction())
    actions.push(OpenSettingsAction())
    actions.push(OpenAboutSettingsAction())
    return actions
  }

}

