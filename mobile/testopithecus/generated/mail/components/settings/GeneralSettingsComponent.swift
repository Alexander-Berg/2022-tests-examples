// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/settings/general-settings-component.ts >>>

import Foundation

open class GeneralSettingsComponent: MBTComponent {
  public static let type: String = "GeneralSettingsComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let generalSettingsModel: GeneralSettings! = GeneralSettingsFeature.`get`.castIfSupported(model)
    let generalSettingsApplication: GeneralSettings! = GeneralSettingsFeature.`get`.castIfSupported(application)
    let androidGeneralSettingsModel: AndroidGeneralSettings! = AndroidGeneralSettingsFeature.`get`.castIfSupported(model)
    let androidGeneralSettingsApplication: AndroidGeneralSettings! = AndroidGeneralSettingsFeature.`get`.castIfSupported(application)
    let iOSGeneralSettingsModel: IosGeneralSettings! = IosGeneralSettingsFeature.`get`.castIfSupported(model)
    let iOSGeneralSettingsApplication: IosGeneralSettings! = IosGeneralSettingsFeature.`get`.castIfSupported(application)
    let pinModel: Pin! = PinFeature.`get`.castIfSupported(model)
    let pinApplication: Pin! = PinFeature.`get`.castIfSupported(application)
    if generalSettingsModel != nil && generalSettingsApplication != nil {
      (try assertStringEquals((try generalSettingsModel.getActionOnSwipe()).toString(), (try generalSettingsApplication.getActionOnSwipe()).toString(), "Action on swipe is incorrect"))
      if pinModel != nil && pinApplication != nil {
        (try assertBooleanEquals((try generalSettingsModel.isLoginUsingPasswordEnabled()), (try generalSettingsApplication.isLoginUsingPasswordEnabled()), "Pin status is incorrect"))
      }
      (try assertBooleanEquals((try generalSettingsModel.isCompactModeEnabled()), (try generalSettingsApplication.isCompactModeEnabled()), "Compact mode status is incorrect"))
      (try assertBooleanEquals((try generalSettingsModel.isDarkThemeEnabled()), (try generalSettingsApplication.isDarkThemeEnabled()), "Dark theme status is incorrect"))
      (try assertBooleanEquals((try generalSettingsModel.isVoiceControlEnabled()), (try generalSettingsApplication.isVoiceControlEnabled()), "Voice control status is incorrect"))
      (try assertStringEquals((try generalSettingsModel.getVoiceControlLanguage()).toString(), (try generalSettingsApplication.getVoiceControlLanguage()).toString(), "Voice control language is incorrect"))
      (try assertStringEquals((try generalSettingsModel.getCancelSendingEmail()).toString(), (try generalSettingsModel.getCancelSendingEmail()).toString(), "Cancel sending email option is incorrect"))
    }
    if androidGeneralSettingsModel != nil && androidGeneralSettingsApplication != nil {
      (try assertBooleanEquals((try androidGeneralSettingsModel.isDoNotDisturbModeEnabled()), (try androidGeneralSettingsApplication.isDoNotDisturbModeEnabled()), "Do not disturb mode status is incorrect"))
      (try assertBooleanEquals((try androidGeneralSettingsModel.isAdsEnabled()), (try androidGeneralSettingsModel.isAdsEnabled()), "Ads status is incorrect"))
    }
    if iOSGeneralSettingsModel != nil && iOSGeneralSettingsApplication != nil {
      (try assertBooleanEquals((try iOSGeneralSettingsModel.isIconBadgeForActiveAccountEnabled()), (try iOSGeneralSettingsApplication.isIconBadgeForActiveAccountEnabled()), "Icon badge for active account state is incorrect"))
      (try assertBooleanEquals((try iOSGeneralSettingsModel.isSystemThemeSyncEnabled()), (try iOSGeneralSettingsApplication.isSystemThemeSyncEnabled()), "System theme sync status is incorrect"))
      (try assertStringEquals((try iOSGeneralSettingsModel.getSelectedBrowser()).toString(), (try iOSGeneralSettingsApplication.getSelectedBrowser()).toString(), "Selected browser is incorrect"))
      (try assertBooleanEquals((try generalSettingsModel!.isSmartRepliesEnabled()), (try generalSettingsApplication!.isSmartRepliesEnabled()), "Smart replies status is incorrect"))
    }
    let modelTranslatorSettings: TranslatorSettings! = TranslatorSettingsFeature.`get`.castIfSupported(model)
    let appTranslatorSettings: TranslatorSettings! = TranslatorSettingsFeature.`get`.castIfSupported(application)
    if modelTranslatorSettings != nil && appTranslatorSettings != nil {
      let modelTranslatorEnabled = (try modelTranslatorSettings.isTranslatorEnabled())
      let appTranslatorEnabled = (try appTranslatorSettings.isTranslatorEnabled())
      (try assertBooleanEquals(modelTranslatorEnabled, appTranslatorEnabled, "Translator enable status is incorrect"))
      let modelIgnoredLanguageCellShown = (try modelTranslatorSettings.isIgnoredLanguageCellShown())
      let appIgnoredLanguageCellShown = (try appTranslatorSettings.isIgnoredLanguageCellShown())
      (try assertBooleanEquals(modelIgnoredLanguageCellShown, appIgnoredLanguageCellShown, "Ignored language cell show status is incorrect"))
      let modelDefaultTranslationLanguage = modelTranslatorSettings.getDefaultTranslationLanguageFromGeneralSettingsPage()
      let appDefaultTranslationLanguage = appTranslatorSettings.getDefaultTranslationLanguageFromGeneralSettingsPage()
      (try assertStringEquals(modelDefaultTranslationLanguage, appDefaultTranslationLanguage, "Default language is incorrect"))
    }
  }

  @discardableResult
  open func tostring() -> String {
    return "GeneralSettingsComponent"
  }

  @discardableResult
  open func getComponentType() -> String {
    return GeneralSettingsComponent.type
  }

}

open class AllGeneralSettingsActions: MBTComponentActions {
  @discardableResult
  open func getActions(_ model: App) -> YSArray<MBTAction> {
    let actions: YSArray<MBTAction> = YSArray()
    actions.push(CloseAboutSettingsAction())
    actions.push(ClearCacheAction())
    return actions
  }

}

