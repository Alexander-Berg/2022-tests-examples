// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/settings/filter-create-or-update-components.ts >>>

import Foundation

open class FilterCreateOrUpdateComponent: MBTComponent {
  public static let type: MBTComponentType = "FilterCreateOrUpdateComponent"
  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return FilterCreateOrUpdateComponent.type
  }

  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let filterCreateModel: FilterCreateOrUpdateRule! = FilterCreateOrUpdateRuleFeature.`get`.castIfSupported(model)
    let filterCreateApp: FilterCreateOrUpdateRule! = FilterCreateOrUpdateRuleFeature.`get`.castIfSupported(application)
    if filterCreateModel != nil && filterCreateApp != nil {
      for conditionField in YSArray(FilterConditionField.subject, FilterConditionField.from) {
        let modelFieldValues = (try filterCreateModel.getConditionField(conditionField))
        let appFieldValues = (try filterCreateApp.getConditionField(conditionField))
        (try assertInt32Equals(modelFieldValues.length, appFieldValues.length, "Incorrect number of conditions in field \(conditionField)"))
        for value in appFieldValues {
          (try assertTrue(modelFieldValues.includes(value), "There is no value \"\(value)\" in field \"\(conditionField)\" in model"))
        }
      }
      for actionToggle in YSArray(FilterActionToggle.delete, FilterActionToggle.applyToExistingEmails, FilterActionToggle.markAsRead) {
        let modelToggleValue = (try filterCreateModel.getActionToggle(actionToggle))
        let appToggleValue = (try filterCreateApp.getActionToggle(actionToggle))
        (try assertBooleanEquals(modelToggleValue, appToggleValue, "Incorrect state of toggle \(actionToggle)"))
      }
      (try assertTrue((try filterCreateModel.getApplyLabelValue()) == (try filterCreateApp.getApplyLabelValue()), "Incorrect \"apply label\" value. Expected: \(filterCreateModel.getApplyLabelValue()); Actual: \(filterCreateApp.getApplyLabelValue())"))
      (try assertTrue((try filterCreateModel.getMoveToFolderValue()) == (try filterCreateApp.getMoveToFolderValue()), "Incorrect \"move to folder\" value. Expected: \(filterCreateModel.getMoveToFolderValue()); Actual: \(filterCreateApp.getMoveToFolderValue())"))
      (try assertTrue((try filterCreateModel.getConditionLogic()) == (try filterCreateApp.getConditionLogic()), "Incorrect conditional logic. Expected: \(filterCreateModel.getConditionLogic()); Actual: \(filterCreateApp.getConditionLogic())"))
    }
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

open class FilterConditionLogicComponent: MBTComponent {
  public static let type: MBTComponentType = "FilterConditionLogicComponent"
  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return FilterConditionLogicComponent.type
  }

  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let filterConditionLogicModel: FilterConditionLogic! = FilterConditionLogicFeature.`get`.castIfSupported(model)
    let filterConditionLogicApp: FilterConditionLogic! = FilterConditionLogicFeature.`get`.castIfSupported(application)
    if filterConditionLogicModel != nil && filterConditionLogicApp != nil {
      let modelLogicTypes = (try filterConditionLogicModel.getLogicTypes())
      let appLogicTypes = (try filterConditionLogicApp.getLogicTypes())
      (try assertInt32Equals(modelLogicTypes.length, appLogicTypes.length, "Incorrect number of logic types"))
      for appLogicType in appLogicTypes {
        (try assertTrue(modelLogicTypes.includes(appLogicType), "There is no \(appLogicType) logic type in model"))
      }
    }
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

open class FilterUpdateRuleMoreComponent: MBTComponent {
  public static let type: MBTComponentType = "FilterUpdateRuleMoreComponent"
  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return FilterUpdateRuleMoreComponent.type
  }

  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

