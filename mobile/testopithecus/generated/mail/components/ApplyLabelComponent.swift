// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/apply-label-component.ts >>>

import Foundation

open class ApplyLabelComponent: MBTComponent {
  public static let type: MBTComponentType = "AddLabelComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let modelApplyLabel: ApplyLabel! = ApplyLabelFeature.`get`.castIfSupported(model)
    let appApplyLabel: ApplyLabel! = ApplyLabelFeature.`get`.castIfSupported(application)
    if modelApplyLabel == nil || appApplyLabel == nil {
      return
    }
    let modelLabelList = (try modelApplyLabel.getLabelList())
    let appLabelList = (try appApplyLabel.getLabelList())
    for label in modelLabelList {
      (try assertTrue(appLabelList.includes(label), "There is no label \(label)"))
    }
    let modelSelectedLabels = (try modelApplyLabel.getSelectedLabels())
    let appSelectedLabels = (try appApplyLabel.getSelectedLabels())
    for label in modelSelectedLabels {
      (try assertTrue(appSelectedLabels.includes(label), "Label \(label) is not selected"))
    }
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return ApplyLabelComponent.type
  }

}

