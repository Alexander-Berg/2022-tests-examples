// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/context-menu-component.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class ContextMenuComponent: MBTComponent {
    open override fun assertMatches(model: App, application: App): Unit {
        val modelContextMenu = ContextMenuFeature.`get`.castIfSupported(model)
        val appContextMenu = ContextMenuFeature.`get`.castIfSupported(application)
        if (modelContextMenu == null || appContextMenu == null) {
            return
        }
        val modelAvailableActions = modelContextMenu.getAvailableActions()
        val appAvailableActions = appContextMenu.getAvailableActions()
        if (appAvailableActions.contains(MessageActionItem.replyAll) && !modelAvailableActions.contains(MessageActionItem.replyAll)) {
            appAvailableActions.splice(appAvailableActions.lastIndexOf(MessageActionItem.replyAll), 1)
        }
        if (appAvailableActions.contains(MessageActionItem.spam) && !modelAvailableActions.contains(MessageActionItem.spam)) {
            appAvailableActions.splice(appAvailableActions.lastIndexOf(MessageActionItem.spam), 1)
        }
        if (!appAvailableActions.contains(MessageActionItem.print) && modelAvailableActions.contains(MessageActionItem.print)) {
            modelAvailableActions.splice(modelAvailableActions.lastIndexOf(MessageActionItem.print), 1)
        }
        assertInt32Equals(modelAvailableActions.size, appAvailableActions.size, "Incorrect number of operations, model=${modelAvailableActions}, app=${appAvailableActions}")
        for (modelAction in modelAvailableActions) {
            assertTrue(appAvailableActions.contains(modelAction), "There is no action ${modelAction}")
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    open override fun getComponentType(): MBTComponentType {
        return ContextMenuComponent.type
    }

    companion object {
        @JvmStatic val type: MBTComponentType = "ContextMenuComponent"
    }
}

