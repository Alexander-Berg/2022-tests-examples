// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/message-component.ts >>>

import Foundation

open class MessageComponent: MBTComponent {
  public static let type: String = "MessageComponent"
  @discardableResult
  open func getComponentType() -> String {
    return MessageComponent.type
  }

  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let messageNavigatorModel: MessageViewer! = MessageViewerFeature.`get`.castIfSupported(model)
    let messageNavigatorApp: MessageViewer! = MessageViewerFeature.`get`.castIfSupported(application)
    let androidMessageNavigatorModel: MessageViewerAndroid! = MessageViewerAndroidFeature.`get`.castIfSupported(model)
    let androidMessageNavigatorApp: MessageViewerAndroid! = MessageViewerAndroidFeature.`get`.castIfSupported(application)
    if messageNavigatorModel != nil && messageNavigatorApp != nil {
      let openedMessageInModel = (try messageNavigatorModel.getOpenedMessage())
      let openedMessageInApp = (try messageNavigatorApp.getOpenedMessage())
      (try assertTrue(FullMessage.matches(openedMessageInModel, openedMessageInApp), "Opened messages are different, model: \(openedMessageInModel.tostring()), actual: \(openedMessageInApp.tostring())"))
      let messageLabelsInModel = (try messageNavigatorModel.getLabels())
      let messageLabelsInApp = (try messageNavigatorApp.getLabels())
      for label in messageLabelsInModel.values() {
        (try assertBooleanEquals(true, messageLabelsInApp.has(label), "Missing label: \(label). Model: \(messageLabelsInModel.values()). App: \(messageLabelsInApp.values())"))
      }
      (try assertTrue(messageLabelsInModel.size == messageLabelsInApp.size, "Labels are different. Model: \(messageLabelsInModel.values()). App: \(messageLabelsInApp.values())"))
    }
    let modelTranslatorBar: TranslatorBar! = TranslatorBarFeature.`get`.castIfSupported(model)
    let appTranslatorBar: TranslatorBar! = TranslatorBarFeature.`get`.castIfSupported(application)
    if modelTranslatorBar != nil && appTranslatorBar != nil {
      let modelTranslatorBarShown = (try modelTranslatorBar.isTranslatorBarShown())
      let appTranslatorBarShown = (try appTranslatorBar.isTranslatorBarShown())
      (try assertBooleanEquals(modelTranslatorBarShown, appTranslatorBarShown, "Translator bar show status is incorrect"))
      if appTranslatorBarShown {
        var modelTargetLanguage = (try modelTranslatorBar.getTargetLanguage()).lowercased()
        let appTargetLanguage = (try appTranslatorBar.getTargetLanguage()).lowercased()
        var modelSourceLanguage = (try modelTranslatorBar.getSourceLanguage()).lowercased()
        let appSourceLanguage = (try appTranslatorBar.getSourceLanguage()).lowercased()
        if androidMessageNavigatorApp != nil && androidMessageNavigatorModel != nil {
          let languageMessage = (try androidMessageNavigatorModel.getDefaultSourceLanguage()).lowercased()
          modelTargetLanguage = self.setLanguageInModelIfAndroid(modelTargetLanguage, appTargetLanguage, languageMessage)
          modelSourceLanguage = self.setLanguageInModelIfAndroid(modelSourceLanguage, appSourceLanguage, languageMessage)
          if appSourceLanguage != languageMessage {
            modelSourceLanguage = appSourceLanguage
          } else if modelSourceLanguage == modelTargetLanguage {
            modelSourceLanguage = TranslatorLanguageName.select
          }
        }
        (try assertStringEquals(modelTargetLanguage, appTargetLanguage, "Translator bar source language is incorrect"))
        (try assertStringEquals(modelSourceLanguage, appSourceLanguage, "Translator bar source language is incorrect"))
        let modelSubmitButtonLabel = (try modelTranslatorBar.getSubmitButtonLabel())
        let appSubmitButtonLabel = (try appTranslatorBar.getSubmitButtonLabel())
        (try assertStringEquals(modelSubmitButtonLabel, appSubmitButtonLabel, "Submit button label is incorrect"))
      }
    }
    let modelQuickReply: QuickReply! = QuickReplyFeature.`get`.castIfSupported(model)
    let appQuickReply: QuickReply! = QuickReplyFeature.`get`.castIfSupported(application)
    if modelQuickReply != nil && appQuickReply != nil {
      let modelQuickReplyShown = (try modelQuickReply.isQuickReplyShown())
      let appQuickReplyShown = (try appQuickReply.isQuickReplyShown())
      (try assertBooleanEquals(modelQuickReplyShown, appQuickReplyShown, "Quick reply show status is incorrect"))
      if appQuickReplyShown {
        let modelTextFieldValue = (try modelQuickReply.getTextFieldValue())
        let appTextFieldValue = (try appQuickReply.getTextFieldValue())
        (try assertStringEquals(modelTextFieldValue, appTextFieldValue, "Quick reply text field value is incorrect"))
        if modelTextFieldValue != "" {
          let modelQuickReplyTextFieldExpanded = (try modelQuickReply.isQuickReplyTextFieldExpanded())
          let appQuickReplyTextFieldExpanded = (try appQuickReply.isQuickReplyTextFieldExpanded())
          (try assertBooleanEquals(modelQuickReplyTextFieldExpanded, appQuickReplyTextFieldExpanded, "Quick reply text field expand status is incorrect"))
        }
        let modelSendButtonEnabled = (try modelQuickReply.isSendButtonEnabled())
        let appSendButtonEnabled = (try appQuickReply.isSendButtonEnabled())
        (try assertBooleanEquals(modelSendButtonEnabled, appSendButtonEnabled, "Send button enable status is incorrect"))
        let modelSmartReply: SmartReply! = SmartReplyFeature.`get`.castIfSupported(model)
        let appSmartReply: SmartReply! = SmartReplyFeature.`get`.castIfSupported(application)
        if modelSmartReply != nil && appSmartReply != nil {
          let modelSmartRepliesShown = (try modelSmartReply.isSmartRepliesShown())
          let appSmartRepliesShown = (try appSmartReply.isSmartRepliesShown())
          (try assertBooleanEquals(modelSmartRepliesShown, appSmartRepliesShown, "Smart replies shown status is incorrect"))
          if modelSmartRepliesShown {
            let modelSmartReplies = (try modelSmartReply.getSmartReplies())
            let appSmartReplies = (try appSmartReply.getSmartReplies())
            (try assertInt32Equals(modelSmartReplies.length, appSmartReplies.length, "Incorrect number of smart replies"))
            for modelSmartReply in modelSmartReplies {
              (try assertTrue(appSmartReplies.includes(modelSmartReply), "There is no smart reply with label \(modelSmartReply)"))
            }
          }
        }
      }
    }
    (try TabBarComponent().assertMatches(model, application))
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

  @discardableResult
  private func setLanguageInModelIfAndroid(_ modelLanguage: LanguageName, _ appLanguage: LanguageName, _ messageLanguage: LanguageName) -> LanguageName {
    return modelLanguage == "auto" && appLanguage != "auto" ? messageLanguage : modelLanguage
  }

}

open class AllMessageActions: MBTComponentActions {
  @discardableResult
  open func getActions(_ _model: App) -> YSArray<MBTAction> {
    let actions: YSArray<MBTAction> = YSArray()
    actions.push(MessageViewBackToMailListAction())
    return actions
  }

}

