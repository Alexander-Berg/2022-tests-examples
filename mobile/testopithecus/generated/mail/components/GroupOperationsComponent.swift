// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/group-operations-component.ts >>>

import Foundation

open class GroupOperationsComponent: MBTComponent {
  public static let type: MBTComponentType = "GroupOperationsComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let groupModeModel: GroupMode! = GroupModeFeature.`get`.castIfSupported(model)
    let groupModeApplication: GroupMode! = GroupModeFeature.`get`.castIfSupported(application)
    if groupModeModel != nil && groupModeApplication != nil {
      let selectedMessagesOrders = (try groupModeModel.getSelectedMessages()).values()
      for selectedMessageOrder in selectedMessagesOrders {
        (try assertBooleanEquals(true, (try groupModeApplication.getSelectedMessages()).has(selectedMessageOrder), "Message with order \(selectedMessageOrder) is not selected"))
      }
      (try assertBooleanEquals((try groupModeModel.isInGroupMode()), (try groupModeApplication.isInGroupMode()), "Group mode status is incorrect"))
      (try assertInt32Equals((try groupModeModel.getNumberOfSelectedMessages()), (try groupModeApplication.getNumberOfSelectedMessages()), "Number of selected messages is incorrect"))
    }
    (try TabBarComponent().assertMatches(model, application))
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return GroupOperationsComponent.type
  }

}

open class AllGroupOperationsActions: MBTComponentActions {
  @discardableResult
  open func getActions(_ _model: App) -> YSArray<MBTAction> {
    let actions: YSArray<MBTAction> = YSArray()
    actions.push(GroupModeMarkAsReadAction())
    actions.push(GroupModeMarkAsUnreadAction())
    RotatableAction.addActions(actions)
    return actions
  }

}

open class NotImplementedInClientsActions: MBTComponentActions {
  @discardableResult
  open func getActions(_ model: App) -> YSArray<MBTAction> {
    let actions: YSArray<MBTAction> = YSArray()
    actions.push(GroupModeDeleteAction())
    actions.push(GroupModeMarkImportantAction())
    actions.push(GroupModeMarkUnimportantAction())
    actions.push(GroupModeMarkSpamAction())
    actions.push(GroupModeMarkNotSpamAction())
    FolderNavigatorFeature.`get`.performIfSupported(model, {
      (mailboxModel) in
      var folders: YSArray<FolderName>
      do {
        folders = keysArray((try mailboxModel.getFoldersList()))
      } catch {
        let e = error
        folders = YSArray()
      }
      for folder in folders {
        actions.push(GroupModeMoveToFolderAction(folder))
      }
    })
    let groupMode: GroupMode! = GroupModeFeature.`get`.castIfSupported(model)
    if groupMode != nil {
      let selectedMessages: YSSet<Int32> = resolveThrow({
        () in
        (try groupMode.getSelectedMessages())
      }
, YSSet<Int32>())
      if selectedMessages.size > 0 {
        for i in selectedMessages.values() {
          actions.push(GroupModeUnselectMessageAction(i))
        }
      }
    }
    actions.push(GroupModeUnselectAllAction())
    return actions
  }

}

