// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/context-menu-component.ts >>>

import Foundation

open class ContextMenuComponent: MBTComponent {
  public static let type: MBTComponentType = "ContextMenuComponent"
  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let modelContextMenu: ContextMenu! = ContextMenuFeature.`get`.castIfSupported(model)
    let appContextMenu: ContextMenu! = ContextMenuFeature.`get`.castIfSupported(application)
    if modelContextMenu == nil || appContextMenu == nil {
      return
    }
    let modelAvailableActions = (try modelContextMenu.getAvailableActions())
    let appAvailableActions = (try appContextMenu.getAvailableActions())
    if appAvailableActions.includes(MessageActionItem.replyAll) && !modelAvailableActions.includes(MessageActionItem.replyAll) {
      appAvailableActions.splice(appAvailableActions.lastIndexOf(MessageActionItem.replyAll), 1)
    }
    if appAvailableActions.includes(MessageActionItem.spam) && !modelAvailableActions.includes(MessageActionItem.spam) {
      appAvailableActions.splice(appAvailableActions.lastIndexOf(MessageActionItem.spam), 1)
    }
    if !appAvailableActions.includes(MessageActionItem.print) && modelAvailableActions.includes(MessageActionItem.print) {
      modelAvailableActions.splice(modelAvailableActions.lastIndexOf(MessageActionItem.print), 1)
    }
    (try assertInt32Equals(modelAvailableActions.length, appAvailableActions.length, "Incorrect number of operations, model=\(modelAvailableActions), app=\(appAvailableActions)"))
    for modelAction in modelAvailableActions {
      (try assertTrue(appAvailableActions.includes(modelAction), "There is no action \(modelAction)"))
    }
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return ContextMenuComponent.type
  }

}

