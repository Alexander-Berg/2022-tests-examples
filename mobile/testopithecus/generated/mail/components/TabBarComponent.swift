// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/tab-bar-component.ts >>>

import Foundation

open class TabBarComponent: MBTComponent {
  public static let type: MBTComponentType = "TabBarComponent"
  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return TabBarComponent.type
  }

  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let tabBarModel: TabBar! = TabBarFeature.`get`.castIfSupported(model)
    let tabBarApplication: TabBar! = TabBarFeature.`get`.castIfSupported(application)
    if tabBarModel != nil && tabBarApplication != nil {
      let modelTabBarShown = (try tabBarModel.isShown())
      let appTabBarShown = (try tabBarApplication.isShown())
      (try assertBooleanEquals(modelTabBarShown, appTabBarShown, "Tab bar showing state is incorrect"))
      if modelTabBarShown {
        let modelTabBarCurrentItem = (try tabBarModel.getCurrentItem())
        let appTabBarCurrentItem = (try tabBarApplication.getCurrentItem())
        (try assertStringEquals(modelTabBarCurrentItem.toString(), appTabBarCurrentItem.toString(), "Current tabbar item is incorrect"))
        let tabBarIOSModel: TabBarIOS! = TabBarIOSFeature.`get`.castIfSupported(model)
        let tabBarIOSApplication: TabBarIOS! = TabBarIOSFeature.`get`.castIfSupported(application)
        if tabBarIOSModel != nil && tabBarIOSApplication != nil {
          let modelTabBarItems = (try tabBarIOSModel.getItems())
          let appTabBarItems = (try tabBarIOSApplication.getItems())
          (try assertInt32Equals(modelTabBarItems.length, appTabBarItems.length, "Incorrect number of tabbar items"))
          for appTabBarItem in appTabBarItems {
            (try assertTrue(modelTabBarItems.includes(appTabBarItem), "There is no \(appTabBarItem) in model"))
          }
          let modelTabBarCalendarDate = (try tabBarIOSModel.getCalendarIconDate())
          let appTabBarCalendarDate = (try tabBarIOSApplication.getCalendarIconDate())
          (try assertStringEquals(modelTabBarCalendarDate, appTabBarCalendarDate, "Incorrect calendar date label"))
        }
        let tabBarAndroidModel: TabBarAndroid! = TabBarAndroidFeature.`get`.castIfSupported(model)
        let tabBarAndroidApplication: TabBarAndroid! = TabBarAndroidFeature.`get`.castIfSupported(application)
        if tabBarAndroidModel != nil && tabBarAndroidApplication != nil {
          let modelTabBarItems = (try tabBarAndroidModel.getItems())
          let appTabBarItems = (try tabBarAndroidApplication.getItems())
          (try assertInt32Equals(modelTabBarItems.length, appTabBarItems.length, "Incorrect number of tabbar items"))
          for appTabBarItem in appTabBarItems {
            (try assertTrue(modelTabBarItems.includes(appTabBarItem), "There is no \(appTabBarItem) in model"))
          }
        }
      }
    }
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

