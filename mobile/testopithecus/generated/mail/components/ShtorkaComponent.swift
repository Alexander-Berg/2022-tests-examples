// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/shtorka-component.ts >>>

import Foundation

open class ShtorkaComponent: MBTComponent {
  public static let type: MBTComponentType = "ShtorkaComponent"
  @discardableResult
  open func getComponentType() -> MBTComponentType {
    return ShtorkaComponent.type
  }

  @discardableResult
  open func assertMatches(_ model: App, _ application: App) throws -> Void {
    let shtorkaModel: Shtorka! = ShtorkaFeature.`get`.castIfSupported(model)
    let shtorkaApplication: Shtorka! = ShtorkaFeature.`get`.castIfSupported(application)
    if shtorkaModel != nil && shtorkaApplication != nil {
      let modelBannerType: ShtorkaBannerType! = (try shtorkaModel.getShownBannerType())
      let appBannerType: ShtorkaBannerType! = (try shtorkaApplication.getShownBannerType())
      (try assertTrue(modelBannerType == appBannerType, "Shtorka banner type is incorrect"))
    }
    let shtorkaIOSModel: ShtorkaIOS! = ShtorkaIOSFeature.`get`.castIfSupported(model)
    let shtorkaIOSApplication: ShtorkaIOS! = ShtorkaIOSFeature.`get`.castIfSupported(application)
    if shtorkaIOSModel != nil && shtorkaIOSApplication != nil {
      let modelShtorkaItems = (try shtorkaIOSModel.getItems())
      let appShtorkaItems = (try shtorkaIOSApplication.getItems())
      (try assertInt32Equals(modelShtorkaItems.length, appShtorkaItems.length, "Incorrect number of shtorka items"))
      for appShtorkaItem in appShtorkaItems {
        (try assertTrue(modelShtorkaItems.includes(appShtorkaItem), "There is no \(appShtorkaItem) in model"))
      }
    }
    let shtorkaAndroidModel: ShtorkaAndroid! = ShtorkaAndroidFeature.`get`.castIfSupported(model)
    let shtorkaAndroidApplication: ShtorkaAndroid! = ShtorkaAndroidFeature.`get`.castIfSupported(application)
    if shtorkaAndroidModel != nil && shtorkaAndroidApplication != nil {
    }
  }

  @discardableResult
  open func tostring() -> String {
    return self.getComponentType()
  }

}

