// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM client/web-api-request.ts >>>

import Foundation

open class WebApiRequest {
  private var mailHost: String = ""
  public init(_ accountType: AccountType2) {
    switch accountType {
      case AccountType2.Yandex:
        self.mailHost = "https://mail.yandex.ru"
      case AccountType2.YandexTeam:
        self.mailHost = "https://mail.yandex-team.ru"
      default:
        fatalError("Не удалось распознать хост для включения настройки IMAP")
    }
  }

  @discardableResult
  open func enableImap(_ network: SyncNetwork, _ token: String!) throws -> Void {
    let result = network.syncExecuteWithRetries(3, self.mailHost, SetImapRequest(), token)
    if result.isError() {
      fatalError("Ошибка при включении настройки IMAP: \(result.getError().message)")
    }
  }

}

fileprivate class SetImapRequest: BaseNetworkRequest {
  public override init() {
    super.init()
  }

  @discardableResult
  public override func encoding() -> RequestEncoding {
    return JsonRequestEncoding()
  }

  @discardableResult
  public override func method() -> NetworkMethod {
    return NetworkMethod.post
  }

  @discardableResult
  public override func params() -> MapJSONItem {
    return MapJSONItem().put("models", ArrayJSONItem().add(MapJSONItem().putString("name", "do-settings").put("params", MapJSONItem().putString("params", "{\"enable_imap\":true,\"fid\":[]}")).put("meta", MapJSONItem().putInt32("requestAttempt", 1))))
  }

  @discardableResult
  public override func targetPath() -> String {
    return "web-api/models/liza1"
  }

  @discardableResult
  public override func urlExtra() -> MapJSONItem {
    let parent = super.urlExtra()
    parent.putString("_m", "do-settings")
    return parent
  }

}

