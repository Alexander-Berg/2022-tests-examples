// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/filters-tests.ts >>>

import Foundation

open class ValidateFiltersListPt1Test: RegularYandexMailTestBase {
  public init() {
    super.init("Filters. Просмотр правил обработки писем (часть 1)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(12800).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.from, "aaa")).setCondition(FilterCondition(FilterConditionKey.from, "bbb")).setLogic(FilterLogicType.and).setAction(FilterAction(FilterActionType.markRead)).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.from, "ccc")).setAction(FilterAction(FilterActionType.delete)).setEnable(false).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "ddd")).setAction(FilterAction(FilterActionType.markRead)).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "eee")).setCondition(FilterCondition(FilterConditionKey.subject, "fff")).setLogic(FilterLogicType.or).setAction(FilterAction(FilterActionType.delete)).setEnable(false).build())
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenAccountSettingsAction(0)).then(AccountSettingsOpenFiltersAction()).then(AssertSnapshotAction(self.description))
  }

}

open class ValidateFiltersListPt2Test: RegularYandexMailTestBase {
  private var folderName: FolderName = "Folder"
  private var labelName: LabelName = "Label"
  public init() {
    super.init("Filters. Просмотр правил обработки писем (часть 2)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(12800).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder(self.folderName).createLabel(LabelData(self.labelName)).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "ggg")).setCondition(FilterCondition(FilterConditionKey.from, "hhh")).setLogic(FilterLogicType.and).setAction(FilterAction(FilterActionType.applyLabel, self.labelName)).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "iii")).setCondition(FilterCondition(FilterConditionKey.from, "jjj")).setLogic(FilterLogicType.or).setAction(FilterAction(FilterActionType.moveToFolder, self.folderName)).setEnable(false).build()).createFilter(FilterRuleBuilder().setLetter(FilterLetterType.clearspam).setCondition(FilterCondition(FilterConditionKey.cc, "kkk")).setAction(FilterAction(FilterActionType.markRead)).build()).createFilter(FilterRuleBuilder().setAction(FilterAction(FilterActionType.delete)).setEnable(false).build())
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenAccountSettingsAction(0)).then(AccountSettingsOpenFiltersAction()).then(AssertSnapshotAction(self.description))
  }

}

