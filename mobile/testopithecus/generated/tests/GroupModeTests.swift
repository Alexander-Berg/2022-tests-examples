// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/group-mode-tests.ts >>>

import Foundation

open class GroupMarkAsReadDifferentMessagesTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометить прочитанное и новое непрочитанное письмо прочитанными")
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(MarkAsRead(0)).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkAsReadAction())
  }

}

open class CanOpenMessageAfterGroupActionTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Открыть письмо на просмотр после выхода из группового режима")
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(MarkAsRead(0)).then(MarkAsRead(1)).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkAsUnreadAction()).then(OpenMessageAction(0))
  }

}

open class GroupDeleteMessagesTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Удаление выбранных писем из папки Черновики")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6220).androidCase(6475)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.draft).nextMessage("subj1").nextMessage("subj2").nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.draft)).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeDeleteAction())
  }

}

open class GroupModeMarkImportantTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка выбранных писем Важными")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(27).androidCase(6491)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(GroupModeInitialSelectAction(1)).then(GroupModeMarkImportantAction())
  }

}

open class GroupModeUnmarkImportantTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Снятие метки Важное")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6238).androidCase(6492)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("UserFolder").switchFolder("UserFolder").nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeMarkImportantAction()).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeMarkUnimportantAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
  }

}

open class GroupModeMarkLabelTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Добавление пользовательской метки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6245).androidCase(6499)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createLabel(LabelData("label1")).createLabel(LabelData("label2")).nextMessage("subj1").nextThread("thread2", 3).nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeApplyLabelsAction(YSArray("label1"))).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
  }

}

open class GroupModeUnmarkLabelTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Снятие пользовательской метки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6248).androidCase(6502)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label2"))).withSubject("subj2")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"))).withSubject("subj3"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("label1")).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeRemoveLabelsAction(YSArray("label1"))).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class GroupModeMarkReadMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка писем прочитанным в метке Важные")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6513).androidCase(6512)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkImportantAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkAsReadAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class GroupModeMarkUnreadMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка писем непрочитанным в пользовательской метке")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6514).androidCase(6515)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label2"))).withSubject("subj2")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"))).withSubject("subj3"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("label1")).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkAsReadAction()).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(0)).then(GroupModeMarkAsUnreadAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class GroupModeMarkSpamTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение выбранных писем в Спам")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6233).androidCase(6070)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(2)).then(GroupModeMarkSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class GroupModeArchiveThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение выбранных тредов в Архив")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6230).androidCase(6484)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 2).nextThread("thread2", 3).nextThread("thread3", 2)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(2)).then(GroupModeSelectAction(1)).then(GroupModeArchiveAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class GroupModeArchiveMessagesTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение выбранных писем в Архив из пользовательской метки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6229).androidCase(6483)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label2"))).withSubject("subj2")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"))).withSubject("subj3"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("label1")).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(0)).then(GroupModeArchiveAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class GroupModeCancelSelectionTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Выход из режима групповых операций тапом на Отмена")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6508).androidCase(6509)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject1").nextMessage("subject2").nextMessage("subject3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(2)).then(GroupModeSelectAction(1)).then(GroupModeUnselectAllAction())
  }

}

open class GroupModeSelectAllTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Выделить все письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6510).androidCase(6511)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject1").nextMessage("subject2").nextMessage("subject3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAllAction())
  }

}

open class GroupModeMarkReadThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка выбранных писем прочитанными")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6215).androidCase(6470)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject1").nextMessage("subject2").nextMessage("subject3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeMarkAsReadAction())
  }

}

open class GroupMarkAsReadMessagesTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка выбранных писем непрочитанными")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6216).androidCase(6471)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("folder").switchFolder("folder").nextMessage("subj1").nextMessage("subj2")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("folder")).then(MarkAsRead(0)).then(MarkAsRead(1)).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkAsUnreadAction())
  }

}

open class GroupModeMarkUnreadThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка всех писем выделенного треда непрочитанными")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6516).androidCase(6517)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 5).nextThread("thread2", 7).nextThread("thread3", 2)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(MarkAsRead(0)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsUnreadAction())
  }

}

open class GroupModeDeleteThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Удаление треда все письма которого лежат в папке Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6518).androidCase(6519)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 2).nextThread("thread2", 7).nextThread("thread3", 1)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeDeleteAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class GroupModeMarkSpamThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение в Спам треда с письмами из разных папок")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6234).androidCase(6488)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 2).nextThread("thread2", 7).nextThread("thread3", 1).createFolder("AutotestFolder")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(1)).then(MessageViewContextMenuMoveToFolderAction("AutotestFolder")).then(MessageViewBackToMailListAction()).then(GroupModeInitialSelectAction(1)).then(GroupModeMarkSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class GroupModeUnmarkSpamTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометить письмо как не спам")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6520).androidCase(6535)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.spam).nextMessage("subject1").nextMessage("subject2").nextMessage("subject3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeMarkNotSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class GroupModeMoveThreadsToInboxTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение тредов из пользовательской папки во Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6505).androidCase(6506)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("AutoTestFolder").switchFolder("AutoTestFolder").nextThread("thread1", 2).nextThread("thread2", 3).nextThread("thread3", 4)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("AutoTestFolder")).then(GroupModeInitialSelectAction(1)).then(GroupModeMoveToFolderAction(DefaultFolderName.inbox)).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class GroupModeMoveMessageToUserFolderFromInboxTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение писем в другую папку")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6243).androidCase(6497)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject1").nextMessage("subject2").nextMessage("subject3").createFolder("AutotestFolder")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(0)).then(GroupModeMoveToFolderAction("AutotestFolder")).then(OpenFolderListAction()).then(GoToFolderAction("AutotestFolder"))
  }

}

open class GroupModeInitialSelectTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Переход в режим групповых операций")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(3).androidCase(6068)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject1").nextMessage("subject2").nextMessage("subject3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2))
  }

}

open class GroupModeExitByTapOnSelectedMessagesTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Выход из режима групповых операций тапом на выделенные письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(4).androidCase(6069)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject1").nextMessage("subject2").nextMessage("subject3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeSelectAction(0)).then(GroupModeUnselectMessageAction(2)).then(GroupModeUnselectMessageAction(0)).then(GroupModeUnselectMessageAction(1))
  }

}

open class GroupModeDeleteFromTrashTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Удаление письма из папки Удаленные")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8979).androidCase(10142)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("Trash").nextMessage("subject1").nextMessage("subject2")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("Trash")).then(GroupModeInitialSelectAction(1)).then(GroupModeDeleteAction())
  }

}

open class GroupModeInitialSelectInCompactModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Переход в group mode и выход из него в компактном режиме")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(643).androidCase(10759)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").nextMessage("subj3").nextMessage("subj4").nextMessage("subj5")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(TurnOnCompactMode()).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(GroupModeInitialSelectAction(1)).then(GroupModeUnselectAllAction())
  }

}

open class GroupModeDeleteMessageInCompactModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Удаление письма в компактном режиме")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(642).androidCase(10760)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("UserSubfolder", YSArray("UserFolder")).switchFolder("UserSubfolder", YSArray("UserFolder")).nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(TurnOnCompactMode()).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction("UserSubfolder", YSArray("UserFolder"))).then(GroupModeInitialSelectAction(1)).then(GroupModeDeleteAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class GroupModeMarkAsSpamNotSpamMessageInCompactModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка письма спамом - не спамом в компактном режиме")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(644).androidCase(10761)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.trash).nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(TurnOnCompactMode()).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.trash)).then(GroupModeInitialSelectAction(1)).then(GroupModeMarkSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkNotSpamAction())
  }

}

open class GroupModeArchiveMessageFromSearchInCompactModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Архивирование письма в поиске в компактном режиме")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(645).androidCase(10762)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(TurnOnCompactMode()).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(1)).then(GroupModeArchiveAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class GroupModeSelectAllMessagesInSearchTest: RegularYandexMailTestBase {
  public init() {
    super.init("Group mode. Выбор всех писем в Поиске")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8982).androidCase(10145)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").nextMessage("subj3").switchFolder("UserFolder").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAllAction())
  }

}

open class GroupModeMarkImportantUnimportantMessageInCompactModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка письма важным-неважным в компактном режиме")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(646).androidCase(10763).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("inbox_subj1").nextMessage("inbox_subj2").nextMessage("inbox_subj3").switchFolder(DefaultFolderName.sent).nextMessage("sent_subj1").nextMessage("sent_subj2").nextMessage("sent_subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(TurnOnCompactMode()).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkImportantAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkImportantAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkUnimportantAction())
  }

}

open class GroupModeAddRemoveLabelInCompactModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Добавление-снятие пользовательской метки в компактном режиме")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(648).androidCase(10764)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createLabel(LabelData("label1")).nextMessage("inbox_subj1").nextMessage("inbox_subj2").nextMessage("inbox_subj3").switchFolder("UserFolder").nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("user_subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("user_subj2")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("user_subj3"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(TurnOnCompactMode()).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkImportantAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeApplyLabelsAction(YSArray("label1"))).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(GroupModeInitialSelectAction(0)).then(GroupModeRemoveLabelsAction(YSArray("label2"))).then(OpenFolderListAction()).then(GoToLabelAction("label2"))
  }

}

open class GroupModeUndoDeleteThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена удаления треда в папке Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8608).androidCase(10765)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3).nextMessage("subj2").nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(0)).then(GroupModeDeleteAction()).then(UndoDeleteAction())
  }

}

open class GroupModeUndoArchiveThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена архивирования треда в папке Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8612).androidCase(10766)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj2").nextThread("thread1", 3).nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeArchiveAction()).then(UndoArchiveAction())
  }

}

open class GroupModeUndoSpamThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена пометки треда спамом в папке Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8618).androidCase(10767)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("subj1", 3).nextThread("subj2", 4).nextThread("subj3", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeMarkSpamAction()).then(UndoSpamAction())
  }

}

open class GroupModeUndoArchiveMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена архивирования письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8613).androidCase(10768)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.trash).nextMessage("subj1").nextMessage("subj2").nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash)).then(GroupModeInitialSelectAction(1)).then(GroupModeArchiveAction()).then(UndoArchiveAction())
  }

}

open class GroupModeUndoArchiveMessagesAndThreadsTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена архивирования нескольких писем и тредов")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8614).androidCase(10769)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj2").nextThread("thread1", 3).nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(0)).then(GroupModeSelectAction(2)).then(GroupModeArchiveAction()).then(UndoArchiveAction())
  }

}

open class GroupModeUndoSpamMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена пометки письма спамом")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8616).androidCase(10770)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.trash).nextMessage("subj1").nextMessage("subj2").nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash)).then(GroupModeInitialSelectAction(1)).then(GroupModeMarkSpamAction()).then(UndoSpamAction())
  }

}

open class GroupModeUndoDeleteMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена удаления письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8617).androidCase(10771)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createLabel(LabelData("label1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"))).withSubject("subj1")).nextMessage("subj2").nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("label1")).then(GroupModeInitialSelectAction(0)).then(GroupModeDeleteAction()).then(UndoDeleteAction())
  }

}

open class GroupModeUndoSpamMessagesAndThreadsTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена пометки спамом нескольких писем и тредов")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8602).androidCase(10772)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj2").nextThread("thread1", 3).nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeMarkSpamAction()).then(UndoSpamAction())
  }

}

open class GroupModeUndoDeleteMessagesAndThreadsTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отмена удаления нескольких писем и тредов")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8607).androidCase(10773)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("UserFolder").switchFolder("UserFolder").nextThread("thread1", 3).nextMessage("subj2").nextMessage("subj3").nextMessage("subj4")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeDeleteAction()).then(UndoDeleteAction())
  }

}

open class GroupModeMoveMessageFromTabInboxToUserFolderTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Перемещение одиночного сообщения из таба в папку")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7584).androidCase(542).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.turnOnTab().switchFolder(FolderBackendName.mailingLists).nextMessage("msg1").nextMessage("msg2").nextMessage("msg3").createFolder("UserFolder")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.mailingLists)).then(GroupModeInitialSelectAction(1)).then(GroupModeMoveToFolderAction("UserFolder")).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder"))
  }

}

open class GroupModeMoveMessageToSpamFromSocialTabTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Отправка письма в Спам из таба")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7592).androidCase(550).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.turnOnTab().switchFolder(FolderBackendName.socialNetworks).nextMessage("msg1").nextMessage("msg2").nextMessage("msg3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.socialNetworks)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class GroupModeApplyLabelToMessageInMailingListTabTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка письма пользовательской меткой в табе")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7595).androidCase(553).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.turnOnTab().createLabel(LabelData("label1")).createLabel(LabelData("label2")).switchFolder(FolderBackendName.mailingLists).nextMessage("msg1").nextMessage("msg2").nextMessage("msg3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.mailingLists)).then(GroupModeInitialSelectAction(0)).then(GroupModeApplyLabelsAction(YSArray("label1"))).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
  }

}

open class GroupModeDeleteMessage2paneTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Удаление писем в 2pane")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8995).androidCase(10774).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(SwitchContextToAction(MaillistComponent())).then(GroupModeInitialSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeDeleteAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class GroupModeMardMessagesAsRead2paneTest: RegularYandexMailTestBase {
  public init() {
    super.init("GroupMode. Пометка писем прочитанными в 2pane")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(8997).androidCase(10775).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("UserFolder").nextMessage("subj1").nextMessage("subj2").nextMessage("subj3")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(MarkAsReadFromShortSwipeAction(1)).then(OpenMessageAction(0)).then(SwitchContextToAction(MaillistComponent())).then(GroupModeInitialSelectAction(0)).then(GroupModeSelectAction(1)).then(GroupModeSelectAction(2)).then(GroupModeMarkAsReadAction())
  }

}

