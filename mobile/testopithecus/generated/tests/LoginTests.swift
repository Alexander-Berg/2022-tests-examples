// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/login-tests.ts >>>

import Foundation

open class YandexLoginTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("should login 3 yandex accounts")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(455).androidCase(472)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Yandex, AccountType2.Yandex, AccountType2.Yandex)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("firstAccountMsg")
    mailboxes[1].nextMessage("secondAccountMsg")
    mailboxes[2].nextMessage("thirdAccountMsg")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ _model: AppModel!, _ _supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(YandexLoginAction(accounts[0])).then(OpenFolderListAction()).then(AddNewAccountAction()).then(YandexLoginAction(accounts[1])).then(OpenFolderListAction()).then(AddNewAccountAction()).then(YandexLoginAction(accounts[2]))
  }

}

open class SwitchAccountTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("should switch between 2 yandex accounts")
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Yandex, AccountType2.Yandex)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("firstAccountMsg")
    mailboxes[1].nextMessage("secondAccountMsg")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ _model: AppModel!, _ _supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(YandexLoginAction(accounts[0])).then(OpenFolderListAction()).then(AddNewAccountAction()).then(YandexLoginAction(accounts[1])).then(OpenFolderListAction()).then(SwitchAccountAction(accounts[0]))
  }

}

open class OuterMailLoginTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("Пробуем залогиниться через mail.ru аккаунт")
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Mail)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("pizza")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(MailRuLoginAction(accounts[0]))
  }

}

open class GenericIMAPOtherLoginTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("Account manager. Залогиниться через простую форму GenericIMAP")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7).androidCase(6094)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Other)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("subj0")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ _model: AppModel!, _ _supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(CustomMailServiceLoginAction(accounts[0]))
  }

}

open class GenericIMAPYandexLoginTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("Account manager. Переход к странице авторизации Yandex из формы GenericIMAP")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(433).androidCase(11081)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Yandex)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("subj0")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ _model: AppModel!, _ _supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(CustomMailServiceLoginAction(accounts[0]))
  }

}

open class ChoseAccountFromAccountsListTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("Account manager. Выбор аккаунта из карусели аккаунтов")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(469).androidCase(473)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Yandex, AccountType2.Yandex)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("firstAccountMsg")
    mailboxes[1].nextMessage("secondAccountMsg")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ _model: AppModel!, _ _supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(YandexLoginAction(accounts[0])).then(OpenFolderListAction()).then(AddNewAccountAction()).then(YandexLoginAction(accounts[1])).then(OpenFolderListAction()).then(SwitchAccountAction(accounts[0]))
  }

}

open class LogoutWorkingTest: MBTTest<MailboxBuilder> {
  public init() {
    super.init("Account manager. Проверка работы приложения после логаута")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(462).androidCase(484)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Yandex, AccountType2.Yandex)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("firstAccountMsg")
    mailboxes[1].nextMessage("secondAccountMsg")
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ _model: AppModel!, _ _supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(YandexLoginAction(accounts[0])).then(OpenFolderListAction()).then(AddNewAccountAction()).then(YandexLoginAction(accounts[1])).then(RevokeTokenForAccount(accounts[1])).then(RefreshMessageListAction())
  }

}

