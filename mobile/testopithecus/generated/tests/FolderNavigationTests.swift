// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/folder-navigation-tests.ts >>>

import Foundation

open class ChangeFoldersInboxCustomTest: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Переход в папки с письмами (Инбокс и кастомная папка)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10393).androidCase(10191)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj").createFolder("custom").switchFolder("custom").nextMessage("custom folder subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("custom")).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox)).then(AssertAction())
  }

}

open class ChangeFoldersSentDraftTest: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Переход в папки с письмами (Отправленные и черновики)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10393).androidCase(10191)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.sent).nextMessage("sent subj").switchFolder(DefaultFolderName.draft).nextMessage("draft subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(AssertAction()).then(GoToFolderAction(DefaultFolderName.sent)).then(AssertAction()).then(OpenFolderListAction()).then(AssertAction()).then(GoToFolderAction(DefaultFolderName.draft))
  }

}

open class ChangeFoldersArchiveSpamTrashTest: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Переход в папки с письмами (Архив, Спам, Удаленные)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10393).androidCase(10191)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.spam).nextMessage("spam subj").switchFolder(DefaultFolderName.archive).nextMessage("archive subj").switchFolder(DefaultFolderName.trash).nextMessage("trash subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash)).then(AssertAction())
  }

}

open class ValidateFolderListTest: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Внешний вид списка папок")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6350).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("subsubsubfolder1_longname", YSArray("folder1", "subfolder1", "subsubfolder1")).createFolder("subfolder2", YSArray("folder2")).createFolder("subfolder22", YSArray("folder2"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(AssertAction()).then(AssertSnapshotAction(self.description))
  }

}

open class ValidateLabelListTest: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Внешний вид списка меток")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6350).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createLabel(LabelData("label1", LabelColor.red1.toString())).createLabel(LabelData("label2", LabelColor.green2.toString())).createLabel(LabelData("label3", LabelColor.blue3.toString()))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(AssertSnapshotAction(self.description))
  }

}

open class NewFolderFromBackTestIos: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Отображение новой папки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10338).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).thenChain(YSArray(BackendCreateFolderAction("custom"), PtrFolderListAction()))
  }

}

open class NewFolderFromBackTestAndroid: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Отображение новой папки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10121).ignoreOn(MBTPlatform.IOS)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(BackendCreateFolderAction("custom")).then(GoToFolderAction(DefaultFolderName.inbox)).then(RefreshMessageListAction()).then(OpenFolderListAction())
  }

}

open class NewLabelFromBackTestIos: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Отображение новой метки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10339).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).thenChain(YSArray(BackendCreateLabelAction(LabelData("custom")), PtrFolderListAction()))
  }

}

open class NewLabelFromBackTestAndroid: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Отображение новой метки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10122).ignoreOn(MBTPlatform.IOS)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(BackendCreateLabelAction(LabelData("custom"))).then(GoToFolderAction(DefaultFolderName.inbox)).then(RefreshMessageListAction()).then(OpenFolderListAction()).then(OpenFolderListAction())
  }

}

open class LongFolderNameViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("FolderList. Отображение длинного имени папки")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10359).androidCase(10146)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("0123456789012345678901234567890")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction())
  }

}

