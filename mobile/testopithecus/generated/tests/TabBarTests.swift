// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/tab-bar-tests.ts >>>

import Foundation

open class TabBarOpenCalendarTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Открытие календаря")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10447)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(AssertAction()).then(TabBarTapOnItemAction(TabBarItem.calendar))
  }

}

open class TabBarOpenTelemostTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Открытие телемоста")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10452)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(AssertAction()).then(TabBarTapOnItemAction(TabBarItem.telemost))
  }

}

open class TabBarOpenDocumentsTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Открытие документов")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(12232)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(AssertAction()).then(TabBarTapOnItemAction(TabBarItem.documents))
  }

}

open class TabBarOpenMoreTabTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Открытие вкладки Еще")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10457)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(AssertAction()).then(TabBarTapOnItemAction(TabBarItem.more))
  }

}

open class TabBarItemsYandexLandscapeTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Элементы таб бара у Яндекс аккаунта в лендскейп")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10432)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(AssertAction()).then(RotateToLandscape())
  }

}

open class TabBarCalendarDateLabelTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Текущая дата на иконке Календаря")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10437)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account)
  }

}

open class TabBarShownInMailListTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Наличие таб бара в списке писем")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10438)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject").createFolder("UserFolder").createLabel(LabelData("UserLabel"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(AssertAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToLabelAction("UserLabel"))
  }

}

open class TabBarNotShownInMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Отсутствие таб бара в Просмотре письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10439)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0))
  }

}

open class TabBarNotShownInSearchTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Отсутствие таб бара в Поиске")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10440)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(AssertAction()).then(SearchAllMessagesAction())
  }

}

open class TabBarNotShownInComposeTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Отсутствие таб бара в Компоузе")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10441)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction())
  }

}

open class TabBarNotShownInSettingsTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Отсутствие таб бара в Настройках")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10442)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction())
  }

}

open class TabBarNotShownInFolderListTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Отсутствие таб бара в Списке папок")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10443)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction())
  }

}

open class TabBarHideInGroupModeTest: RegularYandexMailTestBase {
  public init() {
    super.init("TabBar. Перекрытие таб бара тулбаром при переходе в режим групповых операций")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10445)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(GroupModeInitialSelectAction(0)).then(AssertAction()).then(RotateToLandscape())
  }

}

open class ShtorkaOpenNotesTest: RegularYandexMailTestBase {
  public init() {
    super.init("Shtorka. Открытие заметок, если приложение Яндекс.Диск не установлено")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10492)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("UserFolder").nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(TabBarTapOnItemAction(TabBarItem.more)).then(AssertAction()).then(ShtorkaTapOnItemAction(TabBarItem.notes))
  }

}

open class ShtorkaOpenDiskTest: RegularYandexMailTestBase {
  public init() {
    super.init("Shtorka. Открытие Диска, если приложение Диск не установлено")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10572)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("UserFolder").nextMessage("subject")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(TabBarTapOnItemAction(TabBarItem.more)).then(AssertAction()).then(ShtorkaTapOnItemAction(TabBarItem.disk))
  }

}

open class ShtorkaCloseBySwipeTest: RegularYandexMailTestBase {
  public init() {
    super.init("Shtorka. Закрытие шторки свайпом вниз")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10498)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(TabBarTapOnItemAction(TabBarItem.more)).then(AssertAction()).then(ShtorkaCloseBySwipeAction())
  }

}

open class ShtorkaCloseByTapOverTest: RegularYandexMailTestBase {
  public init() {
    super.init("Shtorka. Закрытие шторки при тапе на область над шторкой")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10497)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(TabBarTapOnItemAction(TabBarItem.more)).then(AssertAction()).then(ShtorkaCloseByTapOverAction())
  }

}

