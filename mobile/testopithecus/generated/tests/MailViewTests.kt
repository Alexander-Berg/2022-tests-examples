// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/mail-view-tests.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class MarkAsUnreadFromMessageViewTest(): RegularYandexMailTestBase("MailView. Пометка письма непрочитанным из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6283).androidCase(7381)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsUnreadAction()).then(MessageViewBackToMailListAction())
    }

}

public open class MarkAsReadFromMessageViewTest(): RegularYandexMailTestBase("MailView. Пометка письма прочитанным из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6282).androidCase(7380)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsUnreadAction()).then(MessageViewContextMenuMarkAsReadAction()).then(MessageViewBackToMailListAction())
    }

}

public open class DeleteSingleMessageFromMessageViewTest(): RegularYandexMailTestBase("MailView. Удаление открытого на просмотр единичного письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6285).androidCase(7383)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction())
    }

}

public open class DeleteSingleMessageFromThreadFromMessageViewTest(): RegularYandexMailTestBase("MailView. Удаление одного письма из треда из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6284).androidCase(7382)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).thenChain(mutableListOf(MessageViewContextMenuDeleteAction(), MessageViewBackToMailListAction())).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class MarkAsSpamFromMessageView(): RegularYandexMailTestBase("MailView. Пометка спамом из просмотра одного письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6292).androidCase(7390)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class MarkAsNotSpamFromMessageView(): RegularYandexMailTestBase("MailView. Пометка не спамом из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(7621).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.spam)
        mailbox.nextMessage("subj")
        mailbox.switchFolder(DefaultFolderName.inbox)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsNotSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
    }

}

public open class MarkAsNotSpamFromMessageViewAndroid(): RegularYandexMailTestBase("MailView. Пометка не спамом из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7622).ignoreOn(MBTPlatform.IOS)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.spam)
        mailbox.nextMessage("subj")
        mailbox.switchFolder(DefaultFolderName.inbox)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsNotSpamAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
    }

}

public open class ArchiveSingleMessageFromMessageView(): RegularYandexMailTestBase("MailView. Архивация единичного письма из просмотра через меню действий") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6289).androidCase(7387)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
    }

}

public open class ArchiveMessageFromThreadFromMessageView(): RegularYandexMailTestBase("MailView. Архивация письма из треда со страницы просмотра письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6288).androidCase(7386)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
    }

}

public open class MoveMessageToUsersFolderFromMessageView(): RegularYandexMailTestBase("MailView. Перемещение одного письма в пользовательскую папку из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6296).androidCase(7394)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj").createFolder("TestFolder")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMoveToFolderAction("TestFolder")).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction("TestFolder"))
    }

}

public open class MoveMessageToUsersFolderFromThreadFromMessageView(): RegularYandexMailTestBase("MailView. Перемещение письма из треда в пользовательскую папку из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(7623).androidCase(7624)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3).createFolder("TestFolder")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMoveToFolderAction("TestFolder")).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction("TestFolder"))
    }

}

public open class MarkImportantFromMessageView(): RegularYandexMailTestBase("MailView. Пометка важным единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6298).androidCase(7396)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsImportantAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
    }

}

public open class MarkUnimportantFromMessageView(): RegularYandexMailTestBase("MailView. Снятие метки важное из просмотра через меню действий") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(7626).androidCase(7625)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsImportantAction()).then(MessageViewBackToMailListAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsUnimportantAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
    }

}

public open class AddLabelsFromMessageView(): RegularYandexMailTestBase("MailView. Добавление нескольких пользовательских меток в просмотре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(7627).androidCase(7628)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj").createLabel(LabelData("test1")).createLabel(LabelData("test2"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuApplyLabelsAction(mutableListOf("test1", "test2"))).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenFolderListAction()).then(GoToLabelAction("test2"))
    }

}

public open class DeleteLabelsFromMessageView(): RegularYandexMailTestBase("MailView. Снятие нескольких пользовательских меток в просмотре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6299).androidCase(7397)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("test1"), LabelData("test2"), LabelData("test3"))).withSubject("subj"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuRemoveLabelsAction(mutableListOf("test1", "test2"))).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenFolderListAction()).then(GoToLabelAction("test2"))
    }

}

public open class DeleteMessageFromMessageViewThreadModeOff(): RegularYandexMailTestBase("MailView. Удаление письма из просмотра при выключенной группировке") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(4395)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenAccountSettingsAction(0)).then(SwitchOffThreadingAction()).then(CloseAccountSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class LablesViewFromMessageView(): RegularYandexMailTestBase("MailView. Отображение меток в просмотре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6896).androidCase(7138)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("test1"), LabelData("test2"), LabelData("test3"), LabelData("test4"), LabelData("test5"), LabelData("test6"), LabelData("test7"), LabelData("test8"), LabelData("test9"), LabelData("test10"), LabelData("test11"), LabelData("test12"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("1"), LabelData("12"), LabelData("12345"), LabelData("1234567890"), LabelData("123456789012345"))).withSubject("subj2")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("qazWSX"), LabelData("!@#$%^&*()_+"))).withSubject("subj3"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewBackToMailListAction()).then(OpenMessageAction(1)).then(MessageViewBackToMailListAction()).then(OpenMessageAction(2))
    }

}

public open class MarkAsReadByOpeningMessageViewTest(): RegularYandexMailTestBase("MailView. Автоматическая пометка письма прочитанным при открытии") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6898).androidCase(7140)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0))
    }

}

public open class MarkAsReadByExpandThreadTest(): RegularYandexMailTestBase("MailView. Письмо помечается прочитанным при разворачивании его в треде") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7125).iosCase(6883)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3).nextThread("thread2", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ExpandThreadAction(0)).then(OpenMessageAction(1))
    }

}

public open class DeleteMessageByTapOnIconTest(): RegularYandexMailTestBase("MailView. Удалить письмо тапом на иконку") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(6081)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewDeleteMessageByIconAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class DeleteMessageByTapOnTopBarTest(): RegularYandexMailTestBase("MailView. 2Pane Удалить письмо тапом на иконку в топ баре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9127).androidCase(9904).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(DeleteCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class DeleteMessageInSearchByTapOnTopBarTest(): RegularYandexMailTestBase("MailView. Search 2Pane Архивация письма тапом на иконку в топ баре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9129).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(CloseFolderListAction()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(ArchiveCurrentThreadAction())
    }

}

public open class MoveMessageToTabFromMailViewTest(): RegularYandexMailTestBase("MailView. Перемещение одиночного сообщения из папки в таб") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(7585).androidCase(543).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.turnOnTab().createFolder("custom_folder").switchFolder("custom_folder").nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("custom_folder")).then(OpenMessageAction(0)).then(MessageViewContextMenuMoveToFolderAction(DefaultFolderName.socialNetworks)).then(MessageViewBackToMailListAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.socialNetworks))
    }

}

public open class MoveMessageToSpamFromMailViewTest(): RegularYandexMailTestBase("MailView. 2pane Отправка в спам единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9134).androidCase(9920).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class MoveMessageToSpamFromMailViewFromSearchTest(): RegularYandexMailTestBase("MailView. 2pane Search Отправка в спам единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9135).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class MoveMessageOfThreadToArchiveFromMailViewTest(): RegularYandexMailTestBase("MailView. 2pane Архивация одного письма из треда из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9139).androidCase(9929).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
    }

}

public open class MoveMessageToTrashFromMailViewTest(): RegularYandexMailTestBase("MailView. 2pane Удаление единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9140).androidCase(10985).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class MoveMessageToTrashFromMailViewFromSearchTest(): RegularYandexMailTestBase("MailView. Search 2pane Удаление единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9141).androidCase(9933).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(CloseSearchAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class MoveMessageFromThreadToTrashFromMailViewTest(): RegularYandexMailTestBase("MailView. 2pane Удаление одного письма из треда из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9142).androidCase(9928).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class MarkAsSpamMessageFromThreadFromMessageView(): RegularYandexMailTestBase("MailView. Пометка спамом одного письма в треде из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9900).iosCase(9133)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder("subfolder", mutableListOf("folder")).switchFolder("subfolder", mutableListOf("folder")).nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("subfolder", mutableListOf("folder"))).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class UndoMessageDeleteFromMessageView(): RegularYandexMailTestBase("MailView. Отмена удаления единичного письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9902).iosCase(9132)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
    }

}

public open class MarkImportantMessageFromThreadFromMessageView(): RegularYandexMailTestBase("MailView. Добавление метки Важное для одного письма треда") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9910).iosCase(10290)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsImportantAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
    }

}

public open class AddAndDeleteLabelsFromMessageView(): RegularYandexMailTestBase("MailView. Снять и поставить несколько пользовательских меток в просмотре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9911).iosCase(10292)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("label1"), LabelData("label2"), LabelData("label3"), LabelData("label4"), LabelData("label5"))).withSubject("subj2")).createLabel(LabelData("test1")).createLabel(LabelData("test2")).createLabel(LabelData("test3")).createLabel(LabelData("test4")).createLabel(LabelData("test5"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuApplyLabelsAction(mutableListOf("test1", "test2", "test3"))).then(MessageViewContextMenuRemoveLabelsAction(mutableListOf("label1", "label2"))).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenFolderListAction()).then(GoToLabelAction("test2")).then(OpenFolderListAction()).then(GoToLabelAction("test3")).then(OpenFolderListAction()).then(GoToLabelAction("label1")).then(OpenFolderListAction()).then(GoToLabelAction("label2"))
    }

}

public open class DeleteMessageByTapOnIcon2PaneTest(): RegularYandexMailTestBase("MailView. landscape Удалить письмо тапом на иконку") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10019)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewDeleteMessageByIconAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class MailViewMarkAsSpamMessageFromThread2paneTest(): RegularYandexMailTestBase("MailView. 2pane Пометка спамом одного письма в треде из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9921).iosCase(9136).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("thread1", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class ViewOperationsInInboxFolderWithLabeledMsg(): RegularYandexMailTestBase("MailView. Операции с письмом в метках в папке Входящие") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10030)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("test1"))).withSubject("subj"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction()).then(AssertSnapshotAction(this.description))
    }

}

public open class ViewOperationsInArchiveFolderWithLabeledMsg(): RegularYandexMailTestBase("MailView. Операции с письмом в метках в папке Архив") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10030)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.archive).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("test1"))).withSubject("subj"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
    }

}

public open class ViewOperationsInSentFolder(): RegularYandexMailTestBase("MailView. Операции с письмом в папке Отправленные") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10031)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.sent).nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent)).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
    }

}

public open class ViewOperationsInInboxFolder(): RegularYandexMailTestBase("MailView. Операции с письмом в папке Входящие") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10036)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
    }

}

public open class ViewOperationsInUserFolder(): RegularYandexMailTestBase("MailView. Операции с письмом в пользовательской папке") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10036)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder("TestFolder").nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("TestFolder")).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
    }

}

public open class UndoMessageDeleteFromMessage2paneView(): RegularYandexMailTestBase("MailView. 2pane. Отмена удаления единичного письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9927).iosCase(9143).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("label1"), LabelData("label2"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(mutableListOf(LabelData("label2"))).withSubject("subj2"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToLabelAction("label2")).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
    }

}

public open class MarkLabelInMessageView(): RegularYandexMailTestBase("MailView. Добавление пользовательской метки в просмотре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(10291)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj1").nextMessage("subj2").createLabel(LabelData("test1")).createLabel(LabelData("test2"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuApplyLabelsAction(mutableListOf("test1")))
    }

}

public open class MessageViewCreateAndMarkLabelTest(): RegularYandexMailTestBase("MailView. Создание и пометка новой пользовательской меткой в просмотре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(10288)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuOpenApplyLabelsAction()).then(ApplyLabelTapOnCreateLabelAction()).then(EnterNameForNewLabelAction("new label")).then(SetNewLabelColorAction(2)).then(SubmitNewLabelAction()).then(ApplyLabelAddLabelAction(mutableListOf("new label")))
    }

}

public open class MailViewArchiveMessageByTapOnTopBarTest(): RegularYandexMailTestBase("MailView. 2Pane Архивация письма тапом на иконку в топ баре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(6504).androidCase(9901).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenMessageAction(0)).then(ArchiveCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
    }

}

public open class MailViewArchiveThreadByTapOnTopBarTest(): RegularYandexMailTestBase("MailView. 2Pane Архивация треда тапом на иконку в топ баре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9126).androidCase(7399).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder("UserFolder").nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction("UserFolder")).then(OpenMessageAction(0)).then(ArchiveCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
    }

}

public open class MailViewDeleteThreadByTapOnTopBarTest(): RegularYandexMailTestBase("MailView. 2Pane Удаление треда тапом на иконку в топ баре") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9128).androidCase(7398).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(DeleteCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class MailViewMarkAsSpamOneMessageInThreadLandscapeTest(): RegularYandexMailTestBase("MailView. landscape Отправка в спам одного письма из треда из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(10296).androidCase(10021)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder("UserSubfolder", mutableListOf("UserFolder")).switchFolder("UserSubfolder", mutableListOf("UserFolder")).nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("UserSubfolder", mutableListOf("UserFolder"))).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class MailView2paneUndoMessageDeleteInSearchTest(): RegularYandexMailTestBase("MailView. 2pane Search Отмена удаления единичного письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9144).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
    }

}

public open class MailView2paneUndoDeleteOneMessageInThreadTest(): RegularYandexMailTestBase("MailView. 2pane Отмена удаления одного письма из треда из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9145).androidCase(9925).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
    }

}

public open class MailView2paneUndoArchiveOneMessageInThreadTest(): RegularYandexMailTestBase("MailView. 2pane Отмена архивации одного письма из треда из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9148).androidCase(9924).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder("UserFolder").nextThread("subj", 3)
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(UndoArchiveAction())
    }

}

public open class MailView2paneUndoSpamMessageTest(): RegularYandexMailTestBase("MailView. 2pane Отмена отправки в спам единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9150).androidCase(9922).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().withSystemLabel(LabelType.important).withSubject("subj"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(UndoSpamAction())
    }

}

public open class MailView2paneUndoSpamMessageInSearchTest(): RegularYandexMailTestBase("MailView.Search.2pane Отмена отправки в спам единичного письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(9152).androidCase(9930).setTags(mutableListOf(DeviceType.Tab))
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(UndoSpamAction())
    }

}

