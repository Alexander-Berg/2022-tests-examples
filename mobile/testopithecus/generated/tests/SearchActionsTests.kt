// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/search-actions-tests.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class SearchAndMoveToSpamMessage(): RegularYandexMailTestBase("Search. Short swipe menu Пометить спамом") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7379)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuMarkAsSpamAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
    }

}

public open class SearchAndDeleteMessageFromUserFolder(): RegularYandexMailTestBase("Search. Swipe to delete из результатов поиска по всем папкам") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10157)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder("UserFolder").switchFolder("UserFolder").nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(DeleteMessageByLongSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class SearchAndDeleteMessageShortSwipeFromTemplates(): RegularYandexMailTestBase("Search. Short swipe. Удаление по кнопке из папки Шаблоны") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7361).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(FolderBackendName.templates).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.template)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(DeleteMessageByShortSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class SearchAndGroupDeleteMessageTestFromTemplates(): RegularYandexMailTestBase("Search. Group operation. Удаление письма из папки Шаблоны") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7362).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.template).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.template)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeDeleteAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class SearchAndGroupDeleteMessageTestFromDraft(): RegularYandexMailTestBase("Search. Group operation. Удаление письма из папки Черновики") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7362)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.draft).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.draft)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeDeleteAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

public open class SearchAndArchiveMessageLongSwipe(): RegularYandexMailTestBase("Search. Swipe to archive из результатов поиска по всем папкам") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(10568)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ArchiveMessageByLongSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
    }

}

public open class SearchAndMarkImportantMessageShortSwipe(): RegularYandexMailTestBase("Search. Short swipe menu. Пометка письма Важным") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7371).ignoreOn(MBTPlatform.IOS)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.draft).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.draft)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuMarkAsImportantAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
    }

}

public open class SearchAndMarkMessageRead(): RegularYandexMailTestBase("Search. Group operation. Пометка письма из папки Архив прочитанным") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7356)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsReadAction())
    }

}

public open class SearchAndMarkMessageReadFromUserFolder(): RegularYandexMailTestBase("Search. Group operation. Пометка письма из user subfolder прочитанным") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7356)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder("subfolder", mutableListOf("folder")).switchFolder("subfolder", mutableListOf("folder")).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("subfolder", mutableListOf("folder"))).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsReadAction())
    }

}

public open class SearchAndMarkMessageUnreadFromUserFolder(): RegularYandexMailTestBase("Search. Group operation. Пометка письма из user subfolder непрочитанным") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7357)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder("subfolder", mutableListOf("folder")).switchFolder("subfolder", mutableListOf("folder")).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("subfolder", mutableListOf("folder"))).then(MarkAsRead(0)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsUnreadAction())
    }

}

public open class SearchAndAddLabelMessageFromUserFolder(): RegularYandexMailTestBase("Search. Добавить user метку на письмо из user subfolder через меню действий") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7377)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder("subfolder", mutableListOf("folder")).switchFolder("subfolder", mutableListOf("folder")).nextMessage("subj1").createLabel(LabelData("label1"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuApplyLabelsAction(0, mutableListOf("label1"))).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
    }

}

public open class SearchAndAddLabelMessageFromArchive(): RegularYandexMailTestBase("Search. Добавить user метку на письмо из Архива через меню действий письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7377)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj1").createLabel(LabelData("label1"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuApplyLabelsAction(0, mutableListOf("label1"))).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
    }

}

public open class SearchAndAddLabelMessage(): RegularYandexMailTestBase("Search. Поставить пользовательскую метку на письмо по селекту") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(6090)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj1").createLabel(LabelData("label1"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeApplyLabelsAction(mutableListOf("label1"))).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
    }

}

public open class SearchAndMarkMessageUnreadBySwipeFromSent(): RegularYandexMailTestBase("Search. Пометить письмо непрочитанным по свайпу") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(7355)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.sent).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent)).then(MarkAsRead(0)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(MarkAsUnread(0))
    }

}

public open class SearchAndMarkMessageUnreadFromSpam(): RegularYandexMailTestBase("Search. Group operation. Пометка непрочитанным письма из папки Spam") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9528)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.spam).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(MarkAsRead(0)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(AddFolderToSearchAction(DefaultFolderName.spam)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsUnreadAction())
    }

}

public open class SearchAndDeleteMessageFromSpam(): RegularYandexMailTestBase("Search. Short swipe menu. Удаление письма в поиске по папке Spam") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.androidCase(9529)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.switchFolder(DefaultFolderName.spam).nextMessage("subj1")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(AddFolderToSearchAction(DefaultFolderName.spam)).then(DeleteMessageByShortSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
    }

}

