// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/compose-message-tests.ts >>>

import Foundation

open class ComposeReplyViaShortSwipeMenuTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Reply/Forward] Ответ на письмо через shortSwipeMenu")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11729)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ShortSwipeContextMenuOpenReplyComposeAction(0)).then(AssertAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeReplyFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Reply/Forward] Ответ на письмо из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11717)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuOpenReplyComposeAction()).then(AssertAction()).then(ComposeSendAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeForwardViaShortSwipeMenuTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Reply/Forward] Пересылка письма через shortSwipeMenu")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11731)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ShortSwipeContextMenuOpenForwardComposeAction(0)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.emailToReceiveFwdMessage)).then(AssertAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeForwardFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Reply/Forward] Пересылка письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11725)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuOpenForwardComposeAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.emailToReceiveFwdMessage)).then(ComposeTapOnBodyFieldAction()).then(ComposeSetBodyAction("Тело письма")).then(AssertAction()).then(ComposeSendAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSelectSenderFromSuggestTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [From] Выбор адреса отправителя")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11640)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnSenderFieldAction()).then(ComposeTapOnSenderSuggestByIndexAction(2))
  }

}

open class ComposeCloseSenderSuggestTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [From] Закрытие списка адресов отправителя тапом вне списка")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11635)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnSenderFieldAction()).then(AssertAction()).then(ComposeTapOnSenderFieldAction())
  }

}

open class ComposeEmptyRecipientsSuggestTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Саджест популярных контактов (контактов нет)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11609)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to))
  }

}

open class ComposeMinimizeRecipientsSuggestAfterSomeActionsTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Скрытие саджеста после расфокусировки или повторного тапа в поле")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11639)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction())
  }

}

open class ComposeSuggestOfManyContactTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Саджест популярных контактов (больше 10ти)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11642)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com")).createContact(Contact("name3", "email3@example.com")).createContact(Contact("name4", "email4@example.com")).createContact(Contact("name5", "email5@example.com")).createContact(Contact("name1", "email6@example.com")).createContact(Contact("name2", "email7@example.com")).createContact(Contact("name3", "email8@example.com")).createContact(Contact("name4", "email9@example.com")).createContact(Contact("name5", "email10@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc))
  }

}

open class ComposeSuggestOfSomeContactTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Саджест популярных контактов (меньше 5ти)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11669)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to))
  }

}

open class ComposeLongEmailInSuggestTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Длинное имя адрес в саджесте")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11659)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("thisisaverylongaccountloginyes", "thisisaverylongaccountloginyes@yandex.ru")).createContact(Contact("longaccountname", "yndx-very-very-longaccountname@yandex.ru"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(AssertAction()).then(ComposeSendAction())
  }

}

open class ComposeSuggestMissingAddedRecipientsTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Отсутствие в саджесте уже добавленных получателей")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11614)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com")).createContact(Contact("name3", "email3@example.com")).createContact(Contact("name4", "email4@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, "email2@example.com")).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc))
  }

}

open class ComposeSuggestDomainTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Саджест алиаса (доменный)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11617)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@y", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@g", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@m", false)).then(AssertAction()).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSuggestRotateTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Саджест контактов после изменения ориентации устройства")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11627)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(RotateToLandscape()).then(AssertAction()).then(RotateToPortrait()).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(RotateToLandscape())
  }

}

open class ComposeSuggestBehaviorWhileEnterEmailTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Suggest] Ввод адреса и поведение саджеста")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11631)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "email", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "email1", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to))
  }

}

open class ComposeCreateYabbleWithLongEmailTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Yabbles] Формирование яббла с длинным адресом")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11641)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "loginloginloginlogin@domaindomaindomaindomain.rurururururururururu"))
  }

}

open class ComposeCreateYabbleWithNumericEmailTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Yabbles] Формирование яббла с email состоящим из цифр")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11656)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "123456@111.11")).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, "123456")).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.bcc, "123456@test.domain"))
  }

}

open class ComposeDeleteYabbleByTapOnCrossTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Yabbles] Удаление яббла тапом на крестик")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11691)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createContact(Contact("name1", "email1@example.com"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(AssertAction()).then(ComposeDeleteRecipientByTapOnCrossAction(ComposeRecipientFieldType.to, 0)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.validEmails[0])).then(AssertAction()).then(ComposeDeleteRecipientByTapOnCrossAction(ComposeRecipientFieldType.cc, 0)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.bcc, ComposeEmailProvider.instance.validEmails[1])).then(AssertAction()).then(ComposeDeleteRecipientByTapOnCrossAction(ComposeRecipientFieldType.bcc, 0))
  }

}

open class ComposeEnterAndDeleteTextLandscapeTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Body] [landscape] Ввод и удаление текста при смене ориентации устройства")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11633)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnBodyFieldAction()).then(ComposeSetBodyAction("Тело письма")).then(AssertAction()).then(ComposeClearBodyAction()).then(AssertAction()).then(ComposeSetBodyAction("1 строка\n2 строка\n3 строка\n4 строка")).then(RotateToLandscape())
  }

}

open class ComposeSendMessageWithLongSubjectTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Sending message] Отправка письма с длинной темой")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11600)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.getRandomValidEmail())).then(ComposeTapOnSubjectFieldAction()).then(ComposeSetSubjectAction(TextGenerator().generateRandomString(TextGenerator.lowerCaseLatin, 800))).then(AssertAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSendMessageWithNotGeneratedValidYabbleTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Sending message] Отправка письма на несформированный валидный яббл")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11533)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.validEmails[0])).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.validEmails[1], false)).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSendMessageToRecipientWithLatinAndCyrillicLettersInEmailTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Sending message] Отправка письма получателю, email которого содержит кириллицу и латиницу")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11537)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.emailWithLatinAndCyrillicLetters)).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSendEmptyMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Sending message] Отправка пустого письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11545)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.getRandomValidEmail())).then(ComposeTapOnBodyFieldAction()).then(ComposeClearBodyAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSendMessageToRecipientInCCFieldTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Sending message] Отправка письма получателю в копии")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11552)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.getRandomValidEmail())).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

open class ComposeSendMessageWithAllFilledFieldsTest: RegularYandexMailTestBase {
  public init() {
    super.init("Compose. [Sending message] Отправка письма с заполненными полями To/Cc/Bcc/Subj/Body")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.ignoreOn(MBTPlatform.Android).iosCase(11556)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.validEmails[0])).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.validEmails[1])).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.bcc, ComposeEmailProvider.instance.validEmails[2])).then(ComposeTapOnSubjectFieldAction()).then(ComposeSetSubjectAction("subj")).then(ComposeTapOnBodyFieldAction()).then(ComposeSetBodyAction("body")).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
  }

}

