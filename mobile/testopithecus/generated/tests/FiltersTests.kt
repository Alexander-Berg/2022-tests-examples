// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/filters-tests.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class ValidateFiltersListPt1Test(): RegularYandexMailTestBase("Filters. Просмотр правил обработки писем (часть 1)") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(12800).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.from, "aaa")).setCondition(FilterCondition(FilterConditionKey.from, "bbb")).setLogic(FilterLogicType.and).setAction(FilterAction(FilterActionType.markRead)).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.from, "ccc")).setAction(FilterAction(FilterActionType.delete)).setEnable(false).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "ddd")).setAction(FilterAction(FilterActionType.markRead)).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "eee")).setCondition(FilterCondition(FilterConditionKey.subject, "fff")).setLogic(FilterLogicType.or).setAction(FilterAction(FilterActionType.delete)).setEnable(false).build())
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenAccountSettingsAction(0)).then(AccountSettingsOpenFiltersAction()).then(AssertSnapshotAction(this.description))
    }

}

public open class ValidateFiltersListPt2Test(): RegularYandexMailTestBase("Filters. Просмотр правил обработки писем (часть 2)") {
    private var folderName: FolderName = "Folder"
    private var labelName: LabelName = "Label"
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.iosCase(12800).ignoreOn(MBTPlatform.Android)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createFolder(this.folderName).createLabel(LabelData(this.labelName)).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "ggg")).setCondition(FilterCondition(FilterConditionKey.from, "hhh")).setLogic(FilterLogicType.and).setAction(FilterAction(FilterActionType.applyLabel, this.labelName)).build()).createFilter(FilterRuleBuilder().setCondition(FilterCondition(FilterConditionKey.subject, "iii")).setCondition(FilterCondition(FilterConditionKey.from, "jjj")).setLogic(FilterLogicType.or).setAction(FilterAction(FilterActionType.moveToFolder, this.folderName)).setEnable(false).build()).createFilter(FilterRuleBuilder().setLetter(FilterLetterType.clearspam).setCondition(FilterCondition(FilterConditionKey.cc, "kkk")).setAction(FilterAction(FilterActionType.markRead)).build()).createFilter(FilterRuleBuilder().setAction(FilterAction(FilterActionType.delete)).setEnable(false).build())
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenAccountSettingsAction(0)).then(AccountSettingsOpenFiltersAction()).then(AssertSnapshotAction(this.description))
    }

}

