// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/search-actions-tests.ts >>>

import Foundation

open class SearchAndMoveToSpamMessage: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Short swipe menu Пометить спамом")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7379)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuMarkAsSpamAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class SearchAndDeleteMessageFromUserFolder: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Swipe to delete из результатов поиска по всем папкам")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10157)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("UserFolder").switchFolder("UserFolder").nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(DeleteMessageByLongSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class SearchAndDeleteMessageShortSwipeFromTemplates: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Short swipe. Удаление по кнопке из папки Шаблоны")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7361).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(FolderBackendName.templates).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.template)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(DeleteMessageByShortSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class SearchAndGroupDeleteMessageTestFromTemplates: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Group operation. Удаление письма из папки Шаблоны")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7362).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.template).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.template)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeDeleteAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class SearchAndGroupDeleteMessageTestFromDraft: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Group operation. Удаление письма из папки Черновики")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7362)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.draft).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.draft)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeDeleteAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class SearchAndArchiveMessageLongSwipe: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Swipe to archive из результатов поиска по всем папкам")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10568)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ArchiveMessageByLongSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class SearchAndMarkImportantMessageShortSwipe: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Short swipe menu. Пометка письма Важным")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7371).ignoreOn(MBTPlatform.IOS)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.draft).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.draft)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuMarkAsImportantAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
  }

}

open class SearchAndMarkMessageRead: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Group operation. Пометка письма из папки Архив прочитанным")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7356)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsReadAction())
  }

}

open class SearchAndMarkMessageReadFromUserFolder: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Group operation. Пометка письма из user subfolder прочитанным")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7356)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("subfolder", YSArray("folder")).switchFolder("subfolder", YSArray("folder")).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("subfolder", YSArray("folder"))).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsReadAction())
  }

}

open class SearchAndMarkMessageUnreadFromUserFolder: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Group operation. Пометка письма из user subfolder непрочитанным")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7357)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("subfolder", YSArray("folder")).switchFolder("subfolder", YSArray("folder")).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("subfolder", YSArray("folder"))).then(MarkAsRead(0)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsUnreadAction())
  }

}

open class SearchAndAddLabelMessageFromUserFolder: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Добавить user метку на письмо из user subfolder через меню действий")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7377)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("subfolder", YSArray("folder")).switchFolder("subfolder", YSArray("folder")).nextMessage("subj1").createLabel(LabelData("label1"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuApplyLabelsAction(0, YSArray("label1"))).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
  }

}

open class SearchAndAddLabelMessageFromArchive: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Добавить user метку на письмо из Архива через меню действий письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7377)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj1").createLabel(LabelData("label1"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(ShortSwipeContextMenuApplyLabelsAction(0, YSArray("label1"))).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
  }

}

open class SearchAndAddLabelMessage: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Поставить пользовательскую метку на письмо по селекту")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(6090)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").createLabel(LabelData("label1"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(GroupModeInitialSelectAction(0)).then(GroupModeApplyLabelsAction(YSArray("label1"))).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToLabelAction("label1"))
  }

}

open class SearchAndMarkMessageUnreadBySwipeFromSent: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Пометить письмо непрочитанным по свайпу")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7355)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.sent).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent)).then(MarkAsRead(0)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(MarkAsUnread(0))
  }

}

open class SearchAndMarkMessageUnreadFromSpam: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Group operation. Пометка непрочитанным письма из папки Spam")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9528)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.spam).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(MarkAsRead(0)).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(AddFolderToSearchAction(DefaultFolderName.spam)).then(GroupModeInitialSelectAction(0)).then(GroupModeMarkAsUnreadAction())
  }

}

open class SearchAndDeleteMessageFromSpam: RegularYandexMailTestBase {
  public init() {
    super.init("Search. Short swipe menu. Удаление письма в поиске по папке Spam")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9529)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.spam).nextMessage("subj1")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(AddFolderToSearchAction(DefaultFolderName.spam)).then(DeleteMessageByShortSwipeAction(0)).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

