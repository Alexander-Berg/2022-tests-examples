// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/random-walk-test.ts >>>

import Foundation

open class RandomWalkTest: BaseUserBehaviourTest<MailboxBuilder> {
  public init(_ pathLength: Int32, _ logger: Logger, _ seed: Int32) {
    super.init("random walk for \(pathLength) steps with seed \(seed)", LoginComponent(), pathLength, logger, seed)
  }

  @discardableResult
  open class func generate(_ count: Int32, _ logger: Logger) -> YSArray<RandomWalkTest> {
    let tests: YSArray<RandomWalkTest> = YSArray()
    for i in stride(from: 0, to: count, by: 1) {
      tests.push(RandomWalkTest(5, logger, TypeSupport.asInt32(i)!))
    }
    return tests
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.Yandex)
  }

  open override func prepareAccounts(_ mailboxes: YSArray<MailboxBuilder>) -> Void {
    mailboxes[0].nextMessage("subj")
  }

  @discardableResult
  open override func getUserBehaviour(_ accounts: YSArray<UserAccount>) -> UserBehaviour {
    return allActionsBehaviour(accounts).blacklist(ClearCacheAction.type).blacklist(OpenSettingsAction.type)
  }

}

