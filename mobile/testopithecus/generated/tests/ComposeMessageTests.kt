// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/compose-message-tests.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class ComposeReplyViaShortSwipeMenuTest(): RegularYandexMailTestBase("Compose. [Reply/Forward] Ответ на письмо через shortSwipeMenu") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11729)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ShortSwipeContextMenuOpenReplyComposeAction(0)).then(AssertAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeReplyFromMailViewTest(): RegularYandexMailTestBase("Compose. [Reply/Forward] Ответ на письмо из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11717)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuOpenReplyComposeAction()).then(AssertAction()).then(ComposeSendAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeForwardViaShortSwipeMenuTest(): RegularYandexMailTestBase("Compose. [Reply/Forward] Пересылка письма через shortSwipeMenu") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11731)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ShortSwipeContextMenuOpenForwardComposeAction(0)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.emailToReceiveFwdMessage)).then(AssertAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeForwardFromMailViewTest(): RegularYandexMailTestBase("Compose. [Reply/Forward] Пересылка письма из просмотра") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11725)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.nextMessage("subj")
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuOpenForwardComposeAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.emailToReceiveFwdMessage)).then(ComposeTapOnBodyFieldAction()).then(ComposeSetBodyAction("Тело письма")).then(AssertAction()).then(ComposeSendAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSelectSenderFromSuggestTest(): RegularYandexMailTestBase("Compose. [From] Выбор адреса отправителя") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11640)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnSenderFieldAction()).then(ComposeTapOnSenderSuggestByIndexAction(2))
    }

}

public open class ComposeCloseSenderSuggestTest(): RegularYandexMailTestBase("Compose. [From] Закрытие списка адресов отправителя тапом вне списка") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11635)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnSenderFieldAction()).then(AssertAction()).then(ComposeTapOnSenderFieldAction())
    }

}

public open class ComposeEmptyRecipientsSuggestTest(): RegularYandexMailTestBase("Compose. [Suggest] Саджест популярных контактов (контактов нет)") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11609)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to))
    }

}

public open class ComposeMinimizeRecipientsSuggestAfterSomeActionsTest(): RegularYandexMailTestBase("Compose. [Suggest] Скрытие саджеста после расфокусировки или повторного тапа в поле") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11639)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction())
    }

}

public open class ComposeSuggestOfManyContactTest(): RegularYandexMailTestBase("Compose. [Suggest] Саджест популярных контактов (больше 10ти)") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11642)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com")).createContact(Contact("name3", "email3@example.com")).createContact(Contact("name4", "email4@example.com")).createContact(Contact("name5", "email5@example.com")).createContact(Contact("name1", "email6@example.com")).createContact(Contact("name2", "email7@example.com")).createContact(Contact("name3", "email8@example.com")).createContact(Contact("name4", "email9@example.com")).createContact(Contact("name5", "email10@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc))
    }

}

public open class ComposeSuggestOfSomeContactTest(): RegularYandexMailTestBase("Compose. [Suggest] Саджест популярных контактов (меньше 5ти)") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11669)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to))
    }

}

public open class ComposeLongEmailInSuggestTest(): RegularYandexMailTestBase("Compose. [Suggest] Длинное имя адрес в саджесте") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11659)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("thisisaverylongaccountloginyes", "thisisaverylongaccountloginyes@yandex.ru")).createContact(Contact("longaccountname", "yndx-very-very-longaccountname@yandex.ru"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(AssertAction()).then(ComposeSendAction())
    }

}

public open class ComposeSuggestMissingAddedRecipientsTest(): RegularYandexMailTestBase("Compose. [Suggest] Отсутствие в саджесте уже добавленных получателей") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11614)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com")).createContact(Contact("name3", "email3@example.com")).createContact(Contact("name4", "email4@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, "email2@example.com")).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc))
    }

}

public open class ComposeSuggestDomainTest(): RegularYandexMailTestBase("Compose. [Suggest] Саджест алиаса (доменный)") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11617)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@y", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@g", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "example@m", false)).then(AssertAction()).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSuggestRotateTest(): RegularYandexMailTestBase("Compose. [Suggest] Саджест контактов после изменения ориентации устройства") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11627)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email1@example.com")).createContact(Contact("name2", "email2@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(RotateToLandscape()).then(AssertAction()).then(RotateToPortrait()).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(AssertAction()).then(RotateToLandscape())
    }

}

public open class ComposeSuggestBehaviorWhileEnterEmailTest(): RegularYandexMailTestBase("Compose. [Suggest] Ввод адреса и поведение саджеста") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11631)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "email", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "email1", false)).then(AssertAction()).then(ComposeDeleteLastRecipientByTapOnBackspaceAction(ComposeRecipientFieldType.to))
    }

}

public open class ComposeCreateYabbleWithLongEmailTest(): RegularYandexMailTestBase("Compose. [Yabbles] Формирование яббла с длинным адресом") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11641)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "loginloginloginlogin@domaindomaindomaindomain.rurururururururururu"))
    }

}

public open class ComposeCreateYabbleWithNumericEmailTest(): RegularYandexMailTestBase("Compose. [Yabbles] Формирование яббла с email состоящим из цифр") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11656)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, "123456@111.11")).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, "123456")).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.bcc, "123456@test.domain"))
    }

}

public open class ComposeDeleteYabbleByTapOnCrossTest(): RegularYandexMailTestBase("Compose. [Yabbles] Удаление яббла тапом на крестик") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11691)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
        mailbox.createContact(Contact("name1", "email1@example.com"))
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.to)).then(ComposeTapOnRecipientSuggestByIndexAction(0)).then(AssertAction()).then(ComposeDeleteRecipientByTapOnCrossAction(ComposeRecipientFieldType.to, 0)).then(AssertAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.validEmails[0])).then(AssertAction()).then(ComposeDeleteRecipientByTapOnCrossAction(ComposeRecipientFieldType.cc, 0)).then(AssertAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.bcc, ComposeEmailProvider.instance.validEmails[1])).then(AssertAction()).then(ComposeDeleteRecipientByTapOnCrossAction(ComposeRecipientFieldType.bcc, 0))
    }

}

public open class ComposeEnterAndDeleteTextLandscapeTest(): RegularYandexMailTestBase("Compose. [Body] [landscape] Ввод и удаление текста при смене ориентации устройства") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11633)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeTapOnBodyFieldAction()).then(ComposeSetBodyAction("Тело письма")).then(AssertAction()).then(ComposeClearBodyAction()).then(AssertAction()).then(ComposeSetBodyAction("1 строка\n2 строка\n3 строка\n4 строка")).then(RotateToLandscape())
    }

}

public open class ComposeSendMessageWithLongSubjectTest(): RegularYandexMailTestBase("Compose. [Sending message] Отправка письма с длинной темой") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11600)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.getRandomValidEmail())).then(ComposeTapOnSubjectFieldAction()).then(ComposeSetSubjectAction(TextGenerator().generateRandomString(TextGenerator.lowerCaseLatin, 800))).then(AssertAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSendMessageWithNotGeneratedValidYabbleTest(): RegularYandexMailTestBase("Compose. [Sending message] Отправка письма на несформированный валидный яббл") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11533)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.validEmails[0])).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.validEmails[1], false)).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSendMessageToRecipientWithLatinAndCyrillicLettersInEmailTest(): RegularYandexMailTestBase("Compose. [Sending message] Отправка письма получателю, email которого содержит кириллицу и латиницу") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11537)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.emailWithLatinAndCyrillicLetters)).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSendEmptyMessageTest(): RegularYandexMailTestBase("Compose. [Sending message] Отправка пустого письма") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11545)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.getRandomValidEmail())).then(ComposeTapOnBodyFieldAction()).then(ComposeClearBodyAction()).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSendMessageToRecipientInCCFieldTest(): RegularYandexMailTestBase("Compose. [Sending message] Отправка письма получателю в копии") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11552)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.getRandomValidEmail())).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

public open class ComposeSendMessageWithAllFilledFieldsTest(): RegularYandexMailTestBase("Compose. [Sending message] Отправка письма с заполненными полями To/Cc/Bcc/Subj/Body") {
    open override fun setupSettings(settings: TestSettings): Unit {
        settings.ignoreOn(MBTPlatform.Android).iosCase(11556)
    }

    open override fun prepareAccount(mailbox: MailboxBuilder): Unit {
    }

    open override fun testScenario(account: UserAccount): TestPlan {
        return this.yandexLogin(account).then(ComposeOpenAction()).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.to, ComposeEmailProvider.instance.validEmails[0])).then(ComposeExpandExtendedRecipientFormAction()).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.cc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.cc, ComposeEmailProvider.instance.validEmails[1])).then(ComposeTapOnRecipientFieldAction(ComposeRecipientFieldType.bcc)).then(ComposeSetRecipientFieldAction(ComposeRecipientFieldType.bcc, ComposeEmailProvider.instance.validEmails[2])).then(ComposeTapOnSubjectFieldAction()).then(ComposeSetSubjectAction("subj")).then(ComposeTapOnBodyFieldAction()).then(ComposeSetBodyAction("body")).then(ComposeSendAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent))
    }

}

