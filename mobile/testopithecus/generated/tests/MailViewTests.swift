// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM tests/mail-view-tests.ts >>>

import Foundation

open class MarkAsUnreadFromMessageViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка письма непрочитанным из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6283).androidCase(7381)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsUnreadAction()).then(MessageViewBackToMailListAction())
  }

}

open class MarkAsReadFromMessageViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка письма прочитанным из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6282).androidCase(7380)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsUnreadAction()).then(MessageViewContextMenuMarkAsReadAction()).then(MessageViewBackToMailListAction())
  }

}

open class DeleteSingleMessageFromMessageViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Удаление открытого на просмотр единичного письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6285).androidCase(7383)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction())
  }

}

open class DeleteSingleMessageFromThreadFromMessageViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Удаление одного письма из треда из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6284).androidCase(7382)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).thenChain(YSArray(MessageViewContextMenuDeleteAction(), MessageViewBackToMailListAction())).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class MarkAsSpamFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка спамом из просмотра одного письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6292).androidCase(7390)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class MarkAsNotSpamFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка не спамом из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7621).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.spam)
    mailbox.nextMessage("subj")
    mailbox.switchFolder(DefaultFolderName.inbox)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsNotSpamAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class MarkAsNotSpamFromMessageViewAndroid: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка не спамом из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7622).ignoreOn(MBTPlatform.IOS)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.spam)
    mailbox.nextMessage("subj")
    mailbox.switchFolder(DefaultFolderName.inbox)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam)).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsNotSpamAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class ArchiveSingleMessageFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Архивация единичного письма из просмотра через меню действий")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6289).androidCase(7387)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.inbox))
  }

}

open class ArchiveMessageFromThreadFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Архивация письма из треда со страницы просмотра письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6288).androidCase(7386)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class MoveMessageToUsersFolderFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Перемещение одного письма в пользовательскую папку из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6296).androidCase(7394)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj").createFolder("TestFolder")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMoveToFolderAction("TestFolder")).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction("TestFolder"))
  }

}

open class MoveMessageToUsersFolderFromThreadFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Перемещение письма из треда в пользовательскую папку из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7623).androidCase(7624)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3).createFolder("TestFolder")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMoveToFolderAction("TestFolder")).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction("TestFolder"))
  }

}

open class MarkImportantFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка важным единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6298).androidCase(7396)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsImportantAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
  }

}

open class MarkUnimportantFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Снятие метки важное из просмотра через меню действий")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7626).androidCase(7625)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsImportantAction()).then(MessageViewBackToMailListAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsUnimportantAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
  }

}

open class AddLabelsFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Добавление нескольких пользовательских меток в просмотре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7627).androidCase(7628)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj").createLabel(LabelData("test1")).createLabel(LabelData("test2"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuApplyLabelsAction(YSArray("test1", "test2"))).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenFolderListAction()).then(GoToLabelAction("test2"))
  }

}

open class DeleteLabelsFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Снятие нескольких пользовательских меток в просмотре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6299).androidCase(7397)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("test1"), LabelData("test2"), LabelData("test3"))).withSubject("subj"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuRemoveLabelsAction(YSArray("test1", "test2"))).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenFolderListAction()).then(GoToLabelAction("test2"))
  }

}

open class DeleteMessageFromMessageViewThreadModeOff: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Удаление письма из просмотра при выключенной группировке")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(4395)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenAccountSettingsAction(0)).then(SwitchOffThreadingAction()).then(CloseAccountSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class LablesViewFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Отображение меток в просмотре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6896).androidCase(7138)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("test1"), LabelData("test2"), LabelData("test3"), LabelData("test4"), LabelData("test5"), LabelData("test6"), LabelData("test7"), LabelData("test8"), LabelData("test9"), LabelData("test10"), LabelData("test11"), LabelData("test12"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("1"), LabelData("12"), LabelData("12345"), LabelData("1234567890"), LabelData("123456789012345"))).withSubject("subj2")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("qazWSX"), LabelData("!@#$%^&*()_+"))).withSubject("subj3"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewBackToMailListAction()).then(OpenMessageAction(1)).then(MessageViewBackToMailListAction()).then(OpenMessageAction(2))
  }

}

open class MarkAsReadByOpeningMessageViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Автоматическая пометка письма прочитанным при открытии")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6898).androidCase(7140)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0))
  }

}

open class MarkAsReadByExpandThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Письмо помечается прочитанным при разворачивании его в треде")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(7125).iosCase(6883)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3).nextThread("thread2", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(ExpandThreadAction(0)).then(OpenMessageAction(1))
  }

}

open class DeleteMessageByTapOnIconTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Удалить письмо тапом на иконку")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(6081)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewDeleteMessageByIconAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class DeleteMessageByTapOnTopBarTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2Pane Удалить письмо тапом на иконку в топ баре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9127).androidCase(9904).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(DeleteCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class DeleteMessageInSearchByTapOnTopBarTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Search 2Pane Архивация письма тапом на иконку в топ баре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9129).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(CloseFolderListAction()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(ArchiveCurrentThreadAction())
  }

}

open class MoveMessageToTabFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Перемещение одиночного сообщения из папки в таб")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(7585).androidCase(543).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.turnOnTab().createFolder("custom_folder").switchFolder("custom_folder").nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("custom_folder")).then(OpenMessageAction(0)).then(MessageViewContextMenuMoveToFolderAction(DefaultFolderName.socialNetworks)).then(MessageViewBackToMailListAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.socialNetworks))
  }

}

open class MoveMessageToSpamFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Отправка в спам единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9134).androidCase(9920).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class MoveMessageToSpamFromMailViewFromSearchTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Search Отправка в спам единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9135).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class MoveMessageOfThreadToArchiveFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Архивация одного письма из треда из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9139).androidCase(9929).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(CloseSearchAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class MoveMessageToTrashFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Удаление единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9140).androidCase(10985).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class MoveMessageToTrashFromMailViewFromSearchTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Search 2pane Удаление единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9141).androidCase(9933).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(CloseSearchAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class MoveMessageFromThreadToTrashFromMailViewTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Удаление одного письма из треда из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9142).androidCase(9928).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class MarkAsSpamMessageFromThreadFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Пометка спамом одного письма в треде из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9900).iosCase(9133)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("subfolder", YSArray("folder")).switchFolder("subfolder", YSArray("folder")).nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("subfolder", YSArray("folder"))).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class UndoMessageDeleteFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Отмена удаления единичного письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9902).iosCase(9132)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.archive).nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive)).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
  }

}

open class MarkImportantMessageFromThreadFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Добавление метки Важное для одного письма треда")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9910).iosCase(10290)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsImportantAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFilterImportantAction())
  }

}

open class AddAndDeleteLabelsFromMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Снять и поставить несколько пользовательских меток в просмотре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9911).iosCase(10292)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"), LabelData("label3"), LabelData("label4"), LabelData("label5"))).withSubject("subj2")).createLabel(LabelData("test1")).createLabel(LabelData("test2")).createLabel(LabelData("test3")).createLabel(LabelData("test4")).createLabel(LabelData("test5"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuApplyLabelsAction(YSArray("test1", "test2", "test3"))).then(MessageViewContextMenuRemoveLabelsAction(YSArray("label1", "label2"))).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenFolderListAction()).then(GoToLabelAction("test2")).then(OpenFolderListAction()).then(GoToLabelAction("test3")).then(OpenFolderListAction()).then(GoToLabelAction("label1")).then(OpenFolderListAction()).then(GoToLabelAction("label2"))
  }

}

open class DeleteMessageByTapOnIcon2PaneTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. landscape Удалить письмо тапом на иконку")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10019)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewDeleteMessageByIconAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class MailViewMarkAsSpamMessageFromThread2paneTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Пометка спамом одного письма в треде из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9921).iosCase(9136).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("thread1", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(SwitchContextToAction(MaillistComponent())).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class ViewOperationsInInboxFolderWithLabeledMsg: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Операции с письмом в метках в папке Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10030)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("test1"))).withSubject("subj"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction()).then(AssertSnapshotAction(self.description))
  }

}

open class ViewOperationsInArchiveFolderWithLabeledMsg: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Операции с письмом в метках в папке Архив")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10030)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.archive).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("test1"))).withSubject("subj"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToLabelAction("test1")).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
  }

}

open class ViewOperationsInSentFolder: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Операции с письмом в папке Отправленные")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10031)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder(DefaultFolderName.sent).nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.sent)).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
  }

}

open class ViewOperationsInInboxFolder: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Операции с письмом в папке Входящие")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10036)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
  }

}

open class ViewOperationsInUserFolder: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Операции с письмом в пользовательской папке")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(10036)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("TestFolder").nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("TestFolder")).then(OpenMessageAction(0)).then(MessageViewOpenContextMenuAction())
  }

}

open class UndoMessageDeleteFromMessage2paneView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane. Отмена удаления единичного письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.androidCase(9927).iosCase(9143).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label1"), LabelData("label2"))).withSubject("subj1")).nextCustomMessage(MessageSpecBuilder().withDefaults().addLabels(YSArray(LabelData("label2"))).withSubject("subj2"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToLabelAction("label2")).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
  }

}

open class MarkLabelInMessageView: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Добавление пользовательской метки в просмотре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10291)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj1").nextMessage("subj2").createLabel(LabelData("test1")).createLabel(LabelData("test2"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuApplyLabelsAction(YSArray("test1")))
  }

}

open class MessageViewCreateAndMarkLabelTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. Создание и пометка новой пользовательской меткой в просмотре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10288)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenMessageAction(0)).then(MessageViewContextMenuOpenApplyLabelsAction()).then(ApplyLabelTapOnCreateLabelAction()).then(EnterNameForNewLabelAction("new label")).then(SetNewLabelColorAction(2)).then(SubmitNewLabelAction()).then(ApplyLabelAddLabelAction(YSArray("new label")))
  }

}

open class MailViewArchiveMessageByTapOnTopBarTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2Pane Архивация письма тапом на иконку в топ баре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(6504).androidCase(9901).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction(DefaultFolderName.inbox)).then(OpenMessageAction(0)).then(ArchiveCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class MailViewArchiveThreadByTapOnTopBarTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2Pane Архивация треда тапом на иконку в топ баре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9126).androidCase(7399).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("UserFolder").nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(OpenSettingsAction()).then(OpenGeneralSettingsAction()).then(SetActionOnSwipe(ActionOnSwipe.archive)).then(CloseGeneralSettingsAction()).then(CloseRootSettings()).then(GoToFolderAction("UserFolder")).then(OpenMessageAction(0)).then(ArchiveCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.archive))
  }

}

open class MailViewDeleteThreadByTapOnTopBarTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2Pane Удаление треда тапом на иконку в топ баре")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9128).androidCase(7398).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(DeleteCurrentThreadAction()).then(AssertAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.trash))
  }

}

open class MailViewMarkAsSpamOneMessageInThreadLandscapeTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. landscape Отправка в спам одного письма из треда из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(10296).androidCase(10021)
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.createFolder("UserSubfolder", YSArray("UserFolder")).switchFolder("UserSubfolder", YSArray("UserFolder")).nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(OpenFolderListAction()).then(GoToFolderAction("UserSubfolder", YSArray("UserFolder"))).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(MessageViewBackToMailListAction()).then(OpenFolderListAction()).then(GoToFolderAction(DefaultFolderName.spam))
  }

}

open class MailView2paneUndoMessageDeleteInSearchTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Search Отмена удаления единичного письма")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9144).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
  }

}

open class MailView2paneUndoDeleteOneMessageInThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Отмена удаления одного письма из треда из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9145).androidCase(9925).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenMessageAction(0)).then(MessageViewContextMenuDeleteAction()).then(UndoDeleteAction())
  }

}

open class MailView2paneUndoArchiveOneMessageInThreadTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Отмена архивации одного письма из треда из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9148).androidCase(9924).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.switchFolder("UserFolder").nextThread("subj", 3)
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToFolderAction("UserFolder")).then(OpenMessageAction(0)).then(MessageViewContextMenuArchiveAction()).then(UndoArchiveAction())
  }

}

open class MailView2paneUndoSpamMessageTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView. 2pane Отмена отправки в спам единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9150).androidCase(9922).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextCustomMessage(MessageSpecBuilder().withDefaults().withSystemLabel(LabelType.important).withSubject("subj"))
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenFolderListAction()).then(GoToFilterImportantAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(UndoSpamAction())
  }

}

open class MailView2paneUndoSpamMessageInSearchTest: RegularYandexMailTestBase {
  public init() {
    super.init("MailView.Search.2pane Отмена отправки в спам единичного письма из просмотра")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.iosCase(9152).androidCase(9930).setTags(YSArray(DeviceType.Tab))
  }

  open override func prepareAccount(_ mailbox: MailboxBuilder) -> Void {
    mailbox.nextMessage("subj")
  }

  @discardableResult
  open override func testScenario(_ account: UserAccount) -> TestPlan {
    return self.yandexLogin(account).then(RotateToLandscape()).then(OpenSearchAction()).then(SearchAllMessagesAction()).then(OpenMessageAction(0)).then(MessageViewContextMenuMarkAsSpamAction()).then(UndoSpamAction())
  }

}

