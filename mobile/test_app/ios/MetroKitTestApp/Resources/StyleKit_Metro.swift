//
//  StyleKit_Metro.swift
//  Metro
//
//  Created by @insideout on 20/03/2018.
//  Copyright Â© 2018 Yandex. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit_Metro : NSObject {

    //// Cache

    private struct Cache {
        static let marker_red: UIColor = UIColor(red: 1.000, green: 0.267, blue: 0.200, alpha: 1.000)
        static let white100: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let black100: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let grey10: UIColor = UIColor(red: 0.102, green: 0.102, blue: 0.102, alpha: 1.000)
        static let grey20: UIColor = UIColor(red: 0.200, green: 0.200, blue: 0.200, alpha: 1.000)
        static let grey30: UIColor = UIColor(red: 0.298, green: 0.298, blue: 0.298, alpha: 1.000)
        static let grey40: UIColor = UIColor(red: 0.400, green: 0.400, blue: 0.400, alpha: 1.000)
        static let grey50: UIColor = UIColor(red: 0.498, green: 0.498, blue: 0.498, alpha: 1.000)
        static let grey60: UIColor = UIColor(red: 0.600, green: 0.600, blue: 0.600, alpha: 1.000)
        static let grey70: UIColor = UIColor(red: 0.702, green: 0.702, blue: 0.702, alpha: 1.000)
        static let grey80: UIColor = UIColor(red: 0.800, green: 0.800, blue: 0.800, alpha: 1.000)
        static let grey90: UIColor = UIColor(red: 0.902, green: 0.902, blue: 0.902, alpha: 1.000)
        static let grey05: UIColor = UIColor(red: 0.050, green: 0.050, blue: 0.050, alpha: 1.000)
        static let grey15: UIColor = UIColor(red: 0.150, green: 0.150, blue: 0.150, alpha: 1.000)
        static let grey25: UIColor = UIColor(red: 0.247, green: 0.247, blue: 0.247, alpha: 1.000)
        static let grey35: UIColor = UIColor(red: 0.349, green: 0.349, blue: 0.349, alpha: 1.000)
        static let grey45: UIColor = UIColor(red: 0.450, green: 0.450, blue: 0.450, alpha: 1.000)
        static let grey55: UIColor = UIColor(red: 0.550, green: 0.550, blue: 0.550, alpha: 1.000)
        static let grey65: UIColor = UIColor(red: 0.651, green: 0.651, blue: 0.651, alpha: 1.000)
        static let grey75: UIColor = UIColor(red: 0.749, green: 0.749, blue: 0.749, alpha: 1.000)
        static let grey85: UIColor = UIColor(red: 0.851, green: 0.851, blue: 0.851, alpha: 1.000)
        static let grey96: UIColor = UIColor(red: 0.961, green: 0.961, blue: 0.961, alpha: 1.000)
        static let black_alfa10: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.100)
        static let black_alfa20: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.200)
        static let black_alfa30: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.300)
        static let black_alfa40: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.400)
        static let black_alfa50: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.500)
        static let black_alfa60: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.600)
        static let black_alfa70: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.700)
        static let black_alfa80: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.800)
        static let black_alfa90: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.900)
        static let white_alfa10: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.100)
        static let white_alfa20: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.200)
        static let white_alfa30: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.300)
        static let white_alfa40: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.400)
        static let white_alfa50: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        static let white_alfa60: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.600)
        static let white_alfa70: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.700)
        static let white_alfa80: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.800)
        static let white_alfa90: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.900)
        static let ui_jonquil: UIColor = UIColor(red: 1.000, green: 0.863, blue: 0.376, alpha: 1.000)
        static let ui_champagne: UIColor = UIColor(red: 1.000, green: 0.922, blue: 0.627, alpha: 1.000)
        static let ui_red: UIColor = UIColor(red: 1.000, green: 0.345, blue: 0.345, alpha: 1.000)
        static let ui_red_night: UIColor = UIColor(red: 0.949, green: 0.427, blue: 0.427, alpha: 1.000)
        static let ui_blue: UIColor = UIColor(red: 0.098, green: 0.549, blue: 1.000, alpha: 1.000)
        static let ui_blue_night: UIColor = UIColor(red: 0.349, green: 0.686, blue: 1.000, alpha: 1.000)
        static let transit_lilac: UIColor = UIColor(red: 0.596, green: 0.271, blue: 0.902, alpha: 1.000)
        static let transit_yellow: UIColor = UIColor(red: 1.000, green: 0.867, blue: 0.200, alpha: 1.000)
        static let transit_blue_night: UIColor = UIColor(red: 0.161, green: 0.478, blue: 0.800, alpha: 1.000)
        static let transit_deep_blue: UIColor = UIColor(red: 0.129, green: 0.302, blue: 0.651, alpha: 1.000)
        static let transit_cyan_night: UIColor = UIColor(red: 0.224, green: 0.729, blue: 0.902, alpha: 1.000)
        static let transit_magenta: UIColor = UIColor(red: 0.949, green: 0.286, blue: 0.506, alpha: 1.000)
        static let transit_cyan: UIColor = UIColor(red: 0.000, green: 0.631, blue: 0.902, alpha: 1.000)
        static let transit_grass: UIColor = UIColor(red: 0.212, green: 0.702, blue: 0.373, alpha: 1.000)
        static let transit_emerald_night: UIColor = UIColor(red: 0.122, green: 0.600, blue: 0.600, alpha: 1.000)
        static let transit_emerald: UIColor = UIColor(red: 0.000, green: 0.506, blue: 0.549, alpha: 1.000)
        static let transit_deep_red: UIColor = UIColor(red: 0.851, green: 0.298, blue: 0.298, alpha: 1.000)
        static let transit_purple_night: UIColor = UIColor(red: 0.384, green: 0.459, blue: 0.851, alpha: 1.000)
        static let transit_purple: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.600, alpha: 1.000)
        static let transit_green_night: UIColor = UIColor(red: 0.098, green: 0.651, blue: 0.373, alpha: 1.000)
        static let transit_green: UIColor = UIColor(red: 0.059, green: 0.600, blue: 0.329, alpha: 1.000)
        static let transit_red_night: UIColor = UIColor(red: 0.949, green: 0.333, blue: 0.333, alpha: 1.000)
        static let transit_red: UIColor = UIColor(red: 1.000, green: 0.298, blue: 0.298, alpha: 1.000)
        static let transit_orange_night: UIColor = UIColor(red: 0.949, green: 0.451, blue: 0.286, alpha: 1.000)
        static let transit_orange: UIColor = UIColor(red: 1.000, green: 0.400, blue: 0.200, alpha: 1.000)
        static let transit_maroon: UIColor = UIColor(red: 0.851, green: 0.169, blue: 0.227, alpha: 1.000)
        static let ui_red_shadow: UIColor = StyleKit_Metro.ui_red.withBrightness(0.6)
        static let subway_msk_line_1: UIColor = UIColor(red: 0.855, green: 0.129, blue: 0.157, alpha: 1.000)
        static let subway_msk_line_2: UIColor = UIColor(red: 0.282, green: 0.722, blue: 0.369, alpha: 1.000)
        static let subway_msk_line_3: UIColor = UIColor(red: 0.000, green: 0.471, blue: 0.749, alpha: 1.000)
        static let subway_msk_line_4: UIColor = UIColor(red: 0.000, green: 0.757, blue: 0.953, alpha: 1.000)
        static let subway_msk_line_5: UIColor = UIColor(red: 0.537, green: 0.306, blue: 0.208, alpha: 1.000)
        static let subway_msk_line_6: UIColor = UIColor(red: 0.961, green: 0.510, blue: 0.125, alpha: 1.000)
        static let subway_msk_line_7: UIColor = UIColor(red: 0.557, green: 0.278, blue: 0.608, alpha: 1.000)
        static let subway_msk_line_8: UIColor = UIColor(red: 1.000, green: 0.867, blue: 0.000, alpha: 1.000)
        static let subway_msk_line_9: UIColor = UIColor(red: 0.631, green: 0.635, blue: 0.639, alpha: 1.000)
        static let subway_msk_line_10: UIColor = UIColor(red: 0.706, green: 0.831, blue: 0.271, alpha: 1.000)
        static let subway_msk_line_11: UIColor = UIColor(red: 0.416, green: 0.788, blue: 0.784, alpha: 1.000)
        static let subway_msk_line_12: UIColor = UIColor(red: 0.675, green: 0.749, blue: 0.890, alpha: 1.000)
        static let subway_msk_line_14: UIColor = UIColor(red: 1.000, green: 0.659, blue: 0.686, alpha: 1.000)
        static let ui_green: UIColor = UIColor(red: 0.071, green: 0.702, blue: 0.384, alpha: 1.000)
        static let ui_goldenrod: UIColor = UIColor(red: 1.000, green: 0.800, blue: 0.000, alpha: 1.000)
        static let shadowTint: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let shadowPin6Blur40Red: NSShadow = NSShadow(color: StyleKit_Metro.ui_red_shadow.withAlphaComponent(0.4 * StyleKit_Metro.ui_red_shadow.cgColor.alpha), offset: CGSize(width: 0, height: 4), blurRadius: 6)
        static let shadowNavigationBar2Blur10Black: NSShadow = NSShadow(color: StyleKit_Metro.shadowTint.withAlphaComponent(0.1 * StyleKit_Metro.shadowTint.cgColor.alpha), offset: CGSize(width: 26, height: 1), blurRadius: 2)
        static var imageOfMap_controls_menu: UIImage?
        static var map_controls_menuTargets: [AnyObject]?
        static var imageOfSwitch_cells: UIImage?
        static var switch_cellsTargets: [AnyObject]?
        static var imageOfClear_input: UIImage?
        static var clear_inputTargets: [AnyObject]?
        static var imageOfPopup_to: UIImage?
        static var popup_toTargets: [AnyObject]?
        static var imageOfPopup_from: UIImage?
        static var popup_fromTargets: [AnyObject]?
        static var imageOfNavbar_arrow_back_android: UIImage?
        static var navbar_arrow_back_androidTargets: [AnyObject]?
        static var imageOfNavbar_close_android: UIImage?
        static var navbar_close_androidTargets: [AnyObject]?
        static var imageOfDisclosure_indicator: UIImage?
        static var disclosure_indicatorTargets: [AnyObject]?
        static var imageOfIcon_clear_field: UIImage?
        static var icon_clear_fieldTargets: [AnyObject]?
        static var imageOfShadow_navigation_bar: UIImage?
        static var shadow_navigation_barTargets: [AnyObject]?
        static var imageOfArrow_down: UIImage?
        static var arrow_downTargets: [AnyObject]?
        static var imageOfArrow_right: UIImage?
        static var arrow_rightTargets: [AnyObject]?
        static var imageOfArrow_up: UIImage?
        static var arrow_upTargets: [AnyObject]?
        static var imageOfArrow_left: UIImage?
        static var arrow_leftTargets: [AnyObject]?
        static var imageOfMap_placemark_ghost: UIImage?
        static var map_placemark_ghostTargets: [AnyObject]?
        static var imageOfMap_placemark_dot: UIImage?
        static var map_placemark_dotTargets: [AnyObject]?
        static var imageOfPin_mask_0: UIImage?
        static var pin_mask_0Targets: [AnyObject]?
        static var imageOfPin_mask_90: UIImage?
        static var pin_mask_90Targets: [AnyObject]?
        static var imageOfPin_mask_180: UIImage?
        static var pin_mask_180Targets: [AnyObject]?
        static var imageOfPin_mask_270: UIImage?
        static var pin_mask_270Targets: [AnyObject]?
        static var imageOfPin_shadow_0: UIImage?
        static var pin_shadow_0Targets: [AnyObject]?
        static var imageOfPin_shadow_90: UIImage?
        static var pin_shadow_90Targets: [AnyObject]?
        static var imageOfPin_shadow_180: UIImage?
        static var pin_shadow_180Targets: [AnyObject]?
        static var imageOfPin_shadow_270: UIImage?
        static var pin_shadow_270Targets: [AnyObject]?
        static var imageOfPin_a: UIImage?
        static var pin_aTargets: [AnyObject]?
        static var imageOfPin_b: UIImage?
        static var pin_bTargets: [AnyObject]?
        static var imageOfPin_dot: UIImage?
        static var pin_dotTargets: [AnyObject]?
        static var imageOfSubway_helsinki_20: UIImage?
        static var subway_helsinki_20Targets: [AnyObject]?
        static var imageOfSubway_ekb_20: UIImage?
        static var subway_ekb_20Targets: [AnyObject]?
        static var imageOfSubwaybus_istanbul_20: UIImage?
        static var subwaybus_istanbul_20Targets: [AnyObject]?
        static var imageOfSubway_baku_20: UIImage?
        static var subway_baku_20Targets: [AnyObject]?
        static var imageOfSubway_nsk_20: UIImage?
        static var subway_nsk_20Targets: [AnyObject]?
        static var imageOfSubway_kazan_20: UIImage?
        static var subway_kazan_20Targets: [AnyObject]?
        static var imageOfSubway_erevan_20: UIImage?
        static var subway_erevan_20Targets: [AnyObject]?
        static var imageOfSubway_london_20: UIImage?
        static var subway_london_20Targets: [AnyObject]?
        static var imageOfSubway_oslo_20: UIImage?
        static var subway_oslo_20Targets: [AnyObject]?
        static var imageOfSubway_berlin_sbahn_20: UIImage?
        static var subway_berlin_sbahn_20Targets: [AnyObject]?
        static var imageOfSubway_spb_20: UIImage?
        static var subway_spb_20Targets: [AnyObject]?
        static var imageOfSubway_lisboa_20: UIImage?
        static var subway_lisboa_20Targets: [AnyObject]?
        static var imageOfSubway_madrid_20: UIImage?
        static var subway_madrid_20Targets: [AnyObject]?
        static var imageOfSubway_Izmir_20: UIImage?
        static var subway_Izmir_20Targets: [AnyObject]?
        static var imageOfSubway_kiev_20: UIImage?
        static var subway_kiev_20Targets: [AnyObject]?
        static var imageOfSubway_tram_volgograd_20: UIImage?
        static var subway_tram_volgograd_20Targets: [AnyObject]?
        static var imageOfSubway_paris_20: UIImage?
        static var subway_paris_20Targets: [AnyObject]?
        static var imageOfSubway_budapest_20: UIImage?
        static var subway_budapest_20Targets: [AnyObject]?
        static var imageOfSubway_santiago_20: UIImage?
        static var subway_santiago_20Targets: [AnyObject]?
        static var imageOfSubway_istanbul_20: UIImage?
        static var subway_istanbul_20Targets: [AnyObject]?
        static var imageOfSubway_athens_20: UIImage?
        static var subway_athens_20Targets: [AnyObject]?
        static var imageOfSubway_ankara_20: UIImage?
        static var subway_ankara_20Targets: [AnyObject]?
        static var imageOfSubway_tbilisi_20: UIImage?
        static var subway_tbilisi_20Targets: [AnyObject]?
        static var imageOfSubway_bursa_20: UIImage?
        static var subway_bursa_20Targets: [AnyObject]?
        static var imageOfSubway_msk_20: UIImage?
        static var subway_msk_20Targets: [AnyObject]?
        static var imageOfSubway_stockholm_20: UIImage?
        static var subway_stockholm_20Targets: [AnyObject]?
        static var imageOfSubway_barcelona_20: UIImage?
        static var subway_barcelona_20Targets: [AnyObject]?
        static var imageOfSubway_almaty_20: UIImage?
        static var subway_almaty_20Targets: [AnyObject]?
        static var imageOfSubway_roma_20: UIImage?
        static var subway_roma_20Targets: [AnyObject]?
        static var imageOfSubway_fallback_20: UIImage?
        static var subway_fallback_20Targets: [AnyObject]?
        static var imageOfSubway_berlin_20: UIImage?
        static var subway_berlin_20Targets: [AnyObject]?
        static var imageOfSubway_kharkov_20: UIImage?
        static var subway_kharkov_20Targets: [AnyObject]?
        static var imageOfSubway_minsk_20: UIImage?
        static var subway_minsk_20Targets: [AnyObject]?
        static var imageOfSubway_samara_20: UIImage?
        static var subway_samara_20Targets: [AnyObject]?
        static var imageOfSubway_wein_20: UIImage?
        static var subway_wein_20Targets: [AnyObject]?
        static var imageOfSubway_dnepropetrovsk_20: UIImage?
        static var subway_dnepropetrovsk_20Targets: [AnyObject]?
        static var imageOfSubway_nn_20: UIImage?
        static var subway_nn_20Targets: [AnyObject]?
        static var imageOfSubway_berlin_20_suggest: UIImage?
        static var subway_berlin_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_kharkov_20_suggest: UIImage?
        static var subway_kharkov_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_fallback_20_suggest: UIImage?
        static var subway_fallback_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_london_20_suggest: UIImage?
        static var subway_london_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_roma_20_suggest: UIImage?
        static var subway_roma_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_oslo_20_suggest: UIImage?
        static var subway_oslo_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_madrid_20_suggest: UIImage?
        static var subway_madrid_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_nn_20_suggest: UIImage?
        static var subway_nn_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_helsinki_20_suggest: UIImage?
        static var subway_helsinki_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_barcelona_20_suggest: UIImage?
        static var subway_barcelona_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_kiev_20_suggest: UIImage?
        static var subway_kiev_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_baku_20_suggest: UIImage?
        static var subway_baku_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_paris_20_suggest: UIImage?
        static var subway_paris_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_athens_20_suggest: UIImage?
        static var subway_athens_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_bursa_20_suggest: UIImage?
        static var subway_bursa_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_tram_volgograd_20_suggest: UIImage?
        static var subway_tram_volgograd_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_budapest_20_suggest: UIImage?
        static var subway_budapest_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_nsk_20_suggest: UIImage?
        static var subway_nsk_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_almaty_20_suggest: UIImage?
        static var subway_almaty_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_stockholm_20_suggest: UIImage?
        static var subway_stockholm_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_istanbul_20_suggest: UIImage?
        static var subway_istanbul_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_spb_20_suggest: UIImage?
        static var subway_spb_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_kazan_20_suggest: UIImage?
        static var subway_kazan_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_Izmir_20_suggest: UIImage?
        static var subway_Izmir_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_lisboa_20_suggest: UIImage?
        static var subway_lisboa_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_ekb_20_suggest: UIImage?
        static var subway_ekb_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_berlin_sbahn_20_suggest: UIImage?
        static var subway_berlin_sbahn_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_minsk_20_suggest: UIImage?
        static var subway_minsk_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_msk_20_suggest: UIImage?
        static var subway_msk_20_suggestTargets: [AnyObject]?
        static var imageOfSubwaybus_istanbul_20_suggest: UIImage?
        static var subwaybus_istanbul_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_dnepropetrovsk_20_suggest: UIImage?
        static var subway_dnepropetrovsk_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_tbilisi_20_suggest: UIImage?
        static var subway_tbilisi_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_ankara_20_suggest: UIImage?
        static var subway_ankara_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_wein_20_suggest: UIImage?
        static var subway_wein_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_santiago_20_suggest: UIImage?
        static var subway_santiago_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_erevan_20_suggest: UIImage?
        static var subway_erevan_20_suggestTargets: [AnyObject]?
        static var imageOfSubway_samara_20_suggest: UIImage?
        static var subway_samara_20_suggestTargets: [AnyObject]?
        static var imageOfDownload_complete: UIImage?
        static var download_completeTargets: [AnyObject]?
        static var imageOfDownload_failed: UIImage?
        static var download_failedTargets: [AnyObject]?
        static var imageOfHistory: UIImage?
        static var historyTargets: [AnyObject]?
        static var imageOfInfo: UIImage?
        static var infoTargets: [AnyObject]?
        static var imageOfMy_location: UIImage?
        static var my_locationTargets: [AnyObject]?
        static var imageOfIcon_check: UIImage?
        static var icon_checkTargets: [AnyObject]?
        static var imageOfDownload_stop: UIImage?
        static var download_stopTargets: [AnyObject]?
        static var imageOfIcon_pass_podorozhnik: UIImage?
        static var icon_pass_podorozhnikTargets: [AnyObject]?
        static var imageOfIcon_pass_strelka: UIImage?
        static var icon_pass_strelkaTargets: [AnyObject]?
        static var imageOfIcon_pass_troyka: UIImage?
        static var icon_pass_troykaTargets: [AnyObject]?
        static var imageOfTransit_pedestrian: UIImage?
        static var transit_pedestrianTargets: [AnyObject]?
        static var imageOfRound_close: UIImage?
        static var round_closeTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var marker_red: UIColor { return Cache.marker_red }
    @objc dynamic public class var white100: UIColor { return Cache.white100 }
    @objc dynamic public class var black100: UIColor { return Cache.black100 }
    @objc dynamic public class var grey10: UIColor { return Cache.grey10 }
    @objc dynamic public class var grey20: UIColor { return Cache.grey20 }
    @objc dynamic public class var grey30: UIColor { return Cache.grey30 }
    @objc dynamic public class var grey40: UIColor { return Cache.grey40 }
    @objc dynamic public class var grey50: UIColor { return Cache.grey50 }
    @objc dynamic public class var grey60: UIColor { return Cache.grey60 }
    @objc dynamic public class var grey70: UIColor { return Cache.grey70 }
    @objc dynamic public class var grey80: UIColor { return Cache.grey80 }
    @objc dynamic public class var grey90: UIColor { return Cache.grey90 }
    @objc dynamic public class var grey05: UIColor { return Cache.grey05 }
    @objc dynamic public class var grey15: UIColor { return Cache.grey15 }
    @objc dynamic public class var grey25: UIColor { return Cache.grey25 }
    @objc dynamic public class var grey35: UIColor { return Cache.grey35 }
    @objc dynamic public class var grey45: UIColor { return Cache.grey45 }
    @objc dynamic public class var grey55: UIColor { return Cache.grey55 }
    @objc dynamic public class var grey65: UIColor { return Cache.grey65 }
    @objc dynamic public class var grey75: UIColor { return Cache.grey75 }
    @objc dynamic public class var grey85: UIColor { return Cache.grey85 }
    @objc dynamic public class var grey96: UIColor { return Cache.grey96 }
    @objc dynamic public class var black_alfa10: UIColor { return Cache.black_alfa10 }
    @objc dynamic public class var black_alfa20: UIColor { return Cache.black_alfa20 }
    @objc dynamic public class var black_alfa30: UIColor { return Cache.black_alfa30 }
    @objc dynamic public class var black_alfa40: UIColor { return Cache.black_alfa40 }
    @objc dynamic public class var black_alfa50: UIColor { return Cache.black_alfa50 }
    @objc dynamic public class var black_alfa60: UIColor { return Cache.black_alfa60 }
    @objc dynamic public class var black_alfa70: UIColor { return Cache.black_alfa70 }
    @objc dynamic public class var black_alfa80: UIColor { return Cache.black_alfa80 }
    @objc dynamic public class var black_alfa90: UIColor { return Cache.black_alfa90 }
    @objc dynamic public class var white_alfa10: UIColor { return Cache.white_alfa10 }
    @objc dynamic public class var white_alfa20: UIColor { return Cache.white_alfa20 }
    @objc dynamic public class var white_alfa30: UIColor { return Cache.white_alfa30 }
    @objc dynamic public class var white_alfa40: UIColor { return Cache.white_alfa40 }
    @objc dynamic public class var white_alfa50: UIColor { return Cache.white_alfa50 }
    @objc dynamic public class var white_alfa60: UIColor { return Cache.white_alfa60 }
    @objc dynamic public class var white_alfa70: UIColor { return Cache.white_alfa70 }
    @objc dynamic public class var white_alfa80: UIColor { return Cache.white_alfa80 }
    @objc dynamic public class var white_alfa90: UIColor { return Cache.white_alfa90 }
    @objc dynamic public class var ui_jonquil: UIColor { return Cache.ui_jonquil }
    @objc dynamic public class var ui_champagne: UIColor { return Cache.ui_champagne }
    @objc dynamic public class var ui_red: UIColor { return Cache.ui_red }
    @objc dynamic public class var ui_red_night: UIColor { return Cache.ui_red_night }
    @objc dynamic public class var ui_blue: UIColor { return Cache.ui_blue }
    @objc dynamic public class var ui_blue_night: UIColor { return Cache.ui_blue_night }
    @objc dynamic public class var transit_lilac: UIColor { return Cache.transit_lilac }
    @objc dynamic public class var transit_yellow: UIColor { return Cache.transit_yellow }
    @objc dynamic public class var transit_blue_night: UIColor { return Cache.transit_blue_night }
    @objc dynamic public class var transit_deep_blue: UIColor { return Cache.transit_deep_blue }
    @objc dynamic public class var transit_cyan_night: UIColor { return Cache.transit_cyan_night }
    @objc dynamic public class var transit_magenta: UIColor { return Cache.transit_magenta }
    @objc dynamic public class var transit_cyan: UIColor { return Cache.transit_cyan }
    @objc dynamic public class var transit_grass: UIColor { return Cache.transit_grass }
    @objc dynamic public class var transit_emerald_night: UIColor { return Cache.transit_emerald_night }
    @objc dynamic public class var transit_emerald: UIColor { return Cache.transit_emerald }
    @objc dynamic public class var transit_deep_red: UIColor { return Cache.transit_deep_red }
    @objc dynamic public class var transit_purple_night: UIColor { return Cache.transit_purple_night }
    @objc dynamic public class var transit_purple: UIColor { return Cache.transit_purple }
    @objc dynamic public class var transit_green_night: UIColor { return Cache.transit_green_night }
    @objc dynamic public class var transit_green: UIColor { return Cache.transit_green }
    @objc dynamic public class var transit_red_night: UIColor { return Cache.transit_red_night }
    @objc dynamic public class var transit_red: UIColor { return Cache.transit_red }
    @objc dynamic public class var transit_orange_night: UIColor { return Cache.transit_orange_night }
    @objc dynamic public class var transit_orange: UIColor { return Cache.transit_orange }
    @objc dynamic public class var transit_maroon: UIColor { return Cache.transit_maroon }
    @objc dynamic public class var ui_red_shadow: UIColor { return Cache.ui_red_shadow }
    @objc dynamic public class var subway_msk_line_1: UIColor { return Cache.subway_msk_line_1 }
    @objc dynamic public class var subway_msk_line_2: UIColor { return Cache.subway_msk_line_2 }
    @objc dynamic public class var subway_msk_line_3: UIColor { return Cache.subway_msk_line_3 }
    @objc dynamic public class var subway_msk_line_4: UIColor { return Cache.subway_msk_line_4 }
    @objc dynamic public class var subway_msk_line_5: UIColor { return Cache.subway_msk_line_5 }
    @objc dynamic public class var subway_msk_line_6: UIColor { return Cache.subway_msk_line_6 }
    @objc dynamic public class var subway_msk_line_7: UIColor { return Cache.subway_msk_line_7 }
    @objc dynamic public class var subway_msk_line_8: UIColor { return Cache.subway_msk_line_8 }
    @objc dynamic public class var subway_msk_line_9: UIColor { return Cache.subway_msk_line_9 }
    @objc dynamic public class var subway_msk_line_10: UIColor { return Cache.subway_msk_line_10 }
    @objc dynamic public class var subway_msk_line_11: UIColor { return Cache.subway_msk_line_11 }
    @objc dynamic public class var subway_msk_line_12: UIColor { return Cache.subway_msk_line_12 }
    @objc dynamic public class var subway_msk_line_14: UIColor { return Cache.subway_msk_line_14 }
    @objc dynamic public class var ui_green: UIColor { return Cache.ui_green }
    @objc dynamic public class var ui_goldenrod: UIColor { return Cache.ui_goldenrod }
    @objc dynamic public class var shadowTint: UIColor { return Cache.shadowTint }

    //// Shadows

    @objc dynamic public class var shadowPin6Blur40Red: NSShadow { return Cache.shadowPin6Blur40Red }
    @objc dynamic public class var shadowNavigationBar2Blur10Black: NSShadow { return Cache.shadowNavigationBar2Blur10Black }

    //// Drawing Methods

    @objc dynamic public class func drawMap_controls_menu(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 14.99, y: 21), controlPoint1: CGPoint(x: 14, y: 20.55), controlPoint2: CGPoint(x: 14.46, y: 21))
        bezierPath.addLine(to: CGPoint(x: 33.01, y: 21))
        bezierPath.addLine(to: CGPoint(x: 33.01, y: 21))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 20.01), controlPoint1: CGPoint(x: 33.56, y: 21), controlPoint2: CGPoint(x: 34, y: 20.56))
        bezierPath.addCurve(to: CGPoint(x: 33.01, y: 19), controlPoint1: CGPoint(x: 34, y: 19.45), controlPoint2: CGPoint(x: 33.55, y: 19))
        bezierPath.addLine(to: CGPoint(x: 14.99, y: 19))
        bezierPath.addLine(to: CGPoint(x: 14.99, y: 19))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 19.99), controlPoint1: CGPoint(x: 14.44, y: 19), controlPoint2: CGPoint(x: 14, y: 19.44))
        bezierPath.addLine(to: CGPoint(x: 14, y: 20))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 14.99, y: 29), controlPoint1: CGPoint(x: 14, y: 28.55), controlPoint2: CGPoint(x: 14.46, y: 29))
        bezierPath.addLine(to: CGPoint(x: 33.01, y: 29))
        bezierPath.addLine(to: CGPoint(x: 33.01, y: 29))
        bezierPath.addCurve(to: CGPoint(x: 34, y: 28.01), controlPoint1: CGPoint(x: 33.56, y: 29), controlPoint2: CGPoint(x: 34, y: 28.56))
        bezierPath.addCurve(to: CGPoint(x: 33.01, y: 27), controlPoint1: CGPoint(x: 34, y: 27.45), controlPoint2: CGPoint(x: 33.55, y: 27))
        bezierPath.addLine(to: CGPoint(x: 14.99, y: 27))
        bezierPath.addLine(to: CGPoint(x: 14.99, y: 27))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 27.99), controlPoint1: CGPoint(x: 14.44, y: 27), controlPoint2: CGPoint(x: 14, y: 27.44))
        bezierPath.addLine(to: CGPoint(x: 14, y: 28))
        bezierPath.close()
        StyleKit_Metro.grey40.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSwitch_cells(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11, y: 12))
        bezierPath.addLine(to: CGPoint(x: 11, y: 3.41))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 4.71))
        bezierPath.addLine(to: CGPoint(x: 9.71, y: 4.71))
        bezierPath.addCurve(to: CGPoint(x: 8.29, y: 4.68), controlPoint1: CGPoint(x: 9.31, y: 5.09), controlPoint2: CGPoint(x: 8.68, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 8.29, y: 3.29), controlPoint1: CGPoint(x: 7.92, y: 4.29), controlPoint2: CGPoint(x: 7.92, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 11.29, y: 0.29))
        bezierPath.addLine(to: CGPoint(x: 11.29, y: 0.29))
        bezierPath.addCurve(to: CGPoint(x: 12.71, y: 0.29), controlPoint1: CGPoint(x: 11.68, y: -0.1), controlPoint2: CGPoint(x: 12.32, y: -0.1))
        bezierPath.addLine(to: CGPoint(x: 15.71, y: 3.29))
        bezierPath.addLine(to: CGPoint(x: 15.71, y: 3.29))
        bezierPath.addCurve(to: CGPoint(x: 15.73, y: 4.71), controlPoint1: CGPoint(x: 16.1, y: 3.68), controlPoint2: CGPoint(x: 16.12, y: 4.31))
        bezierPath.addCurve(to: CGPoint(x: 14.32, y: 4.73), controlPoint1: CGPoint(x: 15.35, y: 5.1), controlPoint2: CGPoint(x: 14.71, y: 5.12))
        bezierPath.addCurve(to: CGPoint(x: 14.29, y: 4.71), controlPoint1: CGPoint(x: 14.31, y: 4.72), controlPoint2: CGPoint(x: 14.3, y: 4.72))
        bezierPath.addLine(to: CGPoint(x: 13, y: 3.41))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 13), controlPoint1: CGPoint(x: 13, y: 12.56), controlPoint2: CGPoint(x: 12.55, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 12), controlPoint1: CGPoint(x: 11.45, y: 13), controlPoint2: CGPoint(x: 11, y: 12.56))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 4))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 3), controlPoint1: CGPoint(x: 3, y: 3.44), controlPoint2: CGPoint(x: 3.45, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 4), controlPoint1: CGPoint(x: 4.55, y: 3), controlPoint2: CGPoint(x: 5, y: 3.44))
        bezierPath.addLine(to: CGPoint(x: 5, y: 12.59))
        bezierPath.addLine(to: CGPoint(x: 6.29, y: 11.29))
        bezierPath.addLine(to: CGPoint(x: 6.29, y: 11.29))
        bezierPath.addCurve(to: CGPoint(x: 7.71, y: 11.27), controlPoint1: CGPoint(x: 6.68, y: 10.9), controlPoint2: CGPoint(x: 7.31, y: 10.88))
        bezierPath.addCurve(to: CGPoint(x: 7.73, y: 12.68), controlPoint1: CGPoint(x: 8.1, y: 11.65), controlPoint2: CGPoint(x: 8.12, y: 12.29))
        bezierPath.addCurve(to: CGPoint(x: 7.71, y: 12.71), controlPoint1: CGPoint(x: 7.72, y: 12.69), controlPoint2: CGPoint(x: 7.72, y: 12.7))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 15.71))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 15.71))
        bezierPath.addCurve(to: CGPoint(x: 3.29, y: 15.71), controlPoint1: CGPoint(x: 4.32, y: 16.1), controlPoint2: CGPoint(x: 3.68, y: 16.1))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 12.71))
        bezierPath.addLine(to: CGPoint(x: 0.29, y: 12.71))
        bezierPath.addCurve(to: CGPoint(x: 0.32, y: 11.29), controlPoint1: CGPoint(x: -0.09, y: 12.31), controlPoint2: CGPoint(x: -0.08, y: 11.68))
        bezierPath.addCurve(to: CGPoint(x: 1.71, y: 11.29), controlPoint1: CGPoint(x: 0.71, y: 10.92), controlPoint2: CGPoint(x: 1.32, y: 10.92))
        bezierPath.addLine(to: CGPoint(x: 3, y: 12.59))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4))
        bezierPath.close()
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClear_input(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.59, y: 8))
        bezierPath.addLine(to: CGPoint(x: 3.29, y: 11.29))
        bezierPath.addLine(to: CGPoint(x: 3.29, y: 11.29))
        bezierPath.addCurve(to: CGPoint(x: 3.32, y: 12.71), controlPoint1: CGPoint(x: 2.91, y: 11.69), controlPoint2: CGPoint(x: 2.92, y: 12.32))
        bezierPath.addCurve(to: CGPoint(x: 4.71, y: 12.71), controlPoint1: CGPoint(x: 3.71, y: 13.08), controlPoint2: CGPoint(x: 4.32, y: 13.08))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.41))
        bezierPath.addLine(to: CGPoint(x: 11.29, y: 12.71))
        bezierPath.addLine(to: CGPoint(x: 11.29, y: 12.71))
        bezierPath.addCurve(to: CGPoint(x: 12.71, y: 12.68), controlPoint1: CGPoint(x: 11.69, y: 13.09), controlPoint2: CGPoint(x: 12.32, y: 13.08))
        bezierPath.addCurve(to: CGPoint(x: 12.71, y: 11.29), controlPoint1: CGPoint(x: 13.08, y: 12.29), controlPoint2: CGPoint(x: 13.08, y: 11.68))
        bezierPath.addLine(to: CGPoint(x: 9.41, y: 8))
        bezierPath.addLine(to: CGPoint(x: 12.71, y: 4.71))
        bezierPath.addLine(to: CGPoint(x: 12.71, y: 4.71))
        bezierPath.addCurve(to: CGPoint(x: 12.73, y: 3.29), controlPoint1: CGPoint(x: 13.1, y: 4.32), controlPoint2: CGPoint(x: 13.12, y: 3.69))
        bezierPath.addCurve(to: CGPoint(x: 11.32, y: 3.27), controlPoint1: CGPoint(x: 12.35, y: 2.9), controlPoint2: CGPoint(x: 11.71, y: 2.88))
        bezierPath.addCurve(to: CGPoint(x: 11.29, y: 3.29), controlPoint1: CGPoint(x: 11.31, y: 3.28), controlPoint2: CGPoint(x: 11.3, y: 3.28))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6.59))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 3.29))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 3.29))
        bezierPath.addCurve(to: CGPoint(x: 3.29, y: 3.32), controlPoint1: CGPoint(x: 4.31, y: 2.91), controlPoint2: CGPoint(x: 3.68, y: 2.92))
        bezierPath.addCurve(to: CGPoint(x: 3.29, y: 4.71), controlPoint1: CGPoint(x: 2.92, y: 3.71), controlPoint2: CGPoint(x: 2.92, y: 4.32))
        bezierPath.addLine(to: CGPoint(x: 6.59, y: 8))
        bezierPath.close()
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPopup_to(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 24))
        bezierPath.addLine(to: CGPoint(x: 6, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 21), controlPoint1: CGPoint(x: 4.34, y: 24), controlPoint2: CGPoint(x: 3, y: 22.66))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 18), controlPoint1: CGPoint(x: 3, y: 19.34), controlPoint2: CGPoint(x: 4.34, y: 18))
        bezierPath.addLine(to: CGPoint(x: 6, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 21), controlPoint1: CGPoint(x: 7.66, y: 18), controlPoint2: CGPoint(x: 9, y: 19.34))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 24), controlPoint1: CGPoint(x: 9, y: 22.66), controlPoint2: CGPoint(x: 7.66, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.5, y: 9.88))
        bezierPath.addLine(to: CGPoint(x: 8.94, y: 8.44))
        bezierPath.addLine(to: CGPoint(x: 8.94, y: 8.44))
        bezierPath.addCurve(to: CGPoint(x: 11.06, y: 8.48), controlPoint1: CGPoint(x: 9.54, y: 7.86), controlPoint2: CGPoint(x: 10.49, y: 7.88))
        bezierPath.addCurve(to: CGPoint(x: 11.06, y: 10.56), controlPoint1: CGPoint(x: 11.62, y: 9.06), controlPoint2: CGPoint(x: 11.62, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 7.06, y: 14.56))
        bezierPath.addLine(to: CGPoint(x: 7.06, y: 14.56))
        bezierPath.addCurve(to: CGPoint(x: 4.94, y: 14.56), controlPoint1: CGPoint(x: 6.47, y: 15.15), controlPoint2: CGPoint(x: 5.53, y: 15.15))
        bezierPath.addLine(to: CGPoint(x: 0.94, y: 10.56))
        bezierPath.addLine(to: CGPoint(x: 0.94, y: 10.56))
        bezierPath.addCurve(to: CGPoint(x: 0.98, y: 8.44), controlPoint1: CGPoint(x: 0.36, y: 9.96), controlPoint2: CGPoint(x: 0.38, y: 9.01))
        bezierPath.addCurve(to: CGPoint(x: 3.06, y: 8.44), controlPoint1: CGPoint(x: 1.56, y: 7.88), controlPoint2: CGPoint(x: 2.48, y: 7.88))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 9.88))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 2))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 0.5), controlPoint1: CGPoint(x: 4.5, y: 1.17), controlPoint2: CGPoint(x: 5.17, y: 0.5))
        bezierPath.addCurve(to: CGPoint(x: 7.5, y: 2), controlPoint1: CGPoint(x: 6.83, y: 0.5), controlPoint2: CGPoint(x: 7.5, y: 1.17))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 9.88))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white_alfa80.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPopup_from(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 24))
        bezierPath.addLine(to: CGPoint(x: 6, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 21), controlPoint1: CGPoint(x: 4.34, y: 24), controlPoint2: CGPoint(x: 3, y: 22.66))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 18), controlPoint1: CGPoint(x: 3, y: 19.34), controlPoint2: CGPoint(x: 4.34, y: 18))
        bezierPath.addLine(to: CGPoint(x: 6, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 21), controlPoint1: CGPoint(x: 7.66, y: 18), controlPoint2: CGPoint(x: 9, y: 19.34))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 24), controlPoint1: CGPoint(x: 9, y: 22.66), controlPoint2: CGPoint(x: 7.66, y: 24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.5, y: 5.62))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 15), controlPoint1: CGPoint(x: 7.5, y: 14.33), controlPoint2: CGPoint(x: 6.83, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 13.5), controlPoint1: CGPoint(x: 5.17, y: 15), controlPoint2: CGPoint(x: 4.5, y: 14.33))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 5.62))
        bezierPath.addLine(to: CGPoint(x: 3.06, y: 7.06))
        bezierPath.addLine(to: CGPoint(x: 3.06, y: 7.06))
        bezierPath.addCurve(to: CGPoint(x: 0.94, y: 7.1), controlPoint1: CGPoint(x: 2.49, y: 7.66), controlPoint2: CGPoint(x: 1.54, y: 7.67))
        bezierPath.addCurve(to: CGPoint(x: 0.9, y: 4.98), controlPoint1: CGPoint(x: 0.34, y: 6.52), controlPoint2: CGPoint(x: 0.33, y: 5.57))
        bezierPath.addCurve(to: CGPoint(x: 0.94, y: 4.94), controlPoint1: CGPoint(x: 0.91, y: 4.96), controlPoint2: CGPoint(x: 0.93, y: 4.95))
        bezierPath.addLine(to: CGPoint(x: 4.94, y: 0.94))
        bezierPath.addLine(to: CGPoint(x: 4.94, y: 0.94))
        bezierPath.addCurve(to: CGPoint(x: 7.06, y: 0.94), controlPoint1: CGPoint(x: 5.53, y: 0.35), controlPoint2: CGPoint(x: 6.47, y: 0.35))
        bezierPath.addLine(to: CGPoint(x: 11.06, y: 4.94))
        bezierPath.addLine(to: CGPoint(x: 11.06, y: 4.94))
        bezierPath.addCurve(to: CGPoint(x: 11.02, y: 7.06), controlPoint1: CGPoint(x: 11.64, y: 5.54), controlPoint2: CGPoint(x: 11.62, y: 6.49))
        bezierPath.addCurve(to: CGPoint(x: 8.94, y: 7.06), controlPoint1: CGPoint(x: 10.44, y: 7.62), controlPoint2: CGPoint(x: 9.52, y: 7.62))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 5.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white_alfa80.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNavbar_arrow_back_android(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 21.01, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 22, y: 12), controlPoint1: CGPoint(x: 21.54, y: 11), controlPoint2: CGPoint(x: 22, y: 11.45))
        bezierPath.addCurve(to: CGPoint(x: 21.01, y: 13), controlPoint1: CGPoint(x: 22, y: 12.56), controlPoint2: CGPoint(x: 21.56, y: 13))
        bezierPath.addLine(to: CGPoint(x: 5.4, y: 13))
        bezierPath.addLine(to: CGPoint(x: 11.71, y: 19.29))
        bezierPath.addLine(to: CGPoint(x: 11.71, y: 19.29))
        bezierPath.addCurve(to: CGPoint(x: 11.68, y: 20.71), controlPoint1: CGPoint(x: 12.09, y: 19.69), controlPoint2: CGPoint(x: 12.08, y: 20.32))
        bezierPath.addCurve(to: CGPoint(x: 10.29, y: 20.71), controlPoint1: CGPoint(x: 11.29, y: 21.08), controlPoint2: CGPoint(x: 10.68, y: 21.08))
        bezierPath.addLine(to: CGPoint(x: 2.29, y: 12.71))
        bezierPath.addLine(to: CGPoint(x: 2.29, y: 12.71))
        bezierPath.addCurve(to: CGPoint(x: 2.29, y: 11.29), controlPoint1: CGPoint(x: 1.9, y: 12.32), controlPoint2: CGPoint(x: 1.9, y: 11.68))
        bezierPath.addLine(to: CGPoint(x: 10.29, y: 3.29))
        bezierPath.addLine(to: CGPoint(x: 10.29, y: 3.29))
        bezierPath.addCurve(to: CGPoint(x: 11.71, y: 3.29), controlPoint1: CGPoint(x: 10.68, y: 2.9), controlPoint2: CGPoint(x: 11.32, y: 2.9))
        bezierPath.addCurve(to: CGPoint(x: 11.71, y: 4.71), controlPoint1: CGPoint(x: 12.1, y: 3.68), controlPoint2: CGPoint(x: 12.1, y: 4.32))
        bezierPath.addLine(to: CGPoint(x: 5.4, y: 11))
        bezierPath.addLine(to: CGPoint(x: 21.01, y: 11))
        bezierPath.close()
        StyleKit_Metro.grey40.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNavbar_close_android(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.59, y: 12))
        bezierPath.addLine(to: CGPoint(x: 3.29, y: 4.71))
        bezierPath.addLine(to: CGPoint(x: 3.29, y: 4.71))
        bezierPath.addCurve(to: CGPoint(x: 3.32, y: 3.29), controlPoint1: CGPoint(x: 2.91, y: 4.31), controlPoint2: CGPoint(x: 2.92, y: 3.68))
        bezierPath.addCurve(to: CGPoint(x: 4.71, y: 3.29), controlPoint1: CGPoint(x: 3.71, y: 2.92), controlPoint2: CGPoint(x: 4.32, y: 2.92))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10.59))
        bezierPath.addLine(to: CGPoint(x: 19.29, y: 3.29))
        bezierPath.addLine(to: CGPoint(x: 19.29, y: 3.29))
        bezierPath.addCurve(to: CGPoint(x: 20.71, y: 3.32), controlPoint1: CGPoint(x: 19.69, y: 2.91), controlPoint2: CGPoint(x: 20.32, y: 2.92))
        bezierPath.addCurve(to: CGPoint(x: 20.71, y: 4.71), controlPoint1: CGPoint(x: 21.08, y: 3.71), controlPoint2: CGPoint(x: 21.08, y: 4.32))
        bezierPath.addLine(to: CGPoint(x: 13.41, y: 12))
        bezierPath.addLine(to: CGPoint(x: 20.71, y: 19.29))
        bezierPath.addLine(to: CGPoint(x: 20.71, y: 19.29))
        bezierPath.addCurve(to: CGPoint(x: 20.68, y: 20.71), controlPoint1: CGPoint(x: 21.09, y: 19.69), controlPoint2: CGPoint(x: 21.08, y: 20.32))
        bezierPath.addCurve(to: CGPoint(x: 19.29, y: 20.71), controlPoint1: CGPoint(x: 20.29, y: 21.08), controlPoint2: CGPoint(x: 19.68, y: 21.08))
        bezierPath.addLine(to: CGPoint(x: 12, y: 13.41))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 20.71))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 20.71))
        bezierPath.addCurve(to: CGPoint(x: 3.29, y: 20.73), controlPoint1: CGPoint(x: 4.32, y: 21.1), controlPoint2: CGPoint(x: 3.69, y: 21.12))
        bezierPath.addCurve(to: CGPoint(x: 3.27, y: 19.32), controlPoint1: CGPoint(x: 2.9, y: 20.35), controlPoint2: CGPoint(x: 2.88, y: 19.71))
        bezierPath.addCurve(to: CGPoint(x: 3.29, y: 19.29), controlPoint1: CGPoint(x: 3.28, y: 19.31), controlPoint2: CGPoint(x: 3.28, y: 19.3))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 12))
        bezierPath.close()
        StyleKit_Metro.grey40.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDisclosure_indicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.6, y: 8))
        bezierPath.addLine(to: CGPoint(x: 4.29, y: 13.29))
        bezierPath.addLine(to: CGPoint(x: 4.29, y: 13.29))
        bezierPath.addCurve(to: CGPoint(x: 4.27, y: 14.71), controlPoint1: CGPoint(x: 3.9, y: 13.68), controlPoint2: CGPoint(x: 3.88, y: 14.31))
        bezierPath.addCurve(to: CGPoint(x: 5.68, y: 14.73), controlPoint1: CGPoint(x: 4.65, y: 15.1), controlPoint2: CGPoint(x: 5.29, y: 15.12))
        bezierPath.addCurve(to: CGPoint(x: 5.71, y: 14.71), controlPoint1: CGPoint(x: 5.69, y: 14.72), controlPoint2: CGPoint(x: 5.7, y: 14.72))
        bezierPath.addLine(to: CGPoint(x: 11.71, y: 8.71))
        bezierPath.addLine(to: CGPoint(x: 11.71, y: 8.71))
        bezierPath.addCurve(to: CGPoint(x: 11.71, y: 7.29), controlPoint1: CGPoint(x: 12.1, y: 8.32), controlPoint2: CGPoint(x: 12.1, y: 7.68))
        bezierPath.addLine(to: CGPoint(x: 5.71, y: 1.29))
        bezierPath.addLine(to: CGPoint(x: 5.71, y: 1.29))
        bezierPath.addCurve(to: CGPoint(x: 4.29, y: 1.27), controlPoint1: CGPoint(x: 5.32, y: 0.9), controlPoint2: CGPoint(x: 4.69, y: 0.88))
        bezierPath.addCurve(to: CGPoint(x: 4.27, y: 2.68), controlPoint1: CGPoint(x: 3.9, y: 1.65), controlPoint2: CGPoint(x: 3.88, y: 2.29))
        bezierPath.addCurve(to: CGPoint(x: 4.29, y: 2.71), controlPoint1: CGPoint(x: 4.28, y: 2.69), controlPoint2: CGPoint(x: 4.28, y: 2.7))
        bezierPath.addLine(to: CGPoint(x: 9.6, y: 8))
        bezierPath.close()
        StyleKit_Metro.grey60.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIcon_clear_field(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8, y: 16))
        bezierPath.addLine(to: CGPoint(x: 8, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 3.58, y: 16), controlPoint2: CGPoint(x: 0, y: 12.42))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
        bezierPath.addLine(to: CGPoint(x: 8, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 8), controlPoint1: CGPoint(x: 12.42, y: 0), controlPoint2: CGPoint(x: 16, y: 3.58))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 16), controlPoint1: CGPoint(x: 16, y: 12.42), controlPoint2: CGPoint(x: 12.42, y: 16))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.81, y: 6.22))
        bezierPath.addLine(to: CGPoint(x: 6.59, y: 8))
        bezierPath.addLine(to: CGPoint(x: 4.81, y: 9.78))
        bezierPath.addCurve(to: CGPoint(x: 6.22, y: 11.19), controlPoint1: CGPoint(x: 3.87, y: 10.72), controlPoint2: CGPoint(x: 5.28, y: 12.13))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.41))
        bezierPath.addLine(to: CGPoint(x: 9.78, y: 11.19))
        bezierPath.addCurve(to: CGPoint(x: 11.19, y: 9.78), controlPoint1: CGPoint(x: 10.72, y: 12.13), controlPoint2: CGPoint(x: 12.13, y: 10.72))
        bezierPath.addLine(to: CGPoint(x: 9.41, y: 8))
        bezierPath.addLine(to: CGPoint(x: 11.19, y: 6.22))
        bezierPath.addCurve(to: CGPoint(x: 9.78, y: 4.81), controlPoint1: CGPoint(x: 12.13, y: 5.28), controlPoint2: CGPoint(x: 10.72, y: 3.87))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6.59))
        bezierPath.addLine(to: CGPoint(x: 6.22, y: 4.81))
        bezierPath.addCurve(to: CGPoint(x: 4.81, y: 6.22), controlPoint1: CGPoint(x: 5.28, y: 3.87), controlPoint2: CGPoint(x: 3.87, y: 5.28))
        bezierPath.close()
        StyleKit_Metro.grey60.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawShadow_navigation_bar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1, height: 4), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1, height: 4), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1, y: resizedFrame.height / 4)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 1, resizedFrame.height / 4)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -30, y: -2, width: 9, height: 2))
        context.saveGState()
        context.setShadow(offset: CGSize(width: StyleKit_Metro.shadowNavigationBar2Blur10Black.shadowOffset.width * resizedShadowScale, height: StyleKit_Metro.shadowNavigationBar2Blur10Black.shadowOffset.height * resizedShadowScale), blur: StyleKit_Metro.shadowNavigationBar2Blur10Black.shadowBlurRadius * resizedShadowScale, color: (StyleKit_Metro.shadowNavigationBar2Blur10Black.shadowColor as! UIColor).cgColor)
        StyleKit_Metro.white100.setFill()
        rectanglePath.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawArrow_down() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.38, y: 1.85))
        bezierPath.addCurve(to: CGPoint(x: 6.89, y: 1), controlPoint1: CGPoint(x: 7.66, y: 1.38), controlPoint2: CGPoint(x: 7.44, y: 1))
        bezierPath.addLine(to: CGPoint(x: 1.11, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 0.62, y: 1.85), controlPoint1: CGPoint(x: 0.56, y: 1), controlPoint2: CGPoint(x: 0.34, y: 1.38))
        bezierPath.addLine(to: CGPoint(x: 3.49, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 4.51, y: 6.65), controlPoint1: CGPoint(x: 3.77, y: 7.12), controlPoint2: CGPoint(x: 4.23, y: 7.12))
        bezierPath.addLine(to: CGPoint(x: 7.38, y: 1.85))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawArrow_right() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 1.85, y: 0.62))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 1.11), controlPoint1: CGPoint(x: 1.38, y: 0.34), controlPoint2: CGPoint(x: 1, y: 0.56))
        bezierPath.addLine(to: CGPoint(x: 1, y: 6.89))
        bezierPath.addCurve(to: CGPoint(x: 1.85, y: 7.38), controlPoint1: CGPoint(x: 1, y: 7.44), controlPoint2: CGPoint(x: 1.38, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 6.65, y: 4.51))
        bezierPath.addCurve(to: CGPoint(x: 6.65, y: 3.49), controlPoint1: CGPoint(x: 7.12, y: 4.23), controlPoint2: CGPoint(x: 7.12, y: 3.77))
        bezierPath.addLine(to: CGPoint(x: 1.85, y: 0.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawArrow_up() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.38, y: 6.15))
        bezierPath.addCurve(to: CGPoint(x: 6.89, y: 7), controlPoint1: CGPoint(x: 7.66, y: 6.62), controlPoint2: CGPoint(x: 7.44, y: 7))
        bezierPath.addLine(to: CGPoint(x: 1.11, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 0.62, y: 6.15), controlPoint1: CGPoint(x: 0.56, y: 7), controlPoint2: CGPoint(x: 0.34, y: 6.62))
        bezierPath.addLine(to: CGPoint(x: 3.49, y: 1.35))
        bezierPath.addCurve(to: CGPoint(x: 4.51, y: 1.35), controlPoint1: CGPoint(x: 3.77, y: 0.88), controlPoint2: CGPoint(x: 4.23, y: 0.88))
        bezierPath.addLine(to: CGPoint(x: 7.38, y: 6.15))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawArrow_left() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.15, y: 0.62))
        bezierPath.addCurve(to: CGPoint(x: 7, y: 1.11), controlPoint1: CGPoint(x: 6.62, y: 0.34), controlPoint2: CGPoint(x: 7, y: 0.56))
        bezierPath.addLine(to: CGPoint(x: 7, y: 6.89))
        bezierPath.addCurve(to: CGPoint(x: 6.15, y: 7.38), controlPoint1: CGPoint(x: 7, y: 7.44), controlPoint2: CGPoint(x: 6.62, y: 7.66))
        bezierPath.addLine(to: CGPoint(x: 1.35, y: 4.51))
        bezierPath.addCurve(to: CGPoint(x: 1.35, y: 3.49), controlPoint1: CGPoint(x: 0.88, y: 4.23), controlPoint2: CGPoint(x: 0.88, y: 3.77))
        bezierPath.addLine(to: CGPoint(x: 6.15, y: 0.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
    }

    @objc dynamic public class func drawMap_placemark_ghost() {

        //// white Drawing
        let whitePath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 24, height: 24))
        StyleKit_Metro.white100.setFill()
        whitePath.fill()


        //// red Drawing
        let redPath = UIBezierPath(ovalIn: CGRect(x: 7, y: 7, width: 18, height: 18))
        StyleKit_Metro.grey60.setFill()
        redPath.fill()
    }

    @objc dynamic public class func drawMap_placemark_dot() {

        //// white Drawing
        let whitePath = UIBezierPath(ovalIn: CGRect(x: 4, y: 4, width: 24, height: 24))
        StyleKit_Metro.white100.setFill()
        whitePath.fill()


        //// red Drawing
        let redPath = UIBezierPath(ovalIn: CGRect(x: 7, y: 7, width: 18, height: 18))
        StyleKit_Metro.marker_red.setFill()
        redPath.fill()
    }

    @objc dynamic public class func drawPin_mask_0(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 28.16, y: 39.45))
        bezierPath.addLine(to: CGPoint(x: 28.17, y: 39.46))
        bezierPath.addCurve(to: CGPoint(x: 24.36, y: 43.67), controlPoint1: CGPoint(x: 25.74, y: 40.03), controlPoint2: CGPoint(x: 24.47, y: 41.44))
        bezierPath.addLine(to: CGPoint(x: 24.36, y: 43.67))
        bezierPath.addCurve(to: CGPoint(x: 24.01, y: 44), controlPoint1: CGPoint(x: 24.35, y: 43.86), controlPoint2: CGPoint(x: 24.19, y: 44))
        bezierPath.addLine(to: CGPoint(x: 23.99, y: 44))
        bezierPath.addLine(to: CGPoint(x: 23.99, y: 44))
        bezierPath.addCurve(to: CGPoint(x: 23.64, y: 43.67), controlPoint1: CGPoint(x: 23.81, y: 44), controlPoint2: CGPoint(x: 23.65, y: 43.86))
        bezierPath.addCurve(to: CGPoint(x: 19.83, y: 39.46), controlPoint1: CGPoint(x: 23.53, y: 41.44), controlPoint2: CGPoint(x: 22.26, y: 40.03))
        bezierPath.addLine(to: CGPoint(x: 19.83, y: 39.45))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 13.02, y: 37.62), controlPoint2: CGPoint(x: 8, y: 31.4))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 8, y: 15.16), controlPoint2: CGPoint(x: 15.16, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 24), controlPoint1: CGPoint(x: 32.84, y: 8), controlPoint2: CGPoint(x: 40, y: 15.16))
        bezierPath.addCurve(to: CGPoint(x: 28.16, y: 39.45), controlPoint1: CGPoint(x: 40, y: 31.4), controlPoint2: CGPoint(x: 34.98, y: 37.62))
        bezierPath.close()
        StyleKit_Metro.grey20.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_mask_90(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.55, y: 28.16))
        bezierPath.addLine(to: CGPoint(x: 8.54, y: 28.17))
        bezierPath.addCurve(to: CGPoint(x: 4.33, y: 24.36), controlPoint1: CGPoint(x: 7.97, y: 25.74), controlPoint2: CGPoint(x: 6.57, y: 24.47))
        bezierPath.addLine(to: CGPoint(x: 4.33, y: 24.36))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 24.01), controlPoint1: CGPoint(x: 4.14, y: 24.35), controlPoint2: CGPoint(x: 4, y: 24.19))
        bezierPath.addLine(to: CGPoint(x: 4, y: 23.99))
        bezierPath.addCurve(to: CGPoint(x: 4.33, y: 23.64), controlPoint1: CGPoint(x: 4, y: 23.81), controlPoint2: CGPoint(x: 4.14, y: 23.65))
        bezierPath.addCurve(to: CGPoint(x: 8.54, y: 19.83), controlPoint1: CGPoint(x: 6.56, y: 23.53), controlPoint2: CGPoint(x: 7.97, y: 22.26))
        bezierPath.addLine(to: CGPoint(x: 8.55, y: 19.84))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 10.38, y: 13.02), controlPoint2: CGPoint(x: 16.6, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 24), controlPoint1: CGPoint(x: 32.84, y: 8), controlPoint2: CGPoint(x: 40, y: 15.16))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 40, y: 32.84), controlPoint2: CGPoint(x: 32.84, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 8.55, y: 28.16), controlPoint1: CGPoint(x: 16.6, y: 40), controlPoint2: CGPoint(x: 10.38, y: 34.98))
        bezierPath.close()
        StyleKit_Metro.grey20.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_mask_180(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 19.84, y: 8.55))
        bezierPath.addLine(to: CGPoint(x: 19.83, y: 8.54))
        bezierPath.addCurve(to: CGPoint(x: 23.64, y: 4.33), controlPoint1: CGPoint(x: 22.26, y: 7.97), controlPoint2: CGPoint(x: 23.53, y: 6.56))
        bezierPath.addLine(to: CGPoint(x: 23.64, y: 4.33))
        bezierPath.addCurve(to: CGPoint(x: 23.99, y: 4), controlPoint1: CGPoint(x: 23.65, y: 4.14), controlPoint2: CGPoint(x: 23.81, y: 4))
        bezierPath.addLine(to: CGPoint(x: 24.01, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 24.36, y: 4.33), controlPoint1: CGPoint(x: 24.19, y: 4), controlPoint2: CGPoint(x: 24.35, y: 4.14))
        bezierPath.addCurve(to: CGPoint(x: 28.17, y: 8.54), controlPoint1: CGPoint(x: 24.47, y: 6.56), controlPoint2: CGPoint(x: 25.74, y: 7.97))
        bezierPath.addLine(to: CGPoint(x: 28.16, y: 8.55))
        bezierPath.addCurve(to: CGPoint(x: 40, y: 24), controlPoint1: CGPoint(x: 34.98, y: 10.38), controlPoint2: CGPoint(x: 40, y: 16.6))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 40, y: 32.84), controlPoint2: CGPoint(x: 32.84, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 15.16, y: 40), controlPoint2: CGPoint(x: 8, y: 32.84))
        bezierPath.addCurve(to: CGPoint(x: 19.84, y: 8.55), controlPoint1: CGPoint(x: 8, y: 16.6), controlPoint2: CGPoint(x: 13.02, y: 10.38))
        bezierPath.close()
        StyleKit_Metro.grey20.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_mask_270(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 39.45, y: 19.84))
        bezierPath.addLine(to: CGPoint(x: 39.46, y: 19.83))
        bezierPath.addCurve(to: CGPoint(x: 43.67, y: 23.64), controlPoint1: CGPoint(x: 40.03, y: 22.26), controlPoint2: CGPoint(x: 41.44, y: 23.53))
        bezierPath.addCurve(to: CGPoint(x: 44, y: 23.99), controlPoint1: CGPoint(x: 43.86, y: 23.65), controlPoint2: CGPoint(x: 44, y: 23.81))
        bezierPath.addLine(to: CGPoint(x: 44, y: 24.01))
        bezierPath.addLine(to: CGPoint(x: 44, y: 24.01))
        bezierPath.addCurve(to: CGPoint(x: 43.67, y: 24.36), controlPoint1: CGPoint(x: 44, y: 24.19), controlPoint2: CGPoint(x: 43.86, y: 24.35))
        bezierPath.addCurve(to: CGPoint(x: 39.46, y: 28.17), controlPoint1: CGPoint(x: 41.44, y: 24.47), controlPoint2: CGPoint(x: 40.03, y: 25.74))
        bezierPath.addLine(to: CGPoint(x: 39.45, y: 28.17))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 37.62, y: 34.98), controlPoint2: CGPoint(x: 31.4, y: 40))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 15.16, y: 40), controlPoint2: CGPoint(x: 8, y: 32.84))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 8, y: 15.16), controlPoint2: CGPoint(x: 15.16, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 39.45, y: 19.84), controlPoint1: CGPoint(x: 31.4, y: 8), controlPoint2: CGPoint(x: 37.62, y: 13.02))
        bezierPath.close()
        StyleKit_Metro.grey20.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_shadow_0(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 48, resizedFrame.height / 48)



        //// Shadow Declarations
        let shadowPin6Blur40Black = NSShadow(color: StyleKit_Metro.grey20.withAlphaComponent(0.4 * StyleKit_Metro.grey20.cgColor.alpha), offset: CGSize(width: 0, height: 2), blurRadius: 6)

        //// b 2 Drawing
        let b2Path = UIBezierPath()
        b2Path.move(to: CGPoint(x: 28.16, y: 39.45))
        b2Path.addLine(to: CGPoint(x: 28.17, y: 39.46))
        b2Path.addCurve(to: CGPoint(x: 24.36, y: 43.67), controlPoint1: CGPoint(x: 25.74, y: 40.03), controlPoint2: CGPoint(x: 24.47, y: 41.44))
        b2Path.addLine(to: CGPoint(x: 24.36, y: 43.67))
        b2Path.addCurve(to: CGPoint(x: 24.01, y: 44), controlPoint1: CGPoint(x: 24.35, y: 43.86), controlPoint2: CGPoint(x: 24.19, y: 44))
        b2Path.addLine(to: CGPoint(x: 23.99, y: 44))
        b2Path.addLine(to: CGPoint(x: 23.99, y: 44))
        b2Path.addCurve(to: CGPoint(x: 23.64, y: 43.67), controlPoint1: CGPoint(x: 23.81, y: 44), controlPoint2: CGPoint(x: 23.65, y: 43.86))
        b2Path.addCurve(to: CGPoint(x: 19.83, y: 39.46), controlPoint1: CGPoint(x: 23.53, y: 41.44), controlPoint2: CGPoint(x: 22.26, y: 40.03))
        b2Path.addLine(to: CGPoint(x: 19.83, y: 39.45))
        b2Path.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 13.02, y: 37.62), controlPoint2: CGPoint(x: 8, y: 31.4))
        b2Path.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 8, y: 15.16), controlPoint2: CGPoint(x: 15.16, y: 8))
        b2Path.addCurve(to: CGPoint(x: 40, y: 24), controlPoint1: CGPoint(x: 32.84, y: 8), controlPoint2: CGPoint(x: 40, y: 15.16))
        b2Path.addCurve(to: CGPoint(x: 28.16, y: 39.45), controlPoint1: CGPoint(x: 40, y: 31.4), controlPoint2: CGPoint(x: 34.98, y: 37.62))
        b2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadowPin6Blur40Black.shadowOffset.width * resizedShadowScale, height: shadowPin6Blur40Black.shadowOffset.height * resizedShadowScale), blur: shadowPin6Blur40Black.shadowBlurRadius * resizedShadowScale, color: (shadowPin6Blur40Black.shadowColor as! UIColor).cgColor)
        b2Path.usesEvenOddFillRule = true
        StyleKit_Metro.grey50.setFill()
        b2Path.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_shadow_90(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 48, resizedFrame.height / 48)



        //// Shadow Declarations
        let shadowPin6Blur40Black = NSShadow(color: StyleKit_Metro.grey20.withAlphaComponent(0.4 * StyleKit_Metro.grey20.cgColor.alpha), offset: CGSize(width: 0, height: 2), blurRadius: 6)

        //// b 2 Drawing
        let b2Path = UIBezierPath()
        b2Path.move(to: CGPoint(x: 8.55, y: 28.16))
        b2Path.addLine(to: CGPoint(x: 8.54, y: 28.17))
        b2Path.addCurve(to: CGPoint(x: 4.33, y: 24.36), controlPoint1: CGPoint(x: 7.97, y: 25.74), controlPoint2: CGPoint(x: 6.57, y: 24.47))
        b2Path.addLine(to: CGPoint(x: 4.33, y: 24.36))
        b2Path.addCurve(to: CGPoint(x: 4, y: 24.01), controlPoint1: CGPoint(x: 4.14, y: 24.35), controlPoint2: CGPoint(x: 4, y: 24.19))
        b2Path.addLine(to: CGPoint(x: 4, y: 23.99))
        b2Path.addCurve(to: CGPoint(x: 4.33, y: 23.64), controlPoint1: CGPoint(x: 4, y: 23.81), controlPoint2: CGPoint(x: 4.14, y: 23.65))
        b2Path.addCurve(to: CGPoint(x: 8.54, y: 19.83), controlPoint1: CGPoint(x: 6.56, y: 23.53), controlPoint2: CGPoint(x: 7.97, y: 22.26))
        b2Path.addLine(to: CGPoint(x: 8.55, y: 19.84))
        b2Path.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 10.38, y: 13.02), controlPoint2: CGPoint(x: 16.6, y: 8))
        b2Path.addCurve(to: CGPoint(x: 40, y: 24), controlPoint1: CGPoint(x: 32.84, y: 8), controlPoint2: CGPoint(x: 40, y: 15.16))
        b2Path.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 40, y: 32.84), controlPoint2: CGPoint(x: 32.84, y: 40))
        b2Path.addCurve(to: CGPoint(x: 8.55, y: 28.16), controlPoint1: CGPoint(x: 16.6, y: 40), controlPoint2: CGPoint(x: 10.38, y: 34.98))
        b2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadowPin6Blur40Black.shadowOffset.width * resizedShadowScale, height: shadowPin6Blur40Black.shadowOffset.height * resizedShadowScale), blur: shadowPin6Blur40Black.shadowBlurRadius * resizedShadowScale, color: (shadowPin6Blur40Black.shadowColor as! UIColor).cgColor)
        b2Path.usesEvenOddFillRule = true
        StyleKit_Metro.grey50.setFill()
        b2Path.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_shadow_180(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 48, resizedFrame.height / 48)



        //// Shadow Declarations
        let shadowPin6Blur40Black = NSShadow(color: StyleKit_Metro.grey20.withAlphaComponent(0.4 * StyleKit_Metro.grey20.cgColor.alpha), offset: CGSize(width: 0, height: 2), blurRadius: 6)

        //// b 2 Drawing
        let b2Path = UIBezierPath()
        b2Path.move(to: CGPoint(x: 19.84, y: 8.55))
        b2Path.addLine(to: CGPoint(x: 19.83, y: 8.54))
        b2Path.addCurve(to: CGPoint(x: 23.64, y: 4.33), controlPoint1: CGPoint(x: 22.26, y: 7.97), controlPoint2: CGPoint(x: 23.53, y: 6.56))
        b2Path.addLine(to: CGPoint(x: 23.64, y: 4.33))
        b2Path.addCurve(to: CGPoint(x: 23.99, y: 4), controlPoint1: CGPoint(x: 23.65, y: 4.14), controlPoint2: CGPoint(x: 23.81, y: 4))
        b2Path.addLine(to: CGPoint(x: 24.01, y: 4))
        b2Path.addCurve(to: CGPoint(x: 24.36, y: 4.33), controlPoint1: CGPoint(x: 24.19, y: 4), controlPoint2: CGPoint(x: 24.35, y: 4.14))
        b2Path.addCurve(to: CGPoint(x: 28.17, y: 8.54), controlPoint1: CGPoint(x: 24.47, y: 6.56), controlPoint2: CGPoint(x: 25.74, y: 7.97))
        b2Path.addLine(to: CGPoint(x: 28.16, y: 8.55))
        b2Path.addCurve(to: CGPoint(x: 40, y: 24), controlPoint1: CGPoint(x: 34.98, y: 10.38), controlPoint2: CGPoint(x: 40, y: 16.6))
        b2Path.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 40, y: 32.84), controlPoint2: CGPoint(x: 32.84, y: 40))
        b2Path.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 15.16, y: 40), controlPoint2: CGPoint(x: 8, y: 32.84))
        b2Path.addCurve(to: CGPoint(x: 19.84, y: 8.55), controlPoint1: CGPoint(x: 8, y: 16.6), controlPoint2: CGPoint(x: 13.02, y: 10.38))
        b2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadowPin6Blur40Black.shadowOffset.width * resizedShadowScale, height: shadowPin6Blur40Black.shadowOffset.height * resizedShadowScale), blur: shadowPin6Blur40Black.shadowBlurRadius * resizedShadowScale, color: (shadowPin6Blur40Black.shadowColor as! UIColor).cgColor)
        b2Path.usesEvenOddFillRule = true
        StyleKit_Metro.grey50.setFill()
        b2Path.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_shadow_270(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 48, resizedFrame.height / 48)



        //// Shadow Declarations
        let shadowPin6Blur40Black = NSShadow(color: StyleKit_Metro.grey20.withAlphaComponent(0.4 * StyleKit_Metro.grey20.cgColor.alpha), offset: CGSize(width: 0, height: 2), blurRadius: 6)

        //// b 2 Drawing
        let b2Path = UIBezierPath()
        b2Path.move(to: CGPoint(x: 39.45, y: 19.84))
        b2Path.addLine(to: CGPoint(x: 39.46, y: 19.83))
        b2Path.addCurve(to: CGPoint(x: 43.67, y: 23.64), controlPoint1: CGPoint(x: 40.03, y: 22.26), controlPoint2: CGPoint(x: 41.44, y: 23.53))
        b2Path.addCurve(to: CGPoint(x: 44, y: 23.99), controlPoint1: CGPoint(x: 43.86, y: 23.65), controlPoint2: CGPoint(x: 44, y: 23.81))
        b2Path.addLine(to: CGPoint(x: 44, y: 24.01))
        b2Path.addLine(to: CGPoint(x: 44, y: 24.01))
        b2Path.addCurve(to: CGPoint(x: 43.67, y: 24.36), controlPoint1: CGPoint(x: 44, y: 24.19), controlPoint2: CGPoint(x: 43.86, y: 24.35))
        b2Path.addCurve(to: CGPoint(x: 39.46, y: 28.17), controlPoint1: CGPoint(x: 41.44, y: 24.47), controlPoint2: CGPoint(x: 40.03, y: 25.74))
        b2Path.addLine(to: CGPoint(x: 39.45, y: 28.17))
        b2Path.addCurve(to: CGPoint(x: 24, y: 40), controlPoint1: CGPoint(x: 37.62, y: 34.98), controlPoint2: CGPoint(x: 31.4, y: 40))
        b2Path.addCurve(to: CGPoint(x: 8, y: 24), controlPoint1: CGPoint(x: 15.16, y: 40), controlPoint2: CGPoint(x: 8, y: 32.84))
        b2Path.addCurve(to: CGPoint(x: 24, y: 8), controlPoint1: CGPoint(x: 8, y: 15.16), controlPoint2: CGPoint(x: 15.16, y: 8))
        b2Path.addCurve(to: CGPoint(x: 39.45, y: 19.84), controlPoint1: CGPoint(x: 31.4, y: 8), controlPoint2: CGPoint(x: 37.62, y: 13.02))
        b2Path.close()
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadowPin6Blur40Black.shadowOffset.width * resizedShadowScale, height: shadowPin6Blur40Black.shadowOffset.height * resizedShadowScale), blur: shadowPin6Blur40Black.shadowBlurRadius * resizedShadowScale, color: (shadowPin6Blur40Black.shadowColor as! UIColor).cgColor)
        b2Path.usesEvenOddFillRule = true
        StyleKit_Metro.grey50.setFill()
        b2Path.fill()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_a(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.05, y: 18))
        bezierPath.addLine(to: CGPoint(x: 25.59, y: 18))
        bezierPath.addLine(to: CGPoint(x: 29.66, y: 29.47))
        bezierPath.addLine(to: CGPoint(x: 27.66, y: 29.47))
        bezierPath.addLine(to: CGPoint(x: 26.6, y: 26.46))
        bezierPath.addLine(to: CGPoint(x: 21.77, y: 26.46))
        bezierPath.addLine(to: CGPoint(x: 20.71, y: 29.47))
        bezierPath.addLine(to: CGPoint(x: 19, y: 29.47))
        bezierPath.addLine(to: CGPoint(x: 23.05, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26.01, y: 24.8))
        bezierPath.addLine(to: CGPoint(x: 24.18, y: 19.63))
        bezierPath.addLine(to: CGPoint(x: 22.36, y: 24.8))
        bezierPath.addLine(to: CGPoint(x: 26.01, y: 24.8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_b(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 20, y: 18))
        bezierPath.addLine(to: CGPoint(x: 23.9, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 27.02, y: 18.64), controlPoint1: CGPoint(x: 25.27, y: 18), controlPoint2: CGPoint(x: 26.31, y: 18.21))
        bezierPath.addCurve(to: CGPoint(x: 28.1, y: 20.8), controlPoint1: CGPoint(x: 27.74, y: 19.07), controlPoint2: CGPoint(x: 28.1, y: 19.79))
        bezierPath.addCurve(to: CGPoint(x: 27.92, y: 21.88), controlPoint1: CGPoint(x: 28.1, y: 21.22), controlPoint2: CGPoint(x: 28.04, y: 21.58))
        bezierPath.addLine(to: CGPoint(x: 27.92, y: 21.89))
        bezierPath.addCurve(to: CGPoint(x: 27.41, y: 22.67), controlPoint1: CGPoint(x: 27.8, y: 22.18), controlPoint2: CGPoint(x: 27.63, y: 22.45))
        bezierPath.addLine(to: CGPoint(x: 27.43, y: 22.65))
        bezierPath.addCurve(to: CGPoint(x: 26.64, y: 23.19), controlPoint1: CGPoint(x: 27.2, y: 22.88), controlPoint2: CGPoint(x: 26.93, y: 23.06))
        bezierPath.addCurve(to: CGPoint(x: 25.6, y: 23.52), controlPoint1: CGPoint(x: 26.31, y: 23.34), controlPoint2: CGPoint(x: 25.97, y: 23.45))
        bezierPath.addCurve(to: CGPoint(x: 27.78, y: 24.3), controlPoint1: CGPoint(x: 26.56, y: 23.64), controlPoint2: CGPoint(x: 27.28, y: 23.9))
        bezierPath.addCurve(to: CGPoint(x: 28.51, y: 26.16), controlPoint1: CGPoint(x: 28.27, y: 24.71), controlPoint2: CGPoint(x: 28.51, y: 25.33))
        bezierPath.addCurve(to: CGPoint(x: 28.16, y: 27.69), controlPoint1: CGPoint(x: 28.51, y: 26.76), controlPoint2: CGPoint(x: 28.39, y: 27.27))
        bezierPath.addCurve(to: CGPoint(x: 27.18, y: 28.71), controlPoint1: CGPoint(x: 27.92, y: 28.11), controlPoint2: CGPoint(x: 27.6, y: 28.45))
        bezierPath.addLine(to: CGPoint(x: 27.16, y: 28.73))
        bezierPath.addCurve(to: CGPoint(x: 25.68, y: 29.29), controlPoint1: CGPoint(x: 26.7, y: 29), controlPoint2: CGPoint(x: 26.2, y: 29.19))
        bezierPath.addLine(to: CGPoint(x: 25.74, y: 29.28))
        bezierPath.addCurve(to: CGPoint(x: 23.93, y: 29.47), controlPoint1: CGPoint(x: 25.14, y: 29.41), controlPoint2: CGPoint(x: 24.54, y: 29.47))
        bezierPath.addLine(to: CGPoint(x: 20, y: 29.47))
        bezierPath.addLine(to: CGPoint(x: 20, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21.94, y: 19.68))
        bezierPath.addLine(to: CGPoint(x: 21.94, y: 22.74))
        bezierPath.addLine(to: CGPoint(x: 24, y: 22.74))
        bezierPath.addCurve(to: CGPoint(x: 25.55, y: 22.33), controlPoint1: CGPoint(x: 24.64, y: 22.74), controlPoint2: CGPoint(x: 25.16, y: 22.6))
        bezierPath.addCurve(to: CGPoint(x: 26.14, y: 21.04), controlPoint1: CGPoint(x: 25.95, y: 22.06), controlPoint2: CGPoint(x: 26.14, y: 21.63))
        bezierPath.addCurve(to: CGPoint(x: 25.61, y: 19.96), controlPoint1: CGPoint(x: 26.14, y: 20.51), controlPoint2: CGPoint(x: 25.96, y: 20.15))
        bezierPath.addCurve(to: CGPoint(x: 24.1, y: 19.68), controlPoint1: CGPoint(x: 25.25, y: 19.77), controlPoint2: CGPoint(x: 24.75, y: 19.68))
        bezierPath.addLine(to: CGPoint(x: 21.94, y: 19.68))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 21.94, y: 24.4))
        bezierPath.addLine(to: CGPoint(x: 21.94, y: 27.81))
        bezierPath.addLine(to: CGPoint(x: 24.06, y: 27.81))
        bezierPath.addCurve(to: CGPoint(x: 25.06, y: 27.72), controlPoint1: CGPoint(x: 24.43, y: 27.81), controlPoint2: CGPoint(x: 24.76, y: 27.78))
        bezierPath.addCurve(to: CGPoint(x: 25.82, y: 27.43), controlPoint1: CGPoint(x: 25.36, y: 27.66), controlPoint2: CGPoint(x: 25.61, y: 27.57))
        bezierPath.addCurve(to: CGPoint(x: 26.32, y: 26.9), controlPoint1: CGPoint(x: 26.04, y: 27.3), controlPoint2: CGPoint(x: 26.2, y: 27.12))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 26.1), controlPoint1: CGPoint(x: 26.44, y: 26.68), controlPoint2: CGPoint(x: 26.5, y: 26.42))
        bezierPath.addCurve(to: CGPoint(x: 25.88, y: 24.78), controlPoint1: CGPoint(x: 26.5, y: 25.47), controlPoint2: CGPoint(x: 26.29, y: 25.03))
        bezierPath.addCurve(to: CGPoint(x: 23.9, y: 24.4), controlPoint1: CGPoint(x: 25.47, y: 24.53), controlPoint2: CGPoint(x: 24.81, y: 24.4))
        bezierPath.addLine(to: CGPoint(x: 21.94, y: 24.4))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin_dot(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 48), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 48), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 48)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 19, y: 19, width: 10, height: 10))
        StyleKit_Metro.white100.setFill()
        ovalPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_helsinki_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 4.28))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 3.51), controlPoint1: CGPoint(x: 3, y: 3.84), controlPoint2: CGPoint(x: 3.05, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 3.13, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 3.13), controlPoint1: CGPoint(x: 3.22, y: 3.35), controlPoint2: CGPoint(x: 3.35, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 3), controlPoint1: CGPoint(x: 3.67, y: 3.05), controlPoint2: CGPoint(x: 3.84, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15.72, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 3.13), controlPoint1: CGPoint(x: 16.16, y: 3), controlPoint2: CGPoint(x: 16.32, y: 3.05))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 3.51), controlPoint1: CGPoint(x: 16.65, y: 3.22), controlPoint2: CGPoint(x: 16.78, y: 3.35))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 4.28), controlPoint1: CGPoint(x: 16.95, y: 3.68), controlPoint2: CGPoint(x: 17, y: 3.84))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15.72))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 16.49), controlPoint1: CGPoint(x: 17, y: 16.16), controlPoint2: CGPoint(x: 16.95, y: 16.32))
        bezierPath.addLine(to: CGPoint(x: 16.87, y: 16.49))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 16.87), controlPoint1: CGPoint(x: 16.78, y: 16.65), controlPoint2: CGPoint(x: 16.65, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 15.72, y: 17), controlPoint1: CGPoint(x: 16.32, y: 16.95), controlPoint2: CGPoint(x: 16.16, y: 17))
        bezierPath.addLine(to: CGPoint(x: 4.28, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 16.87), controlPoint1: CGPoint(x: 3.84, y: 17), controlPoint2: CGPoint(x: 3.67, y: 16.95))
        bezierPath.addLine(to: CGPoint(x: 3.51, y: 16.87))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 16.49), controlPoint1: CGPoint(x: 3.35, y: 16.78), controlPoint2: CGPoint(x: 3.22, y: 16.65))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 15.72), controlPoint1: CGPoint(x: 3.05, y: 16.32), controlPoint2: CGPoint(x: 3, y: 16.16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4.28))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_orange.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7.5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 11.5))
        bezier2Path.addLine(to: CGPoint(x: 12.5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 9.5))
        bezier2Path.addLine(to: CGPoint(x: 10.5, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 9.5, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 9.5))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 7.5, y: 6))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_ekb_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 3))
        bezierPath.addLine(to: CGPoint(x: 3, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17, y: 10))
        bezierPath.addLine(to: CGPoint(x: 17, y: 3))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 3, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 12))
        bezierPath.addLine(to: CGPoint(x: 3, y: 17))
        bezierPath.addLine(to: CGPoint(x: 8, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 12))
        bezierPath.addLine(to: CGPoint(x: 12, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17, y: 12))
        bezierPath.close()
        StyleKit_Metro.transit_emerald.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubwaybus_istanbul_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17, y: 11.93))
        bezierPath.addLine(to: CGPoint(x: 17, y: 16.12))
        bezierPath.addLine(to: CGPoint(x: 17, y: 16.12))
        bezierPath.addCurve(to: CGPoint(x: 16.12, y: 17), controlPoint1: CGPoint(x: 17, y: 16.61), controlPoint2: CGPoint(x: 16.61, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3.88, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3.88, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 16.12), controlPoint1: CGPoint(x: 3.39, y: 17), controlPoint2: CGPoint(x: 3, y: 16.61))
        bezierPath.addLine(to: CGPoint(x: 3, y: 7.12))
        bezierPath.addCurve(to: CGPoint(x: 8.85, y: 12.5), controlPoint1: CGPoint(x: 4.95, y: 7.58), controlPoint2: CGPoint(x: 6.9, y: 9.37))
        bezierPath.addLine(to: CGPoint(x: 7.74, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 7.74, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 7.54, y: 12.7), controlPoint1: CGPoint(x: 7.63, y: 12.5), controlPoint2: CGPoint(x: 7.54, y: 12.59))
        bezierPath.addCurve(to: CGPoint(x: 7.64, y: 12.87), controlPoint1: CGPoint(x: 7.54, y: 12.77), controlPoint2: CGPoint(x: 7.58, y: 12.84))
        bezierPath.addLine(to: CGPoint(x: 11.18, y: 14.93))
        bezierPath.addLine(to: CGPoint(x: 11.18, y: 14.93))
        bezierPath.addCurve(to: CGPoint(x: 11.41, y: 14.92), controlPoint1: CGPoint(x: 11.25, y: 14.97), controlPoint2: CGPoint(x: 11.34, y: 14.97))
        bezierPath.addLine(to: CGPoint(x: 14.04, y: 12.86))
        bezierPath.addLine(to: CGPoint(x: 14.04, y: 12.86))
        bezierPath.addCurve(to: CGPoint(x: 14.08, y: 12.58), controlPoint1: CGPoint(x: 14.13, y: 12.79), controlPoint2: CGPoint(x: 14.14, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 13.92, y: 12.5), controlPoint1: CGPoint(x: 14.04, y: 12.53), controlPoint2: CGPoint(x: 13.98, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 12.79, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 7.68, y: 7.6), controlPoint1: CGPoint(x: 11.2, y: 10.32), controlPoint2: CGPoint(x: 9.49, y: 8.68))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 7), controlPoint1: CGPoint(x: 8.47, y: 7.2), controlPoint2: CGPoint(x: 9.25, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 11.93), controlPoint1: CGPoint(x: 12.16, y: 7), controlPoint2: CGPoint(x: 14.49, y: 8.64))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 17, y: 8.16))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 6), controlPoint1: CGPoint(x: 14.81, y: 6.72), controlPoint2: CGPoint(x: 12.48, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 5.87, y: 6.71), controlPoint1: CGPoint(x: 8.57, y: 6), controlPoint2: CGPoint(x: 7.2, y: 6.24))
        bezier2Path.addLine(to: CGPoint(x: 5.86, y: 6.71))
        bezier2Path.addCurve(to: CGPoint(x: 2.96, y: 6.04), controlPoint1: CGPoint(x: 4.93, y: 6.35), controlPoint2: CGPoint(x: 3.95, y: 6.13))
        bezier2Path.addLine(to: CGPoint(x: 3, y: 3.88))
        bezier2Path.addCurve(to: CGPoint(x: 3.88, y: 3), controlPoint1: CGPoint(x: 3, y: 3.39), controlPoint2: CGPoint(x: 3.39, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 16.12, y: 3))
        bezier2Path.addCurve(to: CGPoint(x: 17, y: 3.88), controlPoint1: CGPoint(x: 16.61, y: 3), controlPoint2: CGPoint(x: 17, y: 3.39))
        bezier2Path.addLine(to: CGPoint(x: 17, y: 8.16))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_cyan.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 3, y: 7.12))
        bezier3Path.addLine(to: CGPoint(x: 3, y: 6.04))
        bezier3Path.addCurve(to: CGPoint(x: 5.87, y: 6.71), controlPoint1: CGPoint(x: 3.98, y: 6.13), controlPoint2: CGPoint(x: 4.94, y: 6.36))
        bezier3Path.addLine(to: CGPoint(x: 5.81, y: 6.73))
        bezier3Path.addCurve(to: CGPoint(x: 9.98, y: 6), controlPoint1: CGPoint(x: 7.15, y: 6.25), controlPoint2: CGPoint(x: 8.56, y: 6))
        bezier3Path.addCurve(to: CGPoint(x: 17, y: 8.16), controlPoint1: CGPoint(x: 12.48, y: 6), controlPoint2: CGPoint(x: 14.81, y: 6.72))
        bezier3Path.addLine(to: CGPoint(x: 17, y: 11.93))
        bezier3Path.addCurve(to: CGPoint(x: 10, y: 7), controlPoint1: CGPoint(x: 14.49, y: 8.64), controlPoint2: CGPoint(x: 12.16, y: 7))
        bezier3Path.addCurve(to: CGPoint(x: 7.68, y: 7.6), controlPoint1: CGPoint(x: 9.25, y: 7), controlPoint2: CGPoint(x: 8.47, y: 7.2))
        bezier3Path.addCurve(to: CGPoint(x: 12.79, y: 12.5), controlPoint1: CGPoint(x: 9.49, y: 8.68), controlPoint2: CGPoint(x: 11.2, y: 10.32))
        bezier3Path.addLine(to: CGPoint(x: 13.92, y: 12.5))
        bezier3Path.addLine(to: CGPoint(x: 13.92, y: 12.5))
        bezier3Path.addCurve(to: CGPoint(x: 14.12, y: 12.7), controlPoint1: CGPoint(x: 14.03, y: 12.5), controlPoint2: CGPoint(x: 14.12, y: 12.59))
        bezier3Path.addCurve(to: CGPoint(x: 14.04, y: 12.86), controlPoint1: CGPoint(x: 14.12, y: 12.76), controlPoint2: CGPoint(x: 14.09, y: 12.82))
        bezier3Path.addLine(to: CGPoint(x: 11.41, y: 14.92))
        bezier3Path.addLine(to: CGPoint(x: 11.41, y: 14.92))
        bezier3Path.addCurve(to: CGPoint(x: 11.18, y: 14.93), controlPoint1: CGPoint(x: 11.34, y: 14.97), controlPoint2: CGPoint(x: 11.25, y: 14.97))
        bezier3Path.addLine(to: CGPoint(x: 7.64, y: 12.87))
        bezier3Path.addLine(to: CGPoint(x: 7.64, y: 12.87))
        bezier3Path.addCurve(to: CGPoint(x: 7.57, y: 12.6), controlPoint1: CGPoint(x: 7.55, y: 12.81), controlPoint2: CGPoint(x: 7.51, y: 12.69))
        bezier3Path.addCurve(to: CGPoint(x: 7.74, y: 12.5), controlPoint1: CGPoint(x: 7.61, y: 12.54), controlPoint2: CGPoint(x: 7.67, y: 12.5))
        bezier3Path.addLine(to: CGPoint(x: 8.85, y: 12.5))
        bezier3Path.addCurve(to: CGPoint(x: 3, y: 7.12), controlPoint1: CGPoint(x: 6.9, y: 9.37), controlPoint2: CGPoint(x: 4.95, y: 7.57))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_baku_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.56, y: 6))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 6.75, y: 7))
        bezierPath.addLine(to: CGPoint(x: 3.66, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 3.66, y: 13.18))
        bezierPath.addCurve(to: CGPoint(x: 2.32, y: 14), controlPoint1: CGPoint(x: 3.4, y: 13.68), controlPoint2: CGPoint(x: 2.89, y: 14))
        bezierPath.addLine(to: CGPoint(x: 1.68, y: 14))
        bezierPath.addLine(to: CGPoint(x: 1.68, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 0.18, y: 12.5), controlPoint1: CGPoint(x: 0.85, y: 14), controlPoint2: CGPoint(x: 0.18, y: 13.33))
        bezierPath.addCurve(to: CGPoint(x: 0.34, y: 11.82), controlPoint1: CGPoint(x: 0.18, y: 12.26), controlPoint2: CGPoint(x: 0.23, y: 12.03))
        bezierPath.addLine(to: CGPoint(x: 3.11, y: 6.28))
        bezierPath.addLine(to: CGPoint(x: 3.11, y: 6.27))
        bezierPath.addCurve(to: CGPoint(x: 3.56, y: 6), controlPoint1: CGPoint(x: 3.2, y: 6.11), controlPoint2: CGPoint(x: 3.37, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.ui_jonquil.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 11.5))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 11.5))
        bezier2Path.addCurve(to: CGPoint(x: 11, y: 10.5), controlPoint1: CGPoint(x: 12, y: 10.95), controlPoint2: CGPoint(x: 11.55, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 10.5))
        bezier2Path.addCurve(to: CGPoint(x: 8, y: 11.5), controlPoint1: CGPoint(x: 8.45, y: 10.5), controlPoint2: CGPoint(x: 8, y: 10.95))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 14))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_lilac.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 10, y: 10.5))
        bezier3Path.addLine(to: CGPoint(x: 7.86, y: 6.22))
        bezier3Path.addLine(to: CGPoint(x: 7.86, y: 6.22))
        bezier3Path.addCurve(to: CGPoint(x: 7.32, y: 6.04), controlPoint1: CGPoint(x: 7.76, y: 6.02), controlPoint2: CGPoint(x: 7.52, y: 5.94))
        bezier3Path.addCurve(to: CGPoint(x: 7.14, y: 6.23), controlPoint1: CGPoint(x: 7.24, y: 6.08), controlPoint2: CGPoint(x: 7.17, y: 6.15))
        bezier3Path.addLine(to: CGPoint(x: 5.5, y: 9.5))
        bezier3Path.addLine(to: CGPoint(x: 7.64, y: 13.78))
        bezier3Path.addLine(to: CGPoint(x: 7.64, y: 13.78))
        bezier3Path.addCurve(to: CGPoint(x: 8.18, y: 13.96), controlPoint1: CGPoint(x: 7.74, y: 13.98), controlPoint2: CGPoint(x: 7.98, y: 14.06))
        bezier3Path.addCurve(to: CGPoint(x: 8.36, y: 13.77), controlPoint1: CGPoint(x: 8.26, y: 13.92), controlPoint2: CGPoint(x: 8.33, y: 13.85))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 10.5))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_cyan.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 10, y: 10.5))
        bezier4Path.addLine(to: CGPoint(x: 12.14, y: 6.22))
        bezier4Path.addLine(to: CGPoint(x: 12.14, y: 6.22))
        bezier4Path.addCurve(to: CGPoint(x: 12.5, y: 6), controlPoint1: CGPoint(x: 12.21, y: 6.09), controlPoint2: CGPoint(x: 12.35, y: 6))
        bezier4Path.addLine(to: CGPoint(x: 16.5, y: 6))
        bezier4Path.addLine(to: CGPoint(x: 14.52, y: 9.46))
        bezier4Path.addLine(to: CGPoint(x: 12.36, y: 13.78))
        bezier4Path.addLine(to: CGPoint(x: 12.36, y: 13.78))
        bezier4Path.addCurve(to: CGPoint(x: 11.82, y: 13.96), controlPoint1: CGPoint(x: 12.26, y: 13.98), controlPoint2: CGPoint(x: 12.02, y: 14.06))
        bezier4Path.addCurve(to: CGPoint(x: 11.64, y: 13.77), controlPoint1: CGPoint(x: 11.74, y: 13.92), controlPoint2: CGPoint(x: 11.67, y: 13.85))
        bezier4Path.addLine(to: CGPoint(x: 10, y: 10.5))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_magenta.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 19.66, y: 11.83))
        bezier5Path.addLine(to: CGPoint(x: 16.86, y: 6.22))
        bezier5Path.addLine(to: CGPoint(x: 16.86, y: 6.22))
        bezier5Path.addCurve(to: CGPoint(x: 16.32, y: 6.04), controlPoint1: CGPoint(x: 16.76, y: 6.02), controlPoint2: CGPoint(x: 16.52, y: 5.94))
        bezier5Path.addCurve(to: CGPoint(x: 16.14, y: 6.23), controlPoint1: CGPoint(x: 16.24, y: 6.08), controlPoint2: CGPoint(x: 16.17, y: 6.15))
        bezier5Path.addLine(to: CGPoint(x: 14.5, y: 9.5))
        bezier5Path.addLine(to: CGPoint(x: 16.44, y: 13.2))
        bezier5Path.addLine(to: CGPoint(x: 16.44, y: 13.2))
        bezier5Path.addCurve(to: CGPoint(x: 17.77, y: 14), controlPoint1: CGPoint(x: 16.7, y: 13.69), controlPoint2: CGPoint(x: 17.21, y: 14))
        bezier5Path.addLine(to: CGPoint(x: 18.32, y: 14))
        bezier5Path.addLine(to: CGPoint(x: 18.32, y: 14))
        bezier5Path.addCurve(to: CGPoint(x: 19.82, y: 12.5), controlPoint1: CGPoint(x: 19.15, y: 14), controlPoint2: CGPoint(x: 19.82, y: 13.33))
        bezier5Path.addCurve(to: CGPoint(x: 19.66, y: 11.82), controlPoint1: CGPoint(x: 19.82, y: 12.26), controlPoint2: CGPoint(x: 19.77, y: 12.03))
        bezier5Path.addLine(to: CGPoint(x: 19.66, y: 11.83))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_grass.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_nsk_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 4))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 10, y: 17))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 14.67, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 14, y: 4))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 4))
        bezierPath.addLine(to: CGPoint(x: 6, y: 4))
        bezierPath.close()
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_kazan_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 1, y: 16))
        bezierPath.addLine(to: CGPoint(x: 6.25, y: 16))
        bezierPath.addLine(to: CGPoint(x: 8.07, y: 11.45))
        bezierPath.addLine(to: CGPoint(x: 10, y: 14.05))
        bezierPath.addLine(to: CGPoint(x: 11.93, y: 11.45))
        bezierPath.addLine(to: CGPoint(x: 13.75, y: 16))
        bezierPath.addLine(to: CGPoint(x: 19, y: 16))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.85))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 3))
        bezierPath.close()
        StyleKit_Metro.transit_green.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_erevan_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.71, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 15.5), controlPoint1: CGPoint(x: 5.95, y: 14.92), controlPoint2: CGPoint(x: 7.63, y: 15.5))
        bezierPath.addCurve(to: CGPoint(x: 16.38, y: 11), controlPoint1: CGPoint(x: 12.97, y: 15.5), controlPoint2: CGPoint(x: 15.78, y: 13.51))
        bezierPath.addLine(to: CGPoint(x: 17.91, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 17), controlPoint1: CGPoint(x: 17.32, y: 14.39), controlPoint2: CGPoint(x: 13.78, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 10), controlPoint1: CGPoint(x: 4.81, y: 17), controlPoint2: CGPoint(x: 1, y: 13.87))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 3), controlPoint1: CGPoint(x: 1, y: 6.13), controlPoint2: CGPoint(x: 5.25, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 19.09, y: 7), controlPoint1: CGPoint(x: 14.29, y: 3), controlPoint2: CGPoint(x: 17.56, y: 4.63))
        bezierPath.addLine(to: CGPoint(x: 19.07, y: 7))
        bezierPath.addLine(to: CGPoint(x: 18.48, y: 9.09))
        bezierPath.addLine(to: CGPoint(x: 15.16, y: 9.09))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 14), controlPoint1: CGPoint(x: 14.21, y: 11.94), controlPoint2: CGPoint(x: 11.36, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 14))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.54, y: 13.88))
        bezierPath.addLine(to: CGPoint(x: 7, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8.54, y: 12.48))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 11.62, y: 12.22), controlPoint2: CGPoint(x: 14, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 17.18, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 4.5), controlPoint1: CGPoint(x: 15.76, y: 5.52), controlPoint2: CGPoint(x: 13.33, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 10), controlPoint1: CGPoint(x: 6, y: 4.5), controlPoint2: CGPoint(x: 2.5, y: 7.08))
        bezierPath.addCurve(to: CGPoint(x: 4.54, y: 13.88), controlPoint1: CGPoint(x: 2.5, y: 11.49), controlPoint2: CGPoint(x: 3.28, y: 12.87))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_purple.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_london_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_red.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 5, y: 5, width: 10, height: 10))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 1, y: 8, width: 18, height: 4))
        StyleKit_Metro.transit_deep_blue.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_oslo_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_deep_blue.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.4, y: 3.4, width: 13.2, height: 13.2))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.9, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.9, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9.3, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9.3, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 6.4))
        bezierPath.addLine(to: CGPoint(x: 14, y: 6.4))
        bezierPath.addLine(to: CGPoint(x: 14, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.9, y: 8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_berlin_sbahn_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_green.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.2, y: 5.46))
        bezierPath.addCurve(to: CGPoint(x: 5.35, y: 6.93), controlPoint1: CGPoint(x: 12.38, y: 3.56), controlPoint2: CGPoint(x: 6.13, y: 3.01))
        bezierPath.addCurve(to: CGPoint(x: 12.13, y: 13.03), controlPoint1: CGPoint(x: 4.61, y: 12.31), controlPoint2: CGPoint(x: 12.13, y: 10.39))
        bezierPath.addCurve(to: CGPoint(x: 5.39, y: 11.91), controlPoint1: CGPoint(x: 12.13, y: 14.2), controlPoint2: CGPoint(x: 9.1, y: 15.58))
        bezierPath.addLine(to: CGPoint(x: 5.39, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 14.93, y: 12.4), controlPoint1: CGPoint(x: 8.24, y: 16.9), controlPoint2: CGPoint(x: 14.31, y: 16.72))
        bezierPath.addCurve(to: CGPoint(x: 8.01, y: 6.73), controlPoint1: CGPoint(x: 15.37, y: 7.4), controlPoint2: CGPoint(x: 8.06, y: 9.18))
        bezierPath.addCurve(to: CGPoint(x: 14.16, y: 7.43), controlPoint1: CGPoint(x: 7.97, y: 4.9), controlPoint2: CGPoint(x: 12.13, y: 5.18))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 5.46))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 5.46))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_spb_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.82, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 15.46, y: 5.16), controlPoint1: CGPoint(x: 11.82, y: 4), controlPoint2: CGPoint(x: 14.07, y: 3.99))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10.86), controlPoint1: CGPoint(x: 16.78, y: 6.28), controlPoint2: CGPoint(x: 18.02, y: 7.43))
        bezierPath.addCurve(to: CGPoint(x: 15.9, y: 16), controlPoint1: CGPoint(x: 17.84, y: 14.29), controlPoint2: CGPoint(x: 15.9, y: 16))
        bezierPath.addLine(to: CGPoint(x: 12.18, y: 15.99))
        bezierPath.addCurve(to: CGPoint(x: 15.46, y: 12.57), controlPoint1: CGPoint(x: 12.18, y: 15.99), controlPoint2: CGPoint(x: 14.69, y: 15.03))
        bezierPath.addCurve(to: CGPoint(x: 14.49, y: 7.43), controlPoint1: CGPoint(x: 16.38, y: 9.66), controlPoint2: CGPoint(x: 15.59, y: 8.39))
        bezierPath.addCurve(to: CGPoint(x: 13.15, y: 7.76), controlPoint1: CGPoint(x: 14.05, y: 7.07), controlPoint2: CGPoint(x: 13.4, y: 6.98))
        bezierPath.addCurve(to: CGPoint(x: 10.54, y: 16), controlPoint1: CGPoint(x: 12.31, y: 10.22), controlPoint2: CGPoint(x: 10.54, y: 16))
        bezierPath.addLine(to: CGPoint(x: 9.51, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 6.77, y: 7.76), controlPoint1: CGPoint(x: 9.51, y: 16), controlPoint2: CGPoint(x: 7.59, y: 10.22))
        bezierPath.addCurve(to: CGPoint(x: 5.43, y: 7.43), controlPoint1: CGPoint(x: 6.53, y: 6.98), controlPoint2: CGPoint(x: 5.87, y: 7.07))
        bezierPath.addCurve(to: CGPoint(x: 4.55, y: 12.57), controlPoint1: CGPoint(x: 4.33, y: 8.39), controlPoint2: CGPoint(x: 3.64, y: 9.66))
        bezierPath.addCurve(to: CGPoint(x: 7.82, y: 15.99), controlPoint1: CGPoint(x: 5.32, y: 15.03), controlPoint2: CGPoint(x: 7.82, y: 15.99))
        bezierPath.addLine(to: CGPoint(x: 4.1, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10.86), controlPoint1: CGPoint(x: 4.1, y: 16), controlPoint2: CGPoint(x: 1.99, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 4.55, y: 5.29), controlPoint1: CGPoint(x: 2.05, y: 7.43), controlPoint2: CGPoint(x: 3.2, y: 6.32))
        bezierPath.addCurve(to: CGPoint(x: 8.19, y: 4), controlPoint1: CGPoint(x: 6, y: 4.17), controlPoint2: CGPoint(x: 8.19, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10.01, y: 10.86))
        bezierPath.addLine(to: CGPoint(x: 11.82, y: 4))
        bezierPath.close()
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_lisboa_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 3.05))
        bezierPath.addLine(to: CGPoint(x: 16, y: 17))
        bezierPath.addLine(to: CGPoint(x: 16, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 18), controlPoint1: CGPoint(x: 16, y: 17.55), controlPoint2: CGPoint(x: 15.55, y: 18))
        bezierPath.addLine(to: CGPoint(x: 5, y: 18))
        bezierPath.addLine(to: CGPoint(x: 5, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 4.45, y: 18), controlPoint2: CGPoint(x: 4, y: 17.55))
        bezierPath.addLine(to: CGPoint(x: 4, y: 5.67))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 3.05), controlPoint1: CGPoint(x: 7.6, y: 4.19), controlPoint2: CGPoint(x: 11.67, y: 3.27))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_orange.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 18))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 10.38))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 12.88))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 11.38))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 13.62))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 15.12))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 13.62))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 18))
        bezier2Path.close()
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_madrid_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addCurve(to: CGPoint(x: 19.63, y: 10.23), controlPoint1: CGPoint(x: 19.71, y: 9.8), controlPoint2: CGPoint(x: 19.76, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 19.53, y: 10.33), controlPoint1: CGPoint(x: 19.6, y: 10.27), controlPoint2: CGPoint(x: 19.57, y: 10.3))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 16.9), controlPoint1: CGPoint(x: 10.25, y: 16.84), controlPoint2: CGPoint(x: 10.17, y: 16.88))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 16.9), controlPoint1: CGPoint(x: 10.03, y: 16.92), controlPoint2: CGPoint(x: 9.97, y: 16.92))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.69, y: 16.78), controlPoint1: CGPoint(x: 9.83, y: 16.88), controlPoint2: CGPoint(x: 9.75, y: 16.84))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addCurve(to: CGPoint(x: 0.37, y: 9.77), controlPoint1: CGPoint(x: 0.29, y: 10.2), controlPoint2: CGPoint(x: 0.24, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 0.47, y: 9.67), controlPoint1: CGPoint(x: 0.4, y: 9.73), controlPoint2: CGPoint(x: 0.43, y: 9.7))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 3.1), controlPoint1: CGPoint(x: 9.75, y: 3.16), controlPoint2: CGPoint(x: 9.83, y: 3.12))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 3.1), controlPoint1: CGPoint(x: 9.97, y: 3.08), controlPoint2: CGPoint(x: 10.03, y: 3.08))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.31, y: 3.22), controlPoint1: CGPoint(x: 10.17, y: 3.12), controlPoint2: CGPoint(x: 10.25, y: 3.16))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10.3, y: 6.2))
        bezier2Path.addLine(to: CGPoint(x: 15.75, y: 9.83))
        bezier2Path.addLine(to: CGPoint(x: 15.75, y: 9.83))
        bezier2Path.addCurve(to: CGPoint(x: 15.8, y: 10.11), controlPoint1: CGPoint(x: 15.84, y: 9.9), controlPoint2: CGPoint(x: 15.87, y: 10.02))
        bezier2Path.addCurve(to: CGPoint(x: 15.75, y: 10.17), controlPoint1: CGPoint(x: 15.79, y: 10.13), controlPoint2: CGPoint(x: 15.77, y: 10.15))
        bezier2Path.addLine(to: CGPoint(x: 10.3, y: 13.8))
        bezier2Path.addLine(to: CGPoint(x: 10.3, y: 13.8))
        bezier2Path.addCurve(to: CGPoint(x: 10.08, y: 13.91), controlPoint1: CGPoint(x: 10.24, y: 13.85), controlPoint2: CGPoint(x: 10.16, y: 13.89))
        bezier2Path.addLine(to: CGPoint(x: 10.08, y: 13.91))
        bezier2Path.addCurve(to: CGPoint(x: 9.91, y: 13.91), controlPoint1: CGPoint(x: 10.03, y: 13.92), controlPoint2: CGPoint(x: 9.97, y: 13.92))
        bezier2Path.addLine(to: CGPoint(x: 9.92, y: 13.91))
        bezier2Path.addCurve(to: CGPoint(x: 9.7, y: 13.8), controlPoint1: CGPoint(x: 9.84, y: 13.89), controlPoint2: CGPoint(x: 9.76, y: 13.85))
        bezier2Path.addLine(to: CGPoint(x: 4.25, y: 10.17))
        bezier2Path.addLine(to: CGPoint(x: 4.25, y: 10.17))
        bezier2Path.addCurve(to: CGPoint(x: 4.2, y: 9.89), controlPoint1: CGPoint(x: 4.16, y: 10.1), controlPoint2: CGPoint(x: 4.13, y: 9.98))
        bezier2Path.addCurve(to: CGPoint(x: 4.25, y: 9.83), controlPoint1: CGPoint(x: 4.21, y: 9.87), controlPoint2: CGPoint(x: 4.23, y: 9.85))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 6.2))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 6.2))
        bezier2Path.addCurve(to: CGPoint(x: 9.92, y: 6.09), controlPoint1: CGPoint(x: 9.76, y: 6.15), controlPoint2: CGPoint(x: 9.84, y: 6.11))
        bezier2Path.addLine(to: CGPoint(x: 9.92, y: 6.09))
        bezier2Path.addCurve(to: CGPoint(x: 10.09, y: 6.09), controlPoint1: CGPoint(x: 9.97, y: 6.08), controlPoint2: CGPoint(x: 10.03, y: 6.08))
        bezier2Path.addLine(to: CGPoint(x: 10.08, y: 6.09))
        bezier2Path.addCurve(to: CGPoint(x: 10.3, y: 6.2), controlPoint1: CGPoint(x: 10.16, y: 6.11), controlPoint2: CGPoint(x: 10.24, y: 6.15))
        bezier2Path.addLine(to: CGPoint(x: 10.3, y: 6.2))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 5.26, y: 8))
        bezier3Path.addLine(to: CGPoint(x: 14.74, y: 8))
        bezier3Path.addCurve(to: CGPoint(x: 14.9, y: 8.03), controlPoint1: CGPoint(x: 14.83, y: 8), controlPoint2: CGPoint(x: 14.87, y: 8.01))
        bezier3Path.addLine(to: CGPoint(x: 14.9, y: 8.03))
        bezier3Path.addCurve(to: CGPoint(x: 14.97, y: 8.1), controlPoint1: CGPoint(x: 14.93, y: 8.04), controlPoint2: CGPoint(x: 14.96, y: 8.07))
        bezier3Path.addCurve(to: CGPoint(x: 15, y: 8.26), controlPoint1: CGPoint(x: 14.99, y: 8.14), controlPoint2: CGPoint(x: 15, y: 8.17))
        bezier3Path.addLine(to: CGPoint(x: 15, y: 11.74))
        bezier3Path.addCurve(to: CGPoint(x: 14.97, y: 11.9), controlPoint1: CGPoint(x: 15, y: 11.83), controlPoint2: CGPoint(x: 14.99, y: 11.86))
        bezier3Path.addLine(to: CGPoint(x: 14.97, y: 11.9))
        bezier3Path.addCurve(to: CGPoint(x: 14.9, y: 11.97), controlPoint1: CGPoint(x: 14.96, y: 11.93), controlPoint2: CGPoint(x: 14.93, y: 11.96))
        bezier3Path.addCurve(to: CGPoint(x: 14.74, y: 12), controlPoint1: CGPoint(x: 14.87, y: 11.99), controlPoint2: CGPoint(x: 14.83, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 5.26, y: 12))
        bezier3Path.addCurve(to: CGPoint(x: 5.1, y: 11.97), controlPoint1: CGPoint(x: 5.17, y: 12), controlPoint2: CGPoint(x: 5.13, y: 11.99))
        bezier3Path.addLine(to: CGPoint(x: 5.1, y: 11.97))
        bezier3Path.addCurve(to: CGPoint(x: 5.03, y: 11.9), controlPoint1: CGPoint(x: 5.07, y: 11.96), controlPoint2: CGPoint(x: 5.04, y: 11.93))
        bezier3Path.addCurve(to: CGPoint(x: 5, y: 11.74), controlPoint1: CGPoint(x: 5.01, y: 11.87), controlPoint2: CGPoint(x: 5, y: 11.83))
        bezier3Path.addLine(to: CGPoint(x: 5, y: 8.26))
        bezier3Path.addCurve(to: CGPoint(x: 5.03, y: 8.1), controlPoint1: CGPoint(x: 5, y: 8.17), controlPoint2: CGPoint(x: 5.01, y: 8.14))
        bezier3Path.addLine(to: CGPoint(x: 5.03, y: 8.1))
        bezier3Path.addCurve(to: CGPoint(x: 5.1, y: 8.03), controlPoint1: CGPoint(x: 5.04, y: 8.07), controlPoint2: CGPoint(x: 5.07, y: 8.04))
        bezier3Path.addCurve(to: CGPoint(x: 5.26, y: 8), controlPoint1: CGPoint(x: 5.14, y: 8.01), controlPoint2: CGPoint(x: 5.17, y: 8))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 7.11, y: 10.28))
        bezier4Path.addLine(to: CGPoint(x: 7.75, y: 8.85))
        bezier4Path.addLine(to: CGPoint(x: 8.2, y: 8.85))
        bezier4Path.addLine(to: CGPoint(x: 8.2, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 7.84, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 7.84, y: 9.38))
        bezier4Path.addLine(to: CGPoint(x: 7.26, y: 10.67))
        bezier4Path.addLine(to: CGPoint(x: 7.06, y: 10.67))
        bezier4Path.addLine(to: CGPoint(x: 6.93, y: 10.67))
        bezier4Path.addLine(to: CGPoint(x: 6.36, y: 9.36))
        bezier4Path.addLine(to: CGPoint(x: 6.36, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 6.03, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 6.03, y: 8.85))
        bezier4Path.addLine(to: CGPoint(x: 6.52, y: 8.85))
        bezier4Path.addLine(to: CGPoint(x: 7.11, y: 10.28))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 9.93, y: 10.89))
        bezier4Path.addCurve(to: CGPoint(x: 9.85, y: 10.93), controlPoint1: CGPoint(x: 9.91, y: 10.9), controlPoint2: CGPoint(x: 9.88, y: 10.92))
        bezier4Path.addLine(to: CGPoint(x: 9.85, y: 10.93))
        bezier4Path.addCurve(to: CGPoint(x: 9.74, y: 10.98), controlPoint1: CGPoint(x: 9.82, y: 10.95), controlPoint2: CGPoint(x: 9.78, y: 10.96))
        bezier4Path.addLine(to: CGPoint(x: 9.73, y: 10.98))
        bezier4Path.addCurve(to: CGPoint(x: 9.37, y: 11.03), controlPoint1: CGPoint(x: 9.62, y: 11.01), controlPoint2: CGPoint(x: 9.49, y: 11.03))
        bezier4Path.addCurve(to: CGPoint(x: 8.74, y: 10.82), controlPoint1: CGPoint(x: 9.1, y: 11.03), controlPoint2: CGPoint(x: 8.88, y: 10.96))
        bezier4Path.addCurve(to: CGPoint(x: 8.53, y: 10.22), controlPoint1: CGPoint(x: 8.6, y: 10.68), controlPoint2: CGPoint(x: 8.53, y: 10.48))
        bezier4Path.addCurve(to: CGPoint(x: 8.59, y: 9.88), controlPoint1: CGPoint(x: 8.53, y: 10.09), controlPoint2: CGPoint(x: 8.55, y: 9.98))
        bezier4Path.addLine(to: CGPoint(x: 8.59, y: 9.88))
        bezier4Path.addCurve(to: CGPoint(x: 8.99, y: 9.47), controlPoint1: CGPoint(x: 8.66, y: 9.69), controlPoint2: CGPoint(x: 8.8, y: 9.54))
        bezier4Path.addLine(to: CGPoint(x: 8.99, y: 9.47))
        bezier4Path.addCurve(to: CGPoint(x: 9.3, y: 9.41), controlPoint1: CGPoint(x: 9.09, y: 9.43), controlPoint2: CGPoint(x: 9.2, y: 9.41))
        bezier4Path.addCurve(to: CGPoint(x: 9.61, y: 9.47), controlPoint1: CGPoint(x: 9.41, y: 9.41), controlPoint2: CGPoint(x: 9.52, y: 9.43))
        bezier4Path.addCurve(to: CGPoint(x: 9.84, y: 9.64), controlPoint1: CGPoint(x: 9.71, y: 9.51), controlPoint2: CGPoint(x: 9.78, y: 9.57))
        bezier4Path.addCurve(to: CGPoint(x: 9.97, y: 9.92), controlPoint1: CGPoint(x: 9.9, y: 9.72), controlPoint2: CGPoint(x: 9.94, y: 9.81))
        bezier4Path.addCurve(to: CGPoint(x: 9.97, y: 10.32), controlPoint1: CGPoint(x: 9.99, y: 10.04), controlPoint2: CGPoint(x: 9.99, y: 10.17))
        bezier4Path.addLine(to: CGPoint(x: 8.89, y: 10.32))
        bezier4Path.addLine(to: CGPoint(x: 8.89, y: 10.32))
        bezier4Path.addCurve(to: CGPoint(x: 9.03, y: 10.64), controlPoint1: CGPoint(x: 8.89, y: 10.44), controlPoint2: CGPoint(x: 8.95, y: 10.55))
        bezier4Path.addCurve(to: CGPoint(x: 9.41, y: 10.74), controlPoint1: CGPoint(x: 9.11, y: 10.71), controlPoint2: CGPoint(x: 9.24, y: 10.74))
        bezier4Path.addLine(to: CGPoint(x: 9.41, y: 10.74))
        bezier4Path.addCurve(to: CGPoint(x: 9.72, y: 10.69), controlPoint1: CGPoint(x: 9.52, y: 10.74), controlPoint2: CGPoint(x: 9.62, y: 10.73))
        bezier4Path.addCurve(to: CGPoint(x: 9.93, y: 10.6), controlPoint1: CGPoint(x: 9.8, y: 10.67), controlPoint2: CGPoint(x: 9.87, y: 10.63))
        bezier4Path.addLine(to: CGPoint(x: 9.93, y: 10.89))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 9.3, y: 9.69))
        bezier4Path.addLine(to: CGPoint(x: 9.3, y: 9.69))
        bezier4Path.addCurve(to: CGPoint(x: 9.04, y: 9.78), controlPoint1: CGPoint(x: 9.21, y: 9.69), controlPoint2: CGPoint(x: 9.11, y: 9.72))
        bezier4Path.addLine(to: CGPoint(x: 9.04, y: 9.78))
        bezier4Path.addCurve(to: CGPoint(x: 8.9, y: 10.06), controlPoint1: CGPoint(x: 8.96, y: 9.86), controlPoint2: CGPoint(x: 8.91, y: 9.95))
        bezier4Path.addLine(to: CGPoint(x: 9.63, y: 10.06))
        bezier4Path.addCurve(to: CGPoint(x: 9.55, y: 9.78), controlPoint1: CGPoint(x: 9.64, y: 9.93), controlPoint2: CGPoint(x: 9.61, y: 9.84))
        bezier4Path.addLine(to: CGPoint(x: 9.55, y: 9.78))
        bezier4Path.addCurve(to: CGPoint(x: 9.3, y: 9.69), controlPoint1: CGPoint(x: 9.48, y: 9.72), controlPoint2: CGPoint(x: 9.39, y: 9.68))
        bezier4Path.addLine(to: CGPoint(x: 9.3, y: 9.69))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 11.11, y: 10.95))
        bezier4Path.addLine(to: CGPoint(x: 11.11, y: 10.95))
        bezier4Path.addCurve(to: CGPoint(x: 10.97, y: 11.01), controlPoint1: CGPoint(x: 11.07, y: 10.98), controlPoint2: CGPoint(x: 11.02, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 10.97, y: 11.01))
        bezier4Path.addCurve(to: CGPoint(x: 10.79, y: 11.03), controlPoint1: CGPoint(x: 10.91, y: 11.02), controlPoint2: CGPoint(x: 10.85, y: 11.03))
        bezier4Path.addLine(to: CGPoint(x: 10.79, y: 11.03))
        bezier4Path.addCurve(to: CGPoint(x: 10.58, y: 11), controlPoint1: CGPoint(x: 10.72, y: 11.03), controlPoint2: CGPoint(x: 10.65, y: 11.02))
        bezier4Path.addLine(to: CGPoint(x: 10.58, y: 11))
        bezier4Path.addCurve(to: CGPoint(x: 10.36, y: 10.76), controlPoint1: CGPoint(x: 10.48, y: 10.96), controlPoint2: CGPoint(x: 10.4, y: 10.87))
        bezier4Path.addLine(to: CGPoint(x: 10.36, y: 10.76))
        bezier4Path.addCurve(to: CGPoint(x: 10.34, y: 10.59), controlPoint1: CGPoint(x: 10.35, y: 10.71), controlPoint2: CGPoint(x: 10.34, y: 10.65))
        bezier4Path.addLine(to: CGPoint(x: 10.34, y: 9.73))
        bezier4Path.addLine(to: CGPoint(x: 10.15, y: 9.73))
        bezier4Path.addLine(to: CGPoint(x: 10.15, y: 9.44))
        bezier4Path.addLine(to: CGPoint(x: 10.34, y: 9.44))
        bezier4Path.addLine(to: CGPoint(x: 10.34, y: 9.12))
        bezier4Path.addLine(to: CGPoint(x: 10.69, y: 9.12))
        bezier4Path.addLine(to: CGPoint(x: 10.69, y: 9.44))
        bezier4Path.addLine(to: CGPoint(x: 11.13, y: 9.44))
        bezier4Path.addLine(to: CGPoint(x: 11.13, y: 9.73))
        bezier4Path.addLine(to: CGPoint(x: 10.69, y: 9.73))
        bezier4Path.addLine(to: CGPoint(x: 10.69, y: 10.55))
        bezier4Path.addCurve(to: CGPoint(x: 10.73, y: 10.69), controlPoint1: CGPoint(x: 10.69, y: 10.62), controlPoint2: CGPoint(x: 10.7, y: 10.66))
        bezier4Path.addCurve(to: CGPoint(x: 10.89, y: 10.74), controlPoint1: CGPoint(x: 10.76, y: 10.72), controlPoint2: CGPoint(x: 10.82, y: 10.74))
        bezier4Path.addLine(to: CGPoint(x: 10.89, y: 10.74))
        bezier4Path.addCurve(to: CGPoint(x: 11.11, y: 10.66), controlPoint1: CGPoint(x: 10.97, y: 10.74), controlPoint2: CGPoint(x: 11.05, y: 10.71))
        bezier4Path.addLine(to: CGPoint(x: 11.11, y: 10.95))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 12.3, y: 9.78))
        bezier4Path.addLine(to: CGPoint(x: 12.31, y: 9.78))
        bezier4Path.addCurve(to: CGPoint(x: 11.99, y: 9.83), controlPoint1: CGPoint(x: 12.2, y: 9.78), controlPoint2: CGPoint(x: 12.09, y: 9.79))
        bezier4Path.addLine(to: CGPoint(x: 11.99, y: 9.83))
        bezier4Path.addCurve(to: CGPoint(x: 11.78, y: 10.02), controlPoint1: CGPoint(x: 11.9, y: 9.87), controlPoint2: CGPoint(x: 11.83, y: 9.93))
        bezier4Path.addLine(to: CGPoint(x: 11.79, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 11.44, y: 11))
        bezier4Path.addLine(to: CGPoint(x: 11.44, y: 9.44))
        bezier4Path.addLine(to: CGPoint(x: 11.75, y: 9.44))
        bezier4Path.addLine(to: CGPoint(x: 11.78, y: 9.77))
        bezier4Path.addLine(to: CGPoint(x: 11.78, y: 9.77))
        bezier4Path.addLine(to: CGPoint(x: 11.78, y: 9.77))
        bezier4Path.addCurve(to: CGPoint(x: 11.98, y: 9.53), controlPoint1: CGPoint(x: 11.83, y: 9.68), controlPoint2: CGPoint(x: 11.9, y: 9.6))
        bezier4Path.addLine(to: CGPoint(x: 11.99, y: 9.53))
        bezier4Path.addCurve(to: CGPoint(x: 12.3, y: 9.41), controlPoint1: CGPoint(x: 12.08, y: 9.46), controlPoint2: CGPoint(x: 12.19, y: 9.42))
        bezier4Path.addLine(to: CGPoint(x: 12.3, y: 9.78))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 13.26, y: 11.03))
        bezier4Path.addLine(to: CGPoint(x: 13.27, y: 11.03))
        bezier4Path.addCurve(to: CGPoint(x: 12.97, y: 10.98), controlPoint1: CGPoint(x: 13.17, y: 11.03), controlPoint2: CGPoint(x: 13.06, y: 11.01))
        bezier4Path.addLine(to: CGPoint(x: 12.95, y: 10.97))
        bezier4Path.addCurve(to: CGPoint(x: 12.55, y: 10.57), controlPoint1: CGPoint(x: 12.77, y: 10.9), controlPoint2: CGPoint(x: 12.62, y: 10.75))
        bezier4Path.addLine(to: CGPoint(x: 12.55, y: 10.56))
        bezier4Path.addCurve(to: CGPoint(x: 12.49, y: 10.22), controlPoint1: CGPoint(x: 12.51, y: 10.45), controlPoint2: CGPoint(x: 12.49, y: 10.34))
        bezier4Path.addCurve(to: CGPoint(x: 12.55, y: 9.88), controlPoint1: CGPoint(x: 12.49, y: 10.09), controlPoint2: CGPoint(x: 12.51, y: 9.98))
        bezier4Path.addLine(to: CGPoint(x: 12.55, y: 9.88))
        bezier4Path.addCurve(to: CGPoint(x: 12.96, y: 9.47), controlPoint1: CGPoint(x: 12.62, y: 9.69), controlPoint2: CGPoint(x: 12.77, y: 9.54))
        bezier4Path.addLine(to: CGPoint(x: 12.96, y: 9.47))
        bezier4Path.addCurve(to: CGPoint(x: 13.26, y: 9.41), controlPoint1: CGPoint(x: 13.05, y: 9.43), controlPoint2: CGPoint(x: 13.15, y: 9.41))
        bezier4Path.addLine(to: CGPoint(x: 13.27, y: 9.41))
        bezier4Path.addCurve(to: CGPoint(x: 13.58, y: 9.47), controlPoint1: CGPoint(x: 13.38, y: 9.41), controlPoint2: CGPoint(x: 13.48, y: 9.43))
        bezier4Path.addLine(to: CGPoint(x: 13.57, y: 9.47))
        bezier4Path.addCurve(to: CGPoint(x: 13.98, y: 9.88), controlPoint1: CGPoint(x: 13.76, y: 9.54), controlPoint2: CGPoint(x: 13.91, y: 9.69))
        bezier4Path.addCurve(to: CGPoint(x: 14.04, y: 10.22), controlPoint1: CGPoint(x: 14.02, y: 9.98), controlPoint2: CGPoint(x: 14.04, y: 10.09))
        bezier4Path.addCurve(to: CGPoint(x: 13.98, y: 10.57), controlPoint1: CGPoint(x: 14.04, y: 10.35), controlPoint2: CGPoint(x: 14.02, y: 10.47))
        bezier4Path.addLine(to: CGPoint(x: 13.98, y: 10.57))
        bezier4Path.addCurve(to: CGPoint(x: 13.56, y: 10.98), controlPoint1: CGPoint(x: 13.91, y: 10.76), controlPoint2: CGPoint(x: 13.75, y: 10.91))
        bezier4Path.addLine(to: CGPoint(x: 13.58, y: 10.97))
        bezier4Path.addCurve(to: CGPoint(x: 13.27, y: 11.03), controlPoint1: CGPoint(x: 13.48, y: 11.01), controlPoint2: CGPoint(x: 13.38, y: 11.03))
        bezier4Path.addLine(to: CGPoint(x: 13.26, y: 11.03))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 13.26, y: 10.74))
        bezier4Path.addCurve(to: CGPoint(x: 13.56, y: 10.61), controlPoint1: CGPoint(x: 13.38, y: 10.74), controlPoint2: CGPoint(x: 13.48, y: 10.7))
        bezier4Path.addCurve(to: CGPoint(x: 13.68, y: 10.22), controlPoint1: CGPoint(x: 13.64, y: 10.53), controlPoint2: CGPoint(x: 13.68, y: 10.4))
        bezier4Path.addCurve(to: CGPoint(x: 13.56, y: 9.83), controlPoint1: CGPoint(x: 13.68, y: 10.04), controlPoint2: CGPoint(x: 13.64, y: 9.91))
        bezier4Path.addLine(to: CGPoint(x: 13.56, y: 9.83))
        bezier4Path.addCurve(to: CGPoint(x: 13.27, y: 9.7), controlPoint1: CGPoint(x: 13.49, y: 9.75), controlPoint2: CGPoint(x: 13.38, y: 9.7))
        bezier4Path.addLine(to: CGPoint(x: 13.26, y: 9.7))
        bezier4Path.addCurve(to: CGPoint(x: 12.97, y: 9.83), controlPoint1: CGPoint(x: 13.15, y: 9.7), controlPoint2: CGPoint(x: 13.04, y: 9.75))
        bezier4Path.addCurve(to: CGPoint(x: 12.85, y: 10.22), controlPoint1: CGPoint(x: 12.89, y: 9.91), controlPoint2: CGPoint(x: 12.85, y: 10.04))
        bezier4Path.addCurve(to: CGPoint(x: 12.97, y: 10.61), controlPoint1: CGPoint(x: 12.85, y: 10.4), controlPoint2: CGPoint(x: 12.89, y: 10.53))
        bezier4Path.addLine(to: CGPoint(x: 12.97, y: 10.62))
        bezier4Path.addCurve(to: CGPoint(x: 13.27, y: 10.74), controlPoint1: CGPoint(x: 13.05, y: 10.7), controlPoint2: CGPoint(x: 13.16, y: 10.74))
        bezier4Path.addLine(to: CGPoint(x: 13.26, y: 10.74))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_Izmir_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.36, y: 1.36))
        bezierPath.addLine(to: CGPoint(x: 18.64, y: 9.64))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 9.89), controlPoint1: CGPoint(x: 18.76, y: 9.76), controlPoint2: CGPoint(x: 18.8, y: 9.82))
        bezierPath.addLine(to: CGPoint(x: 18.82, y: 9.89))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 10.11), controlPoint1: CGPoint(x: 18.84, y: 9.96), controlPoint2: CGPoint(x: 18.84, y: 10.04))
        bezierPath.addCurve(to: CGPoint(x: 18.64, y: 10.36), controlPoint1: CGPoint(x: 18.8, y: 10.18), controlPoint2: CGPoint(x: 18.76, y: 10.24))
        bezierPath.addLine(to: CGPoint(x: 10.36, y: 18.64))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 18.82), controlPoint1: CGPoint(x: 10.24, y: 18.76), controlPoint2: CGPoint(x: 10.18, y: 18.8))
        bezierPath.addLine(to: CGPoint(x: 10.11, y: 18.82))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 18.82), controlPoint1: CGPoint(x: 10.04, y: 18.84), controlPoint2: CGPoint(x: 9.96, y: 18.84))
        bezierPath.addCurve(to: CGPoint(x: 9.64, y: 18.64), controlPoint1: CGPoint(x: 9.82, y: 18.8), controlPoint2: CGPoint(x: 9.76, y: 18.76))
        bezierPath.addLine(to: CGPoint(x: 1.36, y: 10.36))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 10.11), controlPoint1: CGPoint(x: 1.24, y: 10.24), controlPoint2: CGPoint(x: 1.2, y: 10.18))
        bezierPath.addLine(to: CGPoint(x: 1.18, y: 10.11))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 9.89), controlPoint1: CGPoint(x: 1.16, y: 10.04), controlPoint2: CGPoint(x: 1.16, y: 9.96))
        bezierPath.addCurve(to: CGPoint(x: 1.36, y: 9.64), controlPoint1: CGPoint(x: 1.2, y: 9.82), controlPoint2: CGPoint(x: 1.24, y: 9.76))
        bezierPath.addLine(to: CGPoint(x: 9.64, y: 1.36))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 1.18), controlPoint1: CGPoint(x: 9.76, y: 1.24), controlPoint2: CGPoint(x: 9.82, y: 1.2))
        bezierPath.addLine(to: CGPoint(x: 9.89, y: 1.18))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 1.18), controlPoint1: CGPoint(x: 9.96, y: 1.16), controlPoint2: CGPoint(x: 10.04, y: 1.16))
        bezierPath.addCurve(to: CGPoint(x: 10.36, y: 1.36), controlPoint1: CGPoint(x: 10.18, y: 1.2), controlPoint2: CGPoint(x: 10.24, y: 1.24))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7, y: 5.5))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 5.5))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 10))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 5.5))
        bezier2Path.close()
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_kiev_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.44, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.78))
        bezierPath.addLine(to: CGPoint(x: 13.56, y: 4))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 14.09, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 11.56))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.addLine(to: CGPoint(x: 7.33, y: 11.56))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 6.44, y: 4))
        bezierPath.close()
        StyleKit_Metro.transit_green.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_tram_volgograd_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_red.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14, y: 10))
        bezierPath.addLine(to: CGPoint(x: 14, y: 14.6))
        bezierPath.addLine(to: CGPoint(x: 14, y: 14.6))
        bezierPath.addCurve(to: CGPoint(x: 13.6, y: 15), controlPoint1: CGPoint(x: 14, y: 14.82), controlPoint2: CGPoint(x: 13.82, y: 15))
        bezierPath.addLine(to: CGPoint(x: 12.4, y: 15))
        bezierPath.addLine(to: CGPoint(x: 12.4, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 14.6), controlPoint1: CGPoint(x: 12.18, y: 15), controlPoint2: CGPoint(x: 12, y: 14.82))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10.4, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10.4, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 9.6), controlPoint1: CGPoint(x: 10.18, y: 10), controlPoint2: CGPoint(x: 10, y: 9.82))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.4))
        bezierPath.addCurve(to: CGPoint(x: 10.4, y: 8), controlPoint1: CGPoint(x: 10, y: 8.18), controlPoint2: CGPoint(x: 10.18, y: 8))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 8.4), controlPoint1: CGPoint(x: 15.82, y: 8), controlPoint2: CGPoint(x: 16, y: 8.18))
        bezierPath.addLine(to: CGPoint(x: 16, y: 9.6))
        bezierPath.addLine(to: CGPoint(x: 16, y: 9.6))
        bezierPath.addCurve(to: CGPoint(x: 15.6, y: 10), controlPoint1: CGPoint(x: 16, y: 9.82), controlPoint2: CGPoint(x: 15.82, y: 10))
        bezierPath.addLine(to: CGPoint(x: 14, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 9.83, y: 5.39), controlPoint1: CGPoint(x: 8.85, y: 5), controlPoint2: CGPoint(x: 9.46, y: 5.13))
        bezierPath.addLine(to: CGPoint(x: 9.83, y: 5.39))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 5.72), controlPoint1: CGPoint(x: 9.94, y: 5.46), controlPoint2: CGPoint(x: 10, y: 5.59))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.6))
        bezierPath.addCurve(to: CGPoint(x: 9.6, y: 7), controlPoint1: CGPoint(x: 10, y: 6.82), controlPoint2: CGPoint(x: 9.82, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 9), controlPoint1: CGPoint(x: 6.9, y: 7), controlPoint2: CGPoint(x: 6, y: 7.9))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 11), controlPoint1: CGPoint(x: 6, y: 10.1), controlPoint2: CGPoint(x: 6.9, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9.6, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 11.4), controlPoint1: CGPoint(x: 9.82, y: 11), controlPoint2: CGPoint(x: 10, y: 11.18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12.28))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12.28))
        bezierPath.addCurve(to: CGPoint(x: 9.83, y: 12.61), controlPoint1: CGPoint(x: 10, y: 12.41), controlPoint2: CGPoint(x: 9.94, y: 12.54))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 9.46, y: 12.87), controlPoint2: CGPoint(x: 8.85, y: 13))
        bezierPath.addLine(to: CGPoint(x: 8, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 5.79, y: 13), controlPoint2: CGPoint(x: 4, y: 11.21))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 5), controlPoint1: CGPoint(x: 4, y: 6.79), controlPoint2: CGPoint(x: 5.79, y: 5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_paris_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_deep_blue.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.4, y: 3.4, width: 13.2, height: 13.2))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.2, y: 8.84))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 14.2), controlPoint1: CGPoint(x: 7.2, y: 13.89), controlPoint2: CGPoint(x: 6.89, y: 14.2))
        bezierPath.addCurve(to: CGPoint(x: 5.8, y: 13.5), controlPoint1: CGPoint(x: 6.11, y: 14.2), controlPoint2: CGPoint(x: 5.8, y: 13.89))
        bezierPath.addLine(to: CGPoint(x: 5.8, y: 6.4))
        bezierPath.addCurve(to: CGPoint(x: 7.09, y: 6.03), controlPoint1: CGPoint(x: 5.8, y: 5.7), controlPoint2: CGPoint(x: 6.72, y: 5.43))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.68))
        bezierPath.addLine(to: CGPoint(x: 12.91, y: 6.03))
        bezierPath.addCurve(to: CGPoint(x: 14.2, y: 6.4), controlPoint1: CGPoint(x: 13.28, y: 5.43), controlPoint2: CGPoint(x: 14.2, y: 5.7))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 13.5, y: 14.2), controlPoint1: CGPoint(x: 14.2, y: 13.89), controlPoint2: CGPoint(x: 13.89, y: 14.2))
        bezierPath.addCurve(to: CGPoint(x: 12.8, y: 13.5), controlPoint1: CGPoint(x: 13.11, y: 14.2), controlPoint2: CGPoint(x: 12.8, y: 13.89))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 8.84))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 12.37))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 12.37))
        bezierPath.addCurve(to: CGPoint(x: 9.63, y: 12.59), controlPoint1: CGPoint(x: 10.39, y: 12.7), controlPoint2: CGPoint(x: 9.96, y: 12.8))
        bezierPath.addCurve(to: CGPoint(x: 9.41, y: 12.37), controlPoint1: CGPoint(x: 9.54, y: 12.54), controlPoint2: CGPoint(x: 9.46, y: 12.46))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 8.84))
        bezierPath.close()
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_budapest_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.grey20.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.4, y: 3.4, width: 13.2, height: 13.2))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 11.62))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 9.17))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 8.05))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 8.05))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 14))
        bezierPath.addLine(to: CGPoint(x: 5.8, y: 14))
        bezierPath.addLine(to: CGPoint(x: 5.8, y: 6))
        bezierPath.addLine(to: CGPoint(x: 7, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.62))
        bezierPath.addLine(to: CGPoint(x: 13, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 11.05))
        bezierPath.addLine(to: CGPoint(x: 10, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 8, y: 11.75))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.88))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey20.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_santiago_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 3, width: 16, height: 14))
        StyleKit_Metro.transit_maroon.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 10, y: 10)
        context.rotate(by: -0.15 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -6.8, y: -5.8, width: 13.6, height: 11.6))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.09, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 11.97, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 11.97, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 11.97, y: 10.05), controlPoint1: CGPoint(x: 11.99, y: 9.98), controlPoint2: CGPoint(x: 11.99, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 9.95, y: 13.39), controlPoint1: CGPoint(x: 10.06, y: 13.4), controlPoint2: CGPoint(x: 10, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 13.35), controlPoint1: CGPoint(x: 9.93, y: 13.38), controlPoint2: CGPoint(x: 9.92, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 8.03, y: 10.05))
        bezierPath.addLine(to: CGPoint(x: 8.03, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 8.03, y: 9.95), controlPoint1: CGPoint(x: 8.01, y: 10.02), controlPoint2: CGPoint(x: 8.01, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 10.05, y: 6.61), controlPoint1: CGPoint(x: 9.94, y: 6.6), controlPoint2: CGPoint(x: 10, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 6.65), controlPoint1: CGPoint(x: 10.07, y: 6.62), controlPoint2: CGPoint(x: 10.08, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.09, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 15.97, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 15.97, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 15.97, y: 10.05), controlPoint1: CGPoint(x: 15.99, y: 9.98), controlPoint2: CGPoint(x: 15.99, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 14.09, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 14.09, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 13.95, y: 13.39), controlPoint1: CGPoint(x: 14.06, y: 13.4), controlPoint2: CGPoint(x: 14, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 13.91, y: 13.35), controlPoint1: CGPoint(x: 13.93, y: 13.38), controlPoint2: CGPoint(x: 13.92, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 12.03, y: 10.05))
        bezierPath.addLine(to: CGPoint(x: 12.03, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 12.03, y: 9.95), controlPoint1: CGPoint(x: 12.01, y: 10.02), controlPoint2: CGPoint(x: 12.01, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 14.05, y: 6.61), controlPoint1: CGPoint(x: 13.94, y: 6.6), controlPoint2: CGPoint(x: 14, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 14.09, y: 6.65), controlPoint1: CGPoint(x: 14.07, y: 6.62), controlPoint2: CGPoint(x: 14.08, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6.09, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 7.97, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 7.97, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 7.97, y: 10.05), controlPoint1: CGPoint(x: 7.99, y: 9.98), controlPoint2: CGPoint(x: 7.99, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 6.09, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 6.09, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 5.95, y: 13.39), controlPoint1: CGPoint(x: 6.06, y: 13.4), controlPoint2: CGPoint(x: 6, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 5.91, y: 13.35), controlPoint1: CGPoint(x: 5.93, y: 13.38), controlPoint2: CGPoint(x: 5.92, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 4.03, y: 10.05))
        bezierPath.addLine(to: CGPoint(x: 4.03, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 4.03, y: 9.95), controlPoint1: CGPoint(x: 4.01, y: 10.02), controlPoint2: CGPoint(x: 4.01, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 6.05, y: 6.61), controlPoint1: CGPoint(x: 5.94, y: 6.6), controlPoint2: CGPoint(x: 6, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 6.09, y: 6.65), controlPoint1: CGPoint(x: 6.07, y: 6.62), controlPoint2: CGPoint(x: 6.08, y: 6.64))
        bezierPath.close()
        StyleKit_Metro.transit_maroon.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_istanbul_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 3, y: 2, width: 14, height: 14))
        StyleKit_Metro.transit_deep_blue.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 17.76))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 17.76))
        bezierPath.addCurve(to: CGPoint(x: 9.7, y: 17.77), controlPoint1: CGPoint(x: 10.13, y: 17.9), controlPoint2: CGPoint(x: 9.88, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 3.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.5))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 13))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5.15, y: 4.09))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 14.85, y: 4.09))
        bezier2Path.addLine(to: CGPoint(x: 14.85, y: 4.09))
        bezier2Path.addCurve(to: CGPoint(x: 14.99, y: 4.12), controlPoint1: CGPoint(x: 14.9, y: 4.06), controlPoint2: CGPoint(x: 14.96, y: 4.08))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 4.18), controlPoint1: CGPoint(x: 15, y: 4.14), controlPoint2: CGPoint(x: 15, y: 4.16))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 7.82))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 9.61))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 7.82))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 4.18))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 4.18))
        bezier2Path.addCurve(to: CGPoint(x: 5.1, y: 4.08), controlPoint1: CGPoint(x: 5, y: 4.12), controlPoint2: CGPoint(x: 5.04, y: 4.08))
        bezier2Path.addCurve(to: CGPoint(x: 5.15, y: 4.09), controlPoint1: CGPoint(x: 5.12, y: 4.08), controlPoint2: CGPoint(x: 5.14, y: 4.08))
        bezier2Path.addLine(to: CGPoint(x: 5.15, y: 4.09))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_athens_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_green.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.5, y: 3.5, width: 13, height: 13))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.5, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 11.5), controlPoint1: CGPoint(x: 4.95, y: 12.5), controlPoint2: CGPoint(x: 4.5, y: 12.05))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 10.5), controlPoint1: CGPoint(x: 4.5, y: 10.95), controlPoint2: CGPoint(x: 4.95, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 11.5), controlPoint1: CGPoint(x: 6.05, y: 10.5), controlPoint2: CGPoint(x: 6.5, y: 10.95))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 12.5), controlPoint1: CGPoint(x: 6.5, y: 12.05), controlPoint2: CGPoint(x: 6.05, y: 12.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 12.2, y: 7))
        bezierPath.addLine(to: CGPoint(x: 15.7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.8, y: 7))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 11.3, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7.8, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6.8, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 13))
        bezierPath.addLine(to: CGPoint(x: 8.6, y: 13))
        bezierPath.addLine(to: CGPoint(x: 6.03, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 7))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_ankara_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.2, y: 1.2))
        bezierPath.addLine(to: CGPoint(x: 18.47, y: 9.47))
        bezierPath.addCurve(to: CGPoint(x: 18.65, y: 9.73), controlPoint1: CGPoint(x: 18.6, y: 9.6), controlPoint2: CGPoint(x: 18.63, y: 9.66))
        bezierPath.addLine(to: CGPoint(x: 18.65, y: 9.73))
        bezierPath.addCurve(to: CGPoint(x: 18.65, y: 9.94), controlPoint1: CGPoint(x: 18.67, y: 9.8), controlPoint2: CGPoint(x: 18.67, y: 9.87))
        bezierPath.addCurve(to: CGPoint(x: 18.47, y: 10.2), controlPoint1: CGPoint(x: 18.63, y: 10.01), controlPoint2: CGPoint(x: 18.6, y: 10.07))
        bezierPath.addLine(to: CGPoint(x: 10.2, y: 18.47))
        bezierPath.addCurve(to: CGPoint(x: 9.94, y: 18.65), controlPoint1: CGPoint(x: 10.07, y: 18.6), controlPoint2: CGPoint(x: 10.01, y: 18.63))
        bezierPath.addLine(to: CGPoint(x: 9.94, y: 18.65))
        bezierPath.addCurve(to: CGPoint(x: 9.73, y: 18.65), controlPoint1: CGPoint(x: 9.87, y: 18.67), controlPoint2: CGPoint(x: 9.8, y: 18.67))
        bezierPath.addCurve(to: CGPoint(x: 9.47, y: 18.47), controlPoint1: CGPoint(x: 9.66, y: 18.63), controlPoint2: CGPoint(x: 9.6, y: 18.6))
        bezierPath.addLine(to: CGPoint(x: 1.2, y: 10.2))
        bezierPath.addCurve(to: CGPoint(x: 1.02, y: 9.94), controlPoint1: CGPoint(x: 1.07, y: 10.07), controlPoint2: CGPoint(x: 1.04, y: 10.01))
        bezierPath.addLine(to: CGPoint(x: 1.02, y: 9.94))
        bezierPath.addCurve(to: CGPoint(x: 1.02, y: 9.73), controlPoint1: CGPoint(x: 0.99, y: 9.87), controlPoint2: CGPoint(x: 0.99, y: 9.8))
        bezierPath.addCurve(to: CGPoint(x: 1.2, y: 9.47), controlPoint1: CGPoint(x: 1.04, y: 9.66), controlPoint2: CGPoint(x: 1.07, y: 9.6))
        bezierPath.addLine(to: CGPoint(x: 9.47, y: 1.2))
        bezierPath.addCurve(to: CGPoint(x: 9.73, y: 1.02), controlPoint1: CGPoint(x: 9.6, y: 1.07), controlPoint2: CGPoint(x: 9.66, y: 1.04))
        bezierPath.addLine(to: CGPoint(x: 9.73, y: 1.02))
        bezierPath.addCurve(to: CGPoint(x: 9.94, y: 1.02), controlPoint1: CGPoint(x: 9.8, y: 0.99), controlPoint2: CGPoint(x: 9.87, y: 0.99))
        bezierPath.addCurve(to: CGPoint(x: 10.2, y: 1.2), controlPoint1: CGPoint(x: 10.01, y: 1.04), controlPoint2: CGPoint(x: 10.07, y: 1.07))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 7.43, y: 5.83))
        bezier2Path.addLine(to: CGPoint(x: 9.83, y: 8.83))
        bezier2Path.addLine(to: CGPoint(x: 12.23, y: 5.83))
        bezier2Path.addLine(to: CGPoint(x: 13.83, y: 11.83))
        bezier2Path.addLine(to: CGPoint(x: 11.83, y: 11.83))
        bezier2Path.addLine(to: CGPoint(x: 11.43, y: 9.58))
        bezier2Path.addLine(to: CGPoint(x: 9.83, y: 11.83))
        bezier2Path.addLine(to: CGPoint(x: 8.23, y: 9.58))
        bezier2Path.addLine(to: CGPoint(x: 7.83, y: 11.83))
        bezier2Path.addLine(to: CGPoint(x: 5.83, y: 11.83))
        bezier2Path.addLine(to: CGPoint(x: 7.43, y: 5.83))
        bezier2Path.close()
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_tbilisi_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3), controlPoint1: CGPoint(x: 2, y: 6.92), controlPoint2: CGPoint(x: 5.58, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 11.75), controlPoint1: CGPoint(x: 14.42, y: 3), controlPoint2: CGPoint(x: 18, y: 6.92))
        bezierPath.addCurve(to: CGPoint(x: 16.4, y: 17), controlPoint1: CGPoint(x: 18, y: 13.72), controlPoint2: CGPoint(x: 17.41, y: 15.54))
        bezierPath.addLine(to: CGPoint(x: 3.6, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 11.75), controlPoint1: CGPoint(x: 2.59, y: 15.54), controlPoint2: CGPoint(x: 2, y: 13.72))
        bezierPath.close()
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15.62, y: 15.6))
        bezier2Path.addLine(to: CGPoint(x: 15.61, y: 15.63))
        bezier2Path.addCurve(to: CGPoint(x: 16.6, y: 11.78), controlPoint1: CGPoint(x: 16.26, y: 14.45), controlPoint2: CGPoint(x: 16.6, y: 13.13))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 4.4), controlPoint1: CGPoint(x: 16.6, y: 7.66), controlPoint2: CGPoint(x: 13.62, y: 4.4))
        bezier2Path.addCurve(to: CGPoint(x: 3.4, y: 11.75), controlPoint1: CGPoint(x: 6.38, y: 4.4), controlPoint2: CGPoint(x: 3.4, y: 7.66))
        bezier2Path.addCurve(to: CGPoint(x: 4.38, y: 15.6), controlPoint1: CGPoint(x: 3.4, y: 13.13), controlPoint2: CGPoint(x: 3.74, y: 14.46))
        bezier2Path.addLine(to: CGPoint(x: 15.62, y: 15.6))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 12, y: 10.5))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 14))
        bezier3Path.addLine(to: CGPoint(x: 8, y: 10.5))
        bezier3Path.addLine(to: CGPoint(x: 7, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 7.5, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 7.5, y: 14))
        bezier3Path.addLine(to: CGPoint(x: 4.5, y: 14))
        bezier3Path.addLine(to: CGPoint(x: 4.5, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 5, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 7.44, y: 6))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 10.5))
        bezier3Path.addLine(to: CGPoint(x: 12.5, y: 6))
        bezier3Path.addLine(to: CGPoint(x: 15, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 15.5, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 15.5, y: 14))
        bezier3Path.addLine(to: CGPoint(x: 12.5, y: 14))
        bezier3Path.addLine(to: CGPoint(x: 12.5, y: 13))
        bezier3Path.addLine(to: CGPoint(x: 13, y: 13))
        bezier3Path.close()
        StyleKit_Metro.transit_red.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_bursa_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.36, y: 1.36))
        bezierPath.addLine(to: CGPoint(x: 18.64, y: 9.64))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 9.89), controlPoint1: CGPoint(x: 18.76, y: 9.76), controlPoint2: CGPoint(x: 18.8, y: 9.82))
        bezierPath.addLine(to: CGPoint(x: 18.82, y: 9.89))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 10.11), controlPoint1: CGPoint(x: 18.84, y: 9.96), controlPoint2: CGPoint(x: 18.84, y: 10.04))
        bezierPath.addCurve(to: CGPoint(x: 18.64, y: 10.36), controlPoint1: CGPoint(x: 18.8, y: 10.18), controlPoint2: CGPoint(x: 18.76, y: 10.24))
        bezierPath.addLine(to: CGPoint(x: 10.36, y: 18.64))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 18.82), controlPoint1: CGPoint(x: 10.24, y: 18.76), controlPoint2: CGPoint(x: 10.18, y: 18.8))
        bezierPath.addLine(to: CGPoint(x: 10.11, y: 18.82))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 18.82), controlPoint1: CGPoint(x: 10.04, y: 18.84), controlPoint2: CGPoint(x: 9.96, y: 18.84))
        bezierPath.addCurve(to: CGPoint(x: 9.64, y: 18.64), controlPoint1: CGPoint(x: 9.82, y: 18.8), controlPoint2: CGPoint(x: 9.76, y: 18.76))
        bezierPath.addLine(to: CGPoint(x: 1.36, y: 10.36))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 10.11), controlPoint1: CGPoint(x: 1.24, y: 10.24), controlPoint2: CGPoint(x: 1.2, y: 10.18))
        bezierPath.addLine(to: CGPoint(x: 1.18, y: 10.11))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 9.89), controlPoint1: CGPoint(x: 1.16, y: 10.04), controlPoint2: CGPoint(x: 1.16, y: 9.96))
        bezierPath.addCurve(to: CGPoint(x: 1.36, y: 9.64), controlPoint1: CGPoint(x: 1.2, y: 9.82), controlPoint2: CGPoint(x: 1.24, y: 9.76))
        bezierPath.addLine(to: CGPoint(x: 9.64, y: 1.36))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 1.18), controlPoint1: CGPoint(x: 9.76, y: 1.24), controlPoint2: CGPoint(x: 9.82, y: 1.2))
        bezierPath.addLine(to: CGPoint(x: 9.89, y: 1.18))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 1.18), controlPoint1: CGPoint(x: 9.96, y: 1.16), controlPoint2: CGPoint(x: 10.04, y: 1.16))
        bezierPath.addCurve(to: CGPoint(x: 10.36, y: 1.36), controlPoint1: CGPoint(x: 10.18, y: 1.2), controlPoint2: CGPoint(x: 10.24, y: 1.24))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_emerald.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 12.12, y: 7.49))
        bezier2Path.addLine(to: CGPoint(x: 12.12, y: 7.5))
        bezier2Path.addCurve(to: CGPoint(x: 11.04, y: 7), controlPoint1: CGPoint(x: 11.84, y: 7.2), controlPoint2: CGPoint(x: 11.45, y: 7.02))
        bezier2Path.addLine(to: CGPoint(x: 11.03, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 8.62, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 8.62, y: 7))
        bezier2Path.addCurve(to: CGPoint(x: 8.45, y: 7.14), controlPoint1: CGPoint(x: 8.54, y: 7), controlPoint2: CGPoint(x: 8.47, y: 7.06))
        bezier2Path.addLine(to: CGPoint(x: 8.12, y: 9.39))
        bezier2Path.addCurve(to: CGPoint(x: 9.49, y: 8.53), controlPoint1: CGPoint(x: 8.54, y: 9.09), controlPoint2: CGPoint(x: 9.01, y: 8.8))
        bezier2Path.addLine(to: CGPoint(x: 9.27, y: 8.15))
        bezier2Path.addLine(to: CGPoint(x: 9.26, y: 8.15))
        bezier2Path.addCurve(to: CGPoint(x: 9.29, y: 8.04), controlPoint1: CGPoint(x: 9.24, y: 8.11), controlPoint2: CGPoint(x: 9.26, y: 8.06))
        bezier2Path.addLine(to: CGPoint(x: 9.3, y: 8.04))
        bezier2Path.addLine(to: CGPoint(x: 9.3, y: 8.04))
        bezier2Path.addCurve(to: CGPoint(x: 9.36, y: 8.03), controlPoint1: CGPoint(x: 9.32, y: 8.03), controlPoint2: CGPoint(x: 9.34, y: 8.03))
        bezier2Path.addLine(to: CGPoint(x: 10.44, y: 8.36))
        bezier2Path.addCurve(to: CGPoint(x: 10.56, y: 8.56), controlPoint1: CGPoint(x: 10.53, y: 8.39), controlPoint2: CGPoint(x: 10.58, y: 8.47))
        bezier2Path.addLine(to: CGPoint(x: 10.31, y: 9.63))
        bezier2Path.addLine(to: CGPoint(x: 10.31, y: 9.63))
        bezier2Path.addCurve(to: CGPoint(x: 10.21, y: 9.69), controlPoint1: CGPoint(x: 10.3, y: 9.68), controlPoint2: CGPoint(x: 10.25, y: 9.7))
        bezier2Path.addLine(to: CGPoint(x: 10.21, y: 9.69))
        bezier2Path.addCurve(to: CGPoint(x: 10.15, y: 9.65), controlPoint1: CGPoint(x: 10.19, y: 9.69), controlPoint2: CGPoint(x: 10.17, y: 9.67))
        bezier2Path.addLine(to: CGPoint(x: 9.91, y: 9.25))
        bezier2Path.addCurve(to: CGPoint(x: 7.95, y: 10.62), controlPoint1: CGPoint(x: 9.16, y: 9.68), controlPoint2: CGPoint(x: 8.48, y: 10.15))
        bezier2Path.addLine(to: CGPoint(x: 7.74, y: 12))
        bezier2Path.addCurve(to: CGPoint(x: 6.18, y: 11.99), controlPoint1: CGPoint(x: 6.92, y: 12.23), controlPoint2: CGPoint(x: 6.33, y: 12.25))
        bezier2Path.addCurve(to: CGPoint(x: 8.07, y: 9.79), controlPoint1: CGPoint(x: 5.95, y: 11.6), controlPoint2: CGPoint(x: 6.75, y: 10.7))
        bezier2Path.addLine(to: CGPoint(x: 8.13, y: 9.38))
        bezier2Path.addCurve(to: CGPoint(x: 5.58, y: 12.63), controlPoint1: CGPoint(x: 6.29, y: 10.62), controlPoint2: CGPoint(x: 5.19, y: 11.98))
        bezier2Path.addCurve(to: CGPoint(x: 7.83, y: 12.81), controlPoint1: CGPoint(x: 5.84, y: 13.07), controlPoint2: CGPoint(x: 6.69, y: 13.1))
        bezier2Path.addLine(to: CGPoint(x: 11.03, y: 12.81))
        bezier2Path.addCurve(to: CGPoint(x: 12.73, y: 11.15), controlPoint1: CGPoint(x: 11.97, y: 12.81), controlPoint2: CGPoint(x: 12.73, y: 12.06))
        bezier2Path.addCurve(to: CGPoint(x: 12.55, y: 10.41), controlPoint1: CGPoint(x: 12.73, y: 10.88), controlPoint2: CGPoint(x: 12.67, y: 10.63))
        bezier2Path.addCurve(to: CGPoint(x: 11.22, y: 11.33), controlPoint1: CGPoint(x: 12.15, y: 10.72), controlPoint2: CGPoint(x: 11.7, y: 11.03))
        bezier2Path.addLine(to: CGPoint(x: 11.46, y: 11.75))
        bezier2Path.addCurve(to: CGPoint(x: 11.43, y: 11.87), controlPoint1: CGPoint(x: 11.49, y: 11.79), controlPoint2: CGPoint(x: 11.47, y: 11.84))
        bezier2Path.addLine(to: CGPoint(x: 11.43, y: 11.87))
        bezier2Path.addCurve(to: CGPoint(x: 11.37, y: 11.88), controlPoint1: CGPoint(x: 11.41, y: 11.88), controlPoint2: CGPoint(x: 11.39, y: 11.88))
        bezier2Path.addLine(to: CGPoint(x: 10.29, y: 11.55))
        bezier2Path.addLine(to: CGPoint(x: 10.29, y: 11.55))
        bezier2Path.addCurve(to: CGPoint(x: 10.17, y: 11.35), controlPoint1: CGPoint(x: 10.2, y: 11.52), controlPoint2: CGPoint(x: 10.15, y: 11.44))
        bezier2Path.addLine(to: CGPoint(x: 10.42, y: 10.28))
        bezier2Path.addLine(to: CGPoint(x: 10.42, y: 10.28))
        bezier2Path.addCurve(to: CGPoint(x: 10.52, y: 10.21), controlPoint1: CGPoint(x: 10.43, y: 10.23), controlPoint2: CGPoint(x: 10.48, y: 10.2))
        bezier2Path.addCurve(to: CGPoint(x: 10.58, y: 10.25), controlPoint1: CGPoint(x: 10.54, y: 10.22), controlPoint2: CGPoint(x: 10.56, y: 10.23))
        bezier2Path.addLine(to: CGPoint(x: 10.79, y: 10.61))
        bezier2Path.addCurve(to: CGPoint(x: 12.18, y: 9.6), controlPoint1: CGPoint(x: 11.31, y: 10.28), controlPoint2: CGPoint(x: 11.78, y: 9.94))
        bezier2Path.addLine(to: CGPoint(x: 12.18, y: 9.59))
        bezier2Path.addCurve(to: CGPoint(x: 12.51, y: 8.2), controlPoint1: CGPoint(x: 12.51, y: 9.21), controlPoint2: CGPoint(x: 12.64, y: 8.69))
        bezier2Path.addCurve(to: CGPoint(x: 13.82, y: 8.29), controlPoint1: CGPoint(x: 13.2, y: 8.05), controlPoint2: CGPoint(x: 13.68, y: 8.06))
        bezier2Path.addCurve(to: CGPoint(x: 12.4, y: 10.16), controlPoint1: CGPoint(x: 14.02, y: 8.64), controlPoint2: CGPoint(x: 13.44, y: 9.37))
        bezier2Path.addCurve(to: CGPoint(x: 12.56, y: 10.41), controlPoint1: CGPoint(x: 12.46, y: 10.24), controlPoint2: CGPoint(x: 12.51, y: 10.32))
        bezier2Path.addCurve(to: CGPoint(x: 14.42, y: 7.65), controlPoint1: CGPoint(x: 13.97, y: 9.32), controlPoint2: CGPoint(x: 14.76, y: 8.22))
        bezier2Path.addCurve(to: CGPoint(x: 12.12, y: 7.49), controlPoint1: CGPoint(x: 14.16, y: 7.21), controlPoint2: CGPoint(x: 13.28, y: 7.18))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_msk_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 17, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 18, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15))
        bezierPath.addLine(to: CGPoint(x: 13, y: 15))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 11.53))
        bezierPath.addLine(to: CGPoint(x: 10, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 11.53))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 15))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 3, y: 13.8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_stockholm_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_purple.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 3.4, y: 3.4, width: 13.2, height: 13.2))
        StyleKit_Metro.white100.setFill()
        oval2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.3, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 11.3, y: 15))
        bezierPath.addLine(to: CGPoint(x: 8.7, y: 15))
        bezierPath.addLine(to: CGPoint(x: 8.7, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 6, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 11.3, y: 8.6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_purple.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_barcelona_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addCurve(to: CGPoint(x: 19.63, y: 10.23), controlPoint1: CGPoint(x: 19.71, y: 9.8), controlPoint2: CGPoint(x: 19.76, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 19.53, y: 10.33), controlPoint1: CGPoint(x: 19.6, y: 10.27), controlPoint2: CGPoint(x: 19.57, y: 10.3))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 16.9), controlPoint1: CGPoint(x: 10.25, y: 16.84), controlPoint2: CGPoint(x: 10.17, y: 16.88))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 16.9), controlPoint1: CGPoint(x: 10.03, y: 16.92), controlPoint2: CGPoint(x: 9.97, y: 16.92))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.69, y: 16.78), controlPoint1: CGPoint(x: 9.83, y: 16.88), controlPoint2: CGPoint(x: 9.75, y: 16.84))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addCurve(to: CGPoint(x: 0.37, y: 9.77), controlPoint1: CGPoint(x: 0.29, y: 10.2), controlPoint2: CGPoint(x: 0.24, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 0.47, y: 9.67), controlPoint1: CGPoint(x: 0.4, y: 9.73), controlPoint2: CGPoint(x: 0.43, y: 9.7))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 3.1), controlPoint1: CGPoint(x: 9.75, y: 3.16), controlPoint2: CGPoint(x: 9.83, y: 3.12))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 3.1), controlPoint1: CGPoint(x: 9.97, y: 3.08), controlPoint2: CGPoint(x: 10.03, y: 3.08))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.31, y: 3.22), controlPoint1: CGPoint(x: 10.17, y: 3.12), controlPoint2: CGPoint(x: 10.25, y: 3.16))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.5, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 10.5))
        bezier2Path.addLine(to: CGPoint(x: 11.5, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 9.96))
        bezier2Path.addLine(to: CGPoint(x: 10.5, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 9.5, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 9.96))
        bezier2Path.addLine(to: CGPoint(x: 8, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 13))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 7))
        bezier2Path.addLine(to: CGPoint(x: 8.5, y: 7))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_almaty_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.14, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.81))
        bezierPath.addLine(to: CGPoint(x: 12.86, y: 2))
        bezierPath.addLine(to: CGPoint(x: 18, y: 12))
        bezierPath.addLine(to: CGPoint(x: 14.67, y: 12))
        bezierPath.addLine(to: CGPoint(x: 12.86, y: 8.67))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7.14, y: 8.67))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 12))
        bezierPath.addLine(to: CGPoint(x: 2, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7.14, y: 2))
        bezierPath.close()
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10, y: 15))
        bezier2Path.addLine(to: CGPoint(x: 17.66, y: 13.3))
        bezier2Path.addLine(to: CGPoint(x: 17.66, y: 13.3))
        bezier2Path.addCurve(to: CGPoint(x: 17.89, y: 13.45), controlPoint1: CGPoint(x: 17.76, y: 13.28), controlPoint2: CGPoint(x: 17.87, y: 13.34))
        bezier2Path.addCurve(to: CGPoint(x: 17.8, y: 13.67), controlPoint1: CGPoint(x: 17.91, y: 13.54), controlPoint2: CGPoint(x: 17.87, y: 13.63))
        bezier2Path.addLine(to: CGPoint(x: 10.05, y: 17.97))
        bezier2Path.addLine(to: CGPoint(x: 10.05, y: 17.97))
        bezier2Path.addCurve(to: CGPoint(x: 9.95, y: 17.97), controlPoint1: CGPoint(x: 10.02, y: 17.99), controlPoint2: CGPoint(x: 9.98, y: 17.99))
        bezier2Path.addLine(to: CGPoint(x: 2.2, y: 13.67))
        bezier2Path.addLine(to: CGPoint(x: 2.2, y: 13.67))
        bezier2Path.addCurve(to: CGPoint(x: 2.13, y: 13.4), controlPoint1: CGPoint(x: 2.11, y: 13.62), controlPoint2: CGPoint(x: 2.07, y: 13.49))
        bezier2Path.addCurve(to: CGPoint(x: 2.34, y: 13.3), controlPoint1: CGPoint(x: 2.17, y: 13.32), controlPoint2: CGPoint(x: 2.26, y: 13.28))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 15))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_roma_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 4.28))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 3.51), controlPoint1: CGPoint(x: 3, y: 3.84), controlPoint2: CGPoint(x: 3.05, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 3.13, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 3.13), controlPoint1: CGPoint(x: 3.22, y: 3.35), controlPoint2: CGPoint(x: 3.35, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 3), controlPoint1: CGPoint(x: 3.67, y: 3.05), controlPoint2: CGPoint(x: 3.84, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15.72, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 3.13), controlPoint1: CGPoint(x: 16.16, y: 3), controlPoint2: CGPoint(x: 16.32, y: 3.05))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 3.51), controlPoint1: CGPoint(x: 16.65, y: 3.22), controlPoint2: CGPoint(x: 16.78, y: 3.35))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 4.28), controlPoint1: CGPoint(x: 16.95, y: 3.68), controlPoint2: CGPoint(x: 17, y: 3.84))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15.72))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 16.49), controlPoint1: CGPoint(x: 17, y: 16.16), controlPoint2: CGPoint(x: 16.95, y: 16.32))
        bezierPath.addLine(to: CGPoint(x: 16.87, y: 16.49))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 16.87), controlPoint1: CGPoint(x: 16.78, y: 16.65), controlPoint2: CGPoint(x: 16.65, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 15.72, y: 17), controlPoint1: CGPoint(x: 16.32, y: 16.95), controlPoint2: CGPoint(x: 16.16, y: 17))
        bezierPath.addLine(to: CGPoint(x: 4.28, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 16.87), controlPoint1: CGPoint(x: 3.84, y: 17), controlPoint2: CGPoint(x: 3.67, y: 16.95))
        bezierPath.addLine(to: CGPoint(x: 3.51, y: 16.87))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 16.49), controlPoint1: CGPoint(x: 3.35, y: 16.78), controlPoint2: CGPoint(x: 3.22, y: 16.65))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 15.72), controlPoint1: CGPoint(x: 3.05, y: 16.32), controlPoint2: CGPoint(x: 3, y: 16.16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4.28))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 10, y: 11))
        bezier2Path.addLine(to: CGPoint(x: 11.5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 13.5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 12.5, y: 9.5))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 7.5, y: 9.5))
        bezier2Path.addLine(to: CGPoint(x: 6, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 4, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 6.5, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 8.5, y: 6))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_fallback_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3, y: 3, width: 14, height: 14), cornerRadius: 2)
        StyleKit_Metro.transit_blue_night.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 14.5), controlPoint1: CGPoint(x: 7.5, y: 14.05), controlPoint2: CGPoint(x: 7.05, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 13.5), controlPoint1: CGPoint(x: 5.95, y: 14.5), controlPoint2: CGPoint(x: 5.5, y: 14.05))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 6.4))
        bezierPath.addCurve(to: CGPoint(x: 7.35, y: 5.87), controlPoint1: CGPoint(x: 5.5, y: 5.39), controlPoint2: CGPoint(x: 6.82, y: 5.02))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.11))
        bezierPath.addLine(to: CGPoint(x: 12.65, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 6.4), controlPoint1: CGPoint(x: 13.18, y: 5.02), controlPoint2: CGPoint(x: 14.5, y: 5.39))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 13.5, y: 14.5), controlPoint1: CGPoint(x: 14.5, y: 14.05), controlPoint2: CGPoint(x: 14.05, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 13.5), controlPoint1: CGPoint(x: 12.95, y: 14.5), controlPoint2: CGPoint(x: 12.5, y: 14.05))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 9.89))
        bezierPath.addLine(to: CGPoint(x: 10.85, y: 12.53))
        bezierPath.addLine(to: CGPoint(x: 10.85, y: 12.53))
        bezierPath.addCurve(to: CGPoint(x: 9.47, y: 12.85), controlPoint1: CGPoint(x: 10.56, y: 13), controlPoint2: CGPoint(x: 9.94, y: 13.14))
        bezierPath.addCurve(to: CGPoint(x: 9.15, y: 12.53), controlPoint1: CGPoint(x: 9.34, y: 12.77), controlPoint2: CGPoint(x: 9.23, y: 12.66))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 9.89))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_berlin_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 3, y: 3, width: 14, height: 14), cornerRadius: 2)
        StyleKit_Metro.transit_deep_blue.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.9, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 8.1, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 8.1, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 8.36, y: 11.51), controlPoint1: CGPoint(x: 8.1, y: 10.72), controlPoint2: CGPoint(x: 8.17, y: 11.13))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 12.4), controlPoint1: CGPoint(x: 8.65, y: 12.08), controlPoint2: CGPoint(x: 9.12, y: 12.4))
        bezierPath.addCurve(to: CGPoint(x: 11.64, y: 11.51), controlPoint1: CGPoint(x: 10.88, y: 12.4), controlPoint2: CGPoint(x: 11.35, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 11.63, y: 11.52))
        bezierPath.addCurve(to: CGPoint(x: 11.9, y: 10.53), controlPoint1: CGPoint(x: 11.79, y: 11.22), controlPoint2: CGPoint(x: 11.88, y: 10.88))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 12.49), controlPoint1: CGPoint(x: 14.1, y: 11.03), controlPoint2: CGPoint(x: 13.98, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 14.6), controlPoint1: CGPoint(x: 12.96, y: 13.79), controlPoint2: CGPoint(x: 11.74, y: 14.6))
        bezierPath.addCurve(to: CGPoint(x: 6.39, y: 12.49), controlPoint1: CGPoint(x: 8.25, y: 14.6), controlPoint2: CGPoint(x: 7.04, y: 13.79))
        bezierPath.addLine(to: CGPoint(x: 6.39, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 5.9, y: 10.52), controlPoint1: CGPoint(x: 6.08, y: 11.88), controlPoint2: CGPoint(x: 5.91, y: 11.21))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 5.5))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_kharkov_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.34, y: 5.05))
        bezierPath.addLine(to: CGPoint(x: 10.12, y: 8.14))
        bezierPath.addLine(to: CGPoint(x: 10.13, y: 8.14))
        bezierPath.addCurve(to: CGPoint(x: 9.88, y: 8.14), controlPoint1: CGPoint(x: 10.06, y: 8.21), controlPoint2: CGPoint(x: 9.95, y: 8.21))
        bezierPath.addLine(to: CGPoint(x: 6.66, y: 5.05))
        bezierPath.addLine(to: CGPoint(x: 6.66, y: 5.05))
        bezierPath.addCurve(to: CGPoint(x: 6.41, y: 5.06), controlPoint1: CGPoint(x: 6.59, y: 4.98), controlPoint2: CGPoint(x: 6.47, y: 4.99))
        bezierPath.addCurve(to: CGPoint(x: 6.39, y: 5.09), controlPoint1: CGPoint(x: 6.4, y: 5.07), controlPoint2: CGPoint(x: 6.39, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 14.83), controlPoint1: CGPoint(x: 4.13, y: 8.93), controlPoint2: CGPoint(x: 3, y: 12.18))
        bezierPath.addLine(to: CGPoint(x: 3, y: 14.83))
        bezierPath.addCurve(to: CGPoint(x: 3.17, y: 15), controlPoint1: CGPoint(x: 3, y: 14.93), controlPoint2: CGPoint(x: 3.08, y: 15))
        bezierPath.addLine(to: CGPoint(x: 6.8, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 6.97, y: 14.88), controlPoint1: CGPoint(x: 6.88, y: 15), controlPoint2: CGPoint(x: 6.95, y: 14.95))
        bezierPath.addLine(to: CGPoint(x: 7.71, y: 12.39))
        bezierPath.addLine(to: CGPoint(x: 7.71, y: 12.39))
        bezierPath.addCurve(to: CGPoint(x: 7.93, y: 12.27), controlPoint1: CGPoint(x: 7.74, y: 12.3), controlPoint2: CGPoint(x: 7.84, y: 12.25))
        bezierPath.addCurve(to: CGPoint(x: 8.02, y: 12.34), controlPoint1: CGPoint(x: 7.97, y: 12.28), controlPoint2: CGPoint(x: 8, y: 12.3))
        bezierPath.addLine(to: CGPoint(x: 9.86, y: 14.81))
        bezierPath.addLine(to: CGPoint(x: 9.86, y: 14.81))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 14.84), controlPoint1: CGPoint(x: 9.92, y: 14.89), controlPoint2: CGPoint(x: 10.03, y: 14.9))
        bezierPath.addCurve(to: CGPoint(x: 10.14, y: 14.81), controlPoint1: CGPoint(x: 10.12, y: 14.83), controlPoint2: CGPoint(x: 10.13, y: 14.82))
        bezierPath.addLine(to: CGPoint(x: 11.98, y: 12.34))
        bezierPath.addLine(to: CGPoint(x: 11.98, y: 12.33))
        bezierPath.addCurve(to: CGPoint(x: 12.22, y: 12.3), controlPoint1: CGPoint(x: 12.04, y: 12.26), controlPoint2: CGPoint(x: 12.14, y: 12.24))
        bezierPath.addLine(to: CGPoint(x: 12.22, y: 12.3))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 12.39), controlPoint1: CGPoint(x: 12.25, y: 12.32), controlPoint2: CGPoint(x: 12.28, y: 12.35))
        bezierPath.addLine(to: CGPoint(x: 13.03, y: 14.88))
        bezierPath.addCurve(to: CGPoint(x: 13.2, y: 15), controlPoint1: CGPoint(x: 13.05, y: 14.95), controlPoint2: CGPoint(x: 13.12, y: 15))
        bezierPath.addLine(to: CGPoint(x: 16.82, y: 15))
        bezierPath.addLine(to: CGPoint(x: 16.83, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 14.83), controlPoint1: CGPoint(x: 16.92, y: 15), controlPoint2: CGPoint(x: 17, y: 14.93))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 5.09), controlPoint1: CGPoint(x: 17, y: 12.18), controlPoint2: CGPoint(x: 15.87, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 13.61, y: 5.09))
        bezierPath.addCurve(to: CGPoint(x: 13.37, y: 5.03), controlPoint1: CGPoint(x: 13.56, y: 5), controlPoint2: CGPoint(x: 13.45, y: 4.97))
        bezierPath.addCurve(to: CGPoint(x: 13.34, y: 5.05), controlPoint1: CGPoint(x: 13.36, y: 5.03), controlPoint2: CGPoint(x: 13.35, y: 5.04))
        bezierPath.addLine(to: CGPoint(x: 13.34, y: 5.05))
        bezierPath.close()
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_minsk_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 6))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.18))
        bezierPath.addLine(to: CGPoint(x: 12, y: 6))
        bezierPath.addLine(to: CGPoint(x: 18, y: 6))
        bezierPath.addLine(to: CGPoint(x: 18, y: 13))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13))
        bezierPath.addLine(to: CGPoint(x: 2, y: 6))
        bezierPath.close()
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_samara_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 4))
        bezierPath.addLine(to: CGPoint(x: 2, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 13.6), controlPoint1: CGPoint(x: 3.39, y: 14.8), controlPoint2: CGPoint(x: 4.67, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 7.33, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 10))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13.6))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 14.8), controlPoint1: CGPoint(x: 15.33, y: 14.8), controlPoint2: CGPoint(x: 16.67, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 14, y: 4))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.4))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 4))
        bezierPath.addLine(to: CGPoint(x: 6, y: 4))
        bezierPath.close()
        StyleKit_Metro.transit_red.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_wein_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 16, height: 16))
        StyleKit_Metro.transit_blue_night.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.9, y: 6))
        bezierPath.addLine(to: CGPoint(x: 8.1, y: 6))
        bezierPath.addLine(to: CGPoint(x: 8.1, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 8.36, y: 12.01), controlPoint1: CGPoint(x: 8.1, y: 11.22), controlPoint2: CGPoint(x: 8.17, y: 11.63))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 12.9), controlPoint1: CGPoint(x: 8.65, y: 12.58), controlPoint2: CGPoint(x: 9.12, y: 12.9))
        bezierPath.addCurve(to: CGPoint(x: 11.64, y: 12.01), controlPoint1: CGPoint(x: 10.88, y: 12.9), controlPoint2: CGPoint(x: 11.35, y: 12.58))
        bezierPath.addLine(to: CGPoint(x: 11.63, y: 12.02))
        bezierPath.addCurve(to: CGPoint(x: 11.9, y: 11.03), controlPoint1: CGPoint(x: 11.79, y: 11.72), controlPoint2: CGPoint(x: 11.88, y: 11.38))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 12.99), controlPoint1: CGPoint(x: 14.1, y: 11.53), controlPoint2: CGPoint(x: 13.98, y: 12.25))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 15.1), controlPoint1: CGPoint(x: 12.96, y: 14.29), controlPoint2: CGPoint(x: 11.74, y: 15.1))
        bezierPath.addCurve(to: CGPoint(x: 6.39, y: 12.99), controlPoint1: CGPoint(x: 8.25, y: 15.1), controlPoint2: CGPoint(x: 7.04, y: 14.29))
        bezierPath.addLine(to: CGPoint(x: 6.39, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 5.9, y: 11.02), controlPoint1: CGPoint(x: 6.08, y: 12.38), controlPoint2: CGPoint(x: 5.91, y: 11.71))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 6))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_dnepropetrovsk_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.23, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 14.23, y: 15))
        bezierPath.addLine(to: CGPoint(x: 17.79, y: 15))
        bezierPath.addLine(to: CGPoint(x: 17.79, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 16.77, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 14.23, y: 4))
        bezierPath.addLine(to: CGPoint(x: 11.57, y: 4))
        bezierPath.addLine(to: CGPoint(x: 8.9, y: 13.62))
        bezierPath.addLine(to: CGPoint(x: 11.12, y: 13.62))
        bezierPath.addLine(to: CGPoint(x: 12.73, y: 7.83))
        bezierPath.addLine(to: CGPoint(x: 12.73, y: 7.83))
        bezierPath.addCurve(to: CGPoint(x: 12.94, y: 7.7), controlPoint1: CGPoint(x: 12.75, y: 7.73), controlPoint2: CGPoint(x: 12.85, y: 7.67))
        bezierPath.addLine(to: CGPoint(x: 12.95, y: 7.7))
        bezierPath.addLine(to: CGPoint(x: 12.95, y: 7.7))
        bezierPath.addCurve(to: CGPoint(x: 13.07, y: 7.82), controlPoint1: CGPoint(x: 13.01, y: 7.72), controlPoint2: CGPoint(x: 13.05, y: 7.76))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 14.23, y: 13.17))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_red.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 10.76, y: 13.17))
        bezier2Path.addLine(to: CGPoint(x: 11.78, y: 13.17))
        bezier2Path.addLine(to: CGPoint(x: 11.78, y: 15))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 15))
        bezier2Path.addLine(to: CGPoint(x: 2, y: 13.17))
        bezier2Path.addLine(to: CGPoint(x: 3.02, y: 13.17))
        bezier2Path.addLine(to: CGPoint(x: 5.56, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 8.22, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 10.76, y: 13.17))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 7.06, y: 7.83))
        bezier2Path.addLine(to: CGPoint(x: 7.06, y: 7.82))
        bezier2Path.addCurve(to: CGPoint(x: 6.94, y: 7.7), controlPoint1: CGPoint(x: 7.04, y: 7.76), controlPoint2: CGPoint(x: 7, y: 7.72))
        bezier2Path.addLine(to: CGPoint(x: 6.94, y: 7.7))
        bezier2Path.addCurve(to: CGPoint(x: 6.72, y: 7.82), controlPoint1: CGPoint(x: 6.84, y: 7.67), controlPoint2: CGPoint(x: 6.75, y: 7.73))
        bezier2Path.addLine(to: CGPoint(x: 6.72, y: 7.82))
        bezier2Path.addLine(to: CGPoint(x: 5.24, y: 13.17))
        bezier2Path.addLine(to: CGPoint(x: 8.54, y: 13.17))
        bezier2Path.addLine(to: CGPoint(x: 7.06, y: 7.83))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.transit_red.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_nn_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.18, y: 11.89))
        bezierPath.addLine(to: CGPoint(x: 4.2, y: 11.92))
        bezierPath.addCurve(to: CGPoint(x: 6.09, y: 2.2), controlPoint1: CGPoint(x: 2.03, y: 8.71), controlPoint2: CGPoint(x: 2.88, y: 4.36))
        bezierPath.addCurve(to: CGPoint(x: 15.8, y: 4.09), controlPoint1: CGPoint(x: 9.29, y: 0.04), controlPoint2: CGPoint(x: 13.64, y: 0.88))
        bezierPath.addCurve(to: CGPoint(x: 15.87, y: 11.81), controlPoint1: CGPoint(x: 17.37, y: 6.42), controlPoint2: CGPoint(x: 17.4, y: 9.46))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 7.59))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 7.59))
        bezierPath.addCurve(to: CGPoint(x: 12.59, y: 7.09), controlPoint1: CGPoint(x: 13.69, y: 7.09), controlPoint2: CGPoint(x: 13.1, y: 6.86))
        bezierPath.addCurve(to: CGPoint(x: 12.2, y: 7.4), controlPoint1: CGPoint(x: 12.44, y: 7.16), controlPoint2: CGPoint(x: 12.3, y: 7.26))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.33))
        bezierPath.addLine(to: CGPoint(x: 7.8, y: 7.4))
        bezierPath.addLine(to: CGPoint(x: 7.8, y: 7.4))
        bezierPath.addCurve(to: CGPoint(x: 6.4, y: 7.2), controlPoint1: CGPoint(x: 7.47, y: 6.96), controlPoint2: CGPoint(x: 6.84, y: 6.87))
        bezierPath.addCurve(to: CGPoint(x: 6.09, y: 7.59), controlPoint1: CGPoint(x: 6.26, y: 7.3), controlPoint2: CGPoint(x: 6.16, y: 7.44))
        bezierPath.addLine(to: CGPoint(x: 4.18, y: 11.89))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_blue_night.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 9, y: 2.5))
        bezier2Path.addLine(to: CGPoint(x: 9.14, y: 2.5))
        bezier2Path.addLine(to: CGPoint(x: 9.14, y: 2.5))
        bezier2Path.addCurve(to: CGPoint(x: 9.62, y: 2.85), controlPoint1: CGPoint(x: 9.36, y: 2.5), controlPoint2: CGPoint(x: 9.55, y: 2.64))
        bezier2Path.addLine(to: CGPoint(x: 9.89, y: 3.66))
        bezier2Path.addLine(to: CGPoint(x: 9.88, y: 3.65))
        bezier2Path.addCurve(to: CGPoint(x: 10.36, y: 4), controlPoint1: CGPoint(x: 9.95, y: 3.86), controlPoint2: CGPoint(x: 10.14, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 10.75, y: 4))
        bezier2Path.addLine(to: CGPoint(x: 10.75, y: 4))
        bezier2Path.addCurve(to: CGPoint(x: 11.5, y: 4.75), controlPoint1: CGPoint(x: 11.16, y: 4), controlPoint2: CGPoint(x: 11.5, y: 4.34))
        bezier2Path.addLine(to: CGPoint(x: 11.5, y: 5.54))
        bezier2Path.addLine(to: CGPoint(x: 11.5, y: 5.54))
        bezier2Path.addCurve(to: CGPoint(x: 11.04, y: 6), controlPoint1: CGPoint(x: 11.5, y: 5.79), controlPoint2: CGPoint(x: 11.29, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 10.75, y: 5.9), controlPoint1: CGPoint(x: 10.93, y: 6), controlPoint2: CGPoint(x: 10.83, y: 5.97))
        bezier2Path.addLine(to: CGPoint(x: 10.31, y: 5.55))
        bezier2Path.addLine(to: CGPoint(x: 10.31, y: 5.55))
        bezier2Path.addCurve(to: CGPoint(x: 9.69, y: 5.55), controlPoint1: CGPoint(x: 10.13, y: 5.41), controlPoint2: CGPoint(x: 9.88, y: 5.4))
        bezier2Path.addLine(to: CGPoint(x: 9.25, y: 5.9))
        bezier2Path.addLine(to: CGPoint(x: 9.25, y: 5.9))
        bezier2Path.addCurve(to: CGPoint(x: 8.6, y: 5.83), controlPoint1: CGPoint(x: 9.05, y: 6.06), controlPoint2: CGPoint(x: 8.76, y: 6.03))
        bezier2Path.addCurve(to: CGPoint(x: 8.5, y: 5.55), controlPoint1: CGPoint(x: 8.54, y: 5.75), controlPoint2: CGPoint(x: 8.5, y: 5.65))
        bezier2Path.addLine(to: CGPoint(x: 8.5, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 8.5, y: 3))
        bezier2Path.addCurve(to: CGPoint(x: 9, y: 2.5), controlPoint1: CGPoint(x: 8.5, y: 2.72), controlPoint2: CGPoint(x: 8.72, y: 2.5))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 17, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 13, y: 8))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 7, y: 8))
        bezier3Path.addLine(to: CGPoint(x: 3, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 7.5, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 8.5, y: 15))
        bezier3Path.addLine(to: CGPoint(x: 10, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 11.5, y: 15))
        bezier3Path.addLine(to: CGPoint(x: 12.5, y: 17))
        bezier3Path.addLine(to: CGPoint(x: 17, y: 17))
        bezier3Path.close()
        StyleKit_Metro.transit_red.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_berlin_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 5))
        bezierPath.addLine(to: CGPoint(x: 3, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 3), controlPoint1: CGPoint(x: 3, y: 3.9), controlPoint2: CGPoint(x: 3.9, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 5), controlPoint1: CGPoint(x: 16.1, y: 3), controlPoint2: CGPoint(x: 17, y: 3.9))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 17), controlPoint1: CGPoint(x: 17, y: 16.1), controlPoint2: CGPoint(x: 16.1, y: 17))
        bezierPath.addLine(to: CGPoint(x: 5, y: 17))
        bezierPath.addLine(to: CGPoint(x: 5, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 15), controlPoint1: CGPoint(x: 3.9, y: 17), controlPoint2: CGPoint(x: 3, y: 16.1))
        bezierPath.addLine(to: CGPoint(x: 3, y: 5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.9, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 6.39, y: 12.49), controlPoint1: CGPoint(x: 5.9, y: 11.03), controlPoint2: CGPoint(x: 6.02, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 14.6), controlPoint1: CGPoint(x: 7.04, y: 13.79), controlPoint2: CGPoint(x: 8.26, y: 14.6))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 12.49), controlPoint1: CGPoint(x: 11.75, y: 14.6), controlPoint2: CGPoint(x: 12.96, y: 13.79))
        bezierPath.addLine(to: CGPoint(x: 13.61, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 14.1, y: 10.52), controlPoint1: CGPoint(x: 13.92, y: 11.88), controlPoint2: CGPoint(x: 14.09, y: 11.21))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 11.64, y: 11.51), controlPoint1: CGPoint(x: 11.9, y: 10.72), controlPoint2: CGPoint(x: 11.83, y: 11.13))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 12.4), controlPoint1: CGPoint(x: 11.35, y: 12.08), controlPoint2: CGPoint(x: 10.88, y: 12.4))
        bezierPath.addCurve(to: CGPoint(x: 8.36, y: 11.51), controlPoint1: CGPoint(x: 9.12, y: 12.4), controlPoint2: CGPoint(x: 8.65, y: 12.08))
        bezierPath.addLine(to: CGPoint(x: 8.37, y: 11.52))
        bezierPath.addCurve(to: CGPoint(x: 8.1, y: 10.53), controlPoint1: CGPoint(x: 8.21, y: 11.22), controlPoint2: CGPoint(x: 8.12, y: 10.88))
        bezierPath.addLine(to: CGPoint(x: 8.1, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 5.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_kharkov_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.34, y: 5.05))
        bezierPath.addLine(to: CGPoint(x: 10.12, y: 8.14))
        bezierPath.addLine(to: CGPoint(x: 10.13, y: 8.14))
        bezierPath.addCurve(to: CGPoint(x: 9.88, y: 8.14), controlPoint1: CGPoint(x: 10.06, y: 8.21), controlPoint2: CGPoint(x: 9.95, y: 8.21))
        bezierPath.addLine(to: CGPoint(x: 6.66, y: 5.05))
        bezierPath.addLine(to: CGPoint(x: 6.66, y: 5.05))
        bezierPath.addCurve(to: CGPoint(x: 6.41, y: 5.06), controlPoint1: CGPoint(x: 6.59, y: 4.98), controlPoint2: CGPoint(x: 6.47, y: 4.99))
        bezierPath.addCurve(to: CGPoint(x: 6.39, y: 5.09), controlPoint1: CGPoint(x: 6.4, y: 5.07), controlPoint2: CGPoint(x: 6.39, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 14.83), controlPoint1: CGPoint(x: 4.13, y: 8.93), controlPoint2: CGPoint(x: 3, y: 12.18))
        bezierPath.addLine(to: CGPoint(x: 3, y: 14.83))
        bezierPath.addCurve(to: CGPoint(x: 3.17, y: 15), controlPoint1: CGPoint(x: 3, y: 14.93), controlPoint2: CGPoint(x: 3.08, y: 15))
        bezierPath.addLine(to: CGPoint(x: 6.8, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 6.97, y: 14.88), controlPoint1: CGPoint(x: 6.88, y: 15), controlPoint2: CGPoint(x: 6.95, y: 14.95))
        bezierPath.addLine(to: CGPoint(x: 7.71, y: 12.39))
        bezierPath.addLine(to: CGPoint(x: 7.71, y: 12.39))
        bezierPath.addCurve(to: CGPoint(x: 7.93, y: 12.27), controlPoint1: CGPoint(x: 7.74, y: 12.3), controlPoint2: CGPoint(x: 7.84, y: 12.25))
        bezierPath.addCurve(to: CGPoint(x: 8.02, y: 12.34), controlPoint1: CGPoint(x: 7.97, y: 12.28), controlPoint2: CGPoint(x: 8, y: 12.3))
        bezierPath.addLine(to: CGPoint(x: 9.86, y: 14.81))
        bezierPath.addLine(to: CGPoint(x: 9.86, y: 14.81))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 14.84), controlPoint1: CGPoint(x: 9.92, y: 14.89), controlPoint2: CGPoint(x: 10.03, y: 14.9))
        bezierPath.addCurve(to: CGPoint(x: 10.14, y: 14.81), controlPoint1: CGPoint(x: 10.12, y: 14.83), controlPoint2: CGPoint(x: 10.13, y: 14.82))
        bezierPath.addLine(to: CGPoint(x: 11.98, y: 12.34))
        bezierPath.addLine(to: CGPoint(x: 11.98, y: 12.33))
        bezierPath.addCurve(to: CGPoint(x: 12.22, y: 12.3), controlPoint1: CGPoint(x: 12.04, y: 12.26), controlPoint2: CGPoint(x: 12.14, y: 12.24))
        bezierPath.addLine(to: CGPoint(x: 12.22, y: 12.3))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 12.39), controlPoint1: CGPoint(x: 12.25, y: 12.32), controlPoint2: CGPoint(x: 12.28, y: 12.35))
        bezierPath.addLine(to: CGPoint(x: 13.03, y: 14.88))
        bezierPath.addCurve(to: CGPoint(x: 13.2, y: 15), controlPoint1: CGPoint(x: 13.05, y: 14.95), controlPoint2: CGPoint(x: 13.12, y: 15))
        bezierPath.addLine(to: CGPoint(x: 16.82, y: 15))
        bezierPath.addLine(to: CGPoint(x: 16.83, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 14.83), controlPoint1: CGPoint(x: 16.92, y: 15), controlPoint2: CGPoint(x: 17, y: 14.93))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 5.09), controlPoint1: CGPoint(x: 17, y: 12.18), controlPoint2: CGPoint(x: 15.87, y: 8.93))
        bezierPath.addLine(to: CGPoint(x: 13.61, y: 5.09))
        bezierPath.addCurve(to: CGPoint(x: 13.37, y: 5.03), controlPoint1: CGPoint(x: 13.56, y: 5), controlPoint2: CGPoint(x: 13.45, y: 4.97))
        bezierPath.addCurve(to: CGPoint(x: 13.34, y: 5.05), controlPoint1: CGPoint(x: 13.36, y: 5.03), controlPoint2: CGPoint(x: 13.35, y: 5.04))
        bezierPath.addLine(to: CGPoint(x: 13.34, y: 5.05))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_fallback_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 5), controlPoint1: CGPoint(x: 16.1, y: 3), controlPoint2: CGPoint(x: 17, y: 3.9))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 17), controlPoint1: CGPoint(x: 17, y: 16.1), controlPoint2: CGPoint(x: 16.1, y: 17))
        bezierPath.addLine(to: CGPoint(x: 5, y: 17))
        bezierPath.addLine(to: CGPoint(x: 5, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 15), controlPoint1: CGPoint(x: 3.9, y: 17), controlPoint2: CGPoint(x: 3, y: 16.1))
        bezierPath.addLine(to: CGPoint(x: 3, y: 5))
        bezierPath.addLine(to: CGPoint(x: 3, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 3), controlPoint1: CGPoint(x: 3, y: 3.9), controlPoint2: CGPoint(x: 3.9, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 9.89))
        bezierPath.addLine(to: CGPoint(x: 9.15, y: 12.53))
        bezierPath.addLine(to: CGPoint(x: 9.15, y: 12.53))
        bezierPath.addCurve(to: CGPoint(x: 10.53, y: 12.85), controlPoint1: CGPoint(x: 9.44, y: 13), controlPoint2: CGPoint(x: 10.06, y: 13.14))
        bezierPath.addCurve(to: CGPoint(x: 10.85, y: 12.53), controlPoint1: CGPoint(x: 10.66, y: 12.77), controlPoint2: CGPoint(x: 10.77, y: 12.66))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 9.89))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 13.5, y: 14.5), controlPoint1: CGPoint(x: 12.5, y: 14.05), controlPoint2: CGPoint(x: 12.95, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 13.5), controlPoint1: CGPoint(x: 14.05, y: 14.5), controlPoint2: CGPoint(x: 14.5, y: 14.05))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 6.4))
        bezierPath.addCurve(to: CGPoint(x: 12.65, y: 5.87), controlPoint1: CGPoint(x: 14.5, y: 5.4), controlPoint2: CGPoint(x: 13.18, y: 5.02))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.11))
        bezierPath.addLine(to: CGPoint(x: 7.35, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 6.4), controlPoint1: CGPoint(x: 6.82, y: 5.02), controlPoint2: CGPoint(x: 5.5, y: 5.4))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 14.5), controlPoint1: CGPoint(x: 5.5, y: 14.05), controlPoint2: CGPoint(x: 5.95, y: 14.5))
        bezierPath.addCurve(to: CGPoint(x: 7.5, y: 13.5), controlPoint1: CGPoint(x: 7.05, y: 14.5), controlPoint2: CGPoint(x: 7.5, y: 14.05))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_london_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.25, y: 12))
        bezierPath.addLine(to: CGPoint(x: 1, y: 12))
        bezierPath.addLine(to: CGPoint(x: 1, y: 8))
        bezierPath.addLine(to: CGPoint(x: 2.25, y: 8))
        bezierPath.addLine(to: CGPoint(x: 2.27, y: 7.93))
        bezierPath.addCurve(to: CGPoint(x: 12.07, y: 2.27), controlPoint1: CGPoint(x: 3.41, y: 3.66), controlPoint2: CGPoint(x: 7.8, y: 1.13))
        bezierPath.addCurve(to: CGPoint(x: 17.77, y: 8.07), controlPoint1: CGPoint(x: 14.88, y: 3.03), controlPoint2: CGPoint(x: 17.06, y: 5.25))
        bezierPath.addLine(to: CGPoint(x: 19, y: 8))
        bezierPath.addLine(to: CGPoint(x: 19, y: 12))
        bezierPath.addLine(to: CGPoint(x: 17.75, y: 12))
        bezierPath.addLine(to: CGPoint(x: 17.73, y: 12.07))
        bezierPath.addCurve(to: CGPoint(x: 7.93, y: 17.73), controlPoint1: CGPoint(x: 16.59, y: 16.34), controlPoint2: CGPoint(x: 12.2, y: 18.87))
        bezierPath.addCurve(to: CGPoint(x: 2.23, y: 11.93), controlPoint1: CGPoint(x: 5.12, y: 16.97), controlPoint2: CGPoint(x: 2.94, y: 14.75))
        bezierPath.addLine(to: CGPoint(x: 2.25, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.42, y: 12))
        bezierPath.addLine(to: CGPoint(x: 5.43, y: 12.03))
        bezierPath.addCurve(to: CGPoint(x: 12.03, y: 14.57), controlPoint1: CGPoint(x: 6.55, y: 14.56), controlPoint2: CGPoint(x: 9.51, y: 15.69))
        bezierPath.addCurve(to: CGPoint(x: 14.6, y: 11.95), controlPoint1: CGPoint(x: 13.19, y: 14.05), controlPoint2: CGPoint(x: 14.11, y: 13.12))
        bezierPath.addLine(to: CGPoint(x: 5.42, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.42, y: 8))
        bezierPath.addLine(to: CGPoint(x: 14.58, y: 8))
        bezierPath.addLine(to: CGPoint(x: 14.57, y: 7.97))
        bezierPath.addCurve(to: CGPoint(x: 7.97, y: 5.43), controlPoint1: CGPoint(x: 13.45, y: 5.44), controlPoint2: CGPoint(x: 10.49, y: 4.31))
        bezierPath.addCurve(to: CGPoint(x: 5.4, y: 8.05), controlPoint1: CGPoint(x: 6.81, y: 5.95), controlPoint2: CGPoint(x: 5.89, y: 6.88))
        bezierPath.addLine(to: CGPoint(x: 5.42, y: 8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_roma_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 4.28))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 3.51), controlPoint1: CGPoint(x: 3, y: 3.84), controlPoint2: CGPoint(x: 3.05, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 3.13, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 3.13), controlPoint1: CGPoint(x: 3.22, y: 3.35), controlPoint2: CGPoint(x: 3.35, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 3), controlPoint1: CGPoint(x: 3.67, y: 3.05), controlPoint2: CGPoint(x: 3.84, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15.72, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 3.13), controlPoint1: CGPoint(x: 16.16, y: 3), controlPoint2: CGPoint(x: 16.32, y: 3.05))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 3.51), controlPoint1: CGPoint(x: 16.65, y: 3.22), controlPoint2: CGPoint(x: 16.78, y: 3.35))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 4.28), controlPoint1: CGPoint(x: 16.95, y: 3.68), controlPoint2: CGPoint(x: 17, y: 3.84))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15.72))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 16.49), controlPoint1: CGPoint(x: 17, y: 16.16), controlPoint2: CGPoint(x: 16.95, y: 16.32))
        bezierPath.addLine(to: CGPoint(x: 16.87, y: 16.49))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 16.87), controlPoint1: CGPoint(x: 16.78, y: 16.65), controlPoint2: CGPoint(x: 16.65, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 15.72, y: 17), controlPoint1: CGPoint(x: 16.32, y: 16.95), controlPoint2: CGPoint(x: 16.16, y: 17))
        bezierPath.addLine(to: CGPoint(x: 4.28, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 16.87), controlPoint1: CGPoint(x: 3.84, y: 17), controlPoint2: CGPoint(x: 3.67, y: 16.95))
        bezierPath.addLine(to: CGPoint(x: 3.51, y: 16.87))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 16.49), controlPoint1: CGPoint(x: 3.35, y: 16.78), controlPoint2: CGPoint(x: 3.22, y: 16.65))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 15.72), controlPoint1: CGPoint(x: 3.05, y: 16.32), controlPoint2: CGPoint(x: 3, y: 16.16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4.28))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 4, y: 14))
        bezierPath.addLine(to: CGPoint(x: 6, y: 14))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 14))
        bezierPath.addLine(to: CGPoint(x: 11, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 14, y: 14))
        bezierPath.addLine(to: CGPoint(x: 16, y: 14))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_oslo_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addCurve(to: CGPoint(x: 16.6, y: 10), controlPoint1: CGPoint(x: 13.65, y: 16.6), controlPoint2: CGPoint(x: 16.6, y: 13.65))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3.4), controlPoint1: CGPoint(x: 16.6, y: 6.35), controlPoint2: CGPoint(x: 13.65, y: 3.4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 3.4))
        bezierPath.addCurve(to: CGPoint(x: 3.4, y: 10), controlPoint1: CGPoint(x: 6.35, y: 3.4), controlPoint2: CGPoint(x: 3.4, y: 6.35))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16.6), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 6.35, y: 16.6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.9, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.9, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9.3, y: 15))
        bezierPath.addLine(to: CGPoint(x: 9.3, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8))
        bezierPath.addLine(to: CGPoint(x: 6, y: 6.4))
        bezierPath.addLine(to: CGPoint(x: 14, y: 6.4))
        bezierPath.addLine(to: CGPoint(x: 14, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.9, y: 8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_madrid_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 6.2))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 6.2))
        bezierPath.addCurve(to: CGPoint(x: 10.08, y: 6.09), controlPoint1: CGPoint(x: 10.24, y: 6.15), controlPoint2: CGPoint(x: 10.16, y: 6.11))
        bezierPath.addLine(to: CGPoint(x: 10.08, y: 6.09))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 6.09), controlPoint1: CGPoint(x: 10.03, y: 6.08), controlPoint2: CGPoint(x: 9.97, y: 6.08))
        bezierPath.addLine(to: CGPoint(x: 9.92, y: 6.09))
        bezierPath.addCurve(to: CGPoint(x: 9.7, y: 6.2), controlPoint1: CGPoint(x: 9.84, y: 6.11), controlPoint2: CGPoint(x: 9.76, y: 6.15))
        bezierPath.addLine(to: CGPoint(x: 7, y: 8))
        bezierPath.addLine(to: CGPoint(x: 13, y: 8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15, y: 9.33))
        bezierPath.addLine(to: CGPoint(x: 15, y: 10.67))
        bezierPath.addLine(to: CGPoint(x: 15.75, y: 10.17))
        bezierPath.addLine(to: CGPoint(x: 15.75, y: 10.17))
        bezierPath.addCurve(to: CGPoint(x: 15.81, y: 9.89), controlPoint1: CGPoint(x: 15.84, y: 10.1), controlPoint2: CGPoint(x: 15.87, y: 9.98))
        bezierPath.addCurve(to: CGPoint(x: 15.75, y: 9.83), controlPoint1: CGPoint(x: 15.79, y: 9.87), controlPoint2: CGPoint(x: 15.77, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 15, y: 9.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 13, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7, y: 12))
        bezierPath.addLine(to: CGPoint(x: 9.7, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 9.7, y: 13.8))
        bezierPath.addCurve(to: CGPoint(x: 9.92, y: 13.91), controlPoint1: CGPoint(x: 9.76, y: 13.85), controlPoint2: CGPoint(x: 9.84, y: 13.89))
        bezierPath.addCurve(to: CGPoint(x: 10.08, y: 13.91), controlPoint1: CGPoint(x: 9.97, y: 13.92), controlPoint2: CGPoint(x: 10.03, y: 13.92))
        bezierPath.addLine(to: CGPoint(x: 10.08, y: 13.91))
        bezierPath.addCurve(to: CGPoint(x: 10.3, y: 13.8), controlPoint1: CGPoint(x: 10.16, y: 13.89), controlPoint2: CGPoint(x: 10.24, y: 13.85))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5, y: 10.67))
        bezierPath.addLine(to: CGPoint(x: 5, y: 9.33))
        bezierPath.addLine(to: CGPoint(x: 4.25, y: 9.83))
        bezierPath.addLine(to: CGPoint(x: 4.25, y: 9.83))
        bezierPath.addCurve(to: CGPoint(x: 4.19, y: 10.11), controlPoint1: CGPoint(x: 4.16, y: 9.9), controlPoint2: CGPoint(x: 4.13, y: 10.02))
        bezierPath.addCurve(to: CGPoint(x: 4.25, y: 10.17), controlPoint1: CGPoint(x: 4.21, y: 10.13), controlPoint2: CGPoint(x: 4.23, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 5, y: 10.67))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addCurve(to: CGPoint(x: 19.63, y: 10.23), controlPoint1: CGPoint(x: 19.71, y: 9.8), controlPoint2: CGPoint(x: 19.76, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 19.53, y: 10.33), controlPoint1: CGPoint(x: 19.6, y: 10.27), controlPoint2: CGPoint(x: 19.57, y: 10.3))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 16.9), controlPoint1: CGPoint(x: 10.25, y: 16.84), controlPoint2: CGPoint(x: 10.17, y: 16.88))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 16.9), controlPoint1: CGPoint(x: 10.03, y: 16.92), controlPoint2: CGPoint(x: 9.97, y: 16.92))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.69, y: 16.78), controlPoint1: CGPoint(x: 9.83, y: 16.88), controlPoint2: CGPoint(x: 9.75, y: 16.84))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addCurve(to: CGPoint(x: 0.37, y: 9.77), controlPoint1: CGPoint(x: 0.29, y: 10.2), controlPoint2: CGPoint(x: 0.24, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 0.47, y: 9.67), controlPoint1: CGPoint(x: 0.4, y: 9.73), controlPoint2: CGPoint(x: 0.43, y: 9.7))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 3.1), controlPoint1: CGPoint(x: 9.75, y: 3.16), controlPoint2: CGPoint(x: 9.83, y: 3.12))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 3.1), controlPoint1: CGPoint(x: 9.97, y: 3.08), controlPoint2: CGPoint(x: 10.03, y: 3.08))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.31, y: 3.22), controlPoint1: CGPoint(x: 10.17, y: 3.12), controlPoint2: CGPoint(x: 10.25, y: 3.16))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_nn_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.18, y: 11.89))
        bezierPath.addLine(to: CGPoint(x: 4.2, y: 11.92))
        bezierPath.addCurve(to: CGPoint(x: 6.09, y: 2.2), controlPoint1: CGPoint(x: 2.03, y: 8.71), controlPoint2: CGPoint(x: 2.88, y: 4.36))
        bezierPath.addCurve(to: CGPoint(x: 15.8, y: 4.09), controlPoint1: CGPoint(x: 9.29, y: 0.04), controlPoint2: CGPoint(x: 13.64, y: 0.88))
        bezierPath.addCurve(to: CGPoint(x: 15.87, y: 11.81), controlPoint1: CGPoint(x: 17.37, y: 6.42), controlPoint2: CGPoint(x: 17.4, y: 9.46))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 7.59))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 7.59))
        bezierPath.addCurve(to: CGPoint(x: 12.59, y: 7.09), controlPoint1: CGPoint(x: 13.69, y: 7.09), controlPoint2: CGPoint(x: 13.1, y: 6.86))
        bezierPath.addCurve(to: CGPoint(x: 12.2, y: 7.4), controlPoint1: CGPoint(x: 12.44, y: 7.16), controlPoint2: CGPoint(x: 12.3, y: 7.26))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.33))
        bezierPath.addLine(to: CGPoint(x: 7.8, y: 7.4))
        bezierPath.addLine(to: CGPoint(x: 7.8, y: 7.4))
        bezierPath.addCurve(to: CGPoint(x: 6.4, y: 7.2), controlPoint1: CGPoint(x: 7.47, y: 6.96), controlPoint2: CGPoint(x: 6.84, y: 6.87))
        bezierPath.addCurve(to: CGPoint(x: 6.09, y: 7.59), controlPoint1: CGPoint(x: 6.26, y: 7.3), controlPoint2: CGPoint(x: 6.16, y: 7.44))
        bezierPath.addLine(to: CGPoint(x: 4.18, y: 11.89))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9, y: 2.5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 2.5))
        bezierPath.addCurve(to: CGPoint(x: 8.5, y: 3), controlPoint1: CGPoint(x: 8.72, y: 2.5), controlPoint2: CGPoint(x: 8.5, y: 2.72))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 5.54))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 5.54))
        bezierPath.addCurve(to: CGPoint(x: 8.96, y: 6), controlPoint1: CGPoint(x: 8.5, y: 5.79), controlPoint2: CGPoint(x: 8.71, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 9.25, y: 5.9), controlPoint1: CGPoint(x: 9.07, y: 6), controlPoint2: CGPoint(x: 9.17, y: 5.97))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 5.55))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 5.55))
        bezierPath.addCurve(to: CGPoint(x: 10.31, y: 5.55), controlPoint1: CGPoint(x: 9.87, y: 5.41), controlPoint2: CGPoint(x: 10.12, y: 5.4))
        bezierPath.addLine(to: CGPoint(x: 10.75, y: 5.9))
        bezierPath.addLine(to: CGPoint(x: 10.75, y: 5.9))
        bezierPath.addCurve(to: CGPoint(x: 11.4, y: 5.83), controlPoint1: CGPoint(x: 10.95, y: 6.06), controlPoint2: CGPoint(x: 11.24, y: 6.03))
        bezierPath.addCurve(to: CGPoint(x: 11.5, y: 5.55), controlPoint1: CGPoint(x: 11.46, y: 5.75), controlPoint2: CGPoint(x: 11.5, y: 5.65))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 4.75))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 10.75, y: 4), controlPoint1: CGPoint(x: 11.5, y: 4.34), controlPoint2: CGPoint(x: 11.16, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10.36, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10.36, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 9.88, y: 3.65), controlPoint1: CGPoint(x: 10.14, y: 4), controlPoint2: CGPoint(x: 9.95, y: 3.86))
        bezierPath.addLine(to: CGPoint(x: 9.61, y: 2.84))
        bezierPath.addLine(to: CGPoint(x: 9.62, y: 2.85))
        bezierPath.addCurve(to: CGPoint(x: 9.14, y: 2.5), controlPoint1: CGPoint(x: 9.55, y: 2.64), controlPoint2: CGPoint(x: 9.36, y: 2.5))
        bezierPath.addLine(to: CGPoint(x: 9, y: 2.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 17))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 17))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 10, y: 17))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3, y: 17))
        bezierPath.addLine(to: CGPoint(x: 7, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12))
        bezierPath.addLine(to: CGPoint(x: 13, y: 8))
        bezierPath.addLine(to: CGPoint(x: 17, y: 17))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_helsinki_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 4.28))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 3.51), controlPoint1: CGPoint(x: 3, y: 3.84), controlPoint2: CGPoint(x: 3.05, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 3.13, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 3.13), controlPoint1: CGPoint(x: 3.22, y: 3.35), controlPoint2: CGPoint(x: 3.35, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 4.28, y: 3), controlPoint1: CGPoint(x: 3.67, y: 3.05), controlPoint2: CGPoint(x: 3.84, y: 3))
        bezierPath.addLine(to: CGPoint(x: 15.72, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 3.13), controlPoint1: CGPoint(x: 16.16, y: 3), controlPoint2: CGPoint(x: 16.32, y: 3.05))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 3.51), controlPoint1: CGPoint(x: 16.65, y: 3.22), controlPoint2: CGPoint(x: 16.78, y: 3.35))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 4.28), controlPoint1: CGPoint(x: 16.95, y: 3.68), controlPoint2: CGPoint(x: 17, y: 3.84))
        bezierPath.addLine(to: CGPoint(x: 17, y: 15.72))
        bezierPath.addCurve(to: CGPoint(x: 16.87, y: 16.49), controlPoint1: CGPoint(x: 17, y: 16.16), controlPoint2: CGPoint(x: 16.95, y: 16.32))
        bezierPath.addLine(to: CGPoint(x: 16.87, y: 16.49))
        bezierPath.addCurve(to: CGPoint(x: 16.49, y: 16.87), controlPoint1: CGPoint(x: 16.78, y: 16.65), controlPoint2: CGPoint(x: 16.65, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 15.72, y: 17), controlPoint1: CGPoint(x: 16.32, y: 16.95), controlPoint2: CGPoint(x: 16.16, y: 17))
        bezierPath.addLine(to: CGPoint(x: 4.28, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3.51, y: 16.87), controlPoint1: CGPoint(x: 3.84, y: 17), controlPoint2: CGPoint(x: 3.67, y: 16.95))
        bezierPath.addLine(to: CGPoint(x: 3.51, y: 16.87))
        bezierPath.addCurve(to: CGPoint(x: 3.13, y: 16.49), controlPoint1: CGPoint(x: 3.35, y: 16.78), controlPoint2: CGPoint(x: 3.22, y: 16.65))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 15.72), controlPoint1: CGPoint(x: 3.05, y: 16.32), controlPoint2: CGPoint(x: 3, y: 16.16))
        bezierPath.addLine(to: CGPoint(x: 3, y: 4.28))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 7, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 7, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 13, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 13, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 15, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 15, y: 6))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11.5))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_barcelona_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addLine(to: CGPoint(x: 19.53, y: 9.67))
        bezierPath.addCurve(to: CGPoint(x: 19.63, y: 10.23), controlPoint1: CGPoint(x: 19.71, y: 9.8), controlPoint2: CGPoint(x: 19.76, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 19.53, y: 10.33), controlPoint1: CGPoint(x: 19.6, y: 10.27), controlPoint2: CGPoint(x: 19.57, y: 10.3))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 16.78))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 16.9), controlPoint1: CGPoint(x: 10.25, y: 16.84), controlPoint2: CGPoint(x: 10.17, y: 16.88))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 16.9), controlPoint1: CGPoint(x: 10.03, y: 16.92), controlPoint2: CGPoint(x: 9.97, y: 16.92))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 16.9))
        bezierPath.addCurve(to: CGPoint(x: 9.69, y: 16.78), controlPoint1: CGPoint(x: 9.83, y: 16.88), controlPoint2: CGPoint(x: 9.75, y: 16.84))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addLine(to: CGPoint(x: 0.47, y: 10.33))
        bezierPath.addCurve(to: CGPoint(x: 0.37, y: 9.77), controlPoint1: CGPoint(x: 0.29, y: 10.2), controlPoint2: CGPoint(x: 0.24, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 0.47, y: 9.67), controlPoint1: CGPoint(x: 0.4, y: 9.73), controlPoint2: CGPoint(x: 0.43, y: 9.7))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 3.1), controlPoint1: CGPoint(x: 9.75, y: 3.16), controlPoint2: CGPoint(x: 9.83, y: 3.12))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 3.1), controlPoint1: CGPoint(x: 9.97, y: 3.08), controlPoint2: CGPoint(x: 10.03, y: 3.08))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 3.1))
        bezierPath.addCurve(to: CGPoint(x: 10.31, y: 3.22), controlPoint1: CGPoint(x: 10.17, y: 3.12), controlPoint2: CGPoint(x: 10.25, y: 3.16))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 3.22))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6, y: 13))
        bezierPath.addLine(to: CGPoint(x: 8, y: 13))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.96))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 12, y: 9.96))
        bezierPath.addLine(to: CGPoint(x: 12, y: 13))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13))
        bezierPath.addLine(to: CGPoint(x: 14, y: 7))
        bezierPath.addLine(to: CGPoint(x: 11.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 8.5, y: 7))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_kiev_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.44, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.78))
        bezierPath.addLine(to: CGPoint(x: 13.56, y: 4))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 14.09, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 11.56))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.addLine(to: CGPoint(x: 7.33, y: 11.56))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15.11))
        bezierPath.addLine(to: CGPoint(x: 6.44, y: 4))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_baku_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 16.86, y: 6.22), controlPoint1: CGPoint(x: 16.65, y: 6), controlPoint2: CGPoint(x: 16.79, y: 6.09))
        bezierPath.addLine(to: CGPoint(x: 19.66, y: 11.83))
        bezierPath.addLine(to: CGPoint(x: 19.66, y: 11.82))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 13.84), controlPoint1: CGPoint(x: 20.04, y: 12.56), controlPoint2: CGPoint(x: 19.74, y: 13.46))
        bezierPath.addCurve(to: CGPoint(x: 18.32, y: 14), controlPoint1: CGPoint(x: 18.79, y: 13.94), controlPoint2: CGPoint(x: 18.56, y: 14))
        bezierPath.addLine(to: CGPoint(x: 17.77, y: 14))
        bezierPath.addLine(to: CGPoint(x: 17.77, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 16.44, y: 13.2), controlPoint1: CGPoint(x: 17.21, y: 14), controlPoint2: CGPoint(x: 16.7, y: 13.69))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 12.36, y: 13.78))
        bezierPath.addLine(to: CGPoint(x: 12.36, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 14), controlPoint1: CGPoint(x: 12.29, y: 13.91), controlPoint2: CGPoint(x: 12.15, y: 14))
        bezierPath.addLine(to: CGPoint(x: 8, y: 14))
        bezierPath.addLine(to: CGPoint(x: 8, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 7.64, y: 13.78), controlPoint1: CGPoint(x: 7.85, y: 14), controlPoint2: CGPoint(x: 7.71, y: 13.91))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 3.67, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 3.66, y: 13.18))
        bezierPath.addCurve(to: CGPoint(x: 2.32, y: 14), controlPoint1: CGPoint(x: 3.4, y: 13.68), controlPoint2: CGPoint(x: 2.89, y: 14))
        bezierPath.addLine(to: CGPoint(x: 1.68, y: 14))
        bezierPath.addLine(to: CGPoint(x: 1.68, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 0.18, y: 12.5), controlPoint1: CGPoint(x: 0.85, y: 14), controlPoint2: CGPoint(x: 0.18, y: 13.33))
        bezierPath.addCurve(to: CGPoint(x: 0.34, y: 11.82), controlPoint1: CGPoint(x: 0.18, y: 12.26), controlPoint2: CGPoint(x: 0.23, y: 12.03))
        bezierPath.addLine(to: CGPoint(x: 3.11, y: 6.28))
        bezierPath.addLine(to: CGPoint(x: 3.11, y: 6.27))
        bezierPath.addCurve(to: CGPoint(x: 3.56, y: 6), controlPoint1: CGPoint(x: 3.2, y: 6.11), controlPoint2: CGPoint(x: 3.37, y: 6))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 7.86, y: 6.22), controlPoint1: CGPoint(x: 7.65, y: 6), controlPoint2: CGPoint(x: 7.79, y: 6.09))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 12.14, y: 6.22))
        bezierPath.addLine(to: CGPoint(x: 12.14, y: 6.22))
        bezierPath.addCurve(to: CGPoint(x: 12.5, y: 6), controlPoint1: CGPoint(x: 12.21, y: 6.09), controlPoint2: CGPoint(x: 12.35, y: 6))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_paris_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addCurve(to: CGPoint(x: 16.6, y: 10), controlPoint1: CGPoint(x: 13.65, y: 16.6), controlPoint2: CGPoint(x: 16.6, y: 13.65))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3.4), controlPoint1: CGPoint(x: 16.6, y: 6.35), controlPoint2: CGPoint(x: 13.65, y: 3.4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 3.4))
        bezierPath.addCurve(to: CGPoint(x: 3.4, y: 10), controlPoint1: CGPoint(x: 6.35, y: 3.4), controlPoint2: CGPoint(x: 3.4, y: 6.35))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16.6), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 6.35, y: 16.6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.2, y: 8.84))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 14.2), controlPoint1: CGPoint(x: 7.2, y: 13.89), controlPoint2: CGPoint(x: 6.89, y: 14.2))
        bezierPath.addCurve(to: CGPoint(x: 5.8, y: 13.5), controlPoint1: CGPoint(x: 6.11, y: 14.2), controlPoint2: CGPoint(x: 5.8, y: 13.89))
        bezierPath.addLine(to: CGPoint(x: 5.8, y: 6.4))
        bezierPath.addCurve(to: CGPoint(x: 7.09, y: 6.03), controlPoint1: CGPoint(x: 5.8, y: 5.7), controlPoint2: CGPoint(x: 6.72, y: 5.43))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.68))
        bezierPath.addLine(to: CGPoint(x: 12.91, y: 6.03))
        bezierPath.addCurve(to: CGPoint(x: 14.2, y: 6.4), controlPoint1: CGPoint(x: 13.28, y: 5.43), controlPoint2: CGPoint(x: 14.2, y: 5.7))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 13.5))
        bezierPath.addCurve(to: CGPoint(x: 13.5, y: 14.2), controlPoint1: CGPoint(x: 14.2, y: 13.89), controlPoint2: CGPoint(x: 13.89, y: 14.2))
        bezierPath.addCurve(to: CGPoint(x: 12.8, y: 13.5), controlPoint1: CGPoint(x: 13.11, y: 14.2), controlPoint2: CGPoint(x: 12.8, y: 13.89))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 8.84))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 12.37))
        bezierPath.addLine(to: CGPoint(x: 10.59, y: 12.37))
        bezierPath.addCurve(to: CGPoint(x: 9.63, y: 12.59), controlPoint1: CGPoint(x: 10.39, y: 12.7), controlPoint2: CGPoint(x: 9.96, y: 12.8))
        bezierPath.addCurve(to: CGPoint(x: 9.41, y: 12.37), controlPoint1: CGPoint(x: 9.54, y: 12.54), controlPoint2: CGPoint(x: 9.46, y: 12.46))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 8.84))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_athens_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16.5))
        bezierPath.addCurve(to: CGPoint(x: 16.5, y: 10), controlPoint1: CGPoint(x: 13.59, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.59))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3.5), controlPoint1: CGPoint(x: 16.5, y: 6.41), controlPoint2: CGPoint(x: 13.59, y: 3.5))
        bezierPath.addLine(to: CGPoint(x: 10, y: 3.5))
        bezierPath.addCurve(to: CGPoint(x: 3.5, y: 10), controlPoint1: CGPoint(x: 6.41, y: 3.5), controlPoint2: CGPoint(x: 3.5, y: 6.41))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16.5), controlPoint1: CGPoint(x: 3.5, y: 13.59), controlPoint2: CGPoint(x: 6.41, y: 16.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.5, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 4.5, y: 11.5), controlPoint1: CGPoint(x: 4.95, y: 12.5), controlPoint2: CGPoint(x: 4.5, y: 12.05))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 10.5), controlPoint1: CGPoint(x: 4.5, y: 10.95), controlPoint2: CGPoint(x: 4.95, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 6.5, y: 11.5), controlPoint1: CGPoint(x: 6.05, y: 10.5), controlPoint2: CGPoint(x: 6.5, y: 10.95))
        bezierPath.addCurve(to: CGPoint(x: 5.5, y: 12.5), controlPoint1: CGPoint(x: 6.5, y: 12.05), controlPoint2: CGPoint(x: 6.05, y: 12.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 12.2, y: 7))
        bezierPath.addLine(to: CGPoint(x: 15.7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.8, y: 7))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 11.3, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7.8, y: 7))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 6.8, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 13))
        bezierPath.addLine(to: CGPoint(x: 8.6, y: 13))
        bezierPath.addLine(to: CGPoint(x: 6.03, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 5, y: 7))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_bursa_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.36, y: 1.36))
        bezierPath.addLine(to: CGPoint(x: 18.64, y: 9.64))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 9.89), controlPoint1: CGPoint(x: 18.76, y: 9.76), controlPoint2: CGPoint(x: 18.8, y: 9.82))
        bezierPath.addLine(to: CGPoint(x: 18.82, y: 9.89))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 10.11), controlPoint1: CGPoint(x: 18.84, y: 9.96), controlPoint2: CGPoint(x: 18.84, y: 10.04))
        bezierPath.addCurve(to: CGPoint(x: 18.64, y: 10.36), controlPoint1: CGPoint(x: 18.8, y: 10.18), controlPoint2: CGPoint(x: 18.76, y: 10.24))
        bezierPath.addLine(to: CGPoint(x: 10.36, y: 18.64))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 18.82), controlPoint1: CGPoint(x: 10.24, y: 18.76), controlPoint2: CGPoint(x: 10.18, y: 18.8))
        bezierPath.addLine(to: CGPoint(x: 10.11, y: 18.82))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 18.82), controlPoint1: CGPoint(x: 10.04, y: 18.84), controlPoint2: CGPoint(x: 9.96, y: 18.84))
        bezierPath.addCurve(to: CGPoint(x: 9.64, y: 18.64), controlPoint1: CGPoint(x: 9.82, y: 18.8), controlPoint2: CGPoint(x: 9.76, y: 18.76))
        bezierPath.addLine(to: CGPoint(x: 1.36, y: 10.36))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 10.11), controlPoint1: CGPoint(x: 1.24, y: 10.24), controlPoint2: CGPoint(x: 1.2, y: 10.18))
        bezierPath.addLine(to: CGPoint(x: 1.18, y: 10.11))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 9.89), controlPoint1: CGPoint(x: 1.16, y: 10.04), controlPoint2: CGPoint(x: 1.16, y: 9.96))
        bezierPath.addCurve(to: CGPoint(x: 1.36, y: 9.64), controlPoint1: CGPoint(x: 1.2, y: 9.82), controlPoint2: CGPoint(x: 1.24, y: 9.76))
        bezierPath.addLine(to: CGPoint(x: 9.64, y: 1.36))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 1.18), controlPoint1: CGPoint(x: 9.76, y: 1.24), controlPoint2: CGPoint(x: 9.82, y: 1.2))
        bezierPath.addLine(to: CGPoint(x: 9.89, y: 1.18))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 1.18), controlPoint1: CGPoint(x: 9.96, y: 1.16), controlPoint2: CGPoint(x: 10.04, y: 1.16))
        bezierPath.addCurve(to: CGPoint(x: 10.36, y: 1.36), controlPoint1: CGPoint(x: 10.18, y: 1.2), controlPoint2: CGPoint(x: 10.24, y: 1.24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 12.12, y: 7.49))
        bezierPath.addLine(to: CGPoint(x: 12.12, y: 7.5))
        bezierPath.addCurve(to: CGPoint(x: 11.04, y: 7), controlPoint1: CGPoint(x: 11.84, y: 7.2), controlPoint2: CGPoint(x: 11.45, y: 7.02))
        bezierPath.addLine(to: CGPoint(x: 11.03, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8.62, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8.62, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 8.45, y: 7.14), controlPoint1: CGPoint(x: 8.54, y: 7), controlPoint2: CGPoint(x: 8.47, y: 7.06))
        bezierPath.addLine(to: CGPoint(x: 8.12, y: 9.39))
        bezierPath.addCurve(to: CGPoint(x: 9.49, y: 8.53), controlPoint1: CGPoint(x: 8.54, y: 9.1), controlPoint2: CGPoint(x: 9.01, y: 8.81))
        bezierPath.addLine(to: CGPoint(x: 9.27, y: 8.15))
        bezierPath.addLine(to: CGPoint(x: 9.26, y: 8.15))
        bezierPath.addCurve(to: CGPoint(x: 9.29, y: 8.04), controlPoint1: CGPoint(x: 9.24, y: 8.11), controlPoint2: CGPoint(x: 9.26, y: 8.06))
        bezierPath.addLine(to: CGPoint(x: 9.3, y: 8.04))
        bezierPath.addLine(to: CGPoint(x: 9.3, y: 8.04))
        bezierPath.addCurve(to: CGPoint(x: 9.36, y: 8.03), controlPoint1: CGPoint(x: 9.32, y: 8.03), controlPoint2: CGPoint(x: 9.34, y: 8.03))
        bezierPath.addLine(to: CGPoint(x: 10.44, y: 8.36))
        bezierPath.addCurve(to: CGPoint(x: 10.56, y: 8.56), controlPoint1: CGPoint(x: 10.53, y: 8.39), controlPoint2: CGPoint(x: 10.58, y: 8.47))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 9.63))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 9.63))
        bezierPath.addCurve(to: CGPoint(x: 10.21, y: 9.69), controlPoint1: CGPoint(x: 10.3, y: 9.68), controlPoint2: CGPoint(x: 10.25, y: 9.7))
        bezierPath.addLine(to: CGPoint(x: 10.21, y: 9.69))
        bezierPath.addCurve(to: CGPoint(x: 10.15, y: 9.65), controlPoint1: CGPoint(x: 10.19, y: 9.69), controlPoint2: CGPoint(x: 10.17, y: 9.67))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 9.25))
        bezierPath.addCurve(to: CGPoint(x: 7.95, y: 10.62), controlPoint1: CGPoint(x: 9.16, y: 9.68), controlPoint2: CGPoint(x: 8.48, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 7.74, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 6.18, y: 11.99), controlPoint1: CGPoint(x: 6.92, y: 12.24), controlPoint2: CGPoint(x: 6.33, y: 12.25))
        bezierPath.addCurve(to: CGPoint(x: 8.07, y: 9.79), controlPoint1: CGPoint(x: 5.95, y: 11.6), controlPoint2: CGPoint(x: 6.75, y: 10.7))
        bezierPath.addLine(to: CGPoint(x: 8.13, y: 9.39))
        bezierPath.addCurve(to: CGPoint(x: 5.58, y: 12.63), controlPoint1: CGPoint(x: 6.29, y: 10.62), controlPoint2: CGPoint(x: 5.19, y: 11.98))
        bezierPath.addCurve(to: CGPoint(x: 7.83, y: 12.81), controlPoint1: CGPoint(x: 5.84, y: 13.07), controlPoint2: CGPoint(x: 6.69, y: 13.1))
        bezierPath.addLine(to: CGPoint(x: 11.03, y: 12.81))
        bezierPath.addCurve(to: CGPoint(x: 12.73, y: 11.15), controlPoint1: CGPoint(x: 11.97, y: 12.81), controlPoint2: CGPoint(x: 12.73, y: 12.07))
        bezierPath.addCurve(to: CGPoint(x: 12.55, y: 10.41), controlPoint1: CGPoint(x: 12.73, y: 10.88), controlPoint2: CGPoint(x: 12.67, y: 10.63))
        bezierPath.addCurve(to: CGPoint(x: 11.22, y: 11.33), controlPoint1: CGPoint(x: 12.15, y: 10.72), controlPoint2: CGPoint(x: 11.7, y: 11.03))
        bezierPath.addLine(to: CGPoint(x: 11.46, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 11.43, y: 11.87), controlPoint1: CGPoint(x: 11.49, y: 11.79), controlPoint2: CGPoint(x: 11.47, y: 11.84))
        bezierPath.addLine(to: CGPoint(x: 11.43, y: 11.87))
        bezierPath.addCurve(to: CGPoint(x: 11.37, y: 11.88), controlPoint1: CGPoint(x: 11.41, y: 11.88), controlPoint2: CGPoint(x: 11.39, y: 11.88))
        bezierPath.addLine(to: CGPoint(x: 10.29, y: 11.55))
        bezierPath.addLine(to: CGPoint(x: 10.29, y: 11.55))
        bezierPath.addCurve(to: CGPoint(x: 10.17, y: 11.35), controlPoint1: CGPoint(x: 10.2, y: 11.52), controlPoint2: CGPoint(x: 10.15, y: 11.44))
        bezierPath.addLine(to: CGPoint(x: 10.42, y: 10.28))
        bezierPath.addLine(to: CGPoint(x: 10.42, y: 10.28))
        bezierPath.addCurve(to: CGPoint(x: 10.52, y: 10.21), controlPoint1: CGPoint(x: 10.43, y: 10.23), controlPoint2: CGPoint(x: 10.48, y: 10.2))
        bezierPath.addCurve(to: CGPoint(x: 10.58, y: 10.25), controlPoint1: CGPoint(x: 10.54, y: 10.22), controlPoint2: CGPoint(x: 10.56, y: 10.23))
        bezierPath.addLine(to: CGPoint(x: 10.79, y: 10.61))
        bezierPath.addCurve(to: CGPoint(x: 12.18, y: 9.6), controlPoint1: CGPoint(x: 11.31, y: 10.28), controlPoint2: CGPoint(x: 11.78, y: 9.94))
        bezierPath.addLine(to: CGPoint(x: 12.18, y: 9.59))
        bezierPath.addCurve(to: CGPoint(x: 12.51, y: 8.2), controlPoint1: CGPoint(x: 12.51, y: 9.21), controlPoint2: CGPoint(x: 12.64, y: 8.69))
        bezierPath.addCurve(to: CGPoint(x: 13.82, y: 8.29), controlPoint1: CGPoint(x: 13.2, y: 8.05), controlPoint2: CGPoint(x: 13.68, y: 8.06))
        bezierPath.addCurve(to: CGPoint(x: 12.4, y: 10.16), controlPoint1: CGPoint(x: 14.02, y: 8.64), controlPoint2: CGPoint(x: 13.44, y: 9.37))
        bezierPath.addCurve(to: CGPoint(x: 12.56, y: 10.41), controlPoint1: CGPoint(x: 12.46, y: 10.24), controlPoint2: CGPoint(x: 12.51, y: 10.32))
        bezierPath.addCurve(to: CGPoint(x: 14.42, y: 7.65), controlPoint1: CGPoint(x: 13.97, y: 9.32), controlPoint2: CGPoint(x: 14.76, y: 8.22))
        bezierPath.addCurve(to: CGPoint(x: 12.12, y: 7.49), controlPoint1: CGPoint(x: 14.16, y: 7.21), controlPoint2: CGPoint(x: 13.28, y: 7.18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_tram_volgograd_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15.6, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 9.6), controlPoint1: CGPoint(x: 15.82, y: 10), controlPoint2: CGPoint(x: 16, y: 9.82))
        bezierPath.addLine(to: CGPoint(x: 16, y: 8.4))
        bezierPath.addLine(to: CGPoint(x: 16, y: 8.4))
        bezierPath.addCurve(to: CGPoint(x: 15.6, y: 8), controlPoint1: CGPoint(x: 16, y: 8.18), controlPoint2: CGPoint(x: 15.82, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.4, y: 8))
        bezierPath.addLine(to: CGPoint(x: 10.4, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 8.4), controlPoint1: CGPoint(x: 10.18, y: 8), controlPoint2: CGPoint(x: 10, y: 8.18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.6))
        bezierPath.addCurve(to: CGPoint(x: 10.4, y: 10), controlPoint1: CGPoint(x: 10, y: 9.82), controlPoint2: CGPoint(x: 10.18, y: 10))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10))
        bezierPath.addLine(to: CGPoint(x: 12, y: 14.6))
        bezierPath.addCurve(to: CGPoint(x: 12.4, y: 15), controlPoint1: CGPoint(x: 12, y: 14.82), controlPoint2: CGPoint(x: 12.18, y: 15))
        bezierPath.addLine(to: CGPoint(x: 13.6, y: 15))
        bezierPath.addLine(to: CGPoint(x: 13.6, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 14.6), controlPoint1: CGPoint(x: 13.82, y: 15), controlPoint2: CGPoint(x: 14, y: 14.82))
        bezierPath.addLine(to: CGPoint(x: 14, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 8, y: 5))
        bezierPath.addLine(to: CGPoint(x: 8, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 9), controlPoint1: CGPoint(x: 5.79, y: 5), controlPoint2: CGPoint(x: 4, y: 6.79))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 13), controlPoint1: CGPoint(x: 4, y: 11.21), controlPoint2: CGPoint(x: 5.79, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 9.83, y: 12.61), controlPoint1: CGPoint(x: 8.85, y: 13), controlPoint2: CGPoint(x: 9.46, y: 12.87))
        bezierPath.addLine(to: CGPoint(x: 9.83, y: 12.61))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 12.28), controlPoint1: CGPoint(x: 9.94, y: 12.54), controlPoint2: CGPoint(x: 10, y: 12.41))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11.4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11.4))
        bezierPath.addCurve(to: CGPoint(x: 9.6, y: 11), controlPoint1: CGPoint(x: 10, y: 11.18), controlPoint2: CGPoint(x: 9.82, y: 11))
        bezierPath.addLine(to: CGPoint(x: 8, y: 11))
        bezierPath.addLine(to: CGPoint(x: 8, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 9), controlPoint1: CGPoint(x: 6.9, y: 11), controlPoint2: CGPoint(x: 6, y: 10.1))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 7), controlPoint1: CGPoint(x: 6, y: 7.9), controlPoint2: CGPoint(x: 6.9, y: 7))
        bezierPath.addLine(to: CGPoint(x: 9.6, y: 7))
        bezierPath.addLine(to: CGPoint(x: 9.6, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 6.6), controlPoint1: CGPoint(x: 9.82, y: 7), controlPoint2: CGPoint(x: 10, y: 6.82))
        bezierPath.addLine(to: CGPoint(x: 10, y: 5.72))
        bezierPath.addLine(to: CGPoint(x: 10, y: 5.72))
        bezierPath.addCurve(to: CGPoint(x: 9.83, y: 5.39), controlPoint1: CGPoint(x: 10, y: 5.59), controlPoint2: CGPoint(x: 9.94, y: 5.46))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 5), controlPoint1: CGPoint(x: 9.46, y: 5.13), controlPoint2: CGPoint(x: 8.85, y: 5))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_budapest_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addCurve(to: CGPoint(x: 16.6, y: 10), controlPoint1: CGPoint(x: 13.65, y: 16.6), controlPoint2: CGPoint(x: 16.6, y: 13.65))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3.4), controlPoint1: CGPoint(x: 16.6, y: 6.35), controlPoint2: CGPoint(x: 13.65, y: 3.4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 3.4))
        bezierPath.addCurve(to: CGPoint(x: 3.4, y: 10), controlPoint1: CGPoint(x: 6.35, y: 3.4), controlPoint2: CGPoint(x: 3.4, y: 6.35))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16.6), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 6.35, y: 16.6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 11.62))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 9.17))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 8.05))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 8.05))
        bezierPath.addLine(to: CGPoint(x: 7.2, y: 14))
        bezierPath.addLine(to: CGPoint(x: 5.8, y: 14))
        bezierPath.addLine(to: CGPoint(x: 5.8, y: 6))
        bezierPath.addLine(to: CGPoint(x: 7, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.62))
        bezierPath.addLine(to: CGPoint(x: 13, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.8, y: 11.05))
        bezierPath.addLine(to: CGPoint(x: 10, y: 13.5))
        bezierPath.addLine(to: CGPoint(x: 8, y: 11.75))
        bezierPath.addLine(to: CGPoint(x: 8, y: 9.88))
        bezierPath.addLine(to: CGPoint(x: 10, y: 11.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_nsk_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 4))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 10, y: 17))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 14.67, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15.7))
        bezierPath.addLine(to: CGPoint(x: 14, y: 4))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 4))
        bezierPath.addLine(to: CGPoint(x: 6, y: 4))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_almaty_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7.14, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 6.81))
        bezierPath.addLine(to: CGPoint(x: 12.86, y: 2))
        bezierPath.addLine(to: CGPoint(x: 18, y: 12))
        bezierPath.addLine(to: CGPoint(x: 14.67, y: 12))
        bezierPath.addLine(to: CGPoint(x: 12.86, y: 8.67))
        bezierPath.addLine(to: CGPoint(x: 10, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7.14, y: 8.67))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 12))
        bezierPath.addLine(to: CGPoint(x: 2, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7.14, y: 2))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 15))
        bezierPath.addLine(to: CGPoint(x: 17.66, y: 13.3))
        bezierPath.addLine(to: CGPoint(x: 17.66, y: 13.3))
        bezierPath.addCurve(to: CGPoint(x: 17.89, y: 13.45), controlPoint1: CGPoint(x: 17.76, y: 13.28), controlPoint2: CGPoint(x: 17.87, y: 13.34))
        bezierPath.addCurve(to: CGPoint(x: 17.8, y: 13.67), controlPoint1: CGPoint(x: 17.91, y: 13.54), controlPoint2: CGPoint(x: 17.87, y: 13.63))
        bezierPath.addLine(to: CGPoint(x: 10.05, y: 17.97))
        bezierPath.addLine(to: CGPoint(x: 10.05, y: 17.97))
        bezierPath.addCurve(to: CGPoint(x: 9.95, y: 17.97), controlPoint1: CGPoint(x: 10.02, y: 17.99), controlPoint2: CGPoint(x: 9.98, y: 17.99))
        bezierPath.addLine(to: CGPoint(x: 2.2, y: 13.67))
        bezierPath.addLine(to: CGPoint(x: 2.2, y: 13.67))
        bezierPath.addCurve(to: CGPoint(x: 2.13, y: 13.4), controlPoint1: CGPoint(x: 2.11, y: 13.62), controlPoint2: CGPoint(x: 2.07, y: 13.49))
        bezierPath.addCurve(to: CGPoint(x: 2.34, y: 13.3), controlPoint1: CGPoint(x: 2.17, y: 13.32), controlPoint2: CGPoint(x: 2.26, y: 13.28))
        bezierPath.addLine(to: CGPoint(x: 10, y: 15))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_stockholm_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16.6))
        bezierPath.addCurve(to: CGPoint(x: 16.6, y: 10), controlPoint1: CGPoint(x: 13.65, y: 16.6), controlPoint2: CGPoint(x: 16.6, y: 13.65))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3.4), controlPoint1: CGPoint(x: 16.6, y: 6.35), controlPoint2: CGPoint(x: 13.65, y: 3.4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 3.4))
        bezierPath.addCurve(to: CGPoint(x: 3.4, y: 10), controlPoint1: CGPoint(x: 6.35, y: 3.4), controlPoint2: CGPoint(x: 3.4, y: 6.35))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 16.6), controlPoint1: CGPoint(x: 3.4, y: 13.65), controlPoint2: CGPoint(x: 6.35, y: 16.6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.3, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 11.3, y: 15))
        bezierPath.addLine(to: CGPoint(x: 8.7, y: 15))
        bezierPath.addLine(to: CGPoint(x: 8.7, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 6, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 6, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14, y: 6))
        bezierPath.addLine(to: CGPoint(x: 14, y: 8.6))
        bezierPath.addLine(to: CGPoint(x: 11.3, y: 8.6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_istanbul_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.25, y: 13))
        bezierPath.addLine(to: CGPoint(x: 4.27, y: 13.02))
        bezierPath.addCurve(to: CGPoint(x: 5.98, y: 3.27), controlPoint1: CGPoint(x: 2.05, y: 9.85), controlPoint2: CGPoint(x: 2.82, y: 5.48))
        bezierPath.addCurve(to: CGPoint(x: 15.73, y: 4.99), controlPoint1: CGPoint(x: 9.15, y: 1.05), controlPoint2: CGPoint(x: 13.52, y: 1.82))
        bezierPath.addCurve(to: CGPoint(x: 15.73, y: 13.02), controlPoint1: CGPoint(x: 17.42, y: 7.4), controlPoint2: CGPoint(x: 17.42, y: 10.61))
        bezierPath.addLine(to: CGPoint(x: 16.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 10.3, y: 17.77))
        bezierPath.addLine(to: CGPoint(x: 10.31, y: 17.76))
        bezierPath.addCurve(to: CGPoint(x: 9.7, y: 17.77), controlPoint1: CGPoint(x: 10.13, y: 17.9), controlPoint2: CGPoint(x: 9.88, y: 17.9))
        bezierPath.addLine(to: CGPoint(x: 3.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 4.25, y: 13))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.15, y: 4.09))
        bezierPath.addLine(to: CGPoint(x: 5.15, y: 4.09))
        bezierPath.addCurve(to: CGPoint(x: 5.01, y: 4.12), controlPoint1: CGPoint(x: 5.1, y: 4.06), controlPoint2: CGPoint(x: 5.04, y: 4.08))
        bezierPath.addCurve(to: CGPoint(x: 5, y: 4.18), controlPoint1: CGPoint(x: 5, y: 4.14), controlPoint2: CGPoint(x: 5, y: 4.16))
        bezierPath.addLine(to: CGPoint(x: 5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.61))
        bezierPath.addLine(to: CGPoint(x: 13, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15, y: 4.18))
        bezierPath.addLine(to: CGPoint(x: 15, y: 4.18))
        bezierPath.addCurve(to: CGPoint(x: 14.9, y: 4.08), controlPoint1: CGPoint(x: 15, y: 4.12), controlPoint2: CGPoint(x: 14.96, y: 4.08))
        bezierPath.addCurve(to: CGPoint(x: 14.85, y: 4.09), controlPoint1: CGPoint(x: 14.88, y: 4.08), controlPoint2: CGPoint(x: 14.86, y: 4.08))
        bezierPath.addLine(to: CGPoint(x: 10, y: 7))
        bezierPath.addLine(to: CGPoint(x: 5.15, y: 4.09))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_spb_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.82, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 15.46, y: 5.16), controlPoint1: CGPoint(x: 11.82, y: 4), controlPoint2: CGPoint(x: 14.07, y: 3.99))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10.86), controlPoint1: CGPoint(x: 16.78, y: 6.28), controlPoint2: CGPoint(x: 18.02, y: 7.43))
        bezierPath.addCurve(to: CGPoint(x: 15.9, y: 16), controlPoint1: CGPoint(x: 17.84, y: 14.29), controlPoint2: CGPoint(x: 15.9, y: 16))
        bezierPath.addLine(to: CGPoint(x: 12.18, y: 15.99))
        bezierPath.addCurve(to: CGPoint(x: 15.46, y: 12.57), controlPoint1: CGPoint(x: 12.18, y: 15.99), controlPoint2: CGPoint(x: 14.69, y: 15.03))
        bezierPath.addCurve(to: CGPoint(x: 14.49, y: 7.43), controlPoint1: CGPoint(x: 16.38, y: 9.66), controlPoint2: CGPoint(x: 15.59, y: 8.39))
        bezierPath.addCurve(to: CGPoint(x: 13.15, y: 7.76), controlPoint1: CGPoint(x: 14.05, y: 7.07), controlPoint2: CGPoint(x: 13.4, y: 6.98))
        bezierPath.addCurve(to: CGPoint(x: 10.54, y: 16), controlPoint1: CGPoint(x: 12.31, y: 10.22), controlPoint2: CGPoint(x: 10.54, y: 16))
        bezierPath.addLine(to: CGPoint(x: 9.51, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 6.77, y: 7.76), controlPoint1: CGPoint(x: 9.51, y: 16), controlPoint2: CGPoint(x: 7.59, y: 10.22))
        bezierPath.addCurve(to: CGPoint(x: 5.43, y: 7.43), controlPoint1: CGPoint(x: 6.53, y: 6.98), controlPoint2: CGPoint(x: 5.87, y: 7.07))
        bezierPath.addCurve(to: CGPoint(x: 4.55, y: 12.57), controlPoint1: CGPoint(x: 4.33, y: 8.39), controlPoint2: CGPoint(x: 3.64, y: 9.66))
        bezierPath.addCurve(to: CGPoint(x: 7.82, y: 15.99), controlPoint1: CGPoint(x: 5.32, y: 15.03), controlPoint2: CGPoint(x: 7.82, y: 15.99))
        bezierPath.addLine(to: CGPoint(x: 4.1, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10.86), controlPoint1: CGPoint(x: 4.1, y: 16), controlPoint2: CGPoint(x: 1.99, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 4.55, y: 5.29), controlPoint1: CGPoint(x: 2.05, y: 7.43), controlPoint2: CGPoint(x: 3.2, y: 6.32))
        bezierPath.addCurve(to: CGPoint(x: 8.19, y: 4), controlPoint1: CGPoint(x: 6, y: 4.17), controlPoint2: CGPoint(x: 8.19, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10.01, y: 10.86))
        bezierPath.addLine(to: CGPoint(x: 11.82, y: 4))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_kazan_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 1, y: 16))
        bezierPath.addLine(to: CGPoint(x: 6.25, y: 16))
        bezierPath.addLine(to: CGPoint(x: 8.07, y: 11.45))
        bezierPath.addLine(to: CGPoint(x: 10, y: 14.05))
        bezierPath.addLine(to: CGPoint(x: 11.93, y: 11.45))
        bezierPath.addLine(to: CGPoint(x: 13.75, y: 16))
        bezierPath.addLine(to: CGPoint(x: 19, y: 16))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 3))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.85))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 3))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_Izmir_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.36, y: 1.36))
        bezierPath.addLine(to: CGPoint(x: 18.64, y: 9.64))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 9.89), controlPoint1: CGPoint(x: 18.76, y: 9.76), controlPoint2: CGPoint(x: 18.8, y: 9.82))
        bezierPath.addLine(to: CGPoint(x: 18.82, y: 9.89))
        bezierPath.addCurve(to: CGPoint(x: 18.82, y: 10.11), controlPoint1: CGPoint(x: 18.84, y: 9.96), controlPoint2: CGPoint(x: 18.84, y: 10.04))
        bezierPath.addCurve(to: CGPoint(x: 18.64, y: 10.36), controlPoint1: CGPoint(x: 18.8, y: 10.18), controlPoint2: CGPoint(x: 18.76, y: 10.24))
        bezierPath.addLine(to: CGPoint(x: 10.36, y: 18.64))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 18.82), controlPoint1: CGPoint(x: 10.24, y: 18.76), controlPoint2: CGPoint(x: 10.18, y: 18.8))
        bezierPath.addLine(to: CGPoint(x: 10.11, y: 18.82))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 18.82), controlPoint1: CGPoint(x: 10.04, y: 18.84), controlPoint2: CGPoint(x: 9.96, y: 18.84))
        bezierPath.addCurve(to: CGPoint(x: 9.64, y: 18.64), controlPoint1: CGPoint(x: 9.82, y: 18.8), controlPoint2: CGPoint(x: 9.76, y: 18.76))
        bezierPath.addLine(to: CGPoint(x: 1.36, y: 10.36))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 10.11), controlPoint1: CGPoint(x: 1.24, y: 10.24), controlPoint2: CGPoint(x: 1.2, y: 10.18))
        bezierPath.addLine(to: CGPoint(x: 1.18, y: 10.11))
        bezierPath.addCurve(to: CGPoint(x: 1.18, y: 9.89), controlPoint1: CGPoint(x: 1.16, y: 10.04), controlPoint2: CGPoint(x: 1.16, y: 9.96))
        bezierPath.addCurve(to: CGPoint(x: 1.36, y: 9.64), controlPoint1: CGPoint(x: 1.2, y: 9.82), controlPoint2: CGPoint(x: 1.24, y: 9.76))
        bezierPath.addLine(to: CGPoint(x: 9.64, y: 1.36))
        bezierPath.addCurve(to: CGPoint(x: 9.89, y: 1.18), controlPoint1: CGPoint(x: 9.76, y: 1.24), controlPoint2: CGPoint(x: 9.82, y: 1.2))
        bezierPath.addLine(to: CGPoint(x: 9.89, y: 1.18))
        bezierPath.addCurve(to: CGPoint(x: 10.11, y: 1.18), controlPoint1: CGPoint(x: 9.96, y: 1.16), controlPoint2: CGPoint(x: 10.04, y: 1.16))
        bezierPath.addCurve(to: CGPoint(x: 10.36, y: 1.36), controlPoint1: CGPoint(x: 10.18, y: 1.2), controlPoint2: CGPoint(x: 10.24, y: 1.24))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 8, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 13))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15, y: 13))
        bezierPath.addLine(to: CGPoint(x: 13, y: 5.5))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 7, y: 5.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_lisboa_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 11.38))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12.88))
        bezierPath.addLine(to: CGPoint(x: 8, y: 10.38))
        bezierPath.addLine(to: CGPoint(x: 8, y: 18))
        bezierPath.addLine(to: CGPoint(x: 5, y: 18))
        bezierPath.addLine(to: CGPoint(x: 5, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 17), controlPoint1: CGPoint(x: 4.45, y: 18), controlPoint2: CGPoint(x: 4, y: 17.55))
        bezierPath.addLine(to: CGPoint(x: 4, y: 5.67))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 3.05), controlPoint1: CGPoint(x: 7.6, y: 4.19), controlPoint2: CGPoint(x: 11.67, y: 3.27))
        bezierPath.addLine(to: CGPoint(x: 16, y: 11.38))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 13.62))
        bezierPath.addLine(to: CGPoint(x: 16, y: 17))
        bezierPath.addLine(to: CGPoint(x: 16, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 15, y: 18), controlPoint1: CGPoint(x: 16, y: 17.55), controlPoint2: CGPoint(x: 15.55, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 13.62))
        bezierPath.addLine(to: CGPoint(x: 13, y: 15.12))
        bezierPath.addLine(to: CGPoint(x: 16, y: 13.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_ekb_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 3))
        bezierPath.addLine(to: CGPoint(x: 3, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17, y: 10))
        bezierPath.addLine(to: CGPoint(x: 17, y: 3))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10))
        bezierPath.addLine(to: CGPoint(x: 3, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 3, y: 12))
        bezierPath.addLine(to: CGPoint(x: 3, y: 17))
        bezierPath.addLine(to: CGPoint(x: 8, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3, y: 12))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 12))
        bezierPath.addLine(to: CGPoint(x: 12, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17, y: 17))
        bezierPath.addLine(to: CGPoint(x: 17, y: 12))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_berlin_sbahn_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 10))
        bezierPath.addLine(to: CGPoint(x: 2, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addLine(to: CGPoint(x: 18, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.2, y: 5.46))
        bezierPath.addCurve(to: CGPoint(x: 5.35, y: 6.94), controlPoint1: CGPoint(x: 12.38, y: 3.56), controlPoint2: CGPoint(x: 6.13, y: 3.01))
        bezierPath.addCurve(to: CGPoint(x: 12.13, y: 13.03), controlPoint1: CGPoint(x: 4.61, y: 12.31), controlPoint2: CGPoint(x: 12.13, y: 10.39))
        bezierPath.addCurve(to: CGPoint(x: 5.39, y: 11.91), controlPoint1: CGPoint(x: 12.13, y: 14.2), controlPoint2: CGPoint(x: 9.1, y: 15.58))
        bezierPath.addLine(to: CGPoint(x: 5.39, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 14.93, y: 12.4), controlPoint1: CGPoint(x: 8.24, y: 16.9), controlPoint2: CGPoint(x: 14.31, y: 16.72))
        bezierPath.addCurve(to: CGPoint(x: 8.01, y: 6.73), controlPoint1: CGPoint(x: 15.37, y: 7.4), controlPoint2: CGPoint(x: 8.06, y: 9.18))
        bezierPath.addCurve(to: CGPoint(x: 14.16, y: 7.43), controlPoint1: CGPoint(x: 7.97, y: 4.9), controlPoint2: CGPoint(x: 12.13, y: 5.18))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 5.46))
        bezierPath.addLine(to: CGPoint(x: 14.2, y: 5.46))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_minsk_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 6))
        bezierPath.addLine(to: CGPoint(x: 8, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 8.18))
        bezierPath.addLine(to: CGPoint(x: 12, y: 6))
        bezierPath.addLine(to: CGPoint(x: 18, y: 6))
        bezierPath.addLine(to: CGPoint(x: 18, y: 13))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 13, y: 12))
        bezierPath.addLine(to: CGPoint(x: 10, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7, y: 12))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13))
        bezierPath.addLine(to: CGPoint(x: 2, y: 6))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_msk_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.5))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 4))
        bezierPath.addLine(to: CGPoint(x: 17, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 18, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 18, y: 15))
        bezierPath.addLine(to: CGPoint(x: 13, y: 15))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 13.5, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 11.53))
        bezierPath.addLine(to: CGPoint(x: 10, y: 15))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 11.53))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 7, y: 15))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13.8))
        bezierPath.addLine(to: CGPoint(x: 3, y: 13.8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubwaybus_istanbul_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17, y: 11.93))
        bezierPath.addLine(to: CGPoint(x: 17, y: 16.12))
        bezierPath.addLine(to: CGPoint(x: 17, y: 16.12))
        bezierPath.addCurve(to: CGPoint(x: 16.12, y: 17), controlPoint1: CGPoint(x: 17, y: 16.61), controlPoint2: CGPoint(x: 16.61, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3.88, y: 17))
        bezierPath.addLine(to: CGPoint(x: 3.88, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 16.12), controlPoint1: CGPoint(x: 3.39, y: 17), controlPoint2: CGPoint(x: 3, y: 16.61))
        bezierPath.addLine(to: CGPoint(x: 3, y: 7.12))
        bezierPath.addCurve(to: CGPoint(x: 8.85, y: 12.5), controlPoint1: CGPoint(x: 4.95, y: 7.58), controlPoint2: CGPoint(x: 6.9, y: 9.37))
        bezierPath.addLine(to: CGPoint(x: 7.74, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 7.74, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 7.54, y: 12.7), controlPoint1: CGPoint(x: 7.63, y: 12.5), controlPoint2: CGPoint(x: 7.54, y: 12.59))
        bezierPath.addCurve(to: CGPoint(x: 7.64, y: 12.87), controlPoint1: CGPoint(x: 7.54, y: 12.77), controlPoint2: CGPoint(x: 7.58, y: 12.84))
        bezierPath.addLine(to: CGPoint(x: 11.18, y: 14.93))
        bezierPath.addLine(to: CGPoint(x: 11.18, y: 14.93))
        bezierPath.addCurve(to: CGPoint(x: 11.41, y: 14.92), controlPoint1: CGPoint(x: 11.25, y: 14.97), controlPoint2: CGPoint(x: 11.34, y: 14.97))
        bezierPath.addLine(to: CGPoint(x: 14.04, y: 12.86))
        bezierPath.addLine(to: CGPoint(x: 14.04, y: 12.86))
        bezierPath.addCurve(to: CGPoint(x: 14.08, y: 12.58), controlPoint1: CGPoint(x: 14.13, y: 12.79), controlPoint2: CGPoint(x: 14.14, y: 12.66))
        bezierPath.addCurve(to: CGPoint(x: 13.92, y: 12.5), controlPoint1: CGPoint(x: 14.04, y: 12.53), controlPoint2: CGPoint(x: 13.98, y: 12.5))
        bezierPath.addLine(to: CGPoint(x: 12.79, y: 12.5))
        bezierPath.addCurve(to: CGPoint(x: 7.68, y: 7.6), controlPoint1: CGPoint(x: 11.2, y: 10.32), controlPoint2: CGPoint(x: 9.49, y: 8.68))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 7), controlPoint1: CGPoint(x: 8.47, y: 7.2), controlPoint2: CGPoint(x: 9.25, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 11.93), controlPoint1: CGPoint(x: 12.16, y: 7), controlPoint2: CGPoint(x: 14.49, y: 8.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 17, y: 8.16))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 6), controlPoint1: CGPoint(x: 14.81, y: 6.72), controlPoint2: CGPoint(x: 12.48, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 5.87, y: 6.71), controlPoint1: CGPoint(x: 8.57, y: 6), controlPoint2: CGPoint(x: 7.2, y: 6.24))
        bezierPath.addLine(to: CGPoint(x: 5.86, y: 6.71))
        bezierPath.addCurve(to: CGPoint(x: 2.96, y: 6.04), controlPoint1: CGPoint(x: 4.93, y: 6.35), controlPoint2: CGPoint(x: 3.95, y: 6.13))
        bezierPath.addLine(to: CGPoint(x: 3, y: 3.88))
        bezierPath.addCurve(to: CGPoint(x: 3.88, y: 3), controlPoint1: CGPoint(x: 3, y: 3.39), controlPoint2: CGPoint(x: 3.39, y: 3))
        bezierPath.addLine(to: CGPoint(x: 16.12, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 17, y: 3.88), controlPoint1: CGPoint(x: 16.61, y: 3), controlPoint2: CGPoint(x: 17, y: 3.39))
        bezierPath.addLine(to: CGPoint(x: 17, y: 8.16))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_dnepropetrovsk_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.25, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 11.78, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 11.78, y: 15))
        bezierPath.addLine(to: CGPoint(x: 2, y: 15))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 3.02, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 5.56, y: 4))
        bezierPath.addLine(to: CGPoint(x: 8.22, y: 4))
        bezierPath.addLine(to: CGPoint(x: 9.89, y: 10.04))
        bezierPath.addLine(to: CGPoint(x: 11.57, y: 4))
        bezierPath.addLine(to: CGPoint(x: 14.23, y: 4))
        bezierPath.addLine(to: CGPoint(x: 16.77, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 17.79, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 17.79, y: 15))
        bezierPath.addLine(to: CGPoint(x: 14.23, y: 15))
        bezierPath.addLine(to: CGPoint(x: 14.23, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 14.55, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 13.07, y: 7.83))
        bezierPath.addLine(to: CGPoint(x: 13.07, y: 7.82))
        bezierPath.addCurve(to: CGPoint(x: 12.95, y: 7.7), controlPoint1: CGPoint(x: 13.05, y: 7.76), controlPoint2: CGPoint(x: 13.01, y: 7.72))
        bezierPath.addLine(to: CGPoint(x: 12.95, y: 7.7))
        bezierPath.addCurve(to: CGPoint(x: 12.73, y: 7.82), controlPoint1: CGPoint(x: 12.86, y: 7.67), controlPoint2: CGPoint(x: 12.76, y: 7.73))
        bezierPath.addLine(to: CGPoint(x: 12.73, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 11.25, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 11.25, y: 13.17))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.06, y: 7.83))
        bezierPath.addLine(to: CGPoint(x: 7.06, y: 7.82))
        bezierPath.addCurve(to: CGPoint(x: 6.94, y: 7.7), controlPoint1: CGPoint(x: 7.04, y: 7.76), controlPoint2: CGPoint(x: 7, y: 7.72))
        bezierPath.addLine(to: CGPoint(x: 6.94, y: 7.7))
        bezierPath.addCurve(to: CGPoint(x: 6.72, y: 7.82), controlPoint1: CGPoint(x: 6.84, y: 7.67), controlPoint2: CGPoint(x: 6.75, y: 7.73))
        bezierPath.addLine(to: CGPoint(x: 6.72, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 5.24, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 8.54, y: 13.17))
        bezierPath.addLine(to: CGPoint(x: 7.06, y: 7.83))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_tbilisi_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 11.75))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3), controlPoint1: CGPoint(x: 2, y: 6.92), controlPoint2: CGPoint(x: 5.58, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 11.75), controlPoint1: CGPoint(x: 14.42, y: 3), controlPoint2: CGPoint(x: 18, y: 6.92))
        bezierPath.addCurve(to: CGPoint(x: 16.4, y: 17), controlPoint1: CGPoint(x: 18, y: 13.72), controlPoint2: CGPoint(x: 17.41, y: 15.54))
        bezierPath.addLine(to: CGPoint(x: 3.6, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 11.75), controlPoint1: CGPoint(x: 2.59, y: 15.54), controlPoint2: CGPoint(x: 2, y: 13.72))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 15.62, y: 15.6))
        bezierPath.addLine(to: CGPoint(x: 15.61, y: 15.63))
        bezierPath.addCurve(to: CGPoint(x: 16.6, y: 11.78), controlPoint1: CGPoint(x: 16.26, y: 14.45), controlPoint2: CGPoint(x: 16.6, y: 13.13))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 4.4), controlPoint1: CGPoint(x: 16.6, y: 7.66), controlPoint2: CGPoint(x: 13.62, y: 4.4))
        bezierPath.addCurve(to: CGPoint(x: 3.4, y: 11.75), controlPoint1: CGPoint(x: 6.38, y: 4.4), controlPoint2: CGPoint(x: 3.4, y: 7.66))
        bezierPath.addCurve(to: CGPoint(x: 4.38, y: 15.6), controlPoint1: CGPoint(x: 3.4, y: 13.13), controlPoint2: CGPoint(x: 3.74, y: 14.46))
        bezierPath.addLine(to: CGPoint(x: 15.62, y: 15.6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 13, y: 13))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 10, y: 14))
        bezierPath.addLine(to: CGPoint(x: 8, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 7, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 7.44, y: 6))
        bezierPath.addLine(to: CGPoint(x: 10, y: 10.5))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 6))
        bezierPath.addLine(to: CGPoint(x: 15, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 15.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 14))
        bezierPath.addLine(to: CGPoint(x: 12.5, y: 13))
        bezierPath.addLine(to: CGPoint(x: 13, y: 13))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_ankara_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.2, y: 1.2))
        bezierPath.addLine(to: CGPoint(x: 18.47, y: 9.47))
        bezierPath.addCurve(to: CGPoint(x: 18.65, y: 9.73), controlPoint1: CGPoint(x: 18.6, y: 9.6), controlPoint2: CGPoint(x: 18.63, y: 9.66))
        bezierPath.addLine(to: CGPoint(x: 18.65, y: 9.73))
        bezierPath.addCurve(to: CGPoint(x: 18.65, y: 9.94), controlPoint1: CGPoint(x: 18.67, y: 9.8), controlPoint2: CGPoint(x: 18.67, y: 9.87))
        bezierPath.addCurve(to: CGPoint(x: 18.47, y: 10.2), controlPoint1: CGPoint(x: 18.63, y: 10.01), controlPoint2: CGPoint(x: 18.6, y: 10.07))
        bezierPath.addLine(to: CGPoint(x: 10.2, y: 18.47))
        bezierPath.addCurve(to: CGPoint(x: 9.94, y: 18.65), controlPoint1: CGPoint(x: 10.07, y: 18.6), controlPoint2: CGPoint(x: 10.01, y: 18.63))
        bezierPath.addLine(to: CGPoint(x: 9.94, y: 18.65))
        bezierPath.addCurve(to: CGPoint(x: 9.73, y: 18.65), controlPoint1: CGPoint(x: 9.87, y: 18.67), controlPoint2: CGPoint(x: 9.8, y: 18.67))
        bezierPath.addCurve(to: CGPoint(x: 9.47, y: 18.47), controlPoint1: CGPoint(x: 9.66, y: 18.63), controlPoint2: CGPoint(x: 9.6, y: 18.6))
        bezierPath.addLine(to: CGPoint(x: 1.2, y: 10.2))
        bezierPath.addCurve(to: CGPoint(x: 1.02, y: 9.94), controlPoint1: CGPoint(x: 1.07, y: 10.07), controlPoint2: CGPoint(x: 1.04, y: 10.01))
        bezierPath.addLine(to: CGPoint(x: 1.02, y: 9.94))
        bezierPath.addCurve(to: CGPoint(x: 1.02, y: 9.73), controlPoint1: CGPoint(x: 0.99, y: 9.87), controlPoint2: CGPoint(x: 0.99, y: 9.8))
        bezierPath.addCurve(to: CGPoint(x: 1.2, y: 9.47), controlPoint1: CGPoint(x: 1.04, y: 9.66), controlPoint2: CGPoint(x: 1.07, y: 9.6))
        bezierPath.addLine(to: CGPoint(x: 9.47, y: 1.2))
        bezierPath.addCurve(to: CGPoint(x: 9.73, y: 1.02), controlPoint1: CGPoint(x: 9.6, y: 1.07), controlPoint2: CGPoint(x: 9.66, y: 1.04))
        bezierPath.addLine(to: CGPoint(x: 9.73, y: 1.02))
        bezierPath.addCurve(to: CGPoint(x: 9.94, y: 1.02), controlPoint1: CGPoint(x: 9.8, y: 0.99), controlPoint2: CGPoint(x: 9.87, y: 0.99))
        bezierPath.addCurve(to: CGPoint(x: 10.2, y: 1.2), controlPoint1: CGPoint(x: 10.01, y: 1.04), controlPoint2: CGPoint(x: 10.07, y: 1.07))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.43, y: 5.83))
        bezierPath.addLine(to: CGPoint(x: 5.83, y: 11.83))
        bezierPath.addLine(to: CGPoint(x: 7.83, y: 11.83))
        bezierPath.addLine(to: CGPoint(x: 8.23, y: 9.58))
        bezierPath.addLine(to: CGPoint(x: 9.83, y: 11.83))
        bezierPath.addLine(to: CGPoint(x: 11.43, y: 9.58))
        bezierPath.addLine(to: CGPoint(x: 11.83, y: 11.83))
        bezierPath.addLine(to: CGPoint(x: 13.83, y: 11.83))
        bezierPath.addLine(to: CGPoint(x: 12.23, y: 5.83))
        bezierPath.addLine(to: CGPoint(x: 9.83, y: 8.83))
        bezierPath.addLine(to: CGPoint(x: 7.43, y: 5.83))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_wein_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 10))
        bezierPath.addLine(to: CGPoint(x: 2, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addLine(to: CGPoint(x: 18, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 5.9, y: 6))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 6.39, y: 12.99), controlPoint1: CGPoint(x: 5.9, y: 11.53), controlPoint2: CGPoint(x: 6.02, y: 12.25))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 15.1), controlPoint1: CGPoint(x: 7.04, y: 14.29), controlPoint2: CGPoint(x: 8.26, y: 15.1))
        bezierPath.addCurve(to: CGPoint(x: 13.61, y: 12.99), controlPoint1: CGPoint(x: 11.75, y: 15.1), controlPoint2: CGPoint(x: 12.96, y: 14.29))
        bezierPath.addLine(to: CGPoint(x: 13.61, y: 13))
        bezierPath.addCurve(to: CGPoint(x: 14.1, y: 11.02), controlPoint1: CGPoint(x: 13.92, y: 12.38), controlPoint2: CGPoint(x: 14.09, y: 11.71))
        bezierPath.addLine(to: CGPoint(x: 14.1, y: 6))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 6))
        bezierPath.addLine(to: CGPoint(x: 11.9, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 11.64, y: 12.01), controlPoint1: CGPoint(x: 11.9, y: 11.22), controlPoint2: CGPoint(x: 11.83, y: 11.63))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 12.9), controlPoint1: CGPoint(x: 11.35, y: 12.58), controlPoint2: CGPoint(x: 10.88, y: 12.9))
        bezierPath.addCurve(to: CGPoint(x: 8.36, y: 12.01), controlPoint1: CGPoint(x: 9.12, y: 12.9), controlPoint2: CGPoint(x: 8.65, y: 12.58))
        bezierPath.addLine(to: CGPoint(x: 8.37, y: 12.02))
        bezierPath.addCurve(to: CGPoint(x: 8.1, y: 11.03), controlPoint1: CGPoint(x: 8.21, y: 11.72), controlPoint2: CGPoint(x: 8.12, y: 11.38))
        bezierPath.addLine(to: CGPoint(x: 8.1, y: 6))
        bezierPath.addLine(to: CGPoint(x: 5.9, y: 6))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_santiago_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 17), controlPoint2: CGPoint(x: 2, y: 13.87))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 3), controlPoint1: CGPoint(x: 2, y: 6.13), controlPoint2: CGPoint(x: 5.58, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 3), controlPoint2: CGPoint(x: 18, y: 6.13))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 17), controlPoint1: CGPoint(x: 18, y: 13.87), controlPoint2: CGPoint(x: 14.42, y: 17))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 15.8))
        bezierPath.addCurve(to: CGPoint(x: 16.8, y: 10), controlPoint1: CGPoint(x: 13.79, y: 15.8), controlPoint2: CGPoint(x: 16.8, y: 13.17))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 4.2), controlPoint1: CGPoint(x: 16.8, y: 6.83), controlPoint2: CGPoint(x: 13.79, y: 4.2))
        bezierPath.addCurve(to: CGPoint(x: 3.2, y: 10), controlPoint1: CGPoint(x: 6.21, y: 4.2), controlPoint2: CGPoint(x: 3.2, y: 6.84))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 15.8), controlPoint1: CGPoint(x: 3.2, y: 13.16), controlPoint2: CGPoint(x: 6.21, y: 15.8))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.09, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 11.97, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 11.97, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 11.97, y: 10.05), controlPoint1: CGPoint(x: 11.99, y: 9.98), controlPoint2: CGPoint(x: 11.99, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 10.09, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 9.95, y: 13.39), controlPoint1: CGPoint(x: 10.06, y: 13.4), controlPoint2: CGPoint(x: 10, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 9.91, y: 13.35), controlPoint1: CGPoint(x: 9.93, y: 13.38), controlPoint2: CGPoint(x: 9.92, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 8.03, y: 10.05))
        bezierPath.addLine(to: CGPoint(x: 8.03, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 8.03, y: 9.95), controlPoint1: CGPoint(x: 8.01, y: 10.02), controlPoint2: CGPoint(x: 8.01, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 9.91, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 10.05, y: 6.61), controlPoint1: CGPoint(x: 9.94, y: 6.6), controlPoint2: CGPoint(x: 10, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 10.09, y: 6.65), controlPoint1: CGPoint(x: 10.07, y: 6.62), controlPoint2: CGPoint(x: 10.08, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.09, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 15.97, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 15.97, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 15.97, y: 10.05), controlPoint1: CGPoint(x: 15.99, y: 9.98), controlPoint2: CGPoint(x: 15.99, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 14.09, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 14.09, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 13.95, y: 13.39), controlPoint1: CGPoint(x: 14.06, y: 13.4), controlPoint2: CGPoint(x: 14, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 13.91, y: 13.35), controlPoint1: CGPoint(x: 13.93, y: 13.38), controlPoint2: CGPoint(x: 13.92, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 12.03, y: 10.05))
        bezierPath.addLine(to: CGPoint(x: 12.03, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 12.03, y: 9.95), controlPoint1: CGPoint(x: 12.01, y: 10.02), controlPoint2: CGPoint(x: 12.01, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 13.91, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 14.05, y: 6.61), controlPoint1: CGPoint(x: 13.94, y: 6.6), controlPoint2: CGPoint(x: 14, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 14.09, y: 6.65), controlPoint1: CGPoint(x: 14.07, y: 6.62), controlPoint2: CGPoint(x: 14.08, y: 6.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 6.09, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 7.97, y: 9.95))
        bezierPath.addLine(to: CGPoint(x: 7.97, y: 9.95))
        bezierPath.addCurve(to: CGPoint(x: 7.97, y: 10.05), controlPoint1: CGPoint(x: 7.99, y: 9.98), controlPoint2: CGPoint(x: 7.99, y: 10.02))
        bezierPath.addLine(to: CGPoint(x: 6.09, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 6.09, y: 13.35))
        bezierPath.addCurve(to: CGPoint(x: 5.95, y: 13.39), controlPoint1: CGPoint(x: 6.06, y: 13.4), controlPoint2: CGPoint(x: 6, y: 13.41))
        bezierPath.addCurve(to: CGPoint(x: 5.91, y: 13.35), controlPoint1: CGPoint(x: 5.93, y: 13.38), controlPoint2: CGPoint(x: 5.92, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 4.03, y: 10.05))
        bezierPath.addLine(to: CGPoint(x: 4.03, y: 10.05))
        bezierPath.addCurve(to: CGPoint(x: 4.03, y: 9.95), controlPoint1: CGPoint(x: 4.01, y: 10.02), controlPoint2: CGPoint(x: 4.01, y: 9.98))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 6.65))
        bezierPath.addLine(to: CGPoint(x: 5.91, y: 6.65))
        bezierPath.addCurve(to: CGPoint(x: 6.05, y: 6.61), controlPoint1: CGPoint(x: 5.94, y: 6.6), controlPoint2: CGPoint(x: 6, y: 6.59))
        bezierPath.addCurve(to: CGPoint(x: 6.09, y: 6.65), controlPoint1: CGPoint(x: 6.07, y: 6.62), controlPoint2: CGPoint(x: 6.08, y: 6.64))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_erevan_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.71, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 15.5), controlPoint1: CGPoint(x: 5.95, y: 14.92), controlPoint2: CGPoint(x: 7.63, y: 15.5))
        bezierPath.addCurve(to: CGPoint(x: 16.38, y: 11), controlPoint1: CGPoint(x: 12.97, y: 15.5), controlPoint2: CGPoint(x: 15.78, y: 13.51))
        bezierPath.addLine(to: CGPoint(x: 17.91, y: 11))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 17), controlPoint1: CGPoint(x: 17.32, y: 14.39), controlPoint2: CGPoint(x: 13.78, y: 17))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 10), controlPoint1: CGPoint(x: 4.81, y: 17), controlPoint2: CGPoint(x: 1, y: 13.87))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 3), controlPoint1: CGPoint(x: 1, y: 6.13), controlPoint2: CGPoint(x: 5.25, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 19.09, y: 7), controlPoint1: CGPoint(x: 14.29, y: 3), controlPoint2: CGPoint(x: 17.56, y: 4.63))
        bezierPath.addLine(to: CGPoint(x: 19.07, y: 7))
        bezierPath.addLine(to: CGPoint(x: 18.48, y: 9.09))
        bezierPath.addLine(to: CGPoint(x: 15.16, y: 9.09))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 14), controlPoint1: CGPoint(x: 14.21, y: 11.94), controlPoint2: CGPoint(x: 11.36, y: 14))
        bezierPath.addLine(to: CGPoint(x: 4.71, y: 14))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 4.54, y: 13.88))
        bezierPath.addLine(to: CGPoint(x: 7, y: 7))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 7))
        bezierPath.addLine(to: CGPoint(x: 8.54, y: 12.48))
        bezierPath.addCurve(to: CGPoint(x: 14, y: 7), controlPoint1: CGPoint(x: 11.62, y: 12.22), controlPoint2: CGPoint(x: 14, y: 9.85))
        bezierPath.addLine(to: CGPoint(x: 17.18, y: 7))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 4.5), controlPoint1: CGPoint(x: 15.76, y: 5.52), controlPoint2: CGPoint(x: 13.33, y: 4.5))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 10), controlPoint1: CGPoint(x: 6, y: 4.5), controlPoint2: CGPoint(x: 2.5, y: 7.08))
        bezierPath.addCurve(to: CGPoint(x: 4.54, y: 13.88), controlPoint1: CGPoint(x: 2.5, y: 11.49), controlPoint2: CGPoint(x: 3.28, y: 12.87))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSubway_samara_20_suggest(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6, y: 4))
        bezierPath.addLine(to: CGPoint(x: 2, y: 14.8))
        bezierPath.addCurve(to: CGPoint(x: 6, y: 13.6), controlPoint1: CGPoint(x: 3.39, y: 14.8), controlPoint2: CGPoint(x: 4.67, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 7.33, y: 10))
        bezierPath.addLine(to: CGPoint(x: 10, y: 16))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 10))
        bezierPath.addLine(to: CGPoint(x: 14, y: 13.6))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 14.8), controlPoint1: CGPoint(x: 15.33, y: 14.8), controlPoint2: CGPoint(x: 16.67, y: 14.8))
        bezierPath.addLine(to: CGPoint(x: 14, y: 4))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 4))
        bezierPath.addLine(to: CGPoint(x: 10, y: 9.4))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 4))
        bezierPath.addLine(to: CGPoint(x: 6, y: 4))
        bezierPath.close()
        StyleKit_Metro.white100.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDownload_status(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit, progress: CGFloat = 0.1) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)



        //// Variable Declarations
        let expression: CGFloat = -360 * progress

        //// background Drawing
        let backgroundPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 24, height: 24))
        StyleKit_Metro.grey96.setFill()
        backgroundPath.fill()


        //// spinner Drawing
        context.saveGState()
        context.translateBy(x: 12, y: 12)
        context.rotate(by: -(expression + 90) * CGFloat.pi/180)

        let spinnerRect = CGRect(x: -11, y: -11, width: 22, height: 22)
        let spinnerPath = UIBezierPath()
        spinnerPath.addArc(withCenter: CGPoint(x: spinnerRect.midX, y: spinnerRect.midY), radius: spinnerRect.width / 2, startAngle: 0 * CGFloat.pi/180, endAngle: -expression * CGFloat.pi/180, clockwise: true)

        StyleKit_Metro.ui_green.setStroke()
        spinnerPath.lineWidth = 2
        spinnerPath.lineCapStyle = .round
        spinnerPath.stroke()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDownload_complete(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// status_complete Drawing
        let status_completePath = UIBezierPath()
        status_completePath.move(to: CGPoint(x: 12, y: 24))
        status_completePath.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
        status_completePath.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        status_completePath.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
        status_completePath.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
        status_completePath.close()
        status_completePath.move(to: CGPoint(x: 10.29, y: 15.71))
        status_completePath.addLine(to: CGPoint(x: 10.29, y: 15.71))
        status_completePath.addCurve(to: CGPoint(x: 11.71, y: 15.71), controlPoint1: CGPoint(x: 10.68, y: 16.1), controlPoint2: CGPoint(x: 11.32, y: 16.1))
        status_completePath.addLine(to: CGPoint(x: 17.71, y: 9.71))
        status_completePath.addLine(to: CGPoint(x: 17.71, y: 9.71))
        status_completePath.addCurve(to: CGPoint(x: 17.73, y: 8.29), controlPoint1: CGPoint(x: 18.1, y: 9.32), controlPoint2: CGPoint(x: 18.12, y: 8.69))
        status_completePath.addCurve(to: CGPoint(x: 16.32, y: 8.27), controlPoint1: CGPoint(x: 17.35, y: 7.9), controlPoint2: CGPoint(x: 16.71, y: 7.88))
        status_completePath.addCurve(to: CGPoint(x: 16.29, y: 8.29), controlPoint1: CGPoint(x: 16.31, y: 8.28), controlPoint2: CGPoint(x: 16.3, y: 8.28))
        status_completePath.addLine(to: CGPoint(x: 11, y: 13.6))
        status_completePath.addLine(to: CGPoint(x: 8.71, y: 11.29))
        status_completePath.addLine(to: CGPoint(x: 8.71, y: 11.29))
        status_completePath.addCurve(to: CGPoint(x: 7.29, y: 11.29), controlPoint1: CGPoint(x: 8.32, y: 10.9), controlPoint2: CGPoint(x: 7.68, y: 10.9))
        status_completePath.addCurve(to: CGPoint(x: 7.29, y: 12.71), controlPoint1: CGPoint(x: 6.9, y: 11.68), controlPoint2: CGPoint(x: 6.9, y: 12.32))
        status_completePath.addLine(to: CGPoint(x: 10.29, y: 15.71))
        status_completePath.close()
        status_completePath.usesEvenOddFillRule = true
        StyleKit_Metro.ui_green.setFill()
        status_completePath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDownload_failed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// status_failed Drawing
        let status_failedPath = UIBezierPath()
        status_failedPath.move(to: CGPoint(x: 12, y: 24))
        status_failedPath.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
        status_failedPath.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        status_failedPath.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
        status_failedPath.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
        status_failedPath.close()
        status_failedPath.move(to: CGPoint(x: 12, y: 6))
        status_failedPath.addLine(to: CGPoint(x: 12, y: 6))
        status_failedPath.addCurve(to: CGPoint(x: 10.78, y: 7.22), controlPoint1: CGPoint(x: 11.33, y: 6), controlPoint2: CGPoint(x: 10.78, y: 6.55))
        status_failedPath.addCurve(to: CGPoint(x: 10.78, y: 7.31), controlPoint1: CGPoint(x: 10.78, y: 7.25), controlPoint2: CGPoint(x: 10.78, y: 7.28))
        status_failedPath.addLine(to: CGPoint(x: 11.15, y: 13.2))
        status_failedPath.addLine(to: CGPoint(x: 11.15, y: 13.2))
        status_failedPath.addCurve(to: CGPoint(x: 12.06, y: 13.99), controlPoint1: CGPoint(x: 11.18, y: 13.67), controlPoint2: CGPoint(x: 11.59, y: 14.02))
        status_failedPath.addCurve(to: CGPoint(x: 12.85, y: 13.21), controlPoint1: CGPoint(x: 12.48, y: 13.96), controlPoint2: CGPoint(x: 12.81, y: 13.63))
        status_failedPath.addLine(to: CGPoint(x: 13.22, y: 7.3))
        status_failedPath.addLine(to: CGPoint(x: 13.22, y: 7.31))
        status_failedPath.addCurve(to: CGPoint(x: 12.09, y: 6), controlPoint1: CGPoint(x: 13.27, y: 6.63), controlPoint2: CGPoint(x: 12.76, y: 6.05))
        status_failedPath.addCurve(to: CGPoint(x: 12, y: 6), controlPoint1: CGPoint(x: 12.06, y: 6), controlPoint2: CGPoint(x: 12.03, y: 6))
        status_failedPath.close()
        status_failedPath.move(to: CGPoint(x: 12, y: 16))
        status_failedPath.addCurve(to: CGPoint(x: 11, y: 16.98), controlPoint1: CGPoint(x: 11.45, y: 16), controlPoint2: CGPoint(x: 11, y: 16.44))
        status_failedPath.addLine(to: CGPoint(x: 11, y: 17.02))
        status_failedPath.addCurve(to: CGPoint(x: 12, y: 18), controlPoint1: CGPoint(x: 11, y: 17.56), controlPoint2: CGPoint(x: 11.44, y: 18))
        status_failedPath.addCurve(to: CGPoint(x: 13, y: 17.02), controlPoint1: CGPoint(x: 12.55, y: 18), controlPoint2: CGPoint(x: 13, y: 17.56))
        status_failedPath.addLine(to: CGPoint(x: 13, y: 16.98))
        status_failedPath.addLine(to: CGPoint(x: 13, y: 16.97))
        status_failedPath.addCurve(to: CGPoint(x: 12, y: 16), controlPoint1: CGPoint(x: 12.99, y: 16.42), controlPoint2: CGPoint(x: 12.54, y: 15.99))
        status_failedPath.addLine(to: CGPoint(x: 12, y: 16))
        status_failedPath.close()
        status_failedPath.usesEvenOddFillRule = true
        StyleKit_Metro.ui_red.setFill()
        status_failedPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHistory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.14, y: 9.86))
        bezierPath.addLine(to: CGPoint(x: 10.6, y: 4.53))
        bezierPath.addLine(to: CGPoint(x: 10.6, y: 4.53))
        bezierPath.addCurve(to: CGPoint(x: 10.31, y: 4.27), controlPoint1: CGPoint(x: 10.58, y: 4.38), controlPoint2: CGPoint(x: 10.46, y: 4.27))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 4.27))
        bezierPath.addLine(to: CGPoint(x: 9.69, y: 4.27))
        bezierPath.addCurve(to: CGPoint(x: 9.4, y: 4.53), controlPoint1: CGPoint(x: 9.54, y: 4.27), controlPoint2: CGPoint(x: 9.42, y: 4.38))
        bezierPath.addLine(to: CGPoint(x: 8.86, y: 10.49))
        bezierPath.addLine(to: CGPoint(x: 8.87, y: 10.49))
        bezierPath.addCurve(to: CGPoint(x: 9.6, y: 11.66), controlPoint1: CGPoint(x: 8.82, y: 10.99), controlPoint2: CGPoint(x: 9.11, y: 11.47))
        bezierPath.addLine(to: CGPoint(x: 13.95, y: 13.36))
        bezierPath.addLine(to: CGPoint(x: 13.95, y: 13.36))
        bezierPath.addCurve(to: CGPoint(x: 14.38, y: 13.2), controlPoint1: CGPoint(x: 14.11, y: 13.42), controlPoint2: CGPoint(x: 14.3, y: 13.35))
        bezierPath.addLine(to: CGPoint(x: 14.71, y: 12.58))
        bezierPath.addLine(to: CGPoint(x: 14.7, y: 12.58))
        bezierPath.addCurve(to: CGPoint(x: 14.59, y: 12.13), controlPoint1: CGPoint(x: 14.79, y: 12.42), controlPoint2: CGPoint(x: 14.74, y: 12.23))
        bezierPath.addLine(to: CGPoint(x: 11.14, y: 9.86))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInfo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11, y: 10))
        bezierPath.addLine(to: CGPoint(x: 11, y: 10))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 9), controlPoint1: CGPoint(x: 11, y: 9.45), controlPoint2: CGPoint(x: 10.55, y: 9))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 10), controlPoint1: CGPoint(x: 8.45, y: 9), controlPoint2: CGPoint(x: 8, y: 9.45))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 11), controlPoint1: CGPoint(x: 8, y: 10.55), controlPoint2: CGPoint(x: 8.45, y: 11))
        bezierPath.addLine(to: CGPoint(x: 9, y: 14))
        bezierPath.addLine(to: CGPoint(x: 9, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 15), controlPoint1: CGPoint(x: 9, y: 14.55), controlPoint2: CGPoint(x: 9.45, y: 15))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 14), controlPoint1: CGPoint(x: 10.55, y: 15), controlPoint2: CGPoint(x: 11, y: 14.55))
        bezierPath.addLine(to: CGPoint(x: 11, y: 10))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10, y: 18))
        bezierPath.addLine(to: CGPoint(x: 10, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10), controlPoint1: CGPoint(x: 5.58, y: 18), controlPoint2: CGPoint(x: 2, y: 14.42))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 2), controlPoint1: CGPoint(x: 2, y: 5.58), controlPoint2: CGPoint(x: 5.58, y: 2))
        bezierPath.addLine(to: CGPoint(x: 10, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 14.42, y: 2), controlPoint2: CGPoint(x: 18, y: 5.58))
        bezierPath.addCurve(to: CGPoint(x: 10, y: 18), controlPoint1: CGPoint(x: 18, y: 14.42), controlPoint2: CGPoint(x: 14.42, y: 18))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.5, y: 8))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 11, y: 6.5), controlPoint1: CGPoint(x: 10.33, y: 8), controlPoint2: CGPoint(x: 11, y: 7.33))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 5), controlPoint1: CGPoint(x: 11, y: 5.67), controlPoint2: CGPoint(x: 10.33, y: 5))
        bezierPath.addLine(to: CGPoint(x: 9.5, y: 5))
        bezierPath.addCurve(to: CGPoint(x: 8, y: 6.5), controlPoint1: CGPoint(x: 8.67, y: 5), controlPoint2: CGPoint(x: 8, y: 5.67))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 8), controlPoint1: CGPoint(x: 8, y: 7.33), controlPoint2: CGPoint(x: 8.67, y: 8))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.ui_blue.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMy_location(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.46, y: 8.88))
        bezierPath.addCurve(to: CGPoint(x: 2.65, y: 10.39), controlPoint1: CGPoint(x: 1.76, y: 9.21), controlPoint2: CGPoint(x: 1.89, y: 10.24))
        bezierPath.addLine(to: CGPoint(x: 8.56, y: 11.44))
        bezierPath.addLine(to: CGPoint(x: 9.61, y: 17.35))
        bezierPath.addCurve(to: CGPoint(x: 11.12, y: 17.54), controlPoint1: CGPoint(x: 9.75, y: 18.11), controlPoint2: CGPoint(x: 10.79, y: 18.24))
        bezierPath.addLine(to: CGPoint(x: 17.92, y: 3.14))
        bezierPath.addCurve(to: CGPoint(x: 16.86, y: 2.08), controlPoint1: CGPoint(x: 18.24, y: 2.47), controlPoint2: CGPoint(x: 17.53, y: 1.76))
        bezierPath.addLine(to: CGPoint(x: 2.46, y: 8.88))
        bezierPath.close()
        StyleKit_Metro.grey80.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIcon_check(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 4.29, y: 13.71))
        bezierPath.addLine(to: CGPoint(x: 4.29, y: 13.71))
        bezierPath.addCurve(to: CGPoint(x: 5.71, y: 13.71), controlPoint1: CGPoint(x: 4.68, y: 14.1), controlPoint2: CGPoint(x: 5.32, y: 14.1))
        bezierPath.addLine(to: CGPoint(x: 15.71, y: 3.71))
        bezierPath.addLine(to: CGPoint(x: 15.71, y: 3.71))
        bezierPath.addCurve(to: CGPoint(x: 15.73, y: 2.29), controlPoint1: CGPoint(x: 16.1, y: 3.32), controlPoint2: CGPoint(x: 16.12, y: 2.69))
        bezierPath.addCurve(to: CGPoint(x: 14.32, y: 2.27), controlPoint1: CGPoint(x: 15.35, y: 1.9), controlPoint2: CGPoint(x: 14.71, y: 1.88))
        bezierPath.addCurve(to: CGPoint(x: 14.29, y: 2.29), controlPoint1: CGPoint(x: 14.31, y: 2.28), controlPoint2: CGPoint(x: 14.3, y: 2.28))
        bezierPath.addLine(to: CGPoint(x: 5, y: 11.6))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 8.29))
        bezierPath.addLine(to: CGPoint(x: 1.71, y: 8.29))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 8.29), controlPoint1: CGPoint(x: 1.32, y: 7.9), controlPoint2: CGPoint(x: 0.68, y: 7.9))
        bezierPath.addCurve(to: CGPoint(x: 0.29, y: 9.71), controlPoint1: CGPoint(x: -0.1, y: 8.68), controlPoint2: CGPoint(x: -0.1, y: 9.32))
        bezierPath.addLine(to: CGPoint(x: 4.29, y: 13.71))
        bezierPath.addLine(to: CGPoint(x: 4.29, y: 13.71))
        bezierPath.close()
        StyleKit_Metro.ui_goldenrod.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDownload_stop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 14.29, y: 8.29))
        bezier2Path.addLine(to: CGPoint(x: 14.29, y: 8.29))
        bezier2Path.addCurve(to: CGPoint(x: 15.71, y: 8.32), controlPoint1: CGPoint(x: 14.69, y: 7.91), controlPoint2: CGPoint(x: 15.32, y: 7.92))
        bezier2Path.addCurve(to: CGPoint(x: 15.71, y: 9.71), controlPoint1: CGPoint(x: 16.08, y: 8.71), controlPoint2: CGPoint(x: 16.08, y: 9.32))
        bezier2Path.addLine(to: CGPoint(x: 13.41, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 15.71, y: 14.29))
        bezier2Path.addLine(to: CGPoint(x: 15.71, y: 14.29))
        bezier2Path.addCurve(to: CGPoint(x: 15.68, y: 15.71), controlPoint1: CGPoint(x: 16.09, y: 14.69), controlPoint2: CGPoint(x: 16.08, y: 15.32))
        bezier2Path.addCurve(to: CGPoint(x: 14.29, y: 15.71), controlPoint1: CGPoint(x: 15.29, y: 16.08), controlPoint2: CGPoint(x: 14.68, y: 16.08))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 13.41))
        bezier2Path.addLine(to: CGPoint(x: 9.71, y: 15.71))
        bezier2Path.addLine(to: CGPoint(x: 9.71, y: 15.71))
        bezier2Path.addCurve(to: CGPoint(x: 8.29, y: 15.73), controlPoint1: CGPoint(x: 9.32, y: 16.1), controlPoint2: CGPoint(x: 8.69, y: 16.12))
        bezier2Path.addCurve(to: CGPoint(x: 8.27, y: 14.32), controlPoint1: CGPoint(x: 7.9, y: 15.35), controlPoint2: CGPoint(x: 7.88, y: 14.71))
        bezier2Path.addCurve(to: CGPoint(x: 8.29, y: 14.29), controlPoint1: CGPoint(x: 8.28, y: 14.31), controlPoint2: CGPoint(x: 8.28, y: 14.3))
        bezier2Path.addLine(to: CGPoint(x: 10.59, y: 12))
        bezier2Path.addLine(to: CGPoint(x: 8.29, y: 9.71))
        bezier2Path.addLine(to: CGPoint(x: 8.29, y: 9.71))
        bezier2Path.addCurve(to: CGPoint(x: 8.32, y: 8.29), controlPoint1: CGPoint(x: 7.91, y: 9.31), controlPoint2: CGPoint(x: 7.92, y: 8.68))
        bezier2Path.addCurve(to: CGPoint(x: 9.71, y: 8.29), controlPoint1: CGPoint(x: 8.71, y: 7.92), controlPoint2: CGPoint(x: 9.32, y: 7.92))
        bezier2Path.addLine(to: CGPoint(x: 12, y: 10.59))
        bezier2Path.addLine(to: CGPoint(x: 14.29, y: 8.29))
        bezier2Path.close()
        StyleKit_Metro.grey60.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIcon_pass_podorozhnik(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 1.99))
        bezierPath.addCurve(to: CGPoint(x: 1.99, y: 0), controlPoint1: CGPoint(x: 0, y: 0.89), controlPoint2: CGPoint(x: 0.9, y: 0))
        bezierPath.addLine(to: CGPoint(x: 26.01, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 1.99), controlPoint1: CGPoint(x: 27.11, y: 0), controlPoint2: CGPoint(x: 28, y: 0.9))
        bezierPath.addLine(to: CGPoint(x: 28, y: 18.01))
        bezierPath.addCurve(to: CGPoint(x: 26.01, y: 20), controlPoint1: CGPoint(x: 28, y: 19.11), controlPoint2: CGPoint(x: 27.1, y: 20))
        bezierPath.addLine(to: CGPoint(x: 1.99, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18.01), controlPoint1: CGPoint(x: 0.89, y: 20), controlPoint2: CGPoint(x: 0, y: 19.1))
        bezierPath.addLine(to: CGPoint(x: 0, y: 1.99))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.ui_green.setFill()
        bezierPath.fill()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 8, y: 10)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -3, y: -3, width: 6, height: 6))
        StyleKit_Metro.ui_red.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 14.29, y: 6.29))
        bezier2Path.addLine(to: CGPoint(x: 14.3, y: 6.29))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 6), controlPoint1: CGPoint(x: 14.48, y: 6.1), controlPoint2: CGPoint(x: 14.74, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 21, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 21.01, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 22, y: 6.99), controlPoint1: CGPoint(x: 21.56, y: 6), controlPoint2: CGPoint(x: 22, y: 6.44))
        bezier2Path.addLine(to: CGPoint(x: 22, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 21, y: 14), controlPoint1: CGPoint(x: 22, y: 13.55), controlPoint2: CGPoint(x: 21.56, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: 13), controlPoint1: CGPoint(x: 20.45, y: 14), controlPoint2: CGPoint(x: 20, y: 13.55))
        bezier2Path.addLine(to: CGPoint(x: 20, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 15, y: 14), controlPoint1: CGPoint(x: 16, y: 13.55), controlPoint2: CGPoint(x: 15.56, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 14, y: 13), controlPoint1: CGPoint(x: 14.45, y: 14), controlPoint2: CGPoint(x: 14, y: 13.55))
        bezier2Path.addLine(to: CGPoint(x: 14, y: 7))
        bezier2Path.addCurve(to: CGPoint(x: 14.29, y: 6.29), controlPoint1: CGPoint(x: 14, y: 6.72), controlPoint2: CGPoint(x: 14.11, y: 6.47))
        bezier2Path.addLine(to: CGPoint(x: 14.29, y: 6.29))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIcon_pass_strelka(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 0))
        bezierPath.addLine(to: CGPoint(x: 26, y: 0))
        bezierPath.addLine(to: CGPoint(x: 26, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 2), controlPoint1: CGPoint(x: 27.1, y: 0), controlPoint2: CGPoint(x: 28, y: 0.9))
        bezierPath.addLine(to: CGPoint(x: 28, y: 18))
        bezierPath.addLine(to: CGPoint(x: 28, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 20), controlPoint1: CGPoint(x: 28, y: 19.1), controlPoint2: CGPoint(x: 27.1, y: 20))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0.9, y: 20), controlPoint2: CGPoint(x: 0, y: 19.1))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_deep_blue.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 7, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 8.66, y: 6.75), controlPoint1: CGPoint(x: 7.55, y: 6), controlPoint2: CGPoint(x: 8.3, y: 6.34))
        bezier2Path.addLine(to: CGPoint(x: 10.18, y: 8.49))
        bezier2Path.addCurve(to: CGPoint(x: 10.18, y: 11.51), controlPoint1: CGPoint(x: 10.91, y: 9.32), controlPoint2: CGPoint(x: 10.91, y: 10.68))
        bezier2Path.addLine(to: CGPoint(x: 8.66, y: 13.25))
        bezier2Path.addCurve(to: CGPoint(x: 7, y: 14), controlPoint1: CGPoint(x: 8.29, y: 13.66), controlPoint2: CGPoint(x: 7.55, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 14))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 6))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.ui_red.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 20, y: 12))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 12))
        bezier3Path.addCurve(to: CGPoint(x: 22, y: 10), controlPoint1: CGPoint(x: 21.1, y: 12), controlPoint2: CGPoint(x: 22, y: 11.1))
        bezier3Path.addCurve(to: CGPoint(x: 20, y: 8), controlPoint1: CGPoint(x: 22, y: 8.9), controlPoint2: CGPoint(x: 21.1, y: 8))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 8))
        bezier3Path.addCurve(to: CGPoint(x: 18, y: 10), controlPoint1: CGPoint(x: 18.9, y: 8), controlPoint2: CGPoint(x: 18, y: 8.9))
        bezier3Path.addCurve(to: CGPoint(x: 20, y: 12), controlPoint1: CGPoint(x: 18, y: 11.1), controlPoint2: CGPoint(x: 18.9, y: 12))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 20, y: 14))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 14))
        bezier3Path.addCurve(to: CGPoint(x: 16, y: 10), controlPoint1: CGPoint(x: 17.79, y: 14), controlPoint2: CGPoint(x: 16, y: 12.21))
        bezier3Path.addCurve(to: CGPoint(x: 20, y: 6), controlPoint1: CGPoint(x: 16, y: 7.79), controlPoint2: CGPoint(x: 17.79, y: 6))
        bezier3Path.addLine(to: CGPoint(x: 20, y: 6))
        bezier3Path.addCurve(to: CGPoint(x: 24, y: 10), controlPoint1: CGPoint(x: 22.21, y: 6), controlPoint2: CGPoint(x: 24, y: 7.79))
        bezier3Path.addCurve(to: CGPoint(x: 20, y: 14), controlPoint1: CGPoint(x: 24, y: 12.21), controlPoint2: CGPoint(x: 22.21, y: 14))
        bezier3Path.close()
        StyleKit_Metro.white100.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIcon_pass_troyka(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 20)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 0))
        bezierPath.addLine(to: CGPoint(x: 26, y: 0))
        bezierPath.addLine(to: CGPoint(x: 26, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 2), controlPoint1: CGPoint(x: 27.1, y: 0), controlPoint2: CGPoint(x: 28, y: 0.9))
        bezierPath.addLine(to: CGPoint(x: 28, y: 18))
        bezierPath.addLine(to: CGPoint(x: 28, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 20), controlPoint1: CGPoint(x: 28, y: 19.1), controlPoint2: CGPoint(x: 27.1, y: 20))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 18), controlPoint1: CGPoint(x: 0.9, y: 20), controlPoint2: CGPoint(x: 0, y: 19.1))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2))
        bezierPath.addLine(to: CGPoint(x: 0, y: 2))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.transit_blue_night.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 15, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 13))
        bezier2Path.addCurve(to: CGPoint(x: 14, y: 14), controlPoint1: CGPoint(x: 15, y: 13.55), controlPoint2: CGPoint(x: 14.56, y: 14))
        bezier2Path.addCurve(to: CGPoint(x: 13, y: 13), controlPoint1: CGPoint(x: 13.45, y: 14), controlPoint2: CGPoint(x: 13, y: 13.55))
        bezier2Path.addLine(to: CGPoint(x: 13, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 11, y: 8))
        bezier2Path.addCurve(to: CGPoint(x: 10, y: 7), controlPoint1: CGPoint(x: 10.45, y: 8), controlPoint2: CGPoint(x: 10, y: 7.55))
        bezier2Path.addCurve(to: CGPoint(x: 11, y: 6), controlPoint1: CGPoint(x: 10, y: 6.45), controlPoint2: CGPoint(x: 10.45, y: 6))
        bezier2Path.addLine(to: CGPoint(x: 17, y: 6))
        bezier2Path.addCurve(to: CGPoint(x: 18, y: 7), controlPoint1: CGPoint(x: 17.55, y: 6), controlPoint2: CGPoint(x: 18, y: 6.44))
        bezier2Path.addCurve(to: CGPoint(x: 17, y: 8), controlPoint1: CGPoint(x: 18, y: 7.55), controlPoint2: CGPoint(x: 17.55, y: 8))
        bezier2Path.addLine(to: CGPoint(x: 15, y: 8))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit_Metro.white100.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTransit_pedestrian(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 16, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 16, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 16, y: resizedFrame.height / 16)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.52, y: 7.63))
        bezierPath.addCurve(to: CGPoint(x: 11.6, y: 8.29), controlPoint1: CGPoint(x: 11.72, y: 7.79), controlPoint2: CGPoint(x: 11.76, y: 8.09))
        bezierPath.addCurve(to: CGPoint(x: 10.97, y: 8.38), controlPoint1: CGPoint(x: 11.45, y: 8.49), controlPoint2: CGPoint(x: 11.17, y: 8.52))
        bezierPath.addLine(to: CGPoint(x: 9.39, y: 7.23))
        bezierPath.addCurve(to: CGPoint(x: 9.43, y: 7), controlPoint1: CGPoint(x: 9.4, y: 7.15), controlPoint2: CGPoint(x: 9.42, y: 7.08))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 6.57), controlPoint1: CGPoint(x: 9.45, y: 6.86), controlPoint2: CGPoint(x: 9.48, y: 6.72))
        bezierPath.addLine(to: CGPoint(x: 9.52, y: 6.46))
        bezierPath.addLine(to: CGPoint(x: 9.53, y: 6.28))
        bezierPath.addLine(to: CGPoint(x: 9.55, y: 6.06))
        bezierPath.addCurve(to: CGPoint(x: 9.57, y: 5.86), controlPoint1: CGPoint(x: 9.56, y: 5.99), controlPoint2: CGPoint(x: 9.56, y: 5.93))
        bezierPath.addLine(to: CGPoint(x: 11.52, y: 7.63))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.18, y: 10.61))
        bezierPath.addLine(to: CGPoint(x: 11.22, y: 14.29))
        bezierPath.addCurve(to: CGPoint(x: 10.83, y: 14.98), controlPoint1: CGPoint(x: 11.3, y: 14.58), controlPoint2: CGPoint(x: 11.13, y: 14.89))
        bezierPath.addCurve(to: CGPoint(x: 10.16, y: 14.63), controlPoint1: CGPoint(x: 10.55, y: 15.06), controlPoint2: CGPoint(x: 10.26, y: 14.9))
        bezierPath.addLine(to: CGPoint(x: 8.92, y: 11.2))
        bezierPath.addLine(to: CGPoint(x: 6.84, y: 9.09))
        bezierPath.addCurve(to: CGPoint(x: 6.63, y: 8.37), controlPoint1: CGPoint(x: 6.65, y: 8.9), controlPoint2: CGPoint(x: 6.58, y: 8.64))
        bezierPath.addLine(to: CGPoint(x: 7.07, y: 5.81))
        bezierPath.addLine(to: CGPoint(x: 6.07, y: 6.11))
        bezierPath.addLine(to: CGPoint(x: 5.19, y: 8.18))
        bezierPath.addCurve(to: CGPoint(x: 4.58, y: 8.43), controlPoint1: CGPoint(x: 5.09, y: 8.42), controlPoint2: CGPoint(x: 4.82, y: 8.53))
        bezierPath.addCurve(to: CGPoint(x: 4.33, y: 7.83), controlPoint1: CGPoint(x: 4.35, y: 8.33), controlPoint2: CGPoint(x: 4.24, y: 8.07))
        bezierPath.addLine(to: CGPoint(x: 5.22, y: 5.49))
        bezierPath.addCurve(to: CGPoint(x: 5.45, y: 5.24), controlPoint1: CGPoint(x: 5.26, y: 5.38), controlPoint2: CGPoint(x: 5.35, y: 5.29))
        bezierPath.addLine(to: CGPoint(x: 5.5, y: 5.21))
        bezierPath.addLine(to: CGPoint(x: 7.73, y: 4.06))
        bezierPath.addCurve(to: CGPoint(x: 7.76, y: 4.05), controlPoint1: CGPoint(x: 7.74, y: 4.05), controlPoint2: CGPoint(x: 7.75, y: 4.05))
        bezierPath.addCurve(to: CGPoint(x: 8.2, y: 3.98), controlPoint1: CGPoint(x: 7.89, y: 3.98), controlPoint2: CGPoint(x: 8.04, y: 3.95))
        bezierPath.addCurve(to: CGPoint(x: 8.66, y: 4.31), controlPoint1: CGPoint(x: 8.4, y: 4.02), controlPoint2: CGPoint(x: 8.57, y: 4.13))
        bezierPath.addCurve(to: CGPoint(x: 8.77, y: 4.81), controlPoint1: CGPoint(x: 8.74, y: 4.48), controlPoint2: CGPoint(x: 8.77, y: 4.81))
        bezierPath.addCurve(to: CGPoint(x: 8.85, y: 5.66), controlPoint1: CGPoint(x: 8.82, y: 5.1), controlPoint2: CGPoint(x: 8.82, y: 5.38))
        bezierPath.addCurve(to: CGPoint(x: 8.86, y: 6.5), controlPoint1: CGPoint(x: 8.86, y: 5.94), controlPoint2: CGPoint(x: 8.86, y: 6.22))
        bezierPath.addCurve(to: CGPoint(x: 8.73, y: 8.17), controlPoint1: CGPoint(x: 8.84, y: 7.06), controlPoint2: CGPoint(x: 8.81, y: 7.62))
        bezierPath.addLine(to: CGPoint(x: 8.69, y: 8.49))
        bezierPath.addLine(to: CGPoint(x: 10.05, y: 10.37))
        bezierPath.addLine(to: CGPoint(x: 10.1, y: 10.44))
        bezierPath.addCurve(to: CGPoint(x: 10.18, y: 10.61), controlPoint1: CGPoint(x: 10.14, y: 10.49), controlPoint2: CGPoint(x: 10.16, y: 10.55))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.85, y: 2.17))
        bezierPath.addCurve(to: CGPoint(x: 8.69, y: 3.33), controlPoint1: CGPoint(x: 9.85, y: 2.81), controlPoint2: CGPoint(x: 9.33, y: 3.33))
        bezierPath.addCurve(to: CGPoint(x: 7.54, y: 2.17), controlPoint1: CGPoint(x: 8.06, y: 3.33), controlPoint2: CGPoint(x: 7.54, y: 2.81))
        bezierPath.addCurve(to: CGPoint(x: 8.69, y: 1), controlPoint1: CGPoint(x: 7.54, y: 1.52), controlPoint2: CGPoint(x: 8.06, y: 1))
        bezierPath.addCurve(to: CGPoint(x: 9.85, y: 2.17), controlPoint1: CGPoint(x: 9.33, y: 1), controlPoint2: CGPoint(x: 9.85, y: 1.52))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 7.14, y: 10.34))
        bezierPath.addCurve(to: CGPoint(x: 7.94, y: 11.04), controlPoint1: CGPoint(x: 7.41, y: 10.59), controlPoint2: CGPoint(x: 7.7, y: 10.84))
        bezierPath.addCurve(to: CGPoint(x: 7.66, y: 11.63), controlPoint1: CGPoint(x: 7.84, y: 11.26), controlPoint2: CGPoint(x: 7.66, y: 11.63))
        bezierPath.addLine(to: CGPoint(x: 5.78, y: 14.73))
        bezierPath.addCurve(to: CGPoint(x: 5.02, y: 14.92), controlPoint1: CGPoint(x: 5.62, y: 15), controlPoint2: CGPoint(x: 5.28, y: 15.08))
        bezierPath.addCurve(to: CGPoint(x: 4.82, y: 14.19), controlPoint1: CGPoint(x: 4.77, y: 14.76), controlPoint2: CGPoint(x: 4.69, y: 14.44))
        bezierPath.addLine(to: CGPoint(x: 6.38, y: 11.08))
        bezierPath.addCurve(to: CGPoint(x: 6.46, y: 10.34), controlPoint1: CGPoint(x: 6.41, y: 10.83), controlPoint2: CGPoint(x: 6.43, y: 10.59))
        bezierPath.addLine(to: CGPoint(x: 6.54, y: 9.77))
        bezierPath.addCurve(to: CGPoint(x: 6.64, y: 9.87), controlPoint1: CGPoint(x: 6.58, y: 9.8), controlPoint2: CGPoint(x: 6.61, y: 9.83))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 10.34), controlPoint1: CGPoint(x: 6.8, y: 10.02), controlPoint2: CGPoint(x: 6.97, y: 10.18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey40.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRound_close(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// a Drawing
        let aPath = UIBezierPath()
        aPath.move(to: CGPoint(x: 13.41, y: 12))
        aPath.addLine(to: CGPoint(x: 16.71, y: 8.71))
        aPath.addLine(to: CGPoint(x: 16.71, y: 8.71))
        aPath.addCurve(to: CGPoint(x: 16.73, y: 7.29), controlPoint1: CGPoint(x: 17.1, y: 8.32), controlPoint2: CGPoint(x: 17.12, y: 7.69))
        aPath.addCurve(to: CGPoint(x: 15.32, y: 7.27), controlPoint1: CGPoint(x: 16.35, y: 6.9), controlPoint2: CGPoint(x: 15.71, y: 6.88))
        aPath.addCurve(to: CGPoint(x: 15.29, y: 7.29), controlPoint1: CGPoint(x: 15.31, y: 7.28), controlPoint2: CGPoint(x: 15.3, y: 7.28))
        aPath.addLine(to: CGPoint(x: 12, y: 10.59))
        aPath.addLine(to: CGPoint(x: 8.71, y: 7.29))
        aPath.addLine(to: CGPoint(x: 8.71, y: 7.29))
        aPath.addCurve(to: CGPoint(x: 7.29, y: 7.32), controlPoint1: CGPoint(x: 8.31, y: 6.91), controlPoint2: CGPoint(x: 7.68, y: 6.92))
        aPath.addCurve(to: CGPoint(x: 7.29, y: 8.71), controlPoint1: CGPoint(x: 6.92, y: 7.71), controlPoint2: CGPoint(x: 6.92, y: 8.32))
        aPath.addLine(to: CGPoint(x: 10.59, y: 12))
        aPath.addLine(to: CGPoint(x: 7.29, y: 15.29))
        aPath.addLine(to: CGPoint(x: 7.29, y: 15.29))
        aPath.addCurve(to: CGPoint(x: 7.32, y: 16.71), controlPoint1: CGPoint(x: 6.91, y: 15.69), controlPoint2: CGPoint(x: 6.92, y: 16.32))
        aPath.addCurve(to: CGPoint(x: 8.71, y: 16.71), controlPoint1: CGPoint(x: 7.71, y: 17.08), controlPoint2: CGPoint(x: 8.32, y: 17.08))
        aPath.addLine(to: CGPoint(x: 12, y: 13.41))
        aPath.addLine(to: CGPoint(x: 15.29, y: 16.71))
        aPath.addLine(to: CGPoint(x: 15.29, y: 16.71))
        aPath.addCurve(to: CGPoint(x: 16.71, y: 16.68), controlPoint1: CGPoint(x: 15.69, y: 17.09), controlPoint2: CGPoint(x: 16.32, y: 17.08))
        aPath.addCurve(to: CGPoint(x: 16.71, y: 15.29), controlPoint1: CGPoint(x: 17.08, y: 16.29), controlPoint2: CGPoint(x: 17.08, y: 15.68))
        aPath.addLine(to: CGPoint(x: 13.41, y: 12))
        aPath.close()
        aPath.move(to: CGPoint(x: 12, y: 0))
        aPath.addCurve(to: CGPoint(x: 24, y: 12), controlPoint1: CGPoint(x: 18.63, y: 0), controlPoint2: CGPoint(x: 24, y: 5.37))
        aPath.addCurve(to: CGPoint(x: 12, y: 24), controlPoint1: CGPoint(x: 24, y: 18.63), controlPoint2: CGPoint(x: 18.63, y: 24))
        aPath.addCurve(to: CGPoint(x: 0, y: 12), controlPoint1: CGPoint(x: 5.37, y: 24), controlPoint2: CGPoint(x: 0, y: 18.63))
        aPath.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 0, y: 5.37), controlPoint2: CGPoint(x: 5.37, y: 0))
        aPath.close()
        aPath.usesEvenOddFillRule = true
        StyleKit_Metro.grey80.setFill()
        aPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfMap_controls_menu: UIImage {
        if Cache.imageOfMap_controls_menu != nil {
            return Cache.imageOfMap_controls_menu!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawMap_controls_menu()

        Cache.imageOfMap_controls_menu = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMap_controls_menu!
    }

    @objc dynamic public class var imageOfSwitch_cells: UIImage {
        if Cache.imageOfSwitch_cells != nil {
            return Cache.imageOfSwitch_cells!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            StyleKit_Metro.drawSwitch_cells()

        Cache.imageOfSwitch_cells = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSwitch_cells!
    }

    @objc dynamic public class var imageOfClear_input: UIImage {
        if Cache.imageOfClear_input != nil {
            return Cache.imageOfClear_input!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            StyleKit_Metro.drawClear_input()

        Cache.imageOfClear_input = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfClear_input!
    }

    @objc dynamic public class var imageOfPopup_to: UIImage {
        if Cache.imageOfPopup_to != nil {
            return Cache.imageOfPopup_to!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawPopup_to()

        Cache.imageOfPopup_to = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPopup_to!
    }

    @objc dynamic public class var imageOfPopup_from: UIImage {
        if Cache.imageOfPopup_from != nil {
            return Cache.imageOfPopup_from!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawPopup_from()

        Cache.imageOfPopup_from = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPopup_from!
    }

    @objc dynamic public class var imageOfNavbar_arrow_back_android: UIImage {
        if Cache.imageOfNavbar_arrow_back_android != nil {
            return Cache.imageOfNavbar_arrow_back_android!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawNavbar_arrow_back_android()

        Cache.imageOfNavbar_arrow_back_android = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNavbar_arrow_back_android!
    }

    @objc dynamic public class var imageOfNavbar_close_android: UIImage {
        if Cache.imageOfNavbar_close_android != nil {
            return Cache.imageOfNavbar_close_android!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawNavbar_close_android()

        Cache.imageOfNavbar_close_android = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfNavbar_close_android!
    }

    @objc dynamic public class var imageOfDisclosure_indicator: UIImage {
        if Cache.imageOfDisclosure_indicator != nil {
            return Cache.imageOfDisclosure_indicator!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            StyleKit_Metro.drawDisclosure_indicator()

        Cache.imageOfDisclosure_indicator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDisclosure_indicator!
    }

    @objc dynamic public class var imageOfIcon_clear_field: UIImage {
        if Cache.imageOfIcon_clear_field != nil {
            return Cache.imageOfIcon_clear_field!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            StyleKit_Metro.drawIcon_clear_field()

        Cache.imageOfIcon_clear_field = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_clear_field!
    }

    @objc dynamic public class var imageOfShadow_navigation_bar: UIImage {
        if Cache.imageOfShadow_navigation_bar != nil {
            return Cache.imageOfShadow_navigation_bar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1, height: 4), false, 0)
            StyleKit_Metro.drawShadow_navigation_bar()

        Cache.imageOfShadow_navigation_bar = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfShadow_navigation_bar!
    }

    @objc dynamic public class var imageOfArrow_down: UIImage {
        if Cache.imageOfArrow_down != nil {
            return Cache.imageOfArrow_down!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 8), false, 0)
            StyleKit_Metro.drawArrow_down()

        Cache.imageOfArrow_down = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrow_down!
    }

    @objc dynamic public class var imageOfArrow_right: UIImage {
        if Cache.imageOfArrow_right != nil {
            return Cache.imageOfArrow_right!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 8), false, 0)
            StyleKit_Metro.drawArrow_right()

        Cache.imageOfArrow_right = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrow_right!
    }

    @objc dynamic public class var imageOfArrow_up: UIImage {
        if Cache.imageOfArrow_up != nil {
            return Cache.imageOfArrow_up!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 8), false, 0)
            StyleKit_Metro.drawArrow_up()

        Cache.imageOfArrow_up = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrow_up!
    }

    @objc dynamic public class var imageOfArrow_left: UIImage {
        if Cache.imageOfArrow_left != nil {
            return Cache.imageOfArrow_left!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8, height: 8), false, 0)
            StyleKit_Metro.drawArrow_left()

        Cache.imageOfArrow_left = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfArrow_left!
    }

    @objc dynamic public class var imageOfMap_placemark_ghost: UIImage {
        if Cache.imageOfMap_placemark_ghost != nil {
            return Cache.imageOfMap_placemark_ghost!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            StyleKit_Metro.drawMap_placemark_ghost()

        Cache.imageOfMap_placemark_ghost = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfMap_placemark_ghost!
    }

    @objc dynamic public class var imageOfMap_placemark_dot: UIImage {
        if Cache.imageOfMap_placemark_dot != nil {
            return Cache.imageOfMap_placemark_dot!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 32), false, 0)
            StyleKit_Metro.drawMap_placemark_dot()

        Cache.imageOfMap_placemark_dot = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfMap_placemark_dot!
    }

    @objc dynamic public class var imageOfPin_mask_0: UIImage {
        if Cache.imageOfPin_mask_0 != nil {
            return Cache.imageOfPin_mask_0!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_mask_0()

        Cache.imageOfPin_mask_0 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_mask_0!
    }

    @objc dynamic public class var imageOfPin_mask_90: UIImage {
        if Cache.imageOfPin_mask_90 != nil {
            return Cache.imageOfPin_mask_90!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_mask_90()

        Cache.imageOfPin_mask_90 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_mask_90!
    }

    @objc dynamic public class var imageOfPin_mask_180: UIImage {
        if Cache.imageOfPin_mask_180 != nil {
            return Cache.imageOfPin_mask_180!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_mask_180()

        Cache.imageOfPin_mask_180 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_mask_180!
    }

    @objc dynamic public class var imageOfPin_mask_270: UIImage {
        if Cache.imageOfPin_mask_270 != nil {
            return Cache.imageOfPin_mask_270!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_mask_270()

        Cache.imageOfPin_mask_270 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_mask_270!
    }

    @objc dynamic public class var imageOfPin_shadow_0: UIImage {
        if Cache.imageOfPin_shadow_0 != nil {
            return Cache.imageOfPin_shadow_0!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_shadow_0()

        Cache.imageOfPin_shadow_0 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_shadow_0!
    }

    @objc dynamic public class var imageOfPin_shadow_90: UIImage {
        if Cache.imageOfPin_shadow_90 != nil {
            return Cache.imageOfPin_shadow_90!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_shadow_90()

        Cache.imageOfPin_shadow_90 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_shadow_90!
    }

    @objc dynamic public class var imageOfPin_shadow_180: UIImage {
        if Cache.imageOfPin_shadow_180 != nil {
            return Cache.imageOfPin_shadow_180!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_shadow_180()

        Cache.imageOfPin_shadow_180 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_shadow_180!
    }

    @objc dynamic public class var imageOfPin_shadow_270: UIImage {
        if Cache.imageOfPin_shadow_270 != nil {
            return Cache.imageOfPin_shadow_270!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_shadow_270()

        Cache.imageOfPin_shadow_270 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_shadow_270!
    }

    @objc dynamic public class var imageOfPin_a: UIImage {
        if Cache.imageOfPin_a != nil {
            return Cache.imageOfPin_a!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_a()

        Cache.imageOfPin_a = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_a!
    }

    @objc dynamic public class var imageOfPin_b: UIImage {
        if Cache.imageOfPin_b != nil {
            return Cache.imageOfPin_b!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_b()

        Cache.imageOfPin_b = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_b!
    }

    @objc dynamic public class var imageOfPin_dot: UIImage {
        if Cache.imageOfPin_dot != nil {
            return Cache.imageOfPin_dot!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit_Metro.drawPin_dot()

        Cache.imageOfPin_dot = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPin_dot!
    }

    @objc dynamic public class var imageOfSubway_helsinki_20: UIImage {
        if Cache.imageOfSubway_helsinki_20 != nil {
            return Cache.imageOfSubway_helsinki_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_helsinki_20()

        Cache.imageOfSubway_helsinki_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_helsinki_20!
    }

    @objc dynamic public class var imageOfSubway_ekb_20: UIImage {
        if Cache.imageOfSubway_ekb_20 != nil {
            return Cache.imageOfSubway_ekb_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_ekb_20()

        Cache.imageOfSubway_ekb_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_ekb_20!
    }

    @objc dynamic public class var imageOfSubwaybus_istanbul_20: UIImage {
        if Cache.imageOfSubwaybus_istanbul_20 != nil {
            return Cache.imageOfSubwaybus_istanbul_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubwaybus_istanbul_20()

        Cache.imageOfSubwaybus_istanbul_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubwaybus_istanbul_20!
    }

    @objc dynamic public class var imageOfSubway_baku_20: UIImage {
        if Cache.imageOfSubway_baku_20 != nil {
            return Cache.imageOfSubway_baku_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_baku_20()

        Cache.imageOfSubway_baku_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_baku_20!
    }

    @objc dynamic public class var imageOfSubway_nsk_20: UIImage {
        if Cache.imageOfSubway_nsk_20 != nil {
            return Cache.imageOfSubway_nsk_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_nsk_20()

        Cache.imageOfSubway_nsk_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_nsk_20!
    }

    @objc dynamic public class var imageOfSubway_kazan_20: UIImage {
        if Cache.imageOfSubway_kazan_20 != nil {
            return Cache.imageOfSubway_kazan_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_kazan_20()

        Cache.imageOfSubway_kazan_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_kazan_20!
    }

    @objc dynamic public class var imageOfSubway_erevan_20: UIImage {
        if Cache.imageOfSubway_erevan_20 != nil {
            return Cache.imageOfSubway_erevan_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_erevan_20()

        Cache.imageOfSubway_erevan_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_erevan_20!
    }

    @objc dynamic public class var imageOfSubway_london_20: UIImage {
        if Cache.imageOfSubway_london_20 != nil {
            return Cache.imageOfSubway_london_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_london_20()

        Cache.imageOfSubway_london_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_london_20!
    }

    @objc dynamic public class var imageOfSubway_oslo_20: UIImage {
        if Cache.imageOfSubway_oslo_20 != nil {
            return Cache.imageOfSubway_oslo_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_oslo_20()

        Cache.imageOfSubway_oslo_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_oslo_20!
    }

    @objc dynamic public class var imageOfSubway_berlin_sbahn_20: UIImage {
        if Cache.imageOfSubway_berlin_sbahn_20 != nil {
            return Cache.imageOfSubway_berlin_sbahn_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_berlin_sbahn_20()

        Cache.imageOfSubway_berlin_sbahn_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_berlin_sbahn_20!
    }

    @objc dynamic public class var imageOfSubway_spb_20: UIImage {
        if Cache.imageOfSubway_spb_20 != nil {
            return Cache.imageOfSubway_spb_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_spb_20()

        Cache.imageOfSubway_spb_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_spb_20!
    }

    @objc dynamic public class var imageOfSubway_lisboa_20: UIImage {
        if Cache.imageOfSubway_lisboa_20 != nil {
            return Cache.imageOfSubway_lisboa_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_lisboa_20()

        Cache.imageOfSubway_lisboa_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_lisboa_20!
    }

    @objc dynamic public class var imageOfSubway_madrid_20: UIImage {
        if Cache.imageOfSubway_madrid_20 != nil {
            return Cache.imageOfSubway_madrid_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_madrid_20()

        Cache.imageOfSubway_madrid_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_madrid_20!
    }

    @objc dynamic public class var imageOfSubway_Izmir_20: UIImage {
        if Cache.imageOfSubway_Izmir_20 != nil {
            return Cache.imageOfSubway_Izmir_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_Izmir_20()

        Cache.imageOfSubway_Izmir_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_Izmir_20!
    }

    @objc dynamic public class var imageOfSubway_kiev_20: UIImage {
        if Cache.imageOfSubway_kiev_20 != nil {
            return Cache.imageOfSubway_kiev_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_kiev_20()

        Cache.imageOfSubway_kiev_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_kiev_20!
    }

    @objc dynamic public class var imageOfSubway_tram_volgograd_20: UIImage {
        if Cache.imageOfSubway_tram_volgograd_20 != nil {
            return Cache.imageOfSubway_tram_volgograd_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_tram_volgograd_20()

        Cache.imageOfSubway_tram_volgograd_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_tram_volgograd_20!
    }

    @objc dynamic public class var imageOfSubway_paris_20: UIImage {
        if Cache.imageOfSubway_paris_20 != nil {
            return Cache.imageOfSubway_paris_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_paris_20()

        Cache.imageOfSubway_paris_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_paris_20!
    }

    @objc dynamic public class var imageOfSubway_budapest_20: UIImage {
        if Cache.imageOfSubway_budapest_20 != nil {
            return Cache.imageOfSubway_budapest_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_budapest_20()

        Cache.imageOfSubway_budapest_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_budapest_20!
    }

    @objc dynamic public class var imageOfSubway_santiago_20: UIImage {
        if Cache.imageOfSubway_santiago_20 != nil {
            return Cache.imageOfSubway_santiago_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_santiago_20()

        Cache.imageOfSubway_santiago_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_santiago_20!
    }

    @objc dynamic public class var imageOfSubway_istanbul_20: UIImage {
        if Cache.imageOfSubway_istanbul_20 != nil {
            return Cache.imageOfSubway_istanbul_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_istanbul_20()

        Cache.imageOfSubway_istanbul_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_istanbul_20!
    }

    @objc dynamic public class var imageOfSubway_athens_20: UIImage {
        if Cache.imageOfSubway_athens_20 != nil {
            return Cache.imageOfSubway_athens_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_athens_20()

        Cache.imageOfSubway_athens_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_athens_20!
    }

    @objc dynamic public class var imageOfSubway_ankara_20: UIImage {
        if Cache.imageOfSubway_ankara_20 != nil {
            return Cache.imageOfSubway_ankara_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_ankara_20()

        Cache.imageOfSubway_ankara_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_ankara_20!
    }

    @objc dynamic public class var imageOfSubway_tbilisi_20: UIImage {
        if Cache.imageOfSubway_tbilisi_20 != nil {
            return Cache.imageOfSubway_tbilisi_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_tbilisi_20()

        Cache.imageOfSubway_tbilisi_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_tbilisi_20!
    }

    @objc dynamic public class var imageOfSubway_bursa_20: UIImage {
        if Cache.imageOfSubway_bursa_20 != nil {
            return Cache.imageOfSubway_bursa_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_bursa_20()

        Cache.imageOfSubway_bursa_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_bursa_20!
    }

    @objc dynamic public class var imageOfSubway_msk_20: UIImage {
        if Cache.imageOfSubway_msk_20 != nil {
            return Cache.imageOfSubway_msk_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_msk_20()

        Cache.imageOfSubway_msk_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_msk_20!
    }

    @objc dynamic public class var imageOfSubway_stockholm_20: UIImage {
        if Cache.imageOfSubway_stockholm_20 != nil {
            return Cache.imageOfSubway_stockholm_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_stockholm_20()

        Cache.imageOfSubway_stockholm_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_stockholm_20!
    }

    @objc dynamic public class var imageOfSubway_barcelona_20: UIImage {
        if Cache.imageOfSubway_barcelona_20 != nil {
            return Cache.imageOfSubway_barcelona_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_barcelona_20()

        Cache.imageOfSubway_barcelona_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_barcelona_20!
    }

    @objc dynamic public class var imageOfSubway_almaty_20: UIImage {
        if Cache.imageOfSubway_almaty_20 != nil {
            return Cache.imageOfSubway_almaty_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_almaty_20()

        Cache.imageOfSubway_almaty_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_almaty_20!
    }

    @objc dynamic public class var imageOfSubway_roma_20: UIImage {
        if Cache.imageOfSubway_roma_20 != nil {
            return Cache.imageOfSubway_roma_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_roma_20()

        Cache.imageOfSubway_roma_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_roma_20!
    }

    @objc dynamic public class var imageOfSubway_fallback_20: UIImage {
        if Cache.imageOfSubway_fallback_20 != nil {
            return Cache.imageOfSubway_fallback_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_fallback_20()

        Cache.imageOfSubway_fallback_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_fallback_20!
    }

    @objc dynamic public class var imageOfSubway_berlin_20: UIImage {
        if Cache.imageOfSubway_berlin_20 != nil {
            return Cache.imageOfSubway_berlin_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_berlin_20()

        Cache.imageOfSubway_berlin_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_berlin_20!
    }

    @objc dynamic public class var imageOfSubway_kharkov_20: UIImage {
        if Cache.imageOfSubway_kharkov_20 != nil {
            return Cache.imageOfSubway_kharkov_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_kharkov_20()

        Cache.imageOfSubway_kharkov_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_kharkov_20!
    }

    @objc dynamic public class var imageOfSubway_minsk_20: UIImage {
        if Cache.imageOfSubway_minsk_20 != nil {
            return Cache.imageOfSubway_minsk_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_minsk_20()

        Cache.imageOfSubway_minsk_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_minsk_20!
    }

    @objc dynamic public class var imageOfSubway_samara_20: UIImage {
        if Cache.imageOfSubway_samara_20 != nil {
            return Cache.imageOfSubway_samara_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_samara_20()

        Cache.imageOfSubway_samara_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_samara_20!
    }

    @objc dynamic public class var imageOfSubway_wein_20: UIImage {
        if Cache.imageOfSubway_wein_20 != nil {
            return Cache.imageOfSubway_wein_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_wein_20()

        Cache.imageOfSubway_wein_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_wein_20!
    }

    @objc dynamic public class var imageOfSubway_dnepropetrovsk_20: UIImage {
        if Cache.imageOfSubway_dnepropetrovsk_20 != nil {
            return Cache.imageOfSubway_dnepropetrovsk_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_dnepropetrovsk_20()

        Cache.imageOfSubway_dnepropetrovsk_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_dnepropetrovsk_20!
    }

    @objc dynamic public class var imageOfSubway_nn_20: UIImage {
        if Cache.imageOfSubway_nn_20 != nil {
            return Cache.imageOfSubway_nn_20!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_nn_20()

        Cache.imageOfSubway_nn_20 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_nn_20!
    }

    @objc dynamic public class var imageOfSubway_berlin_20_suggest: UIImage {
        if Cache.imageOfSubway_berlin_20_suggest != nil {
            return Cache.imageOfSubway_berlin_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_berlin_20_suggest()

        Cache.imageOfSubway_berlin_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_berlin_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_kharkov_20_suggest: UIImage {
        if Cache.imageOfSubway_kharkov_20_suggest != nil {
            return Cache.imageOfSubway_kharkov_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_kharkov_20_suggest()

        Cache.imageOfSubway_kharkov_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_kharkov_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_fallback_20_suggest: UIImage {
        if Cache.imageOfSubway_fallback_20_suggest != nil {
            return Cache.imageOfSubway_fallback_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_fallback_20_suggest()

        Cache.imageOfSubway_fallback_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_fallback_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_london_20_suggest: UIImage {
        if Cache.imageOfSubway_london_20_suggest != nil {
            return Cache.imageOfSubway_london_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_london_20_suggest()

        Cache.imageOfSubway_london_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_london_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_roma_20_suggest: UIImage {
        if Cache.imageOfSubway_roma_20_suggest != nil {
            return Cache.imageOfSubway_roma_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_roma_20_suggest()

        Cache.imageOfSubway_roma_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_roma_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_oslo_20_suggest: UIImage {
        if Cache.imageOfSubway_oslo_20_suggest != nil {
            return Cache.imageOfSubway_oslo_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_oslo_20_suggest()

        Cache.imageOfSubway_oslo_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_oslo_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_madrid_20_suggest: UIImage {
        if Cache.imageOfSubway_madrid_20_suggest != nil {
            return Cache.imageOfSubway_madrid_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_madrid_20_suggest()

        Cache.imageOfSubway_madrid_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_madrid_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_nn_20_suggest: UIImage {
        if Cache.imageOfSubway_nn_20_suggest != nil {
            return Cache.imageOfSubway_nn_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_nn_20_suggest()

        Cache.imageOfSubway_nn_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_nn_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_helsinki_20_suggest: UIImage {
        if Cache.imageOfSubway_helsinki_20_suggest != nil {
            return Cache.imageOfSubway_helsinki_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_helsinki_20_suggest()

        Cache.imageOfSubway_helsinki_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_helsinki_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_barcelona_20_suggest: UIImage {
        if Cache.imageOfSubway_barcelona_20_suggest != nil {
            return Cache.imageOfSubway_barcelona_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_barcelona_20_suggest()

        Cache.imageOfSubway_barcelona_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_barcelona_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_kiev_20_suggest: UIImage {
        if Cache.imageOfSubway_kiev_20_suggest != nil {
            return Cache.imageOfSubway_kiev_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_kiev_20_suggest()

        Cache.imageOfSubway_kiev_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_kiev_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_baku_20_suggest: UIImage {
        if Cache.imageOfSubway_baku_20_suggest != nil {
            return Cache.imageOfSubway_baku_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_baku_20_suggest()

        Cache.imageOfSubway_baku_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_baku_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_paris_20_suggest: UIImage {
        if Cache.imageOfSubway_paris_20_suggest != nil {
            return Cache.imageOfSubway_paris_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_paris_20_suggest()

        Cache.imageOfSubway_paris_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_paris_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_athens_20_suggest: UIImage {
        if Cache.imageOfSubway_athens_20_suggest != nil {
            return Cache.imageOfSubway_athens_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_athens_20_suggest()

        Cache.imageOfSubway_athens_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_athens_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_bursa_20_suggest: UIImage {
        if Cache.imageOfSubway_bursa_20_suggest != nil {
            return Cache.imageOfSubway_bursa_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_bursa_20_suggest()

        Cache.imageOfSubway_bursa_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_bursa_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_tram_volgograd_20_suggest: UIImage {
        if Cache.imageOfSubway_tram_volgograd_20_suggest != nil {
            return Cache.imageOfSubway_tram_volgograd_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_tram_volgograd_20_suggest()

        Cache.imageOfSubway_tram_volgograd_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_tram_volgograd_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_budapest_20_suggest: UIImage {
        if Cache.imageOfSubway_budapest_20_suggest != nil {
            return Cache.imageOfSubway_budapest_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_budapest_20_suggest()

        Cache.imageOfSubway_budapest_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_budapest_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_nsk_20_suggest: UIImage {
        if Cache.imageOfSubway_nsk_20_suggest != nil {
            return Cache.imageOfSubway_nsk_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_nsk_20_suggest()

        Cache.imageOfSubway_nsk_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_nsk_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_almaty_20_suggest: UIImage {
        if Cache.imageOfSubway_almaty_20_suggest != nil {
            return Cache.imageOfSubway_almaty_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_almaty_20_suggest()

        Cache.imageOfSubway_almaty_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_almaty_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_stockholm_20_suggest: UIImage {
        if Cache.imageOfSubway_stockholm_20_suggest != nil {
            return Cache.imageOfSubway_stockholm_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_stockholm_20_suggest()

        Cache.imageOfSubway_stockholm_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_stockholm_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_istanbul_20_suggest: UIImage {
        if Cache.imageOfSubway_istanbul_20_suggest != nil {
            return Cache.imageOfSubway_istanbul_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_istanbul_20_suggest()

        Cache.imageOfSubway_istanbul_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_istanbul_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_spb_20_suggest: UIImage {
        if Cache.imageOfSubway_spb_20_suggest != nil {
            return Cache.imageOfSubway_spb_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_spb_20_suggest()

        Cache.imageOfSubway_spb_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_spb_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_kazan_20_suggest: UIImage {
        if Cache.imageOfSubway_kazan_20_suggest != nil {
            return Cache.imageOfSubway_kazan_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_kazan_20_suggest()

        Cache.imageOfSubway_kazan_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_kazan_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_Izmir_20_suggest: UIImage {
        if Cache.imageOfSubway_Izmir_20_suggest != nil {
            return Cache.imageOfSubway_Izmir_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_Izmir_20_suggest()

        Cache.imageOfSubway_Izmir_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_Izmir_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_lisboa_20_suggest: UIImage {
        if Cache.imageOfSubway_lisboa_20_suggest != nil {
            return Cache.imageOfSubway_lisboa_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_lisboa_20_suggest()

        Cache.imageOfSubway_lisboa_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_lisboa_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_ekb_20_suggest: UIImage {
        if Cache.imageOfSubway_ekb_20_suggest != nil {
            return Cache.imageOfSubway_ekb_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_ekb_20_suggest()

        Cache.imageOfSubway_ekb_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_ekb_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_berlin_sbahn_20_suggest: UIImage {
        if Cache.imageOfSubway_berlin_sbahn_20_suggest != nil {
            return Cache.imageOfSubway_berlin_sbahn_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_berlin_sbahn_20_suggest()

        Cache.imageOfSubway_berlin_sbahn_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_berlin_sbahn_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_minsk_20_suggest: UIImage {
        if Cache.imageOfSubway_minsk_20_suggest != nil {
            return Cache.imageOfSubway_minsk_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_minsk_20_suggest()

        Cache.imageOfSubway_minsk_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_minsk_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_msk_20_suggest: UIImage {
        if Cache.imageOfSubway_msk_20_suggest != nil {
            return Cache.imageOfSubway_msk_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_msk_20_suggest()

        Cache.imageOfSubway_msk_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_msk_20_suggest!
    }

    @objc dynamic public class var imageOfSubwaybus_istanbul_20_suggest: UIImage {
        if Cache.imageOfSubwaybus_istanbul_20_suggest != nil {
            return Cache.imageOfSubwaybus_istanbul_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubwaybus_istanbul_20_suggest()

        Cache.imageOfSubwaybus_istanbul_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubwaybus_istanbul_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_dnepropetrovsk_20_suggest: UIImage {
        if Cache.imageOfSubway_dnepropetrovsk_20_suggest != nil {
            return Cache.imageOfSubway_dnepropetrovsk_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_dnepropetrovsk_20_suggest()

        Cache.imageOfSubway_dnepropetrovsk_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_dnepropetrovsk_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_tbilisi_20_suggest: UIImage {
        if Cache.imageOfSubway_tbilisi_20_suggest != nil {
            return Cache.imageOfSubway_tbilisi_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_tbilisi_20_suggest()

        Cache.imageOfSubway_tbilisi_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_tbilisi_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_ankara_20_suggest: UIImage {
        if Cache.imageOfSubway_ankara_20_suggest != nil {
            return Cache.imageOfSubway_ankara_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_ankara_20_suggest()

        Cache.imageOfSubway_ankara_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_ankara_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_wein_20_suggest: UIImage {
        if Cache.imageOfSubway_wein_20_suggest != nil {
            return Cache.imageOfSubway_wein_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_wein_20_suggest()

        Cache.imageOfSubway_wein_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_wein_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_santiago_20_suggest: UIImage {
        if Cache.imageOfSubway_santiago_20_suggest != nil {
            return Cache.imageOfSubway_santiago_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_santiago_20_suggest()

        Cache.imageOfSubway_santiago_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_santiago_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_erevan_20_suggest: UIImage {
        if Cache.imageOfSubway_erevan_20_suggest != nil {
            return Cache.imageOfSubway_erevan_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_erevan_20_suggest()

        Cache.imageOfSubway_erevan_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_erevan_20_suggest!
    }

    @objc dynamic public class var imageOfSubway_samara_20_suggest: UIImage {
        if Cache.imageOfSubway_samara_20_suggest != nil {
            return Cache.imageOfSubway_samara_20_suggest!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawSubway_samara_20_suggest()

        Cache.imageOfSubway_samara_20_suggest = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSubway_samara_20_suggest!
    }

    @objc dynamic public class func imageOfDownload_status(progress: CGFloat = 0.1) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawDownload_status(progress: progress)

        let imageOfDownload_status = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDownload_status
    }

    @objc dynamic public class var imageOfDownload_complete: UIImage {
        if Cache.imageOfDownload_complete != nil {
            return Cache.imageOfDownload_complete!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawDownload_complete()

        Cache.imageOfDownload_complete = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDownload_complete!
    }

    @objc dynamic public class var imageOfDownload_failed: UIImage {
        if Cache.imageOfDownload_failed != nil {
            return Cache.imageOfDownload_failed!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawDownload_failed()

        Cache.imageOfDownload_failed = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDownload_failed!
    }

    @objc dynamic public class var imageOfHistory: UIImage {
        if Cache.imageOfHistory != nil {
            return Cache.imageOfHistory!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawHistory()

        Cache.imageOfHistory = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHistory!
    }

    @objc dynamic public class var imageOfInfo: UIImage {
        if Cache.imageOfInfo != nil {
            return Cache.imageOfInfo!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawInfo()

        Cache.imageOfInfo = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfInfo!
    }

    @objc dynamic public class var imageOfMy_location: UIImage {
        if Cache.imageOfMy_location != nil {
            return Cache.imageOfMy_location!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            StyleKit_Metro.drawMy_location()

        Cache.imageOfMy_location = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMy_location!
    }

    @objc dynamic public class var imageOfIcon_check: UIImage {
        if Cache.imageOfIcon_check != nil {
            return Cache.imageOfIcon_check!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            StyleKit_Metro.drawIcon_check()

        Cache.imageOfIcon_check = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_check!
    }

    @objc dynamic public class var imageOfDownload_stop: UIImage {
        if Cache.imageOfDownload_stop != nil {
            return Cache.imageOfDownload_stop!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawDownload_stop()

        Cache.imageOfDownload_stop = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDownload_stop!
    }

    @objc dynamic public class var imageOfIcon_pass_podorozhnik: UIImage {
        if Cache.imageOfIcon_pass_podorozhnik != nil {
            return Cache.imageOfIcon_pass_podorozhnik!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 20), false, 0)
            StyleKit_Metro.drawIcon_pass_podorozhnik()

        Cache.imageOfIcon_pass_podorozhnik = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_pass_podorozhnik!
    }

    @objc dynamic public class var imageOfIcon_pass_strelka: UIImage {
        if Cache.imageOfIcon_pass_strelka != nil {
            return Cache.imageOfIcon_pass_strelka!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 20), false, 0)
            StyleKit_Metro.drawIcon_pass_strelka()

        Cache.imageOfIcon_pass_strelka = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_pass_strelka!
    }

    @objc dynamic public class var imageOfIcon_pass_troyka: UIImage {
        if Cache.imageOfIcon_pass_troyka != nil {
            return Cache.imageOfIcon_pass_troyka!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 20), false, 0)
            StyleKit_Metro.drawIcon_pass_troyka()

        Cache.imageOfIcon_pass_troyka = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_pass_troyka!
    }

    @objc dynamic public class var imageOfTransit_pedestrian: UIImage {
        if Cache.imageOfTransit_pedestrian != nil {
            return Cache.imageOfTransit_pedestrian!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 16, height: 16), false, 0)
            StyleKit_Metro.drawTransit_pedestrian()

        Cache.imageOfTransit_pedestrian = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTransit_pedestrian!
    }

    @objc dynamic public class var imageOfRound_close: UIImage {
        if Cache.imageOfRound_close != nil {
            return Cache.imageOfRound_close!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            StyleKit_Metro.drawRound_close()

        Cache.imageOfRound_close = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRound_close!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var map_controls_menuTargets: [AnyObject]! {
        get { return Cache.map_controls_menuTargets }
        set {
            Cache.map_controls_menuTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfMap_controls_menu)
            }
        }
    }

    @objc @IBOutlet dynamic var switch_cellsTargets: [AnyObject]! {
        get { return Cache.switch_cellsTargets }
        set {
            Cache.switch_cellsTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSwitch_cells)
            }
        }
    }

    @objc @IBOutlet dynamic var clear_inputTargets: [AnyObject]! {
        get { return Cache.clear_inputTargets }
        set {
            Cache.clear_inputTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfClear_input)
            }
        }
    }

    @objc @IBOutlet dynamic var popup_toTargets: [AnyObject]! {
        get { return Cache.popup_toTargets }
        set {
            Cache.popup_toTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPopup_to)
            }
        }
    }

    @objc @IBOutlet dynamic var popup_fromTargets: [AnyObject]! {
        get { return Cache.popup_fromTargets }
        set {
            Cache.popup_fromTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPopup_from)
            }
        }
    }

    @objc @IBOutlet dynamic var navbar_arrow_back_androidTargets: [AnyObject]! {
        get { return Cache.navbar_arrow_back_androidTargets }
        set {
            Cache.navbar_arrow_back_androidTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfNavbar_arrow_back_android)
            }
        }
    }

    @objc @IBOutlet dynamic var navbar_close_androidTargets: [AnyObject]! {
        get { return Cache.navbar_close_androidTargets }
        set {
            Cache.navbar_close_androidTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfNavbar_close_android)
            }
        }
    }

    @objc @IBOutlet dynamic var disclosure_indicatorTargets: [AnyObject]! {
        get { return Cache.disclosure_indicatorTargets }
        set {
            Cache.disclosure_indicatorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfDisclosure_indicator)
            }
        }
    }

    @objc @IBOutlet dynamic var icon_clear_fieldTargets: [AnyObject]! {
        get { return Cache.icon_clear_fieldTargets }
        set {
            Cache.icon_clear_fieldTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfIcon_clear_field)
            }
        }
    }

    @objc @IBOutlet dynamic var shadow_navigation_barTargets: [AnyObject]! {
        get { return Cache.shadow_navigation_barTargets }
        set {
            Cache.shadow_navigation_barTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfShadow_navigation_bar)
            }
        }
    }

    @objc @IBOutlet dynamic var arrow_downTargets: [AnyObject]! {
        get { return Cache.arrow_downTargets }
        set {
            Cache.arrow_downTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfArrow_down)
            }
        }
    }

    @objc @IBOutlet dynamic var arrow_rightTargets: [AnyObject]! {
        get { return Cache.arrow_rightTargets }
        set {
            Cache.arrow_rightTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfArrow_right)
            }
        }
    }

    @objc @IBOutlet dynamic var arrow_upTargets: [AnyObject]! {
        get { return Cache.arrow_upTargets }
        set {
            Cache.arrow_upTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfArrow_up)
            }
        }
    }

    @objc @IBOutlet dynamic var arrow_leftTargets: [AnyObject]! {
        get { return Cache.arrow_leftTargets }
        set {
            Cache.arrow_leftTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfArrow_left)
            }
        }
    }

    @objc @IBOutlet dynamic var map_placemark_ghostTargets: [AnyObject]! {
        get { return Cache.map_placemark_ghostTargets }
        set {
            Cache.map_placemark_ghostTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfMap_placemark_ghost)
            }
        }
    }

    @objc @IBOutlet dynamic var map_placemark_dotTargets: [AnyObject]! {
        get { return Cache.map_placemark_dotTargets }
        set {
            Cache.map_placemark_dotTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfMap_placemark_dot)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_mask_0Targets: [AnyObject]! {
        get { return Cache.pin_mask_0Targets }
        set {
            Cache.pin_mask_0Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_mask_0)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_mask_90Targets: [AnyObject]! {
        get { return Cache.pin_mask_90Targets }
        set {
            Cache.pin_mask_90Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_mask_90)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_mask_180Targets: [AnyObject]! {
        get { return Cache.pin_mask_180Targets }
        set {
            Cache.pin_mask_180Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_mask_180)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_mask_270Targets: [AnyObject]! {
        get { return Cache.pin_mask_270Targets }
        set {
            Cache.pin_mask_270Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_mask_270)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_shadow_0Targets: [AnyObject]! {
        get { return Cache.pin_shadow_0Targets }
        set {
            Cache.pin_shadow_0Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_shadow_0)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_shadow_90Targets: [AnyObject]! {
        get { return Cache.pin_shadow_90Targets }
        set {
            Cache.pin_shadow_90Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_shadow_90)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_shadow_180Targets: [AnyObject]! {
        get { return Cache.pin_shadow_180Targets }
        set {
            Cache.pin_shadow_180Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_shadow_180)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_shadow_270Targets: [AnyObject]! {
        get { return Cache.pin_shadow_270Targets }
        set {
            Cache.pin_shadow_270Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_shadow_270)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_aTargets: [AnyObject]! {
        get { return Cache.pin_aTargets }
        set {
            Cache.pin_aTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_a)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_bTargets: [AnyObject]! {
        get { return Cache.pin_bTargets }
        set {
            Cache.pin_bTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_b)
            }
        }
    }

    @objc @IBOutlet dynamic var pin_dotTargets: [AnyObject]! {
        get { return Cache.pin_dotTargets }
        set {
            Cache.pin_dotTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfPin_dot)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_helsinki_20Targets: [AnyObject]! {
        get { return Cache.subway_helsinki_20Targets }
        set {
            Cache.subway_helsinki_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_helsinki_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_ekb_20Targets: [AnyObject]! {
        get { return Cache.subway_ekb_20Targets }
        set {
            Cache.subway_ekb_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_ekb_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subwaybus_istanbul_20Targets: [AnyObject]! {
        get { return Cache.subwaybus_istanbul_20Targets }
        set {
            Cache.subwaybus_istanbul_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubwaybus_istanbul_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_baku_20Targets: [AnyObject]! {
        get { return Cache.subway_baku_20Targets }
        set {
            Cache.subway_baku_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_baku_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_nsk_20Targets: [AnyObject]! {
        get { return Cache.subway_nsk_20Targets }
        set {
            Cache.subway_nsk_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_nsk_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_kazan_20Targets: [AnyObject]! {
        get { return Cache.subway_kazan_20Targets }
        set {
            Cache.subway_kazan_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_kazan_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_erevan_20Targets: [AnyObject]! {
        get { return Cache.subway_erevan_20Targets }
        set {
            Cache.subway_erevan_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_erevan_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_london_20Targets: [AnyObject]! {
        get { return Cache.subway_london_20Targets }
        set {
            Cache.subway_london_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_london_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_oslo_20Targets: [AnyObject]! {
        get { return Cache.subway_oslo_20Targets }
        set {
            Cache.subway_oslo_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_oslo_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_berlin_sbahn_20Targets: [AnyObject]! {
        get { return Cache.subway_berlin_sbahn_20Targets }
        set {
            Cache.subway_berlin_sbahn_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_berlin_sbahn_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_spb_20Targets: [AnyObject]! {
        get { return Cache.subway_spb_20Targets }
        set {
            Cache.subway_spb_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_spb_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_lisboa_20Targets: [AnyObject]! {
        get { return Cache.subway_lisboa_20Targets }
        set {
            Cache.subway_lisboa_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_lisboa_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_madrid_20Targets: [AnyObject]! {
        get { return Cache.subway_madrid_20Targets }
        set {
            Cache.subway_madrid_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_madrid_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_Izmir_20Targets: [AnyObject]! {
        get { return Cache.subway_Izmir_20Targets }
        set {
            Cache.subway_Izmir_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_Izmir_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_kiev_20Targets: [AnyObject]! {
        get { return Cache.subway_kiev_20Targets }
        set {
            Cache.subway_kiev_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_kiev_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_tram_volgograd_20Targets: [AnyObject]! {
        get { return Cache.subway_tram_volgograd_20Targets }
        set {
            Cache.subway_tram_volgograd_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_tram_volgograd_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_paris_20Targets: [AnyObject]! {
        get { return Cache.subway_paris_20Targets }
        set {
            Cache.subway_paris_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_paris_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_budapest_20Targets: [AnyObject]! {
        get { return Cache.subway_budapest_20Targets }
        set {
            Cache.subway_budapest_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_budapest_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_santiago_20Targets: [AnyObject]! {
        get { return Cache.subway_santiago_20Targets }
        set {
            Cache.subway_santiago_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_santiago_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_istanbul_20Targets: [AnyObject]! {
        get { return Cache.subway_istanbul_20Targets }
        set {
            Cache.subway_istanbul_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_istanbul_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_athens_20Targets: [AnyObject]! {
        get { return Cache.subway_athens_20Targets }
        set {
            Cache.subway_athens_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_athens_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_ankara_20Targets: [AnyObject]! {
        get { return Cache.subway_ankara_20Targets }
        set {
            Cache.subway_ankara_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_ankara_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_tbilisi_20Targets: [AnyObject]! {
        get { return Cache.subway_tbilisi_20Targets }
        set {
            Cache.subway_tbilisi_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_tbilisi_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_bursa_20Targets: [AnyObject]! {
        get { return Cache.subway_bursa_20Targets }
        set {
            Cache.subway_bursa_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_bursa_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_msk_20Targets: [AnyObject]! {
        get { return Cache.subway_msk_20Targets }
        set {
            Cache.subway_msk_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_msk_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_stockholm_20Targets: [AnyObject]! {
        get { return Cache.subway_stockholm_20Targets }
        set {
            Cache.subway_stockholm_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_stockholm_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_barcelona_20Targets: [AnyObject]! {
        get { return Cache.subway_barcelona_20Targets }
        set {
            Cache.subway_barcelona_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_barcelona_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_almaty_20Targets: [AnyObject]! {
        get { return Cache.subway_almaty_20Targets }
        set {
            Cache.subway_almaty_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_almaty_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_roma_20Targets: [AnyObject]! {
        get { return Cache.subway_roma_20Targets }
        set {
            Cache.subway_roma_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_roma_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_fallback_20Targets: [AnyObject]! {
        get { return Cache.subway_fallback_20Targets }
        set {
            Cache.subway_fallback_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_fallback_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_berlin_20Targets: [AnyObject]! {
        get { return Cache.subway_berlin_20Targets }
        set {
            Cache.subway_berlin_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_berlin_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_kharkov_20Targets: [AnyObject]! {
        get { return Cache.subway_kharkov_20Targets }
        set {
            Cache.subway_kharkov_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_kharkov_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_minsk_20Targets: [AnyObject]! {
        get { return Cache.subway_minsk_20Targets }
        set {
            Cache.subway_minsk_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_minsk_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_samara_20Targets: [AnyObject]! {
        get { return Cache.subway_samara_20Targets }
        set {
            Cache.subway_samara_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_samara_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_wein_20Targets: [AnyObject]! {
        get { return Cache.subway_wein_20Targets }
        set {
            Cache.subway_wein_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_wein_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_dnepropetrovsk_20Targets: [AnyObject]! {
        get { return Cache.subway_dnepropetrovsk_20Targets }
        set {
            Cache.subway_dnepropetrovsk_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_dnepropetrovsk_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_nn_20Targets: [AnyObject]! {
        get { return Cache.subway_nn_20Targets }
        set {
            Cache.subway_nn_20Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_nn_20)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_berlin_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_berlin_20_suggestTargets }
        set {
            Cache.subway_berlin_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_berlin_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_kharkov_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_kharkov_20_suggestTargets }
        set {
            Cache.subway_kharkov_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_kharkov_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_fallback_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_fallback_20_suggestTargets }
        set {
            Cache.subway_fallback_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_fallback_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_london_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_london_20_suggestTargets }
        set {
            Cache.subway_london_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_london_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_roma_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_roma_20_suggestTargets }
        set {
            Cache.subway_roma_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_roma_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_oslo_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_oslo_20_suggestTargets }
        set {
            Cache.subway_oslo_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_oslo_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_madrid_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_madrid_20_suggestTargets }
        set {
            Cache.subway_madrid_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_madrid_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_nn_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_nn_20_suggestTargets }
        set {
            Cache.subway_nn_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_nn_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_helsinki_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_helsinki_20_suggestTargets }
        set {
            Cache.subway_helsinki_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_helsinki_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_barcelona_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_barcelona_20_suggestTargets }
        set {
            Cache.subway_barcelona_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_barcelona_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_kiev_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_kiev_20_suggestTargets }
        set {
            Cache.subway_kiev_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_kiev_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_baku_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_baku_20_suggestTargets }
        set {
            Cache.subway_baku_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_baku_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_paris_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_paris_20_suggestTargets }
        set {
            Cache.subway_paris_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_paris_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_athens_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_athens_20_suggestTargets }
        set {
            Cache.subway_athens_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_athens_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_bursa_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_bursa_20_suggestTargets }
        set {
            Cache.subway_bursa_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_bursa_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_tram_volgograd_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_tram_volgograd_20_suggestTargets }
        set {
            Cache.subway_tram_volgograd_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_tram_volgograd_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_budapest_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_budapest_20_suggestTargets }
        set {
            Cache.subway_budapest_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_budapest_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_nsk_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_nsk_20_suggestTargets }
        set {
            Cache.subway_nsk_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_nsk_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_almaty_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_almaty_20_suggestTargets }
        set {
            Cache.subway_almaty_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_almaty_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_stockholm_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_stockholm_20_suggestTargets }
        set {
            Cache.subway_stockholm_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_stockholm_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_istanbul_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_istanbul_20_suggestTargets }
        set {
            Cache.subway_istanbul_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_istanbul_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_spb_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_spb_20_suggestTargets }
        set {
            Cache.subway_spb_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_spb_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_kazan_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_kazan_20_suggestTargets }
        set {
            Cache.subway_kazan_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_kazan_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_Izmir_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_Izmir_20_suggestTargets }
        set {
            Cache.subway_Izmir_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_Izmir_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_lisboa_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_lisboa_20_suggestTargets }
        set {
            Cache.subway_lisboa_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_lisboa_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_ekb_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_ekb_20_suggestTargets }
        set {
            Cache.subway_ekb_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_ekb_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_berlin_sbahn_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_berlin_sbahn_20_suggestTargets }
        set {
            Cache.subway_berlin_sbahn_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_berlin_sbahn_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_minsk_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_minsk_20_suggestTargets }
        set {
            Cache.subway_minsk_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_minsk_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_msk_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_msk_20_suggestTargets }
        set {
            Cache.subway_msk_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_msk_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subwaybus_istanbul_20_suggestTargets: [AnyObject]! {
        get { return Cache.subwaybus_istanbul_20_suggestTargets }
        set {
            Cache.subwaybus_istanbul_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubwaybus_istanbul_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_dnepropetrovsk_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_dnepropetrovsk_20_suggestTargets }
        set {
            Cache.subway_dnepropetrovsk_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_dnepropetrovsk_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_tbilisi_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_tbilisi_20_suggestTargets }
        set {
            Cache.subway_tbilisi_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_tbilisi_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_ankara_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_ankara_20_suggestTargets }
        set {
            Cache.subway_ankara_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_ankara_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_wein_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_wein_20_suggestTargets }
        set {
            Cache.subway_wein_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_wein_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_santiago_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_santiago_20_suggestTargets }
        set {
            Cache.subway_santiago_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_santiago_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_erevan_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_erevan_20_suggestTargets }
        set {
            Cache.subway_erevan_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_erevan_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var subway_samara_20_suggestTargets: [AnyObject]! {
        get { return Cache.subway_samara_20_suggestTargets }
        set {
            Cache.subway_samara_20_suggestTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfSubway_samara_20_suggest)
            }
        }
    }

    @objc @IBOutlet dynamic var download_completeTargets: [AnyObject]! {
        get { return Cache.download_completeTargets }
        set {
            Cache.download_completeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfDownload_complete)
            }
        }
    }

    @objc @IBOutlet dynamic var download_failedTargets: [AnyObject]! {
        get { return Cache.download_failedTargets }
        set {
            Cache.download_failedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfDownload_failed)
            }
        }
    }

    @objc @IBOutlet dynamic var historyTargets: [AnyObject]! {
        get { return Cache.historyTargets }
        set {
            Cache.historyTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfHistory)
            }
        }
    }

    @objc @IBOutlet dynamic var infoTargets: [AnyObject]! {
        get { return Cache.infoTargets }
        set {
            Cache.infoTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfInfo)
            }
        }
    }

    @objc @IBOutlet dynamic var my_locationTargets: [AnyObject]! {
        get { return Cache.my_locationTargets }
        set {
            Cache.my_locationTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfMy_location)
            }
        }
    }

    @objc @IBOutlet dynamic var icon_checkTargets: [AnyObject]! {
        get { return Cache.icon_checkTargets }
        set {
            Cache.icon_checkTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfIcon_check)
            }
        }
    }

    @objc @IBOutlet dynamic var download_stopTargets: [AnyObject]! {
        get { return Cache.download_stopTargets }
        set {
            Cache.download_stopTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfDownload_stop)
            }
        }
    }

    @objc @IBOutlet dynamic var icon_pass_podorozhnikTargets: [AnyObject]! {
        get { return Cache.icon_pass_podorozhnikTargets }
        set {
            Cache.icon_pass_podorozhnikTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfIcon_pass_podorozhnik)
            }
        }
    }

    @objc @IBOutlet dynamic var icon_pass_strelkaTargets: [AnyObject]! {
        get { return Cache.icon_pass_strelkaTargets }
        set {
            Cache.icon_pass_strelkaTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfIcon_pass_strelka)
            }
        }
    }

    @objc @IBOutlet dynamic var icon_pass_troykaTargets: [AnyObject]! {
        get { return Cache.icon_pass_troykaTargets }
        set {
            Cache.icon_pass_troykaTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfIcon_pass_troyka)
            }
        }
    }

    @objc @IBOutlet dynamic var transit_pedestrianTargets: [AnyObject]! {
        get { return Cache.transit_pedestrianTargets }
        set {
            Cache.transit_pedestrianTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfTransit_pedestrian)
            }
        }
    }

    @objc @IBOutlet dynamic var round_closeTargets: [AnyObject]! {
        get { return Cache.round_closeTargets }
        set {
            Cache.round_closeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit_Metro.imageOfRound_close)
            }
        }
    }




    @objc(StyleKit_MetroResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}



private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
