// source: alice/megamind/library/scenarios/test_effectful/protos.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.NAlice.TTestEffectfulFeatures', null, global);
goog.exportSymbol('proto.NAlice.TTestEffectfulState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NAlice.TTestEffectfulState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NAlice.TTestEffectfulState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NAlice.TTestEffectfulState.displayName = 'proto.NAlice.TTestEffectfulState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NAlice.TTestEffectfulFeatures = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NAlice.TTestEffectfulFeatures, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NAlice.TTestEffectfulFeatures.displayName = 'proto.NAlice.TTestEffectfulFeatures';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NAlice.TTestEffectfulState.prototype.toObject = function(opt_includeInstance) {
  return proto.NAlice.TTestEffectfulState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NAlice.TTestEffectfulState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NAlice.TTestEffectfulState.toObject = function(includeInstance, msg) {
  var f, obj = {
    d: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    s: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NAlice.TTestEffectfulState}
 */
proto.NAlice.TTestEffectfulState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NAlice.TTestEffectfulState;
  return proto.NAlice.TTestEffectfulState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NAlice.TTestEffectfulState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NAlice.TTestEffectfulState}
 */
proto.NAlice.TTestEffectfulState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setD(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setS(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NAlice.TTestEffectfulState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NAlice.TTestEffectfulState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NAlice.TTestEffectfulState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NAlice.TTestEffectfulState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 D = 1;
 * @return {number}
 */
proto.NAlice.TTestEffectfulState.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.NAlice.TTestEffectfulState} returns this
 */
proto.NAlice.TTestEffectfulState.prototype.setD = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.NAlice.TTestEffectfulState} returns this
 */
proto.NAlice.TTestEffectfulState.prototype.clearD = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NAlice.TTestEffectfulState.prototype.hasD = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string S = 2;
 * @return {string}
 */
proto.NAlice.TTestEffectfulState.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.NAlice.TTestEffectfulState} returns this
 */
proto.NAlice.TTestEffectfulState.prototype.setS = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.NAlice.TTestEffectfulState} returns this
 */
proto.NAlice.TTestEffectfulState.prototype.clearS = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NAlice.TTestEffectfulState.prototype.hasS = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NAlice.TTestEffectfulFeatures.prototype.toObject = function(opt_includeInstance) {
  return proto.NAlice.TTestEffectfulFeatures.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NAlice.TTestEffectfulFeatures} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NAlice.TTestEffectfulFeatures.toObject = function(includeInstance, msg) {
  var f, obj = {
    f1: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    f2: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NAlice.TTestEffectfulFeatures}
 */
proto.NAlice.TTestEffectfulFeatures.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NAlice.TTestEffectfulFeatures;
  return proto.NAlice.TTestEffectfulFeatures.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NAlice.TTestEffectfulFeatures} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NAlice.TTestEffectfulFeatures}
 */
proto.NAlice.TTestEffectfulFeatures.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NAlice.TTestEffectfulFeatures.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NAlice.TTestEffectfulFeatures.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NAlice.TTestEffectfulFeatures} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NAlice.TTestEffectfulFeatures.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double F1 = 1;
 * @return {number}
 */
proto.NAlice.TTestEffectfulFeatures.prototype.getF1 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.NAlice.TTestEffectfulFeatures} returns this
 */
proto.NAlice.TTestEffectfulFeatures.prototype.setF1 = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.NAlice.TTestEffectfulFeatures} returns this
 */
proto.NAlice.TTestEffectfulFeatures.prototype.clearF1 = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NAlice.TTestEffectfulFeatures.prototype.hasF1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double F2 = 2;
 * @return {number}
 */
proto.NAlice.TTestEffectfulFeatures.prototype.getF2 = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.NAlice.TTestEffectfulFeatures} returns this
 */
proto.NAlice.TTestEffectfulFeatures.prototype.setF2 = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.NAlice.TTestEffectfulFeatures} returns this
 */
proto.NAlice.TTestEffectfulFeatures.prototype.clearF2 = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.NAlice.TTestEffectfulFeatures.prototype.hasF2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.NAlice);
