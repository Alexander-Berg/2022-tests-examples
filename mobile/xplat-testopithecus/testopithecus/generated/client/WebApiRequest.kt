// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM client/web-api-request.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class WebApiRequest(accountType: AccountType2) {
    private var mailHost: String = ""
    init {
        when (accountType) {
            AccountType2.Yandex -> {
                this.mailHost = "https://mail.yandex.ru"
            }
            AccountType2.YandexTeam -> {
                this.mailHost = "https://mail.yandex-team.ru"
            }
            else -> {
                throw Error("Не удалось распознать хост для включения настройки IMAP")
            }
        }
    }
    open fun enableImap(network: SyncNetwork, token: String?): Unit {
        val result = network.syncExecuteWithRetries(3, this.mailHost, SetImapRequest(), token)
        if (result.isError()) {
            throw Error("Ошибка при включении настройки IMAP: ${result.getError().message}")
        }
    }

}

private open class SetImapRequest(): BaseNetworkRequest() {
    open override fun encoding(): RequestEncoding {
        return JsonRequestEncoding()
    }

    open override fun method(): NetworkMethod {
        return NetworkMethod.post
    }

    open override fun params(): MapJSONItem {
        return MapJSONItem().put("models", ArrayJSONItem().add(MapJSONItem().putString("name", "do-settings").put("params", MapJSONItem().putString("params", "{\"enable_imap\":true,\"fid\":[]}")).put("meta", MapJSONItem().putInt32("requestAttempt", 1))))
    }

    open override fun targetPath(): String {
        return "web-api/models/liza1"
    }

    open override fun urlExtra(): MapJSONItem {
        val parent = super.urlExtra()
        parent.putString("_m", "do-settings")
        return parent
    }

}

