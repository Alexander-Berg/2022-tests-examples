// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/backend/expandable-threads-backend.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class ExpandableThreadsBackend(private var messageListDisplayBackend: MessageListDisplayBackend, private var clientsHandler: MailboxClientHandler): ExpandableThreads {
    open override fun collapseThread(order: Int): Unit {
        return
    }

    open override fun expandThread(order: Int): Unit {
        return
    }

    open override fun markThreadMessageAsRead(threadOrder: Int, messageOrder: Int): Unit {
        val message = this.getMessageInThread(threadOrder, messageOrder)
        this.clientsHandler.getCurrentClient().markMessageAsRead(message.mid)
    }

    open override fun markThreadMessageAsUnRead(threadOrder: Int, messageOrder: Int): Unit {
        val message = this.getMessageInThread(threadOrder, messageOrder)
        this.clientsHandler.getCurrentClient().markMessageAsUnread(message.mid)
    }

    private fun getMessageInThread(threadOrder: Int, messageOrder: Int): MessageMeta {
        val thread = this.messageListDisplayBackend.getThreadMessage(threadOrder)
        val messages = this.clientsHandler.getCurrentClient().getMessagesInThread(thread.tid!!, messageOrder + 1)
        return messages[messageOrder]
    }

}

