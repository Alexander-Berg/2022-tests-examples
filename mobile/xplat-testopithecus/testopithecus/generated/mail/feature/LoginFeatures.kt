// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/login-features.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public typealias Login = String

public open class MultiAccountFeature private constructor(): Feature<MultiAccount>("MultiAccount", "Фича переключения между аккаунтами, логина и разлогина") {
    companion object {
        @JvmStatic var `get`: MultiAccountFeature = MultiAccountFeature()
    }
}

public interface MultiAccount {
    fun switchToAccount(login: Login): Unit
    fun logoutFromAccount(login: Login): Unit
    fun getCurrentAccount(): Login
    fun getNumberOfAccounts(): Int
    fun addNewAccount(): Unit
    fun getLoggedInAccountsList(): YSArray<Login>
}

public open class AccountsListFeature private constructor(): Feature<AccountsList>("AccountsList", "Список аккаунтов на экране с каруселью аккаунтов АМа") {
    companion object {
        @JvmStatic var `get`: AccountsListFeature = AccountsListFeature()
    }
}

public interface AccountsList {
    fun choseAccountFromAccountsList(account: UserAccount): Unit
    fun getAccountsList(): YSArray<UserAccount>
}

public open class ExpiringTokenFeature private constructor(): Feature<ExpiringToken>("ExpiringToken", "Фича, позволяющая инвалидировать токен yandex-аккаунта") {
    companion object {
        @JvmStatic var `get`: ExpiringTokenFeature = ExpiringTokenFeature()
    }
}

public interface ExpiringToken {
    fun revokeToken(account: UserAccount): Unit
    fun exitFromReloginWindow(): Unit
}

public open class YandexLoginFeature private constructor(): Feature<YandexLogin>("YandexLogin", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: YandexLoginFeature = YandexLoginFeature()
    }
}

public interface YandexLogin {
    fun loginWithYandexAccount(account: UserAccount): Unit
}

public open class YandexTeamLoginFeature private constructor(): Feature<YandexTeamLogin>("YandexTeamLogin", "Залогин yandex-team аккаунтом. Ввод логина, пароля и переход к списку писем.") {
    companion object {
        @JvmStatic var `get`: YandexTeamLoginFeature = YandexTeamLoginFeature()
    }
}

public interface YandexTeamLogin {
    fun loginWithYandexTeamAccount(account: UserAccount): Unit
}

public open class MailRuLoginFeature private constructor(): Feature<MailRuLogin>("MailRuLogin", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: MailRuLoginFeature = MailRuLoginFeature()
    }
}

public interface MailRuLogin {
    fun loginWithMailRuAccount(account: UserAccount): Unit
}

public open class GoogleLoginFeature private constructor(): Feature<GoogleLogin>("GoogleLogin", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: GoogleLoginFeature = GoogleLoginFeature()
    }
}

public interface GoogleLogin {
    fun loginWithGoogleAccount(account: UserAccount): Unit
}

public open class OutlookLoginFeature private constructor(): Feature<OutlookLogin>("OutlookLogin", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: OutlookLoginFeature = OutlookLoginFeature()
    }
}

public interface OutlookLogin {
    fun loginWithOutlookAccount(account: UserAccount): Unit
}

public open class HotmailLoginFeature private constructor(): Feature<HotmailLogin>("HotmailLogin", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: HotmailLoginFeature = HotmailLoginFeature()
    }
}

public interface HotmailLogin {
    fun loginWithHotmailAccount(account: UserAccount): Unit
}

public open class RamblerLoginFeature private constructor(): Feature<RamblerLogin>("RamblerLogin", "TODO: добрый человек, напиши тут описание этой фичи") {
    companion object {
        @JvmStatic var `get`: RamblerLoginFeature = RamblerLoginFeature()
    }
}

public interface RamblerLogin {
    fun loginWithRamblerAccount(account: UserAccount): Unit
}

public open class YahooLoginFeature private constructor(): Feature<YahooLogin>("YahooLogin", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: YahooLoginFeature = YahooLoginFeature()
    }
}

public interface YahooLogin {
    fun loginWithYahooAccount(account: UserAccount): Unit
}

public open class CustomMailServiceLoginFeature private constructor(): Feature<CustomMailServiceLogin>("CustomMailService", "TODO: добрый человек, напиши тут, про что эта фича") {
    companion object {
        @JvmStatic var `get`: CustomMailServiceLoginFeature = CustomMailServiceLoginFeature()
    }
}

public interface CustomMailServiceLogin {
    fun loginWithCustomMailServiceAccount(account: UserAccount): Unit
}

