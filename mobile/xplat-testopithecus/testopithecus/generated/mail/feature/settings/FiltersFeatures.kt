// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/feature/settings/filters-features.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class FiltersListFeature private constructor(): Feature<FiltersList>("FiltersList", "Экран с промо и списком фильтров") {
    companion object {
        @JvmStatic var `get`: FiltersListFeature = FiltersListFeature()
    }
}

public interface FiltersList {
    fun isPromoShown(): Boolean
    fun getFilterList(): YSArray<FilterView>
    fun tapOnCreateRuleButton(): Unit
    fun tapOnFilterByIndex(index: Int): Unit
}

public open class FilterView(val conditions: String, val actions: String, val isCanBeEditedOnlyOnComputer: Boolean, val isEnabled: Boolean) {
    open fun tostring(): String {
        return ("Conditions: ${this.conditions},\n" + "Actions: ${this.actions},\n" + "isCanBeEditedOnlyOnComputer: ${this.isCanBeEditedOnlyOnComputer},\n" + "isEnabled: ${this.isEnabled}")
    }

    companion object {
        @JvmStatic
        open fun matches(first: FilterView, second: FilterView): Boolean {
            return (first.conditions == second.conditions && first.actions == second.actions && first.isCanBeEditedOnlyOnComputer == second.isCanBeEditedOnlyOnComputer && first.isEnabled == second.isEnabled)
        }

    }
}

public open class FilterCreateOrUpdateRuleFeature private constructor(): Feature<FilterCreateOrUpdateRule>("FilterCreateOrUpdateRule", "Экран создания/редактирования фильтра") {
    companion object {
        @JvmStatic var `get`: FilterCreateOrUpdateRuleFeature = FilterCreateOrUpdateRuleFeature()
    }
}

public enum class FilterConditionField {
    from,
    subject,
}
public enum class FilterActionToggle {
    markAsRead,
    delete,
    applyToExistingEmails,
}
public interface FilterCreateOrUpdateRule {
    fun tapOnConditionField(conditionField: FilterConditionField): Unit
    fun setConditionField(conditionField: FilterConditionField, value: String): Unit
    fun getConditionField(conditionField: FilterConditionField): YSArray<String>
    fun isConditionLogicButtonShown(): Boolean
    fun tapOnConditionLogicButton(): Unit
    fun getConditionLogic(): FilterLogicType?
    fun getActionToggle(actionToggle: FilterActionToggle): Boolean
    fun setActionToggle(actionToggle: FilterActionToggle, value: Boolean): Unit
    fun getMoveToFolderValue(): FolderName?
    fun tapOnMoveToFolder(): Unit
    fun getApplyLabelValue(): LabelName?
    fun tapOnApplyLabel(): Unit
    fun tapOnCreate(): Unit
    fun tapOnMore(): Unit
}

public open class FilterConditionLogicFeature private constructor(): Feature<FilterConditionLogic>("FilterConditionLogic", "Модальное окно выбора логики выполнения условий") {
    companion object {
        @JvmStatic var `get`: FilterConditionLogicFeature = FilterConditionLogicFeature()
    }
}

public interface FilterConditionLogic {
    fun getLogicTypes(): YSArray<FilterLogicType>
    fun setLogicType(logicType: FilterLogicType): Unit
}

public open class FilterUpdateRuleMoreFeature private constructor(): Feature<FilterUpdateRuleMore>("FilterUpdateRuleMore", "Модальное окно включения/отключения/удаления правила. Открывается с экрана редактирования правила") {
    companion object {
        @JvmStatic var `get`: FilterUpdateRuleMoreFeature = FilterUpdateRuleMoreFeature()
    }
}

public interface FilterUpdateRuleMore {
    fun changeEnableStatus(enable: Boolean): Unit
    fun delete(): Unit
}

public open class FilterConditionText {
    companion object {
        @JvmStatic val allEmails: String = "All emails"
        @JvmStatic val allEmailsWithAttachments: String = "All emails with attachments"
        @JvmStatic val allEmailsWithouAttachments: String = "All emails without attachments"
        @JvmStatic val body: String = "\"Body of the email\""
        @JvmStatic val cc: String = "\"Cc\""
        @JvmStatic val attachmentName: String = "\"Attachment name\""
        @JvmStatic val from: String = "\"From\""
        @JvmStatic val subject: String = "\"Subject\""
        @JvmStatic val to: String = "\"To\""
        @JvmStatic val toOrCc: String = "\"To or cc\""
        @JvmStatic val header: String = "header \"%@\""
        @JvmStatic val allEmailsExceptSpam: String = "All emails except spam"
        @JvmStatic val allEmailsWithAttachmentsExceptSpam: String = "All emails with attachments except spam"
        @JvmStatic val allEmailsWithoutAttachmentsExceptSpam: String = "All emails without attachments except spam"
        @JvmStatic val contains: String = "contains"
        @JvmStatic val doesntMatch: String = "\"doesn't match\""
        @JvmStatic val matches: String = "matches"
        @JvmStatic val doesntContain: String = "\"doesn't contain\""
        @JvmStatic val onlySpam: String = "Only spam"
        @JvmStatic val onlySpamWithAttachments: String = "Only spam with attachments"
        @JvmStatic val onlySpamWithoutAttachments: String = "Only spam without attachments"
        @JvmStatic val and: String = "and"
        @JvmStatic val `if`: String = "If"
        @JvmStatic val or: String = "or"
        @JvmStatic val template: String = "%1$@ %2$@ \"%3$@\""
    }
}

public open class FilterActionText {
    companion object {
        @JvmStatic val delete: String = "— Delete"
        @JvmStatic val forward: String = "— Forward email to \"%@\""
        @JvmStatic val applyLabel: String = "— Add label \"%@\""
        @JvmStatic val markAsRead: String = "— Mark as read"
        @JvmStatic val moveToFolder: String = "— Move to folder \"%@\""
        @JvmStatic val notify: String = "— Notify at %@"
        @JvmStatic val reply: String = "— Automatic response"
        @JvmStatic val actionStop: String = "\"— Don't apply other rules\""
    }
}

