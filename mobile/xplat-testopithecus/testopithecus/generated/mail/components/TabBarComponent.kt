// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/components/tab-bar-component.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class TabBarComponent: MBTComponent {
    open override fun getComponentType(): MBTComponentType {
        return TabBarComponent.type
    }

    open override fun assertMatches(model: App, application: App): Unit {
        val tabBarModel = TabBarFeature.`get`.castIfSupported(model)
        val tabBarApplication = TabBarFeature.`get`.castIfSupported(application)
        if (tabBarModel != null && tabBarApplication != null) {
            val modelTabBarShown = tabBarModel.isShown()
            val appTabBarShown = tabBarApplication.isShown()
            assertBooleanEquals(modelTabBarShown, appTabBarShown, "Tab bar showing state is incorrect")
            if (modelTabBarShown) {
                val modelTabBarCurrentItem = tabBarModel.getCurrentItem()
                val appTabBarCurrentItem = tabBarApplication.getCurrentItem()
                assertStringEquals(modelTabBarCurrentItem.toString(), appTabBarCurrentItem.toString(), "Current tabbar item is incorrect")
                val tabBarIOSModel = TabBarIOSFeature.`get`.castIfSupported(model)
                val tabBarIOSApplication = TabBarIOSFeature.`get`.castIfSupported(application)
                if (tabBarIOSModel != null && tabBarIOSApplication != null) {
                    val modelTabBarItems = tabBarIOSModel.getItems()
                    val appTabBarItems = tabBarIOSApplication.getItems()
                    assertInt32Equals(modelTabBarItems.size, appTabBarItems.size, "Incorrect number of tabbar items")
                    for (appTabBarItem in appTabBarItems) {
                        assertTrue(modelTabBarItems.contains(appTabBarItem), "There is no ${appTabBarItem} in model")
                    }
                    val modelTabBarCalendarDate = tabBarIOSModel.getCalendarIconDate()
                    val appTabBarCalendarDate = tabBarIOSApplication.getCalendarIconDate()
                    assertStringEquals(modelTabBarCalendarDate, appTabBarCalendarDate, "Incorrect calendar date label")
                }
                val tabBarAndroidModel = TabBarAndroidFeature.`get`.castIfSupported(model)
                val tabBarAndroidApplication = TabBarAndroidFeature.`get`.castIfSupported(application)
                if (tabBarAndroidModel != null && tabBarAndroidApplication != null) {
                    val modelTabBarItems = tabBarAndroidModel.getItems()
                    val appTabBarItems = tabBarAndroidApplication.getItems()
                    assertInt32Equals(modelTabBarItems.size, appTabBarItems.size, "Incorrect number of tabbar items")
                    for (appTabBarItem in appTabBarItems) {
                        assertTrue(modelTabBarItems.contains(appTabBarItem), "There is no ${appTabBarItem} in model")
                    }
                }
            }
        }
    }

    open override fun tostring(): String {
        return this.getComponentType()
    }

    companion object {
        @JvmStatic val type: MBTComponentType = "TabBarComponent"
    }
}

