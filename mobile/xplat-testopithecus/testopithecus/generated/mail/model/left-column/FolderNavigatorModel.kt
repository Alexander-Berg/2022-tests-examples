// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/left-column/folder-navigator-model.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class FolderNavigatorModel(var model: MessageListDisplayModel, private var accHandler: MailAppModelHandler, private var undoModel: UndoModel): FolderNavigator, LabelNavigator, FilterNavigator {
    private var openedFolderList: Boolean = false
    open override fun getFoldersList(): YSMap<FolderName, Int> {
        val folders = this.accHandler.getCurrentAccount().messagesDB.getFolderList()
        val foldersToUnread = mutableMapOf<FolderName, Int>()
        folders.forEach( {
            folderName ->
            foldersToUnread.set(folderName, this.getUnreadCounterForFolder(folderName))
        })
        return foldersToUnread
    }

    open override fun goToFolder(folderDisplayName: String, parentFolders: YSArray<String>): Unit {
        this.goToContainer(formatFolderName(folderDisplayName, parentFolders), MessageContainerType.folder)
    }

    open override fun isInTabsMode(): Boolean {
        return this.accHandler.getCurrentAccount().accountSettings.sortingEmailsByCategoryEnabled
    }

    open fun isOpened(): Boolean {
        return this.openedFolderList
    }

    open override fun closeFolderList(): Unit {
        this.openedFolderList = false
    }

    open override fun openFolderList(): Unit {
        this.openedFolderList = true
        this.undoModel.resetUndoShowing()
    }

    open override fun ptrFoldersList(): Unit {
    }

    open override fun getCurrentContainer(): String? {
        if (this.model.getCurrentContainer().type != MessageContainerType.search) {
            return this.model.getCurrentContainer().name
        }
        return null
    }

    open override fun getLabelList(): YSArray<LabelName> {
        return this.accHandler.getCurrentAccount().messagesDB.getLabelList()
    }

    open override fun goToLabel(labelName: String): Unit {
        this.goToContainer(labelName, MessageContainerType.label)
    }

    open override fun goToFilterImportant(): Unit {
        this.goToContainer("Important", MessageContainerType.importantFilter)
    }

    open override fun goToFilterUnread(): Unit {
        this.goToContainer("Unread", MessageContainerType.unreadFilter)
    }

    open override fun goToFilterWithAttachments(): Unit {
        this.goToContainer("With attachments", MessageContainerType.withAttachmentsFilter)
    }

    private fun goToContainer(containerName: String, containerType: MessageContainerType): Unit {
        this.model.setCurrentContainer(MessageContainer(containerName, containerType))
        this.closeFolderList()
    }

    private fun getUnreadCounterForFolder(folder: FolderName): Int {
        if (mutableListOf(DefaultFolderName.trash, DefaultFolderName.draft, DefaultFolderName.spam, DefaultFolderName.sent, DefaultFolderName.template).contains(folder)) {
            return 0
        }
        return this.accHandler.getCurrentAccount().messagesDB.getMessageIdList(MessageListDatabaseFilter().withFolder(folder).withIsUnreadOnly().withIsInThreadMode(false).withLimit(100)).size
    }

}

