// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/model/opened-message/quick-reply-models.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class QuickReplyModel(private var composeModel: ComposeModel): QuickReply {
    private var textFieldValue: String = ""
    private var quickReplyShown: Boolean = false
    private var openedMessageId: MessageId = int64(-1)
    open override fun getTextFieldValue(): String {
        return this.textFieldValue
    }

    open override fun isSendButtonEnabled(): Boolean {
        return !this.isTextFieldEmpty()
    }

    open fun isTextFieldEmpty(): Boolean {
        return this.textFieldValue == ""
    }

    open fun setMidOfOpenedMessage(mid: MessageId): Unit {
        this.openedMessageId = mid
    }

    open override fun setTextFieldValue(message: String): Unit {
        this.textFieldValue = message
        this.setDataToComposeModel()
    }

    open override fun isQuickReplyTextFieldExpanded(): Boolean {
        return this.textFieldValue.includes("\n")
    }

    open override fun pasteTextFieldValue(message: String): Unit {
        this.textFieldValue = message
        this.setDataToComposeModel()
    }

    open override fun tapOnComposeButton(): Unit {
        this.setDataToComposeModel()
    }

    open override fun tapOnSendButton(): Unit {
        this.composeModel.sendMessage()
        this.textFieldValue = ""
    }

    open override fun tapOnTextField(): Unit {
    }

    open fun setQuickReplyShown(shown: Boolean): Unit {
        this.quickReplyShown = shown
    }

    open override fun isQuickReplyShown(): Boolean {
        return this.quickReplyShown
    }

    private fun setDataToComposeModel(): Unit {
        this.composeModel.openReplyCompose(this.openedMessageId)
        this.composeModel.setBody(this.textFieldValue)
    }

}

public open class SmartReplyModel(private var quickReplyModel: QuickReplyModel, private var generalSettingsModel: GeneralSettingsModel): SmartReply {
    private var smartReplies: YSArray<String> = mutableListOf()
    open fun setSmartReplies(smartReplies: YSArray<String>): Unit {
        this.smartReplies = copyArray(smartReplies)
    }

    open override fun closeAllSmartReplies(): Unit {
        this.smartReplies = mutableListOf()
    }

    open override fun closeSmartReply(order: Int): Unit {
        this.smartReplies.splice(order, 1)
    }

    open override fun getSmartReply(order: Int): String {
        return this.smartReplies[order]
    }

    open override fun tapOnSmartReply(order: Int): Unit {
        this.quickReplyModel.setTextFieldValue(this.smartReplies[order])
    }

    open override fun isSmartRepliesShown(): Boolean {
        val isSmartRepliesEnabledInSettings = this.generalSettingsModel.isSmartRepliesEnabled()
        return this.smartReplies.size > 0 && isSmartRepliesEnabledInSettings && this.quickReplyModel.isTextFieldEmpty()
    }

    open override fun getSmartReplies(): YSArray<String> {
        return if (this.isSmartRepliesShown()) this.smartReplies else mutableListOf()
    }

}

