// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/left-column/folder-navigator-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class GoToFolderAction(private var folderName: String, private var parentFolders: YSArray<String> = mutableListOf()): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val folderNavigatorModel = FolderNavigatorFeature.`get`.forceCast(model)
        val folders = folderNavigatorModel.getFoldersList()
        return (keysArray(folders).filter( {
            folder ->
            folder == formatFolderName(this.folderName, this.parentFolders)
        }).size > 0)
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        FolderNavigatorFeature.`get`.forceCast(model).goToFolder(this.folderName, this.parentFolders)
        FolderNavigatorFeature.`get`.forceCast(application).goToFolder(this.folderName, this.parentFolders)
        return MaillistComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return GoToFolderAction.type
    }

    open override fun tostring(): String {
        return "GoToFolder(${this.folderName})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "GoToFolder"
    }
}

public open class OpenFolderListAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        FolderNavigatorFeature.`get`.forceCast(model).openFolderList()
        FolderNavigatorFeature.`get`.forceCast(application).openFolderList()
        return FolderListComponent()
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return OpenFolderListAction.type
    }

    open override fun tostring(): String {
        return "OpenFolderList"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenFolderList"
    }
}

public open class CloseFolderListAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        FolderNavigatorFeature.`get`.forceCast(model).closeFolderList()
        FolderNavigatorFeature.`get`.forceCast(application).closeFolderList()
        return requireNonNull(history.previousDifferentComponent, "There is no previous screen")
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return CloseFolderListAction.type
    }

    open override fun tostring(): String {
        return "CloseFolderList"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "CloseFolderList"
    }
}

public open class PtrFolderListAction: MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        FolderNavigatorFeature.`get`.forceCast(model).ptrFoldersList()
        FolderNavigatorFeature.`get`.forceCast(application).ptrFoldersList()
        return history.currentComponent
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return FolderNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun getActionType(): MBTActionType {
        return PtrFolderListAction.type
    }

    open override fun tostring(): String {
        return "PtrFolderList"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "PtrFolderList"
    }
}

