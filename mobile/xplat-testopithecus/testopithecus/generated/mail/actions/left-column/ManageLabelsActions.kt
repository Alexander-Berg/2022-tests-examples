// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/left-column/manage-labels-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class DeleteLabelAction(private var labelName: LabelName, private var deletionMethod: ContainerDeletionMethod = ContainerDeletionMethod.tap): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        val labelNavigatorModel = LabelNavigatorFeature.`get`.forceCast(model)
        val labels = labelNavigatorModel.getLabelList()
        return labels.contains(this.labelName)
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).deleteLabel(this.labelName, this.deletionMethod)
        ManageableLabelFeature.`get`.forceCast(application).deleteLabel(this.labelName, this.deletionMethod)
        return history.currentComponent
    }

    open override fun getActionType(): MBTActionType {
        return DeleteLabelAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "DeleteLabel(${this.labelName})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "DeleteLabel"
    }
}

public open class SubmitEditedLabelAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).submitEditedLabel()
        ManageableLabelFeature.`get`.forceCast(application).submitEditedLabel()
        return ManageLabelsComponent()
    }

    open override fun getActionType(): MBTActionType {
        return SubmitEditedLabelAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SubmitEditedLabel"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SubmitEditedLabel"
    }
}

public open class SetEditedLabelColorAction(private var colorIndex: Int): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).setEditedLabelColor(this.colorIndex)
        ManageableLabelFeature.`get`.forceCast(application).setEditedLabelColor(this.colorIndex)
        return history.currentComponent
    }

    open override fun getActionType(): MBTActionType {
        return SetEditedLabelColorAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SetEditedLabelColor"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SetEditedLabelColor"
    }
}

public open class EnterNameForEditedLabelAction(private var labelName: LabelName): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).enterNameForEditedLabel(this.labelName)
        ManageableLabelFeature.`get`.forceCast(application).enterNameForEditedLabel(this.labelName)
        return history.currentComponent
    }

    open override fun getActionType(): MBTActionType {
        return EnterNameForEditedLabelAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "EnterNameForEditedLabel"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "EnterNameForEditedLabel"
    }
}

public open class CloseEditLabelScreenAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).closeEditLabelScreen()
        ManageableLabelFeature.`get`.forceCast(application).closeEditLabelScreen()
        return ManageLabelsComponent()
    }

    open override fun getActionType(): MBTActionType {
        return CloseEditLabelScreenAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "CloseEditLabelScreen"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "CloseEditLabelScreen"
    }
}

public open class OpenEditLabelScreenAction(private var labelName: LabelName): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).openEditLabelScreen(this.labelName)
        ManageableLabelFeature.`get`.forceCast(application).openEditLabelScreen(this.labelName)
        return EditLabelComponent()
    }

    open override fun getActionType(): MBTActionType {
        return OpenEditLabelScreenAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "OpenEditLabelScreen"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenEditLabelScreen"
    }
}

public open class SubmitNewLabelAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).submitNewLabel()
        ManageableLabelFeature.`get`.forceCast(application).submitNewLabel()
        return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
    }

    open override fun getActionType(): MBTActionType {
        return SubmitNewLabelAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SubmitNewLabel"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SubmitNewLabel"
    }
}

public open class SetNewLabelColorAction(private var colorIndex: Int): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).setNewLabelColor(this.colorIndex)
        ManageableLabelFeature.`get`.forceCast(application).setNewLabelColor(this.colorIndex)
        return history.currentComponent
    }

    open override fun getActionType(): MBTActionType {
        return SetNewLabelColorAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "SetNewLabelColor"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "SetNewLabelColor"
    }
}

public open class EnterNameForNewLabelAction(private var labelName: LabelName): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).enterNameForNewLabel(this.labelName)
        ManageableLabelFeature.`get`.forceCast(application).enterNameForNewLabel(this.labelName)
        return history.currentComponent
    }

    open override fun getActionType(): MBTActionType {
        return EnterNameForNewLabelAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "EnterNameForNewLabel"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "EnterNameForNewLabel"
    }
}

public open class CloseCreateLabelScreenAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).closeCreateLabelScreen()
        ManageableLabelFeature.`get`.forceCast(application).closeCreateLabelScreen()
        return ManageLabelsComponent()
    }

    open override fun getActionType(): MBTActionType {
        return CloseCreateLabelScreenAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "CloseCreateLabelScreen"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "CloseCreateLabelScreen"
    }
}

public open class OpenCreateLabelScreenAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).openCreateLabelScreen()
        ManageableLabelFeature.`get`.forceCast(application).openCreateLabelScreen()
        return CreateLabelComponent()
    }

    open override fun getActionType(): MBTActionType {
        return OpenCreateLabelScreenAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "OpenCreateLabelScreen"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenCreateLabelScreen"
    }
}

public open class OpenLabelManagerAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).openLabelManager()
        ManageableLabelFeature.`get`.forceCast(application).openLabelManager()
        return ManageLabelsComponent()
    }

    open override fun getActionType(): MBTActionType {
        return OpenLabelManagerAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "OpenLabelManager"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenLabelManager"
    }
}

public open class CloseLabelManagerAction(): MBTAction {
    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (LabelNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ManageableLabelFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ManageableLabelFeature.`get`.forceCast(model).closeLabelManager()
        ManageableLabelFeature.`get`.forceCast(application).closeLabelManager()
        return FolderListComponent()
    }

    open override fun getActionType(): MBTActionType {
        return CloseLabelManagerAction.type
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "CloseLabelManager"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "CloseLabelManager"
    }
}

