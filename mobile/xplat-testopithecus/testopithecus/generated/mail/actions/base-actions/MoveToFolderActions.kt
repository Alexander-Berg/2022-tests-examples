// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/base-actions/move-to-folder-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class MoveToFolderAction(private var order: Int, private var folderName: FolderName): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (FolderNavigatorFeature.`get`.included(modelFeatures) && MovableToFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures) && ContainerGetterFeature.`get`.included(modelFeatures))
    }

    open override fun canBePerformed(model: App): Boolean {
        val folderNavigatorModel = FolderNavigatorFeature.`get`.forceCast(model)
        val folders = folderNavigatorModel.getFoldersList()
        val containerGetterModel = ContainerGetterFeature.`get`.forceCast(model)
        val currentContainer = containerGetterModel.getCurrentContainer()
        return (keysArray(folders).filter( {
            folder ->
            folder == this.folderName
        }).size > 0 && currentContainer.type == MessageContainerType.folder && currentContainer.name != this.folderName)
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf(Eventus.messageListEvents.openMessageActions(this.order, int64(-1)), Eventus.messageListEvents.moveMessageToFolder(this.order, int64(-1)))
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        MovableToFolderFeature.`get`.forceCast(model).moveMessageToFolder(this.order, this.folderName)
        MovableToFolderFeature.`get`.forceCast(application).moveMessageToFolder(this.order, this.folderName)
        return history.currentComponent
    }

    open override fun tostring(): String {
        return "MovableToFolderAction(${this.order} ${this.folderName})"
    }

    open override fun getActionType(): MBTActionType {
        return MoveToFolderAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "MoveToFolder"
    }
}

public open class MoveToFolderTapOnFolderAction(private val folderName: FolderName): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return (FolderNavigatorFeature.`get`.included(modelFeatures) && MoveToFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures))
    }

    open override fun canBePerformed(model: App): Boolean {
        val folderList = FolderNavigatorFeature.`get`.forceCast(model).getFoldersList()
        return folderList.has(this.folderName)
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        MoveToFolderFeature.`get`.forceCast(model).tapOnFolder(this.folderName)
        MoveToFolderFeature.`get`.forceCast(application).tapOnFolder(this.folderName)
        return requireNonNull(history.previousDifferentComponent, "There is no previous different component")
    }

    open override fun tostring(): String {
        return "${MoveToFolderTapOnFolderAction.type}(${this.folderName})"
    }

    open override fun getActionType(): MBTActionType {
        return MoveToFolderTapOnFolderAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "MoveToFolderTapOnFolderAction"
    }
}

public open class MoveToFolderTapOnCreateFolderAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return MoveToFolderFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        return true
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        MoveToFolderFeature.`get`.forceCast(model).tapOnCreateFolder()
        MoveToFolderFeature.`get`.forceCast(application).tapOnCreateFolder()
        return CreateFolderComponent()
    }

    open override fun tostring(): String {
        return "${MoveToFolderTapOnCreateFolderAction.type}"
    }

    open override fun getActionType(): MBTActionType {
        return MoveToFolderTapOnCreateFolderAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "MoveToFolderTapOnCreateFolderAction"
    }
}

