// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/opened-message/thread-view-navigator-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class DeleteCurrentThreadAction: MBTAction {
    private var type: MBTActionType = "DeleteCurrentThreadAction"
    open override fun canBePerformed(model: App): Boolean {
        val actionOnSwipe = GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe()
        val currentContainer = ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()
        return actionOnSwipe == ActionOnSwipe.delete || currentContainer.name == DefaultFolderName.archive
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): MBTActionType {
        return this.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ThreadViewNavigatorFeature.`get`.forceCast(model).deleteCurrentThread()
        ThreadViewNavigatorFeature.`get`.forceCast(application).deleteCurrentThread()
        return history.previousDifferentComponent!!
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return ThreadViewNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return this.type
    }

}

public open class ArchiveCurrentThreadAction: MBTAction {
    private var type: MBTActionType = "ArchiveCurrentThreadAction"
    open override fun canBePerformed(model: App): Boolean {
        val actionOnSwipe = GeneralSettingsFeature.`get`.forceCast(model).getActionOnSwipe()
        val currentContainer = ContainerGetterFeature.`get`.forceCast(model).getCurrentContainer()
        return actionOnSwipe == ActionOnSwipe.archive && currentContainer.name != DefaultFolderName.archive
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): MBTActionType {
        return this.type
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        ThreadViewNavigatorFeature.`get`.forceCast(model).archiveCurrentThread()
        ThreadViewNavigatorFeature.`get`.forceCast(application).archiveCurrentThread()
        return history.previousDifferentComponent!!
    }

    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return ThreadViewNavigatorFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun tostring(): String {
        return this.type
    }

}

