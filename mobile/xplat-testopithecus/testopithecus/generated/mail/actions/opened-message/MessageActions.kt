// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/opened-message/message-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class OpenMessageAction(private var order: Int): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return MessageViewerFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        val isInGroupMode = GroupModeFeature.`get`.castIfSupported(model)!!.isInGroupMode()
        return !isInGroupMode
    }

    open override fun perform(model: App, application: App, _history: MBTHistory): MBTComponent {
        MessageViewerFeature.`get`.forceCast(model).openMessage(this.order)
        MessageViewerFeature.`get`.forceCast(application).openMessage(this.order)
        return MessageComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf(Eventus.messageListEvents.openMessage(this.order, int64(-1)))
    }

    open override fun tostring(): String {
        return "${OpenMessageAction.type}(${this.order})"
    }

    open override fun getActionType(): MBTActionType {
        return OpenMessageAction.type
    }

    companion object {
        @JvmStatic val type: MBTActionType = "OpenMessageAction"
    }
}

public open class MessageViewBackToMailListAction(): BaseSimpleAction<MessageViewer, MBTComponent>(MessageViewBackToMailListAction.type) {
    open override fun requiredFeature(): Feature<MessageViewer> {
        return MessageViewerFeature.`get`
    }

    open override fun performImpl(modelOrApplication: MessageViewer, _currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.closeMessage()
        return MaillistComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf(Eventus.messageViewEvents.backToMailList())
    }

    companion object {
        @JvmStatic val type: MBTActionType = "MessageViewBackToMailListAction"
    }
}

public open class MessageViewDeleteMessageByIconAction(): BaseSimpleAction<MessageViewerAndroid, MessageComponent>(MessageViewDeleteMessageByIconAction.type) {
    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf(Eventus.messageViewEvents.deleteMessage())
    }

    open override fun performImpl(modelOrApplication: MessageViewerAndroid, currentComponent: MessageComponent): MBTComponent {
        modelOrApplication.deleteMessageByIcon()
        return MaillistComponent()
    }

    open override fun requiredFeature(): Feature<MessageViewerAndroid> {
        return MessageViewerAndroidFeature.`get`
    }

    companion object {
        @JvmStatic val type: MBTActionType = "MessageViewDeleteMessageByIconAction"
    }
}

public open class ArrowDownClickAction(private var order: Int): BaseSimpleAction<MessageViewer, MessageComponent>(ArrowDownClickAction.type) {
    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun canBePerformed(model: App): Boolean {
        val messageListDisplayModel = MessageListDisplayFeature.`get`.forceCast(model)
        val messages = messageListDisplayModel.getMessageList(this.order + 1)
        return this.order < messages.size
    }

    open override fun performImpl(modelOrApplication: MessageViewer, currentComponent: MessageComponent): MBTComponent {
        modelOrApplication.arrowDownClick()
        return MessageComponent()
    }

    open override fun requiredFeature(): Feature<MessageViewer> {
        return MessageViewerFeature.`get`
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ArrowDownClickAction"
    }
}

public open class ArrowUpClickAction(): BaseSimpleAction<MessageViewer, MessageComponent>(ArrowUpClickAction.type) {
    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun canBePerformed(model: App): Boolean {
        val openedMessage = MessageViewerFeature.`get`.forceCast(model).getOpenedMessage().head.timestamp
        val messageListDisplayModel = MessageListDisplayFeature.`get`.forceCast(model)
        val messages = messageListDisplayModel.getMessageList(10)[0].timestamp
        return openedMessage != messages
    }

    open override fun performImpl(modelOrApplication: MessageViewer, currentComponent: MessageComponent): MBTComponent {
        modelOrApplication.arrowUpClick()
        return MessageComponent()
    }

    open override fun requiredFeature(): Feature<MessageViewer> {
        return MessageViewerFeature.`get`
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ArrowUpClickAction"
    }
}

