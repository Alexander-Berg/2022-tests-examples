// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/tab-bar-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class TabBarTapOnItemAction(private val item: TabBarItem): BaseSimpleAction<TabBar, MBTComponent>(TabBarTapOnItemAction.type) {
    open override fun requiredFeature(): Feature<TabBar> {
        return TabBarFeature.`get`
    }

    open override fun canBePerformedImpl(model: TabBar): Boolean {
        return model.isShown()
    }

    open override fun performImpl(modelOrApplication: TabBar, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnItem(this.item)
        when (this.item) {
            TabBarItem.mail -> {
                return MaillistComponent()
            }
            TabBarItem.calendar -> {
                return CalendarMailComponent()
            }
            TabBarItem.documents -> {
                return DocumentsMailComponent()
            }
            TabBarItem.contacts -> {
                return ContactsListComponent()
            }
            TabBarItem.more -> {
                return ShtorkaComponent()
            }
            TabBarItem.telemost -> {
                return TelemostComponent()
            }
            else -> {
                throw YSError("Unknown tabbar item ${this.item}")
            }
        }
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "${TabBarTapOnItemAction.type}(item=${this.item})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "TabBarTapOnItemAction"
    }
}

public open class ShtorkaTapOnItemAction(private val item: TabBarItem): BaseSimpleAction<Shtorka, MBTComponent>(ShtorkaTapOnItemAction.type) {
    open override fun requiredFeature(): Feature<Shtorka> {
        return ShtorkaFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Shtorka, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnItem(this.item)
        when (this.item) {
            TabBarItem.mail -> {
                return MaillistComponent()
            }
            TabBarItem.calendar -> {
                return CalendarMailComponent()
            }
            TabBarItem.documents -> {
                return DocumentsMailComponent()
            }
            TabBarItem.contacts -> {
                return ContactsListComponent()
            }
            TabBarItem.disk -> {
                return DiskWebViewComponent()
            }
            TabBarItem.notes -> {
                return NotesWebViewComponent()
            }
            TabBarItem.telemost -> {
                return TelemostComponent()
            }
            TabBarItem.subscriptions -> {
                return SubscriptionsComponent()
            }
            else -> {
                throw YSError("Unknown shtorka item ${this.item}")
            }
        }
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun tostring(): String {
        return "${ShtorkaTapOnItemAction.type}(item=${this.item})"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ShtorkaTapOnItemAction"
    }
}

public open class ShtorkaTapOnTryItAction(): BaseSimpleAction<Shtorka, MBTComponent>(ShtorkaTapOnTryItAction.type) {
    open override fun requiredFeature(): Feature<Shtorka> {
        return ShtorkaFeature.`get`
    }

    open override fun canBePerformedImpl(model: Shtorka): Boolean {
        return model.getShownBannerType() != null
    }

    open override fun performImpl(modelOrApplication: Shtorka, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.tapOnBanner()
        return SubscriptionsComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ShtorkaTapOnTryItAction"
    }
}

public open class ShtorkaCloseBannerAction(): BaseSimpleAction<Shtorka, MBTComponent>(ShtorkaCloseBannerAction.type) {
    open override fun requiredFeature(): Feature<Shtorka> {
        return ShtorkaFeature.`get`
    }

    open override fun canBePerformedImpl(model: Shtorka): Boolean {
        return model.getShownBannerType() != null
    }

    open override fun performImpl(modelOrApplication: Shtorka, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.closeBanner()
        return currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ShtorkaCloseBannerAction"
    }
}

public open class ShtorkaCloseBySwipeAction(): BaseSimpleAction<Shtorka, MBTComponent>(ShtorkaCloseBySwipeAction.type) {
    open override fun requiredFeature(): Feature<Shtorka> {
        return ShtorkaFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Shtorka, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.closeBySwipe()
        return MaillistComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ShtorkaCloseBySwipeAction"
    }
}

public open class ShtorkaCloseByTapOverAction(): BaseSimpleAction<Shtorka, MBTComponent>(ShtorkaCloseByTapOverAction.type) {
    open override fun requiredFeature(): Feature<Shtorka> {
        return ShtorkaFeature.`get`
    }

    open override fun performImpl(modelOrApplication: Shtorka, currentComponent: MBTComponent): MBTComponent {
        modelOrApplication.closeByTapOver()
        return MaillistComponent()
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    companion object {
        @JvmStatic val type: MBTActionType = "ShtorkaCloseByTapOverAction"
    }
}

