// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mail/actions/messages-list/undo-actions.ts >>>

package com.yandex.xplat.testopithecus

import com.yandex.xplat.common.*
import com.yandex.xplat.eventus.common.*
import com.yandex.xplat.eventus.*
import com.yandex.xplat.mapi.*
import com.yandex.xplat.testopithecus.common.*

public open class UndoDeleteAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return UndoFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        val undoModel = UndoFeature.`get`.forceCast(model)
        return undoModel.isUndoDeleteToastShown() != UndoState.notShown
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        UndoFeature.`get`.forceCast(model).undoDelete()
        UndoFeature.`get`.forceCast(application).undoDelete()
        return history.currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): MBTActionType {
        return UndoDeleteAction.type
    }

    open override fun tostring(): String {
        return "UndoDeleteMessage"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "UndoDeleteAction"
    }
}

public open class UndoArchiveAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return UndoFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        val undoModel = UndoFeature.`get`.forceCast(model)
        return undoModel.isUndoArchiveToastShown() != UndoState.notShown
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        UndoFeature.`get`.forceCast(model).undoArchive()
        UndoFeature.`get`.forceCast(application).undoArchive()
        return history.currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): MBTActionType {
        return UndoArchiveAction.type
    }

    open override fun tostring(): String {
        return "UndoArchiveMessage"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "UndoArchiveAction"
    }
}

public open class UndoSpamAction(): MBTAction {
    open override fun supported(modelFeatures: YSArray<FeatureID>, applicationFeatures: YSArray<FeatureID>): Boolean {
        return UndoFeature.`get`.includedAll(modelFeatures, applicationFeatures)
    }

    open override fun canBePerformed(model: App): Boolean {
        val undoModel = UndoFeature.`get`.forceCast(model)
        return undoModel.isUndoSpamToastShown() != UndoState.notShown
    }

    open override fun perform(model: App, application: App, history: MBTHistory): MBTComponent {
        UndoFeature.`get`.forceCast(model).undoSpam()
        UndoFeature.`get`.forceCast(application).undoSpam()
        return history.currentComponent
    }

    open override fun events(): YSArray<EventusEvent> {
        return mutableListOf()
    }

    open override fun getActionType(): MBTActionType {
        return UndoSpamAction.type
    }

    open override fun tostring(): String {
        return "UndoSpamMessage"
    }

    companion object {
        @JvmStatic val type: MBTActionType = "UndoSpamAction"
    }
}

