// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/pay-existing-method-test.ts >>>

import Foundation

open class PayWithExistingMethod3DSCVVTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var code3ds: String = "200"
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.existingPaymentMethods)  Test pay with existing payment method (3ds + cvv)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(39)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).set3ds(self.code3ds).setForceCvv(self.forceCvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class PayWithExistingMethod3DSTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var code3ds: String = "200"
  public init() {
    super.init("\(TestScenario.existingPaymentMethods)  Test pay with existing payment method (3ds)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(40)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).set3ds(self.code3ds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class PayWithExistingMethodCVVTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test pay with existing payment method (cvv)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(41)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction())
  }

}

open class PayWithExistingMethodTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test pay with existing payment method")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(42)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction())
  }

}

open class PayWithSbpMethodTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test pay with sbp payment method")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(103)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectSbpMethodAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(ApproveSbpPurchaseAction())
  }

}

open class TrySelectDifferentBanksForSbpMethodTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test bank selection for sbp")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(103)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectSbpMethodAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(SelectAnotherBankAction()).then(AssertAction()).then(SearchQueryActionBankAction("OLOLO")).then(AssertAction()).then(SearchQueryActionBankAction("asdasd")).then(AssertAction()).then(SearchQueryActionBankAction("")).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(ApproveSbpPurchaseAction())
  }

}

open class PayWithExistingMethodInvalidCvvTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var code3ds: String = "200"
  private var forceCvv: Bool = true
  private var cvv: String = "567"
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test pay with existing payment method (invalid cvv)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(44)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv).set3ds(self.code3ds).setCvv(self.cvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(SelectPaymentMethodAction(0)).then(EnterCvvForSelectPaymentMethodAction(self.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class PayWithExistingMethodInvalid3dsTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var code3ds: String = "400"
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test pay with existing payment method (invalid 3ds)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(62)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv).set3ds(self.code3ds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class PaymentMethodCvvFieldNumericKeyboardTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test opening of the numeric keyboard after tap on cvv field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(51)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(TapOnCvvFieldOfSelectPaymentMethodAction())
  }

}

open class PaymentMethodEmptyCardListTest: MBTTest<PaymentDataPreparer> {
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Test opening new card screen if payment method list is empty")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(1)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
  }

}

open class RotateAfterSelectPaymentMethodTest: MBTTest<PaymentDataPreparer> {
  private var masterCard1: BoundCard = BoundCard.generated()
  private var masterCard2: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Rotate after select payment method")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(46)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.masterCard1).addBoundCard(self.masterCard2)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(1)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(RotateDeviceAction(DeviceOrientation.landscape))
  }

}

open class MinimizeKeyboardAfterTapOnCvvFieldTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Minimize keyboard after tap on cvv field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(53).ignoreOn(MBTPlatform.IOS)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(MinimizeKeyboardAction())
  }

}

open class ValidateBigPaymentMethodsListTest: MBTTest<PaymentDataPreparer> {
  private var card1: BoundCard = BoundCard.generated()
  private var card2: BoundCard = BoundCard.generated()
  private var card3: BoundCard = BoundCard.generated()
  private var card4: BoundCard = BoundCard.generated()
  private var card5: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.existingPaymentMethods) Validate big payment methods list")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(67)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card1).addBoundCard(self.card2).addBoundCard(self.card3).addBoundCard(self.card4).addBoundCard(self.card5)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(1)).then(SetPaymentButtonStatusAction(true))
  }

}

open class PayWithExistingMethodClose3DSPageTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var code3ds: String = "200"
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.existingPaymentMethods)  Close 3ds page")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(88).ignoreOn(MBTPlatform.Android)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).set3ds(self.code3ds).setForceCvv(self.forceCvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(AssertAction()).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Close3dsAction())
  }

}

