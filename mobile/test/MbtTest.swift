// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mbt/test/mbt-test.ts >>>

import Foundation

public enum AccountType2 : String {
  case Yandex = "YANDEX"
  case YandexTest = "YANDEX_TEST"
  case YandexTeam = "YANDEX_TEAM"
  case Yahoo = "YAHOO"
  case Google = "GMAIL"
  case Mail = "MAIL"
  case Hotmail = "HOTMAIL"
  case Rambler = "RAMBLER"
  case Outlook = "OUTLOOK"
  case Other = "OTHER"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum MBTPlatform {
  case MobileAPI
  case Android
  case IOS
  case Desktop
}
public enum TestSuite : String {
  case Fixed = "Fixed_tests"
  case Random = "Random_tests"
  case FullCoverage = "Full_coverage"
  public func toString() -> String {
    return self.rawValue
  }
}
public enum DeviceType {
  case Phone
  case Tab
}
open class MBTTest<T> {
  public let description: String
  public let suites: YSArray<TestSuite>
  public init(_ description: String, _ suites: YSArray<TestSuite> = YSArray(TestSuite.Fixed)) {
    self.description = description
    self.suites = suites
  }

  open func setupSettings(_ settings: TestSettings) -> Void {
  }

  @discardableResult
  open func requiredAccounts() -> YSArray<AccountType2> {
    fatalError("Must be overridden in subclasses")
  }

  open func prepareAccounts(_ preparers: YSArray<T>) -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    fatalError("Must be overridden in subclasses")
  }

}

open class TestSettings {
  private var testCaseIds: YSMap<MBTPlatform, Int32> = YSMap<MBTPlatform, Int32>()
  private var tags: YSArray<DeviceType> = YSArray(DeviceType.Phone)
  private var ignoredPlatforms: YSSet<MBTPlatform> = YSSet()
  public init() {
  }

  @discardableResult
  open func setTestCaseId(_ platform: MBTPlatform, _ id: Int32) -> TestSettings {
    self.testCaseIds.set(platform, id)
    return self
  }

  @discardableResult
  open func androidCase(_ id: Int32) -> TestSettings {
    return self.setTestCaseId(MBTPlatform.Android, id)
  }

  @discardableResult
  open func iosCase(_ id: Int32) -> TestSettings {
    return self.setTestCaseId(MBTPlatform.IOS, id)
  }

  @discardableResult
  open func commonCase(_ id: Int32) -> TestSettings {
    return self.iosCase(id).androidCase(id)
  }

  @discardableResult
  open func ignoreOn(_ platform: MBTPlatform) -> TestSettings {
    self.ignoredPlatforms.add(platform)
    return self
  }

  @discardableResult
  open func isIgnored(_ platform: MBTPlatform) -> Bool {
    return self.ignoredPlatforms.has(platform)
  }

  @discardableResult
  open func getCaseIDForPlatform(_ platform: MBTPlatform) -> Int32 {
    if undefinedToNull(self.testCaseIds.get(platform)) != nil {
      return self.testCaseIds.`get`(platform)!
    } else {
      return 0
    }
  }

  open func setTags(_ tags: YSArray<DeviceType>) -> Void {
    self.tags = tags
  }

  @discardableResult
  open func hasTag(_ tag: DeviceType) -> Bool {
    return self.tags.includes(tag)
  }

}

