// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/pay-new-card-tests.ts >>>

import Foundation

open class PayWithNewCardWithoutSavingTest: MBTTest<PaymentDataPreparer> {
  private var code3ds: String = "200"
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Pay with new card without saving")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(2)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false)).set3ds(self.code3ds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(self.card, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class DisablePayButtonTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Pay button disabling if not all required fields are filled")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(4)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cardNumber, self.card.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(self.card.expirationMonth)\(self.card.expirationYear)")).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "")).then(TapAndFillNewCardFieldAction(NewCardField.cvv, self.card.cvv))
  }

}

open class PayWithNewCardWithSavingTest: MBTTest<PaymentDataPreparer> {
  private var code3ds: String = "200"
  private var card: BoundCard = BoundCard.generated()
  private var newCard: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Pay with new card with saving")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(15)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).set3ds(self.code3ds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(FillNewCardDataAction(self.newCard, true)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds)).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(AssertAction()).then(StartRegularPaymentProcessAction())
  }

}

open class PasteValuesToNewCardFieldsTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Paste values into new card fields")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(66)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapAndPasteNewCardFieldAction(NewCardField.cardNumber, self.card.cardNumber)).then(TapAndPasteNewCardFieldAction(NewCardField.expirationDate, "\(self.card.expirationMonth)\(self.card.expirationYear)")).then(TapAndPasteNewCardFieldAction(NewCardField.cvv, self.card.cvv)).then(SetPaymentButtonStatusAction(true))
  }

}

open class NewCardFieldsValidatorTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Validate new card fields")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(8)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, "123")).then(TapOnNewCardFieldAction(NewCardField.expirationDate)).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.expirationDate, "123")).then(TapOnNewCardFieldAction(NewCardField.cvv)).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cvv, "1")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cardNumber, self.card.cardNumber))
  }

}

open class NewCardFieldsNumericKeyboardTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Test opening of the numeric keyboard after tap on the field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(58)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.expirationDate)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cvv))
  }

}

open class PayWithNewCardNotEnoughFundsTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Pay with new card with not enough funds")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(61)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).forcePaymentError(PaymentErrorType.notEnoughFunds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(FillNewCardDataAction(self.card, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction())
  }

}

open class ValidatePaymentMethodsAndNewCardInLandscapeTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Validate payment methods view and new card view in landscape")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(65)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(RotateDeviceAction(DeviceOrientation.landscape)).then(ClickNewCardPaymentMethodAction()).then(MinimizeKeyboardAction()).then(AssertAction()).then(TapOnNewCardBackButtonAction())
  }

}

open class NewCardIncorrectCvvTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var code3ds: String = "200"
  private var cvv: String = "456"
  public init() {
    super.init("\(TestScenario.newCard) Enter incorrect cvv")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(59)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).set3ds(self.code3ds).setCvv(self.cvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(ClickNewCardPaymentMethodAction()).then(TapAndFillNewCardFieldAction(NewCardField.cardNumber, self.card.cardNumber)).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(self.card.expirationMonth)\(self.card.expirationYear)")).then(TapAndFillNewCardFieldAction(NewCardField.cvv, self.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class CheckExpirationDateFieldTest: MBTTest<PaymentDataPreparer> {
  public init() {
    super.init("\(TestScenario.newCard) Check expiration date field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(60)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(CardGenerator.generateExpirationDate(ExpirationDateType.previousMonth))")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(CardGenerator.generateExpirationDate(ExpirationDateType.currentMonthAndYear))")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(CardGenerator.generateExpirationDate(ExpirationDateType.date50YearsInFuture))")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(CardGenerator.generateExpirationDate(ExpirationDateType.dateMore50YearsInFuture))")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, "\(CardGenerator.generateExpirationDate(ExpirationDateType.nonExistentMonth))")).then(TapOnNewCardFieldAction(NewCardField.cardNumber))
  }

}

open class CheckCvvFieldTest: MBTTest<PaymentDataPreparer> {
  public init() {
    super.init("\(TestScenario.newCard) Check cvv field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(64)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "1")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "12")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "123")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "1234")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "")).then(PasteNewCardFieldAction(NewCardField.cvv, "!qπ")).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "")).then(PasteNewCardFieldAction(NewCardField.cvv, "https://yandex.ru")).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cvv, "")).then(PasteNewCardFieldAction(NewCardField.cvv, "3456"))
  }

}

open class CheckCardNumberFieldTest: MBTTest<PaymentDataPreparer> {
  public init() {
    super.init("\(TestScenario.cardBinding) Check card number field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(5)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, "!@#$")).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cardNumber, "sadfdsf")).then(AssertAction()).then(FillNewCardFieldAction(NewCardField.cardNumber, "s#1234")).then(TapOnNewCardFieldAction(NewCardField.cvv)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, "1234123412341234")).then(TapOnNewCardFieldAction(NewCardField.cvv)).then(AssertAction()).then(TapOnNewCardFieldAction(NewCardField.cardNumber)).then(FillNewCardFieldAction(NewCardField.cardNumber, SpecificCards.visa.cardNumber)).then(TapOnNewCardFieldAction(NewCardField.cvv))
  }

}

open class FillAllFieldsAndRotateTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Fill all fields and rotate")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(16)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(self.card, true)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(RotateDeviceAction(DeviceOrientation.landscape))
  }

}

open class PaymentSystemTypeTest: MBTTest<PaymentDataPreparer> {
  private var masterCard: BoundCard = BoundCard.generated(CardPaymentSystem.MasterCard)
  private var maestro: BoundCard = BoundCard.generated(CardPaymentSystem.Maestro)
  private var mir: BoundCard = BoundCard.generated(CardPaymentSystem.MIR)
  private var visa: BoundCard = BoundCard.generated(CardPaymentSystem.VISA)
  public init() {
    super.init("\(TestScenario.newCard) Check payment system type icon")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(43)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.masterCard).addBoundCard(self.maestro).addBoundCard(self.mir).addBoundCard(self.visa).setDarkMode(true)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartRegularPaymentProcessAction())
  }

}

open class CorrectCardNumberIncorrectDateAndCvvTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Correct card number, incorrect expiration date and cvv")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(9)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(TapAndFillNewCardFieldAction(NewCardField.cardNumber, self.card.cardNumber)).then(TapAndFillNewCardFieldAction(NewCardField.cvv, self.card.cvv)).then(TapAndFillNewCardFieldAction(NewCardField.expirationDate, CardGenerator.generateExpirationDate(ExpirationDateType.nonExistentMonth)))
  }

}

open class NewCardTapBackTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.newCard) Returning from the NewCard screen")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(89)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction()).then(AssertAction()).then(ClickNewCardPaymentMethodAction()).then(AssertAction()).then(TapOnNewCardBackButtonAction())
  }

}

open class NewCardAutomaticallyFocusNumberFieldTest: MBTTest<PaymentDataPreparer> {
  public init() {
    super.init("\(TestScenario.newCard) Automatically focus card number field")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(109)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(false, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartRegularPaymentProcessAction())
  }

}

