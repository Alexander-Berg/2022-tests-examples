// This class has been generated automatically. Don't modify.

public enum GenaMetricsEventApplicationStartSessionLayerType: String {
    case map = "map"
    case satellite = "satellite"
    case hybrid = "hybrid"
}

public enum GenaMetricsEventWebviewLoadedType: String {
    case direct = "direct"
}

public enum GenaMetricsEventApplicationGetGlobalParamethersNightMode: String {
    case `true` = "true"
    case `false` = "false"
    case auto = "auto"
    case system = "system"
}

public enum GenaMetricsEventApplicationGetGlobalParamethersLaunchType: String {
    case freshStart = "fresh_start"
    case fromBackground = "from_background"
}

public enum GenaMetricsEventApplicationCloseRateMeAlertReason: String {
    case later = "later"
    case rate = "rate"
    case outerTap = "outer-tap"
}

public enum GenaMetricsEventMapChangeTrafficBackground: String {
    case map = "map"
    case route = "route"
    case searchResults = "search-results"
}

public enum GenaMetricsEventMapChangeTrafficSource: String {
    case controlOnMap = "control-on-map"
    case layerMenu = "layer-menu"
}

public enum GenaMetricsEventMapZoomInBackground: String {
    case map = "map"
    case route = "route"
    case routePoints = "route-points"
    case searchResults = "search-results"
    case navigation = "navigation"
    case roulette = "roulette"
}

public enum GenaMetricsEventMapZoomInSource: String {
    case gesture = "gesture"
    case zoomButton = "zoom-button"
    case zoomButtonLongTap = "zoom-button-long-tap"
    case volumeButton = "volume-button"
}

public enum GenaMetricsEventMapChangeTiltType: String {
    case flat = "flat"
    case perspective = "perspective"
}

public enum GenaMetricsEventMapChangeTiltAction: String {
    case gesture = "gesture"
    case button = "button"
}

public enum GenaMetricsEventMapLocateUserState: String {
    case locate = "locate"
    case arrowOn = "arrow-on"
    case arrowOff = "arrow-off"
    case startSearching = "start-searching"
    case stopSearching = "stop-searching"
    case error = "error"
}

public enum GenaMetricsEventMapLongTapBackground: String {
    case route = "route"
    case navigation = "navigation"
    case map = "map"
    case searchResults = "search-results"
}

extension GenaMetricsEventTracker {
    public func applicationStartSession(
        with roadAlerts: Bool?,
        zoomButtonsEnabled: Bool?,
        layerType: GenaMetricsEventApplicationStartSessionLayerType?,
        batteryCharge: Int?,
        locale: String?,
        mapRotation: Bool?,
        showRuler: Bool?,
        autoRebuild: Bool?,
        autoUpdate: Bool?,
        routesInNavi: Bool?,
        wifiOnly: Bool?,
        avoidTollRoads: Bool?,
        showPublicTransportLables: Bool?,
        soundsThroughBluetooth: Bool?,
        language: String?,
        authorized: Bool?,
        traffic: Bool?
    ) {
        var options: [String: String] = [:]
        options["road_alerts"] = roadAlerts.flatMap { "\($0)" }
        options["zoom_buttons_enabled"] = zoomButtonsEnabled.flatMap { "\($0)" }
        options["layer_type"] = layerType.flatMap { $0.rawValue }
        options["battery_charge"] = batteryCharge.flatMap { "\($0)" }
        options["locale"] = locale
        options["map_rotation"] = mapRotation.flatMap { "\($0)" }
        options["show_ruler"] = showRuler.flatMap { "\($0)" }
        options["auto_rebuild"] = autoRebuild.flatMap { "\($0)" }
        options["auto_update"] = autoUpdate.flatMap { "\($0)" }
        options["routes_in_navi"] = routesInNavi.flatMap { "\($0)" }
        options["wifi_only"] = wifiOnly.flatMap { "\($0)" }
        options["avoid_toll_roads"] = avoidTollRoads.flatMap { "\($0)" }
        options["show_public_transport_lables"] = showPublicTransportLables.flatMap { "\($0)" }
        options["sounds_through_bluetooth"] = soundsThroughBluetooth.flatMap { "\($0)" }
        options["language"] = language
        options["authorized"] = authorized.flatMap { "\($0)" }
        options["traffic"] = traffic.flatMap { "\($0)" }
        eventTracker.trackEvent("application.start-session", withOptions: options)
    }

    public func webviewLoaded(with type: GenaMetricsEventWebviewLoadedType?) {
        var options: [String: String] = [:]
        options["type"] = type.flatMap { $0.rawValue }
        eventTracker.trackEvent("webview.loaded", withOptions: options)
    }

    public func applicationGetGlobalParamethers(
        with bookmarksCount: Int?,
        listsCount: Int?,
        homeAdded: Bool?,
        workAdded: Bool?,
        cacheSize: Double?,
        nightMode: GenaMetricsEventApplicationGetGlobalParamethersNightMode?,
        showBookmarksOnMap: Int?,
        pushNotifications: Bool?,
        launchTime: Double?,
        launchFinishTime: Double?,
        launchStepsTime: String?,
        launchType: GenaMetricsEventApplicationGetGlobalParamethersLaunchType?,
        mapCaches: Int?,
        aon: Bool?,
        backgroundGuidance: Bool?,
        voice: String?,
        orgReview: Bool?,
        discoveryPushes: Bool?,
        stopsCount: Int?,
        linesCount: Int?,
        authorized: Bool?,
        traffic: Bool?
    ) {
        var options: [String: String] = [:]
        options["bookmarks_count"] = bookmarksCount.flatMap { "\($0)" }
        options["lists_count"] = listsCount.flatMap { "\($0)" }
        options["home_added"] = homeAdded.flatMap { "\($0)" }
        options["work_added"] = workAdded.flatMap { "\($0)" }
        options["cache_size"] = cacheSize.flatMap { "\($0)" }
        options["night_mode"] = nightMode.flatMap { $0.rawValue }
        options["show_bookmarks_on_map"] = showBookmarksOnMap.flatMap { "\($0)" }
        options["push_notifications"] = pushNotifications.flatMap { "\($0)" }
        options["launch_time"] = launchTime.flatMap { "\($0)" }
        options["launch_finish_time"] = launchFinishTime.flatMap { "\($0)" }
        options["launch_steps_time"] = launchStepsTime
        options["launch_type"] = launchType.flatMap { $0.rawValue }
        options["map_caches"] = mapCaches.flatMap { "\($0)" }
        options["aon"] = aon.flatMap { "\($0)" }
        options["background_guidance"] = backgroundGuidance.flatMap { "\($0)" }
        options["voice"] = voice
        options["org_review"] = orgReview.flatMap { "\($0)" }
        options["discovery_pushes"] = discoveryPushes.flatMap { "\($0)" }
        options["stops_count"] = stopsCount.flatMap { "\($0)" }
        options["lines_count"] = linesCount.flatMap { "\($0)" }
        options["authorized"] = authorized.flatMap { "\($0)" }
        options["traffic"] = traffic.flatMap { "\($0)" }
        eventTracker.trackEvent("application.get-global-paramethers", withOptions: options)
    }

    public func applicationGetExperimentsInfo(with dictionary: [String: String]?) {
        eventTracker.trackEvent("application.get-experiments-info", withOptions: dictionary ?? [:])
    }

    public func applicationShowRateMeAlert(with firstTime: Bool?) {
        var options: [String: String] = [:]
        options["first_time"] = firstTime.flatMap { "\($0)" }
        eventTracker.trackEvent("application.show-rate-me-alert", withOptions: options)
    }

    public func applicationCloseRateMeAlert(with reason: GenaMetricsEventApplicationCloseRateMeAlertReason?, ratings: Int?) {
        var options: [String: String] = [:]
        options["reason"] = reason.flatMap { $0.rawValue }
        options["ratings"] = ratings.flatMap { "\($0)" }
        eventTracker.trackEvent("application.close-rate-me-alert", withOptions: options)
    }

    public func routesChangeOption(
        with routeType: String?,
        option: String?,
        state: String?
    ) {
        var options: [String: String] = [:]
        options["route_type"] = routeType
        options["option"] = option
        options["state"] = state
        eventTracker.trackEvent("routes.change-option", withOptions: options)
    }

    public func applicationMapReady(with time: Float?, renderTime: Float?) {
        var options: [String: String] = [:]
        options["time"] = time.flatMap { "\($0)" }
        options["render_time"] = renderTime.flatMap { "\($0)" }
        eventTracker.trackEvent("application.map-ready", withOptions: options)
    }

    public func mapChangeTraffic(
        with landscape: Bool?,
        state: Bool?,
        background: GenaMetricsEventMapChangeTrafficBackground?,
        source: GenaMetricsEventMapChangeTrafficSource?
    ) {
        var options: [String: String] = [:]
        options["landscape"] = landscape.flatMap { "\($0)" }
        options["state"] = state.flatMap { "\($0)" }
        options["background"] = background.flatMap { $0.rawValue }
        options["source"] = source.flatMap { $0.rawValue }
        eventTracker.trackEvent("map.change-traffic", withOptions: options)
    }

    public func mapZoomIn(
        with background: GenaMetricsEventMapZoomInBackground?,
        landscape: Bool?,
        source: GenaMetricsEventMapZoomInSource?
    ) {
        var options: [String: String] = [:]
        options["background"] = background.flatMap { $0.rawValue }
        options["landscape"] = landscape.flatMap { "\($0)" }
        options["source"] = source.flatMap { $0.rawValue }
        eventTracker.trackEvent("map.zoom-in", withOptions: options)
    }

    public func mapArrowOff(with currentScale: Float?, landscape: Bool?) {
        var options: [String: String] = [:]
        options["current_scale"] = currentScale.flatMap { "\($0)" }
        options["landscape"] = landscape.flatMap { "\($0)" }
        eventTracker.trackEvent("map.arrow-off", withOptions: options)
    }

    public func mapChangeTilt(
        with currentScale: Float?,
        type: GenaMetricsEventMapChangeTiltType?,
        action: GenaMetricsEventMapChangeTiltAction?
    ) {
        var options: [String: String] = [:]
        options["current_scale"] = currentScale.flatMap { "\($0)" }
        options["type"] = type.flatMap { $0.rawValue }
        options["action"] = action.flatMap { $0.rawValue }
        eventTracker.trackEvent("map.change-tilt", withOptions: options)
    }

    public func mapLocateUser(with state: GenaMetricsEventMapLocateUserState?, landscape: Bool?) {
        var options: [String: String] = [:]
        options["state"] = state.flatMap { $0.rawValue }
        options["landscape"] = landscape.flatMap { "\($0)" }
        eventTracker.trackEvent("map.locate-user", withOptions: options)
    }

    public func mapLongTap(
        with background: GenaMetricsEventMapLongTapBackground?,
        lat: Float?,
        lon: Float?
    ) {
        var options: [String: String] = [:]
        options["background"] = background.flatMap { $0.rawValue }
        options["lat"] = lat.flatMap { "\($0)" }
        options["lon"] = lon.flatMap { "\($0)" }
        eventTracker.trackEvent("map.long-tap", withOptions: options)
    }

    public func mapRouteVia(with lat: Float?, lon: Float?) {
        var options: [String: String] = [:]
        options["lat"] = lat.flatMap { "\($0)" }
        options["lon"] = lon.flatMap { "\($0)" }
        eventTracker.trackEvent("map.route-via", withOptions: options)
    }

    public func mapWhatHere() {
        eventTracker.trackEvent("map.what-here")
    }

    public func applicationIadAttributionData(
        with iadAttribution: Bool?,
        iadOrgName: String?,
        iadOrgId: String?,
        iadCampaignId: String?,
        iadCampaignName: String?,
        iadPurchaseDate: String?,
        iadConversionDate: String?,
        iadConversionType: String?,
        iadClickDate: String?,
        iadAdgroupId: String?,
        iadAdgroupName: String?,
        iadCountryOrRegion: String?,
        iadKeyword: String?,
        iadKeywordId: String?,
        iadKeywordMatchtype: String?,
        iadCreativesetId: String?,
        iadCreativesetName: String?
    ) {
        var options: [String: String] = [:]
        options["iad-attribution"] = iadAttribution.flatMap { "\($0)" }
        options["iad-org-name"] = iadOrgName
        options["iad-org-id"] = iadOrgId
        options["iad-campaign-id"] = iadCampaignId
        options["iad-campaign-name"] = iadCampaignName
        options["iad-purchase-date"] = iadPurchaseDate
        options["iad-conversion-date"] = iadConversionDate
        options["iad-conversion-type"] = iadConversionType
        options["iad-click-date"] = iadClickDate
        options["iad-adgroup-id"] = iadAdgroupId
        options["iad-adgroup-name"] = iadAdgroupName
        options["iad-country-or-region"] = iadCountryOrRegion
        options["iad-keyword"] = iadKeyword
        options["iad-keyword-id"] = iadKeywordId
        options["iad-keyword-matchtype"] = iadKeywordMatchtype
        options["iad-creativeset-id"] = iadCreativesetId
        options["iad-creativeset-name"] = iadCreativesetName
        eventTracker.trackEvent("application.iad-attribution-data", withOptions: options)
    }
}
