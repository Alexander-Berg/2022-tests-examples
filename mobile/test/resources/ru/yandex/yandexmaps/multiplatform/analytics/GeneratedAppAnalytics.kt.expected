package ru.yandex.yandexmaps.multiplatform.analytics
import ru.yandex.yandexmaps.multiplatform.analytics.tracker.AnalyticsEventTracker

/**
 *
 *     This class has been generated automatically. Don't modify.
 *
 *     ./gradlew :multiplatform:analytics:gena
 */
class GeneratedAppAnalytics(
    private val eventTracker: AnalyticsEventTracker
) {
    /**
     * Старт сессии
     *
     * road_alerts - влючен ли слой дорожных событий
     * zoom_buttons_enabled - включены / выключены кнопки изменения масштаба на карте
     * layer_type - какой слой карты выбран для отображения
     * battery_charge - процент зарядки батареи
     * locale - локаль <язык телефона>_<регион телефона>
     * map_rotation - Вращение карты
     * show_ruler - Масштабная линейка
     * auto_rebuild - Автоперестроение маршрутов
     * auto_update - Автообновление кэшей карт
     * routes_in_navi - Маршруты в Навигаторе
     * wifi_only - Загрузка карт только по вай-фаю
     * avoid_toll_roads - Избегать платных дорог
     * show_public_transport_lables - настройку "Метки общественного транспорта" (только в Windows)
     * language - язык приложения
     * authorized - пользователь авторизован
     * traffic - включены пробки или нет
     */
    fun applicationStartSession(
        roadAlerts: Boolean?,
        zoomButtonsEnabled: Boolean?,
        layerType: ApplicationStartSessionLayerType?,
        batteryCharge: Int?,
        locale: String?,
        mapRotation: Boolean?,
        showRuler: Boolean?,
        autoRebuild: Boolean?,
        autoUpdate: Boolean?,
        routesInNavi: Boolean?,
        wifiOnly: Boolean?,
        avoidTollRoads: Boolean?,
        showPublicTransportLables: Boolean?,
        soundsThroughBluetooth: Boolean?,
        language: String?,
        authorized: Boolean?,
        traffic: Boolean?
    ) {
        val params = LinkedHashMap<String, Any?>(17)
        params["road_alerts"] = roadAlerts
        params["zoom_buttons_enabled"] = zoomButtonsEnabled
        params["layer_type"] = layerType?.originalValue
        params["battery_charge"] = batteryCharge
        params["locale"] = locale
        params["map_rotation"] = mapRotation
        params["show_ruler"] = showRuler
        params["auto_rebuild"] = autoRebuild
        params["auto_update"] = autoUpdate
        params["routes_in_navi"] = routesInNavi
        params["wifi_only"] = wifiOnly
        params["avoid_toll_roads"] = avoidTollRoads
        params["show_public_transport_lables"] = showPublicTransportLables
        params["sounds_through_bluetooth"] = soundsThroughBluetooth
        params["language"] = language
        params["authorized"] = authorized
        params["traffic"] = traffic
        eventTracker.trackEvent("application.start-session", params)
    }

    /**
     * Событие окончания загрузки вебвью.
     */
    fun webviewLoaded(type: WebviewLoadedType?) {
        val params = LinkedHashMap<String, Any?>(1)
        params["type"] = type?.originalValue
        eventTracker.trackEvent("webview.loaded", params)
    }

    /**
     * Настройки приложения, которые могут требовать время для определения
     * 1. кол-во закладок
     * 1. кол-во списков в "Мои места"
     * 1. добавлена ли точка "Дом"
     * 1. добавлена ли точка "Работа"
     * 1. размер кэша в Гб
     * 1. значение настройки ночного режима
     * 1. если у пользователя 2 списка и 3 закладки в каждом, и стоит для обоих списков "отображать
     * на карте", то посылаем 6; если нет закладок/не отобр-ся на карте, то посылаем 0
     * 1. разрешены ли push-уведомления системой
     * 1. время запуска в секундах
     * 1. для iOS - от начала выполнения функции didFinishLaunchingWithOptions, в которой у нас
     * основная работа по инициализации приложения происходит.
     * 1. время исполнения каждого этапа запуска в виде сериализованного json,
     * ((https://wiki.yandex-team.ru/maps/mobile/analytics/releases/ios/9.1/#izmenenijavlogirovanii
     * описание здесь))
     * 1. тип запуска
     * 4. map_caches — количество офлайн кешей
     * 1. aon - включен ли АОН
     * 1. background-guidance - включено ли фоновое ведение
     * 1. voice - голос в ведении
     * 1. org_review - включены ли пуши про оценку организаций
     * 1. discovery_pushes - включены ли дискавери пуши
     * 1. stops_count — количество сохраненных остановок
     * 1. lines_count — количество сохраненных маршрутов транспортного средства
     *
     * authorized - пользователь авторизован
     * traffic - включены пробки или нет
     */
    fun applicationGetGlobalParamethers(
        bookmarksCount: Int?,
        listsCount: Int?,
        homeAdded: Boolean?,
        workAdded: Boolean?,
        cacheSize: Double?,
        nightMode: ApplicationGetGlobalParamethersNightMode?,
        showBookmarksOnMap: Int?,
        pushNotifications: Boolean?,
        launchTime: Double?,
        launchFinishTime: Double?,
        launchStepsTime: String?,
        launchType: ApplicationGetGlobalParamethersLaunchType?,
        mapCaches: Int?,
        aon: Boolean?,
        backgroundGuidance: Boolean?,
        voice: String?,
        orgReview: Boolean?,
        discoveryPushes: Boolean?,
        stopsCount: Int?,
        linesCount: Int?,
        authorized: Boolean?,
        traffic: Boolean?
    ) {
        val params = LinkedHashMap<String, Any?>(22)
        params["bookmarks_count"] = bookmarksCount
        params["lists_count"] = listsCount
        params["home_added"] = homeAdded
        params["work_added"] = workAdded
        params["cache_size"] = cacheSize
        params["night_mode"] = nightMode?.originalValue
        params["show_bookmarks_on_map"] = showBookmarksOnMap
        params["push_notifications"] = pushNotifications
        params["launch_time"] = launchTime
        params["launch_finish_time"] = launchFinishTime
        params["launch_steps_time"] = launchStepsTime
        params["launch_type"] = launchType?.originalValue
        params["map_caches"] = mapCaches
        params["aon"] = aon
        params["background_guidance"] = backgroundGuidance
        params["voice"] = voice
        params["org_review"] = orgReview
        params["discovery_pushes"] = discoveryPushes
        params["stops_count"] = stopsCount
        params["lines_count"] = linesCount
        params["authorized"] = authorized
        params["traffic"] = traffic
        eventTracker.trackEvent("application.get-global-paramethers", params)
    }

    /**
     * Набор экспериментов из MapKit
     */
    fun applicationGetExperimentsInfo(dictionary: Map<String, Any?>) {
        eventTracker.trackEvent("application.get-experiments-info", dictionary)
    }

    /**
     * Пользователь увидел экран с предложением оценить приложение
     */
    fun applicationShowRateMeAlert(firstTime: Boolean?) {
        val params = LinkedHashMap<String, Any?>(1)
        params["first_time"] = firstTime
        eventTracker.trackEvent("application.show-rate-me-alert", params)
    }

    /**
     * Пользователь закрыл алерт с просьбой оценить приложение
     */
    fun applicationCloseRateMeAlert(reason: ApplicationCloseRateMeAlertReason?, ratings: Int?) {
        val params = LinkedHashMap<String, Any?>(2)
        params["reason"] = reason?.originalValue
        params["ratings"] = ratings
        eventTracker.trackEvent("application.close-rate-me-alert", params)
    }

    /**
     * Изменение параметра маршрута. Изменение кнопки "Запомнить настройки" тоже логируется этим
     * событием.
     */
    fun routesChangeOption(
        routeType: String?,
        option: String?,
        state: String?
    ) {
        val params = LinkedHashMap<String, Any?>(3)
        params["route_type"] = routeType
        params["option"] = option
        params["state"] = state
        eventTracker.trackEvent("routes.change-option", params)
    }

    /**
     * Загрузились базовые тайлы и надписи - карта полностью готова к использованию пользователем.
     * 1. time - время, которое потребовалось для полной загрузки карты
     * 1. render_time - время отрисовки после инициализации
     */
    fun applicationMapReady(time: Float?, renderTime: Float?) {
        val params = LinkedHashMap<String, Any?>(2)
        params["time"] = time
        params["render_time"] = renderTime
        eventTracker.trackEvent("application.map-ready", params)
    }

    /**
     * Пользователь включил / отключил отображение пробок
     * 1. Горизонтальная ориентация
     * 2. Вкл./Откл. пробоки
     * 3. в каком режиме находится пользователь (map - просто открыта карта, route - построен
     * маршрут,  search-results - пины результатов поиска)
     */
    fun mapChangeTraffic(
        landscape: Boolean?,
        state: Boolean?,
        background: MapChangeTrafficBackground?,
        source: MapChangeTrafficSource?
    ) {
        val params = LinkedHashMap<String, Any?>(4)
        params["landscape"] = landscape
        params["state"] = state
        params["background"] = background?.originalValue
        params["source"] = source?.originalValue
        eventTracker.trackEvent("map.change-traffic", params)
    }

    /**
     * Пользователь увеличил зум на карте кнопками
     */
    fun mapZoomIn(
        background: MapZoomInBackground?,
        landscape: Boolean?,
        source: MapZoomInSource?
    ) {
        val params = LinkedHashMap<String, Any?>(3)
        params["background"] = background?.originalValue
        params["landscape"] = landscape
        params["source"] = source?.originalValue
        eventTracker.trackEvent("map.zoom-in", params)
    }

    /**
     * Пользователь выключил вращение карты
     */
    fun mapArrowOff(currentScale: Float?, landscape: Boolean?) {
        val params = LinkedHashMap<String, Any?>(2)
        params["current_scale"] = currentScale
        params["landscape"] = landscape
        eventTracker.trackEvent("map.arrow-off", params)
    }

    /**
     * Пользователь изменил наклон карты
     */
    fun mapChangeTilt(
        currentScale: Float?,
        type: MapChangeTiltType?,
        action: MapChangeTiltAction?
    ) {
        val params = LinkedHashMap<String, Any?>(3)
        params["current_scale"] = currentScale
        params["type"] = type?.originalValue
        params["action"] = action?.originalValue
        eventTracker.trackEvent("map.change-tilt", params)
    }

    /**
     * Пользователь нажал на кнопку Моё местоположение
     */
    fun mapLocateUser(
        state: MapLocateUserState?,
        background: MapLocateUserBackground?,
        landscape: Boolean?
    ) {
        val params = LinkedHashMap<String, Any?>(3)
        params["state"] = state?.originalValue
        params["background"] = background?.originalValue
        params["landscape"] = landscape
        eventTracker.trackEvent("map.locate-user", params)
    }

    /**
     * Пользователь сделал лонг-тап на карте. Параметр - что именно отображено на карте в момент
     * лонг-тапа
     */
    fun mapLongTap(
        background: MapLongTapBackground?,
        lat: Float?,
        lon: Float?
    ) {
        val params = LinkedHashMap<String, Any?>(3)
        params["background"] = background?.originalValue
        params["lat"] = lat
        params["lon"] = lon
        eventTracker.trackEvent("map.long-tap", params)
    }

    /**
     * Пользователь нажал на заехать через точку
     */
    fun mapRouteVia(lat: Float?, lon: Float?) {
        val params = LinkedHashMap<String, Any?>(2)
        params["lat"] = lat
        params["lon"] = lon
        eventTracker.trackEvent("map.route-via", params)
    }

    /**
     * Пользователь нажал на  Что здесь?
     */
    fun mapWhatHere() {
        val params = LinkedHashMap<String, Any?>(0)
        eventTracker.trackEvent("map.what-here", params)
    }

    enum class ApplicationStartSessionLayerType(
        val originalValue: String
    ) {
        MAP("map"),

        SATELLITE("satellite"),

        HYBRID("hybrid");
    }

    enum class WebviewLoadedType(
        val originalValue: String
    ) {
        DIRECT("direct");
    }

    enum class ApplicationGetGlobalParamethersNightMode(
        val originalValue: String
    ) {
        TRUE("true"),

        FALSE("false"),

        AUTO("auto"),

        SYSTEM("system");
    }

    enum class ApplicationGetGlobalParamethersLaunchType(
        val originalValue: String
    ) {
        FRESH_START("fresh_start"),

        FROM_BACKGROUND("from_background");
    }

    enum class ApplicationCloseRateMeAlertReason(
        val originalValue: String
    ) {
        LATER("later"),

        RATE("rate"),

        OUTER_TAP("outer-tap");
    }

    enum class MapChangeTrafficBackground(
        val originalValue: String
    ) {
        MAP("map"),

        ROUTE("route"),

        SEARCH_RESULTS("search-results");
    }

    enum class MapChangeTrafficSource(
        val originalValue: String
    ) {
        CONTROL_ON_MAP("control-on-map"),

        LAYER_MENU("layer-menu");
    }

    enum class MapZoomInBackground(
        val originalValue: String
    ) {
        MAP("map"),

        ROUTE("route"),

        ROUTE_POINTS("route-points"),

        SEARCH_RESULTS("search-results"),

        NAVIGATION("navigation"),

        ROULETTE("roulette");
    }

    enum class MapZoomInSource(
        val originalValue: String
    ) {
        GESTURE("gesture"),

        ZOOM_BUTTON("zoom-button"),

        ZOOM_BUTTON_LONG_TAP("zoom-button-long-tap"),

        VOLUME_BUTTON("volume-button");
    }

    enum class MapChangeTiltType(
        val originalValue: String
    ) {
        FLAT("flat"),

        PERSPECTIVE("perspective");
    }

    enum class MapChangeTiltAction(
        val originalValue: String
    ) {
        GESTURE("gesture"),

        BUTTON("button");
    }

    enum class MapLocateUserState(
        val originalValue: String
    ) {
        LOCATE("locate"),

        ARROW_ON("arrow-on"),

        ARROW_OFF("arrow-off"),

        START_SEARCHING("start-searching"),

        STOP_SEARCHING("stop-searching"),

        ERROR("error");
    }

    enum class MapLocateUserBackground(
        val originalValue: String
    ) {
        MAP("map"),

        ROUTE("route"),

        SEARCH_RESULTS("search-results"),

        NAVIGATION("navigation");
    }

    enum class MapLongTapBackground(
        val originalValue: String
    ) {
        ROUTE("route"),

        NAVIGATION("navigation"),

        MAP("map"),

        SEARCH_RESULTS("search-results");
    }
}
