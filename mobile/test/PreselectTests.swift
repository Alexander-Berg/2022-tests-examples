// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/preselect-tests.ts >>>

import Foundation

open class PreselectPayWithExistingCardTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Pay with existing card")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(74)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(PressSelectButtonAction())
  }

}

open class PreselectPayWithExistingCardCVVTest: MBTTest<PaymentDataPreparer> {
  private var forceCvv: Bool = true
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Pay with existing card (cvv)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(75)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction())
  }

}

open class PreselectPayWithExistingCardCVV3DSTest: MBTTest<PaymentDataPreparer> {
  private var code3ds: String = "200"
  private var forceCvv: Bool = true
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Pay with existing card (cvv + 3ds)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(77)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).setForceCvv(self.forceCvv).set3ds(self.code3ds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds))
  }

}

open class PreselectPayWithCashTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Pay with cash")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(82)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].enableCash().addBoundCard(self.card)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(TapOnCashPaymentMethodAction()).then(SetPaymentButtonStatusAction(true)).then(PressSelectButtonAction())
  }

}

open class PreselectPayWithCardNotEnoughFundsTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Pay with card with not enough funds")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(78)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card).forcePaymentError(PaymentErrorType.notEnoughFunds)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(SelectPaymentMethodAction(0)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressSelectButtonAction())
  }

}

open class PreselectUnbindCardTest: MBTTest<PaymentDataPreparer> {
  private var card1: BoundCard = BoundCard.generated()
  private var card2: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Unbind card")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(84)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].addBoundCard(self.card1).addBoundCard(self.card2)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartPreselectPaymentProcessAction()).then(SetPaymentButtonStatusAction(true)).then(TapOnEditButtonAction()).then(AssertAction()).then(UnbindCardAction(0)).then(AssertAction()).then(TapOnDoneButtonAction())
  }

}

open class PreselectPayWithNewCardCVVTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  private var forceCvv: Bool = true
  public init() {
    super.init("\(TestScenario.preselect) Pay with new card (cvv)")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(86)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setForceCvv(self.forceCvv).setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(self.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PreselectTapOnAddCardAction()).then(AssertAction()).then(PreselectEnter3dsAction()).then(AssertAction()).then(PressSelectButtonAction()).then(SetPaymentButtonStatusAction(false)).then(AssertAction()).then(TapOnCvvFieldOfSelectPaymentMethodAction()).then(EnterCvvForSelectPaymentMethodAction(self.card.cvv)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction())
  }

}

open class PreselectPayWithNewCardTest: MBTTest<PaymentDataPreparer> {
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.preselect) Pay with new card")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(87)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(AssertAction()).then(StartPreselectPaymentProcessAction()).then(AssertAction()).then(FillNewCardDataAction(self.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PreselectTapOnAddCardAction()).then(PreselectEnter3dsAction()).then(AssertAction()).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressSelectButtonAction())
  }

}

