// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM test/card-binding-tests.ts >>>

import Foundation

open class BindCardsAndCheckPaymentMethodsListTest: MBTTest<PaymentDataPreparer> {
  public init() {
    super.init("\(TestScenario.cardBinding) Bind cards and check payment methods list")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(3)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(SpecificCards.masterCard, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(SpecificCards.visa, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(SpecificCards.mir, false)).then(SetPaymentButtonStatusAction(true)).then(PressPaymentButtonAction()).then(AssertAction()).then(ClosePaymentResultScreenAction()).then(StartRegularPaymentProcessAction())
  }

}

open class BindCardWithValidationTest: MBTTest<PaymentDataPreparer> {
  private var code3ds: String = "200"
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.cardBinding) Bind card with validation")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(73)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setBindingV2(true).set3ds(self.code3ds).setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(self.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds)).then(ClosePaymentResultScreenAction()).then(StartRegularPaymentProcessAction())
  }

}

open class BindCardWithValidationFailedTest: MBTTest<PaymentDataPreparer> {
  private var code3ds: String = "400"
  private var card: BoundCard = BoundCard.generated()
  public init() {
    super.init("\(TestScenario.cardBinding) Bind card with validation failed")
  }

  open override func setupSettings(_ settings: TestSettings) -> Void {
    settings.commonCase(90)
  }

  open override func prepareAccounts(_ preparers: YSArray<PaymentDataPreparer>) -> Void {
    preparers[0].setBindingV2(true).set3ds(self.code3ds).setPaymentMethodsFilter(PaymentMethodsFilter(true, false, false, false))
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    return YSArray(AccountType2.YandexTest)
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    return TestPlan.empty().then(OpenSampleAppAction()).then(StartCardBindingProcessAction()).then(AssertAction()).then(FillNewCardDataAction(self.card, false)).then(SetPaymentButtonStatusAction(true)).then(AssertAction()).then(PressPaymentButtonAction()).then(AssertAction()).then(Enter3dsAction(self.code3ds)).then(SetPaymentButtonStatusAction(false)).then(ClosePaymentResultScreenAction()).then(AssertAction()).then(StartRegularPaymentProcessAction())
  }

}

