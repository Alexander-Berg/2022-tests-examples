// <<< AUTOGENERATED BY YANDEX.SCRIPT FROM mbt/test/base-user-behaviour-test.ts >>>

import Foundation

open class BaseUserBehaviourTest<T>: MBTTest<T> {
  public let startComponent: MBTComponent
  public let pathLength: Int32
  public let logger: Logger
  public let seed: Int32
  public init(_ description: String, _ startComponent: MBTComponent, _ pathLength: Int32, _ logger: Logger, _ seed: Int32) {
    self.startComponent = startComponent
    self.pathLength = pathLength
    self.logger = logger
    self.seed = seed
    super.init(description, YSArray(TestSuite.Random))
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    if model == nil {
      return TestPlan.empty()
    }
    let random = PseudoRandomProvider(self.seed)
    let behaviour = self.getUserBehaviour(accounts)
    let walkStrategy = UserBehaviourWalkStrategy(behaviour, RandomActionChooser(random), self.pathLength)
    var applicationModel = model.copy()
    applicationModel.supportedFeatures = supportedFeatures
    let stateMachine = StateMachine(model, applicationModel, walkStrategy, self.logger)
    do {
      (try stateMachine.go(self.startComponent))
    } catch {
      let e = error
      if e is YSError {
        fail((e as! YSError).message)
      } else {
        fatalError("Only YSError supported!")
      }
    }
    return TestPlan.empty().thenChain(walkStrategy.history)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    fatalError("Must be overridden in subclasses")
  }

  open override func prepareAccounts(_ preparers: YSArray<T>) -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func getUserBehaviour(_ accounts: YSArray<UserAccount>) -> UserBehaviour {
    fatalError("Must be overridden in subclasses")
  }

}

open class FullCoverageBaseTest<T>: MBTTest<T> {
  private var startComponent: MBTComponent
  private var logger: Logger
  public init(_ description: String, _ startComponent: MBTComponent, _ logger: Logger) {
    self.startComponent = startComponent
    self.logger = logger
    super.init(description, YSArray(TestSuite.FullCoverage))
  }

  @discardableResult
  open override func scenario(_ accounts: YSArray<UserAccount>, _ model: AppModel!, _ supportedFeatures: YSArray<FeatureID>) -> TestPlan {
    if model == nil {
      return TestPlan.empty()
    }
    let behaviour = self.getUserBehaviour(accounts)
    let limits = self.getActionLimits()
    let runner = MultiRunner(self.startComponent, behaviour, limits, supportedFeatures, self.logger)
    let path = runner.preparePath(model)
    let pathLength = path.length
    self.logger.info("Optimal path length: \(pathLength)")
    return TestPlan.empty().thenChain(path)
  }

  @discardableResult
  open override func requiredAccounts() -> YSArray<AccountType2> {
    fatalError("Must be overridden in subclasses")
  }

  open override func prepareAccounts(_ builders: YSArray<T>) -> Void {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func getUserBehaviour(_ userAccounts: YSArray<UserAccount>) -> UserBehaviour {
    fatalError("Must be overridden in subclasses")
  }

  @discardableResult
  open func getActionLimits() -> ActionLimitsStrategy {
    fatalError("Must be overridden in subclasses")
  }

}

