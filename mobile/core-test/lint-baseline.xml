<?xml version="1.0" encoding="UTF-8"?>
<issues format="5" by="lint 3.5.1">

    <issue
        id="LintBaseline"
        severity="Information"
        message="6 warnings were filtered out because they are listed in the baseline file, lint-baseline.xml&#xA;"
        category="Lint"
        priority="10"
        summary="Baseline Issues"
        explanation="Lint can be configured with a &quot;baseline&quot;; a set of current issues found in a codebase, which future runs of lint will silently ignore. Only new issues not found in the baseline are reported.&#xA;&#xA;Note that while opening files in the IDE, baseline issues are not filtered out; the purpose of baselines is to allow you to get started using lint and break the build on all newly introduced errors, without having to go back and fix the entire codebase up front. However, when you open up existing files you still want to be aware of and fix issues as you come across them.&#xA;&#xA;This issue type is used to emit two types of informational messages in reports: first, whether any issues were filtered out so you don&apos;t have a false sense of security if you forgot that you&apos;ve checked in a baseline file, and second, whether any issues in the baseline file appear to have been fixed such that you can stop filtering them out and get warned if the issues are re-introduced.">
        <location
            file="lint-baseline.xml"/>
    </issue>

    <issue
        id="LintBaseline"
        severity="Information"
        message="9 errors/warnings were listed in the baseline file (lint-baseline.xml) but not found in the project; perhaps they have been fixed? Another possible explanation is that lint recently stopped analyzing (and including results from) dependent projects by default. You can turn this back on with `android.lintOptions.checkDependencies=true`. Unmatched issue types: InlinedApi, InvalidPackage (8)"
        category="Lint"
        priority="10"
        summary="Baseline Issues"
        explanation="Lint can be configured with a &quot;baseline&quot;; a set of current issues found in a codebase, which future runs of lint will silently ignore. Only new issues not found in the baseline are reported.&#xA;&#xA;Note that while opening files in the IDE, baseline issues are not filtered out; the purpose of baselines is to allow you to get started using lint and break the build on all newly introduced errors, without having to go back and fix the entire codebase up front. However, when you open up existing files you still want to be aware of and fix issues as you come across them.&#xA;&#xA;This issue type is used to emit two types of informational messages in reports: first, whether any issues were filtered out so you don&apos;t have a false sense of security if you forgot that you&apos;ve checked in a baseline file, and second, whether any issues in the baseline file appear to have been fixed such that you can stop filtering them out and get warned if the issues are re-introduced.">
        <location
            file="lint-baseline.xml"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by ConnectivityManager.getAllNetworkInfo: android.permission.ACCESS_NETWORK_STATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="        when(cm.getAllNetworkInfo()).thenReturn(networkInfos);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/upload/DiskUploaderTestHelper.java"
            line="494"
            column="9"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by ConnectivityManager.getActiveNetworkInfo: android.permission.ACCESS_NETWORK_STATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="        when(cm.getActiveNetworkInfo()).thenReturn(networkInfo);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/upload/DiskUploaderTestHelper.java"
            line="495"
            column="9"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by ConnectivityManager.getAllNetworkInfo: android.permission.ACCESS_NETWORK_STATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="        when(cm.getAllNetworkInfo()).thenReturn(new NetworkInfo[]{networkInfo});"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/Mocks.java"
            line="123"
            column="9"/>
    </issue>

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by ConnectivityManager.getActiveNetworkInfo: android.permission.ACCESS_NETWORK_STATE"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with targetSdkVersion 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="        when(cm.getActiveNetworkInfo()).thenReturn(networkInfo);"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/Mocks.java"
            line="124"
            column="9"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        cv.put(Queue.SRC_NAME_TOLOWER_NO_PATH, srcName.toLowerCase());"
        errorLine2="                                                       ~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/upload/TestUploadQueue.java"
            line="34"
            column="56"/>
    </issue>

    <issue
        id="InlinedApi"
        severity="Warning"
        message="Field requires API level Q (current min is 23): `android.providerImpl.MediaStore.MediaColumns#DATE_TAKEN`"
        category="Correctness"
        priority="6"
        summary="Using inlined constants on older versions"
        explanation="This check scans through all the Android API field references in the application and flags certain constants, such as static final integers and Strings, which were introduced in later versions. These will actually be copied into the class files rather than being referenced, which means that the value is available even when running on older devices. In some cases that&apos;s fine, and in other cases it can result in a runtime crash or incorrect behavior. It depends on the context, so consider the code carefully and decide whether it&apos;s safe and can be suppressed or whether the code needs to be guarded.&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level."
        errorLine1="            MediaStore.Images.ImageColumns.DATE_TAKEN,"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/upload/DiskUploaderTestHelper.java"
            line="129"
            column="13"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.naming.directory`. Referenced from `org.bouncycastle.jce.providerImpl.X509LDAPCertStoreSpi`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.52/88a941faf9819d371e3174b5ed56a3f3f7d73269/bcprov-jdk15on-1.52.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.naming`. Referenced from `org.bouncycastle.jce.providerImpl.X509LDAPCertStoreSpi`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.52/88a941faf9819d371e3174b5ed56a3f3f7d73269/bcprov-jdk15on-1.52.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.lang.instrument`. Referenced from `net.bytebuddy.agent.ByteBuddyAgent`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy-agent/1.9.0/37b5703b4a6290be3fffc63ae9c6bcaaee0ff856/byte-buddy-agent-1.9.0.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.lang.management`. Referenced from `net.bytebuddy.agent.ByteBuddyAgent.ProcessProvider.ForCurrentVm.ForLegacyVm`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/net.bytebuddy/byte-buddy-agent/1.9.0/37b5703b4a6290be3fffc63ae9c6bcaaee0ff856/byte-buddy-agent-1.9.0.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.xml.stream`. Referenced from `org.robolectric.res.NodeHandler`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/resources/4.3.1/ccc69608304ec4c36e8b26d7fe7f48d7bec1dd0b/resources-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt.geom`. Referenced from `org.robolectric.shadows.CachedPathIteratorFactory`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/shadows-framework/4.3.1/da048a93951f4d9e46519749c53b0f868dfdf425/shadows-framework-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt.image`. Referenced from `org.robolectric.shadows.ImageUtil`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/shadows-framework/4.3.1/da048a93951f4d9e46519749c53b0f868dfdf425/shadows-framework-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `java.awt`. Referenced from `org.robolectric.shadows.ShadowColor`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/shadows-framework/4.3.1/da048a93951f4d9e46519749c53b0f868dfdf425/shadows-framework-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.imageio.plugins.jpeg`. Referenced from `org.robolectric.shadows.ImageUtil`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/shadows-framework/4.3.1/da048a93951f4d9e46519749c53b0f868dfdf425/shadows-framework-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.imageio.stream`. Referenced from `org.robolectric.shadows.ImageUtil`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/shadows-framework/4.3.1/da048a93951f4d9e46519749c53b0f868dfdf425/shadows-framework-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.imageio`. Referenced from `org.robolectric.shadows.ImageUtil`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/shadows-framework/4.3.1/da048a93951f4d9e46519749c53b0f868dfdf425/shadows-framework-4.3.1.jar"/>
    </issue>

    <issue
        id="InvalidPackage"
        severity="Error"
        message="Invalid package reference in library; not included in Android: `javax.inject`. Referenced from `org.robolectric.util.inject.Injector`."
        category="Correctness"
        priority="6"
        summary="Package not included in Android"
        explanation="This check scans through libraries looking for calls to APIs that are not included in Android.&#xA;&#xA;When you create Android projects, the classpath is set up such that you can only access classes in the API packages that are included in Android. However, if you add other projects to your libs/ folder, there is no guarantee that those .jar files were built with an Android specific classpath, and in particular, they could be accessing unsupported APIs such as java.applet.&#xA;&#xA;This check scans through library jars and looks for references to API packages that are not included in Android and flags these. This is only an error if your code calls one of the library classes which wind up referencing the unsupported package.">
        <location
            file="/home/andreewkov/.gradle/caches/modules-2/files-2.1/org.robolectric/utils/4.3.1/ae572384d7fc49713ef3fc2061a81b45aefe9eb7/utils-4.3.1.jar"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="        final DH db = new DH(context);"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/providerImpl/DiskContentProviderTest.java"
            line="26"
            column="23"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="        dbOpener = new DH(mContext);"
        errorLine2="        ~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/providerImpl/DiskDatabaseMethodTest.java"
            line="22"
            column="9"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="        dbOpener = new DH(mContext);"
        errorLine2="                   ~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/providerImpl/DiskDatabaseMethodTest.java"
            line="22"
            column="20"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="        final DH db = new DH(context);"
        errorLine2="                      ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/upload/DiskUploaderTestHelper.java"
            line="165"
            column="23"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="            final DiskContentProvider contentProvider = createDiskContentProvider(context, new DH(context));"
        errorLine2="                                                                                           ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/Mocks.java"
            line="55"
            column="92"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="            db = new DH(context);"
        errorLine2="            ~~">
        <location
            file="src/main/java/ru/yandex/disk/test/TestObjectsFactory.java"
            line="174"
            column="13"/>
    </issue>

    <issue
        id="VisibleForTests"
        severity="Warning"
        message="This method should only be accessed from tests or within private scope"
        category="Correctness"
        priority="4"
        summary="Visible Only For Tests"
        explanation="With the `@VisibleForTesting` annotation you can specify an `otherwise=` attribute which specifies the intended visibility if the method had not been made more widely visible for the tests.&#xA;&#xA;This check looks for accesses from production code (e.g. not tests) where the access would not have been allowed with the intended production visibility."
        errorLine1="            db = new DH(context);"
        errorLine2="                 ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/test/TestObjectsFactory.java"
            line="174"
            column="18"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="        }).when(spy).query(any(Uri.class), any(String[].class), nullable(String.class), any(String[].class),"
        errorLine2="                     ~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/test/CursorTrackers.java"
            line="25"
            column="22"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;UploadProcessor>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.&#xA;&#xA;This is **particularly** useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.&#xA;&#xA;If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="        final HashMap&lt;Integer, UploadProcessor> processors = new HashMap&lt;>();"
        errorLine2="                                                             ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/upload/DiskUploaderTestHelper.java"
            line="233"
            column="62"/>
    </issue>

    <issue
        id="UseSparseArrays"
        severity="Warning"
        message="Use `new SparseArray&lt;UploadQueueSerializer>(...)` instead for better performance"
        category="Performance"
        priority="4"
        summary="HashMap can be replaced with SparseArray"
        explanation="For maps where the keys are of type integer, it&apos;s typically more efficient to use the Android `SparseArray` API. This check identifies scenarios where you might want to consider using `SparseArray` instead of `HashMap` for better performance.&#xA;&#xA;This is **particularly** useful when the value types are primitives like ints, where you can use `SparseIntArray` and avoid auto-boxing the values from `int` to `Integer`.&#xA;&#xA;If you need to construct a `HashMap` because you need to call an API outside of your control which requires a `Map`, you can suppress this warning using for example the `@SuppressLint` annotation."
        errorLine1="        final Map&lt;Integer, UploadQueueSerializer> serializers = new HashMap&lt;>();"
        errorLine2="                                                                ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/ru/yandex/disk/test/TestObjectsFactory.java"
            line="222"
            column="65"/>
    </issue>

</issues>
