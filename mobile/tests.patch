--- mobile/geo/navi/client/yandexnavi.core/src/navi/navikit/ui/models/model.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navi/navikit/ui/models/model.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -288,14 +288,14 @@ private:
     template <typename ParametersTuple, std::size_t... ModelIndices>
     void syncImpl(ParametersTuple tuple, std::index_sequence<ModelIndices...> /* modelIndices */)
     {
-        auto combiner = std::__ndk1::get<std::tuple_size<ParametersTuple>::value - 2>(tuple);
+        auto combiner = std::get<std::tuple_size<ParametersTuple>::value - 2>(tuple);
         using CombinedModelValue =
-            decltype(combiner(std::__ndk1::get<ModelIndices>(tuple)->value()...));
+            decltype(combiner(std::get<ModelIndices>(tuple)->value()...));
 
         auto* modelImpl = push(makeDerivedModel<CombinedModelValue>(
-            combiner, std::__ndk1::get<ModelIndices>(tuple)...));
+            combiner, std::get<ModelIndices>(tuple)...));
 
-        auto callback = std::__ndk1::get<std::tuple_size<ParametersTuple>::value - 1>(tuple);
+        auto callback = std::get<std::tuple_size<ParametersTuple>::value - 1>(tuple);
         subscribe(modelImpl, callback);
     }
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/stub/bitmaps_checker_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/stub/bitmaps_checker_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,6 +1,6 @@
 #include "../bitmaps_checker.h"
 
-namespace yandex::maps::navikit::ads {
+namespace yandex::maps::navi::ads {
 
 bool isBitmapEmpty(const runtime::PlatformBitmap& /*bitmap*/)
 {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/tests/advert_utils_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/tests/advert_utils_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -19,7 +19,7 @@
 
 #include <vector>
 
-namespace yandex::maps::navikit::ads::tests {
+namespace yandex::maps::navi::ads::tests {
 
 struct GeoObjectToAdItemFixture {
     std::shared_ptr<mapkit::GeoObject> geoObject
@@ -511,7 +511,7 @@ mapkit::search::BillboardAction createCallAction(
             BillboardObjectMetadata::Properties::Actions::Call::priority
         });
     }
-    
+
     return callAction;
 }
 
@@ -717,7 +717,7 @@ void addBillboardMetadata(
     billboardObjectMetadata.placeId = BillboardObjectMetadata::placeId;
 
     properties->push_back({"campaignId", BillboardObjectMetadata::Properties::campaignId});
-    
+
     properties->push_back({"stylePin", BillboardObjectMetadata::Properties::stylePin});
     billboardObjectMetadata.logId = BillboardObjectMetadata::logId;
 
@@ -895,12 +895,12 @@ BOOST_FIXTURE_TEST_CASE(DirectGeoObjectToAdItem, GeoObjectToAdItemFixture)
     BOOST_CHECK(!adItem->pin.billboard);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -933,7 +933,7 @@ BOOST_FIXTURE_TEST_CASE(DirectGeoObjectToAdItemWithoutBusinessMetadata, GeoObjec
     BOOST_CHECK(adItem->advertisement == boost::none);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -968,7 +968,7 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->advertisement == boost::none);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1008,7 +1008,7 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->advertisement == boost::none);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1051,7 +1051,7 @@ BOOST_FIXTURE_TEST_CASE(DirectGeoObjectToAdItemWithoutTextInAdvertisement, GeoOb
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1095,7 +1095,7 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1134,7 +1134,7 @@ BOOST_FIXTURE_TEST_CASE(DirectGeoObjectToAdItemWithoutContactCounter, GeoObjectT
     BOOST_CHECK(!adItem->pin.billboard);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct == boost::none);
@@ -1173,7 +1173,7 @@ BOOST_FIXTURE_TEST_CASE(DirectGeoObjectToAdItemWithoutDisplayCounter, GeoObjectT
     BOOST_CHECK(!adItem->pin.billboard);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct == boost::none);
@@ -1209,12 +1209,12 @@ BOOST_FIXTURE_TEST_CASE(DirectGeoObjectToAdItemWithoutCompanyPhoneNumber, GeoObj
     BOOST_CHECK(!adItem->pin.billboard);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1271,12 +1271,12 @@ BOOST_FIXTURE_TEST_CASE(BusinessGeoObjectToAdItem, GeoObjectToAdItemFixture)
         == BusinessObjectMetadata::Advertisement::Promo::Banner::url);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1359,12 +1359,12 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->promo == boost::none);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1418,12 +1418,12 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->promo == boost::none);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1482,12 +1482,12 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->promo->banner == boost::none);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1548,7 +1548,7 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->advertisement == boost::none);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1610,7 +1610,7 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1674,7 +1674,7 @@ BOOST_FIXTURE_TEST_CASE(
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -1732,7 +1732,7 @@ BOOST_FIXTURE_TEST_CASE(BusinessGeoObjectToAdItemWithoutContactCounter, GeoObjec
         == BusinessObjectMetadata::Advertisement::Promo::Banner::url);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct == boost::none);
@@ -1790,7 +1790,7 @@ BOOST_FIXTURE_TEST_CASE(BusinessGeoObjectToAdItemWithoutDisplayCounter, GeoObjec
         == BusinessObjectMetadata::Advertisement::Promo::Banner::url);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct == boost::none);
@@ -1850,12 +1850,12 @@ BOOST_FIXTURE_TEST_CASE(
         == BusinessObjectMetadata::Advertisement::Promo::Banner::url);
     BOOST_CHECK(adItem->advertisement);
     BOOST_CHECK(adItem->advertisement->title
-        == format("%s • ", BusinessObjectMetadata::Advertisement::title));
+        == navikit::format("%s • ", BusinessObjectMetadata::Advertisement::title));
     BOOST_CHECK(adItem->advertisement->text == BusinessObjectMetadata::Advertisement::text);
     BOOST_CHECK(adItem->advertisement->disclaimer == AdItemResult::Advertisement::disclaimer);
     BOOST_CHECK(adItem->direct);
     BOOST_CHECK(adItem->direct->title == DirectObjectMetadata::title);
-    BOOST_CHECK(adItem->direct->text == format(" | %s", DirectObjectMetadata::text));
+    BOOST_CHECK(adItem->direct->text == navikit::format(" | %s", DirectObjectMetadata::text));
     BOOST_CHECK(adItem->direct->displayCounterUrl == DirectObjectMetadata::displayCounter.url);
     BOOST_CHECK(adItem->direct->contactCounterUrl == DirectObjectMetadata::contactCounter.url);
     BOOST_CHECK(adItem->direct->disclaimer == AdItemResult::Direct::disclaimer);
@@ -2923,7 +2923,7 @@ BOOST_FIXTURE_TEST_CASE(NoProductTypeAndLogoTextFirstCreative, GeoObjectToAdItem
     const auto adItem = billboardGeoObjectToPinAdItem(geoObject);
 
     BOOST_CHECK(adItem != nullptr);
-    
+
     BOOST_CHECK(adItem->productType == boost::none);
     BOOST_CHECK(!adItem->pinsEnabled);
     BOOST_CHECK(adItem->routePinsEnabled);
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/tests/download_all_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/tests/download_all_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -5,7 +5,7 @@
 
 namespace yandex {
 namespace maps {
-namespace navikit {
+namespace navi {
 namespace ads {
 
 BOOST_AUTO_TEST_SUITE(DownloadBitmapTests)
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/tests/mocks/bitmaps_downloader_mock.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ads/tests/mocks/bitmaps_downloader_mock.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -9,7 +9,7 @@
 
 using namespace std::chrono_literals;
 
-namespace yandex::maps::navikit::ads {
+namespace yandex::maps::navi::ads {
 
 class MockBitmapsDownloader : public BitmapsDownloader {
 public:
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/audio/dummy/audio_utils_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/audio/dummy/audio_utils_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,8 +2,11 @@
 
 #include <yandex/maps/navikit/audio/audio_utils.h>
 
-namespace yandex::maps::navikit {
-namespace projected_system { class ProjectedSystemManager; }
+namespace yandex::maps::navikit::projected_system {
+class ProjectedSystemManager;
+}
+
+namespace yandex::maps::navi {
 namespace audio {
 
 namespace {
@@ -31,7 +34,7 @@ public:
 std::unique_ptr<AudioUtils> createAudioUtils(
     settings::SettingsManager* /*settingsManager*/,
     const std::shared_ptr<AudioUtilsDelegate>& /*audioUtilsDelegate*/,
-    projected_system::ProjectedSystemManager* /*projectedSystemManager*/) noexcept
+    navikit::projected_system::ProjectedSystemManager* /*projectedSystemManager*/) noexcept
 {
     return std::make_unique<AudioUtilsStub>();
 }
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/audio_focus/tests/audio_focus_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/audio_focus/tests/audio_focus_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -3,7 +3,7 @@
 #include "mocks/mock_system_focus_manager.h"
 
 #include <yandex/maps/navikit/audio/audio_session_controller_factory.h>
-#include <yandex/maps/navikit/audio_focus/audio_focus.h>
+#include <yandex/maps/navi/audio_focus/audio_focus.h>
 #include <yandex/maps/navikit/audio_focus/audio_focus_manager_factory.h>
 #include <yandex/maps/navikit/mocks/mock_settings_manager.h>
 #include <yandex/maps/navikit/mocks/mock_experiments_manager.h>
@@ -12,7 +12,7 @@
 
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::audio_focus::tests {
+namespace yandex::maps::navi::audio_focus::tests {
 
 namespace {
 class AudioFocusTestFixture {
@@ -29,7 +29,7 @@ private:
 
     std::shared_ptr<myspin::ExtendedMySpinManager> mySpinManager_;
     std::shared_ptr<AudioFocusManager> manager_;
-    std::unique_ptr<experiments::MockExperimentsManager> experimentsManager_;
+    std::unique_ptr<navikit::experiments::MockExperimentsManager> experimentsManager_;
 };
 
 AudioFocusTestFixture::AudioFocusTestFixture()
@@ -41,7 +41,7 @@ AudioFocusTestFixture::AudioFocusTestFixture()
 
 void AudioFocusTestFixture::setUp()
 {
-    experimentsManager_ = std::make_unique<experiments::MockExperimentsManager>();
+    experimentsManager_ = std::make_unique<navikit::experiments::MockExperimentsManager>();
     systemFocusManager_ = std::make_shared<MockSystemFocusManager>();
     mySpinManager_ = myspin::createMySpinManager(nullptr);
     manager_ = createAudioFocusManager(mySpinManager_.get(),
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/audio_focus/tests/mocks/mock_system_focus_manager.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/audio_focus/tests/mocks/mock_system_focus_manager.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,7 +2,7 @@
 
 #include <yandex/maps/runtime/assert.h>
 
-namespace yandex::maps::navikit::audio_focus::tests {
+namespace yandex::maps::navi::audio_focus::tests {
 
 namespace {
 MockSystemFocusManager::StateType toStateType(SystemFocusManager::ShortSoundType type)
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/audio_focus/tests/mocks/mock_system_focus_manager.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/audio_focus/tests/mocks/mock_system_focus_manager.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -4,7 +4,7 @@
 
 #include <map>
 
-namespace yandex::maps::navikit::audio_focus::tests {
+namespace yandex::maps::navi::audio_focus::tests {
 
 class MockSystemFocusManager : public SwitchableSystemFocusManager {
 public:
@@ -12,7 +12,7 @@ public:
     using States = std::map<StateType, State>;
 
     MockSystemFocusManager();
-    
+
     virtual void init() override {}
 
     virtual bool requestShortSoundFocus(ShortSoundType type) override;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/bookmarks/tests/manager_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/bookmarks/tests/manager_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,11 +1,11 @@
-#include <yandex/maps/navikit/bookmarks/bookmarks_manager.h>
+#include <yandex/maps/navi/bookmarks/bookmarks_manager.h>
 #include <yandex/maps/navikit/bookmarks/bookmarks_manager_creator.h>
 
 #include <boost/test/unit_test.hpp>
 
 namespace yandex {
 namespace maps {
-namespace navikit {
+namespace navi {
 namespace bookmarks {
 
 BOOST_AUTO_TEST_SUITE(BookmarksManagerTest)
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/bookmarks/tests/utils_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/bookmarks/tests/utils_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,13 +1,13 @@
 #include <yandex/maps/mapkit/geometry/point.h>
 
-#include <yandex/maps/navikit/bookmarks/bookmark_utils.h>
+#include <yandex/maps/navi/bookmarks/bookmark_utils.h>
 #include <yandex/maps/navikit/bookmarks/utils_factory.h>
 
 #include <boost/test/unit_test.hpp>
 
 #include <boost/format.hpp>
 
-namespace yandex::maps::navikit::bookmarks {
+namespace yandex::maps::navi::bookmarks {
 
 BOOST_AUTO_TEST_CASE(MakePinUriTest)
 {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/common/dummy/open_utils_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/common/dummy/open_utils_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,7 +2,7 @@
 
 #include <yandex/maps/runtime/assert.h>
 
-namespace yandex::maps::navikit {
+namespace yandex::maps::navi {
 
 bool canOpenApp(const ApplicationInfo& /* info */)
 {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/common/tests/obj_load_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/common/tests/obj_load_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -14,8 +14,8 @@ using yandex::maps::runtime::RuntimeError;
 namespace boost::test_tools::tt_detail {
 
 template<>
-struct print_log_value<yandex::maps::navikit::ObjMesh::Face> {
-    void operator()(std::ostream& os, const yandex::maps::navikit::ObjMesh::Face& face)
+struct print_log_value<yandex::maps::navi::ObjMesh::Face> {
+    void operator()(std::ostream& os, const yandex::maps::navi::ObjMesh::Face& face)
     {
         os << face[0] << " " << face[1] << " " << face[2];
     }
@@ -24,7 +24,7 @@ struct print_log_value<yandex::maps::navikit::ObjMesh::Face> {
 } // namespace boost
 
 
-namespace yandex::maps::navikit {
+namespace yandex::maps::navi {
 
 std::ostream& operator<<(std::ostream& stream, const ObjMesh::Face& face)
 {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/gas_stations/tests/gas_stations_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/gas_stations/tests/gas_stations_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -25,12 +25,12 @@
 
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::gas_stations {
+namespace yandex::maps::navi::gas_stations {
 
 using namespace testing;
 using namespace runtime;
 using namespace std::literals::chrono_literals;
-using Device = EnvironmentConfig::Device;
+using Device = navikit::EnvironmentConfig::Device;
 
 namespace {
 
@@ -72,19 +72,19 @@ public:
         : uiExperimentsManager_(
             std::make_shared<NiceMock<mapkit::experiments::MockUiExperimentsManager>>())
     {
-        static const config::GasStationsBanners gasStationsBanners;
+        static const navikit::config::GasStationsBanners gasStationsBanners;
         static const boost::optional<settings::CachedConfig> gasStationPolygons;
         static const boost::optional<std::string> strNone;
 
-        services_.insert({config::Service::LegacyGasStationsPolygons,
-                          config::ServiceUrls(
+        services_.insert({navikit::config::Service::LegacyGasStationsPolygons,
+                          navikit::config::ServiceUrls(
                               "https://yandexnavi.s3.yandex.net/gas_stations/stations-v2.json",
                               boost::none,
                               boost::none,
                               [this] { return settingsManager_.datatestingEnvironmentForced(); })});
 
-        services_.insert({config::Service::GasStationsPolygons,
-                          config::ServiceUrls(
+        services_.insert({navikit::config::Service::GasStationsPolygons,
+                          navikit::config::ServiceUrls(
                               "https://yandexnavi.s3.yandex.net/gas_stations/stations-v4.json",
                               boost::none,
                               boost::none,
@@ -147,25 +147,25 @@ public:
     }
 
     NiceMock<navikit::location::MockLocationProvider> locationProvider_;
-    NiceMock<routing::MockRouteManager> routeManager_;
-    NiceMock<projected_system::MockProjectedSystemManager> projectedSystemManager_;
+    NiceMock<navikit::routing::MockRouteManager> routeManager_;
+    NiceMock<navikit::projected_system::MockProjectedSystemManager> projectedSystemManager_;
     settings::MockSettingsManager settingsManager_;
-    experiments::MockExperimentsManager experimentsManager_;
-    std::map<config::Service, config::ServiceUrls> services_;
-    config::MockConfigManager configManager_;
-    MockAppData appData_;
+    navikit::experiments::MockExperimentsManager experimentsManager_;
+    std::map<navikit::config::Service, navikit::config::ServiceUrls> services_;
+    navikit::config::MockConfigManager configManager_;
+    navikit::MockAppData appData_;
     location::LocationManagerWrapper* locationManager_ = nullptr;
-    NiceMock<MockAppLifecycleManager> appLifecycleManager_;
+    NiceMock<navikit::MockAppLifecycleManager> appLifecycleManager_;
 
     std::shared_ptr<mapkit::experiments::MockUiExperimentsManager> uiExperimentsManager_;
 
 protected:
-    NiceMock<auth::MockAuthModel> authModel_;
+    NiceMock<navikit::auth::MockAuthModel> authModel_;
 
 private:
     NiceMock<MockNetworkManager> networkManager_;
     NiceMock<mapkit::search::MockSearchManager> searchManager_;
-    NiceMock<navikit::interaction::MockInteractionFeedbackManager> interactionFeedbackManager_;
+    NiceMock<interaction::MockInteractionFeedbackManager> interactionFeedbackManager_;
 };
 
 BOOST_FIXTURE_TEST_SUITE(GasStationsTests, GasStationsTestFixture)
@@ -188,9 +188,9 @@ BOOST_AUTO_TEST_CASE(testIsEnabled)
 
     UI(
         for (const auto& test : tests) {
-            auto config = std::make_unique<TestEnvironmentConfig>(test.device);
+            auto config = std::make_unique<navikit::TestEnvironmentConfig>(test.device);
             config->setUiExperimentsManager(uiExperimentsManager_);
-            auto handle = getTestEnvironment()->setConfig(std::move(config));
+            auto handle = navikit::getTestEnvironment()->setConfig(std::move(config));
 
             BOOST_TEST(isEnabled() == test.isEnabled, "Failed for device: " << test.device.model);
         }
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/intent_parser/tests/intent_parser_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/intent_parser/tests/intent_parser_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -25,11 +25,12 @@
 #include <string>
 
 namespace navikit = yandex::maps::navikit;
+namespace navi = yandex::maps::navi;
 namespace runtime = yandex::maps::runtime;
 
 using namespace yandex::maps::mapkit::directions;
 using namespace yandex::maps::mapkit::geometry;
-using namespace yandex::maps::navikit::intent_parser;
+using namespace yandex::maps::navi::intent_parser;
 using namespace yandex::maps::runtime::network;
 using namespace ::testing;
 
@@ -140,7 +141,7 @@ protected:
 
     void setUp()
     {
-        navikit::initMapkit();
+        navi::initMapkit();
 
         routeSerializer = getDirections()->createDrivingRouter()->routeSerializer();
         visitor = std::make_shared<MyActionVisitor>();
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/interaction/tests/logic_tests.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/interaction/tests/logic_tests.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -10,7 +10,7 @@
 #include <yandex/maps/navikit/mocks/mock_route_manager.h>
 #include <yandex/maps/navikit/mocks/mock_settings_manager.h>
 
-namespace yandex::maps::navikit::interaction {
+namespace yandex::maps::navi::interaction {
 
 namespace {
 
@@ -22,8 +22,8 @@ settings::InteractionFeedbackDataExtended interactionFeedbackDataExtended;
 
 class InteractionFeedbackFixture :
     public settings::MockSettingsManager,
-    public experiments::MockExperimentsManager,
-    public routing::MockRouteManager,
+    public navikit::experiments::MockExperimentsManager,
+    public navikit::routing::MockRouteManager,
     public navikit::guidance::MockGuidance
 {
 public:
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/include/yandex/maps/navikit/mocks/mock_menu_item.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/include/yandex/maps/navikit/mocks/mock_menu_item.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,10 +2,14 @@
 
 #pragma once
 
-#include <yandex/maps/navikit/ui/menu/menu_item.h>
+#include <yandex/maps/navi/ui/menu/menu_item.h>
 #include <gmock/gmock.h>
 
-namespace yandex::maps::navikit::ui::menu {
+namespace yandex {
+namespace maps {
+namespace navi {
+namespace ui {
+namespace menu {
 
 class MockMenuItemCursorCell : public MenuItemCursorCell {
  public:
@@ -16,7 +20,11 @@ class MockMenuItemCursorCell : public MenuItemCursorCell {
   MOCK_METHOD1(setIconBitmap,
       void(const ::yandex::maps::runtime::PlatformBitmap& icon));
   MOCK_METHOD1(setState,
-      void(::yandex::maps::navikit::ui::menu::MenuItemCursorState state));
+      void(::yandex::maps::navi::ui::menu::MenuItemCursorState state));
 };
 
+}  // namespace menu
+}  // namespace ui
+}  // namespace navi
+}  // namespace maps
 }  // namespace yandex
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/include/yandex/maps/navikit/mocks/mock_remote_auth_delegate.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/include/yandex/maps/navikit/mocks/mock_remote_auth_delegate.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,19 +2,27 @@
 
 #pragma once
 
-#include <yandex/maps/navikit/auth/remote/remote_auth_delegate.h>
+#include <yandex/maps/navi/auth/remote/remote_auth_delegate.h>
 #include <gmock/gmock.h>
 
-namespace yandex::maps::navikit::auth::remote {
+namespace yandex {
+namespace maps {
+namespace navi {
+namespace auth {
+namespace remote {
 
 class MockRemoteAuthDelegate : public RemoteAuthDelegate {
  public:
   MOCK_METHOD1(setListener,
-      void(::yandex::maps::navikit::auth::remote::RemoteAuthListener* remoteAuthListener));
+      void(::yandex::maps::navi::auth::remote::RemoteAuthListener* remoteAuthListener));
   MOCK_METHOD0(stop,
       void());
   MOCK_METHOD2(start,
       void(const std::string& userCode, const boost::any& yandexAccount));
 };
 
+}  // namespace remote
+}  // namespace auth
+}  // namespace navi
+}  // namespace maps
 }  // namespace yandex
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/include/yandex/maps/navikit/mocks/mock_taximeter_action_forwarder.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/include/yandex/maps/navikit/mocks/mock_taximeter_action_forwarder.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,10 +2,13 @@
 
 #pragma once
 
-#include <yandex/maps/navikit/taximeter_action_forwarder/taximeter_action_forwarder.h>
+#include <yandex/maps/navi/taximeter_action_forwarder/taximeter_action_forwarder.h>
 #include <gmock/gmock.h>
 
-namespace yandex::maps::navikit::taximeter_action_forwarder {
+namespace yandex {
+namespace maps {
+namespace navi {
+namespace taximeter_action_forwarder {
 
 class MockTaximeterActionForwarder : public TaximeterActionForwarder {
  public:
@@ -13,4 +16,7 @@ class MockTaximeterActionForwarder : public TaximeterActionForwarder {
       bool(const std::string& uri));
 };
 
+}  // namespace taximeter_action_forwarder
+}  // namespace navi
+}  // namespace maps
 }  // namespace yandex
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/mocks.json	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/mocks/mocks.json	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,11 +1,11 @@
 [
     {
-        "from": "../alice/build/idl/cpp/include/yandex/maps/navikit/alice/alice_kit.h",
+        "from": "../alice/build/idl/cpp/include/yandex/maps/navi/alice/alice_kit.h",
         "to": "include/yandex/maps/navikit/mocks/mock_alice_kit.h",
         "classes": ["AliceKit"]
     },
     {
-        "from": "../audio/build/idl/cpp/include/yandex/maps/navikit/audio/renderer_player.h",
+        "from": "../audio/build/idl/cpp/include/yandex/maps/navi/audio/renderer_player.h",
         "to": "include/yandex/maps/navikit/mocks/mock_renderer_player.h",
         "classes": ["RendererPlayerFactory"]
     },
@@ -15,7 +15,7 @@
         "classes": ["AudioScheme", "AudioSchemesManager"]
     },
     {
-        "from": "../auth/build/idl/cpp/include/yandex/maps/navikit/auth/remote/remote_auth_delegate.h",
+        "from": "../auth/build/idl/cpp/include/yandex/maps/navi/auth/remote/remote_auth_delegate.h",
         "to": "include/yandex/maps/navikit/mocks/mock_remote_auth_delegate.h",
         "classes": ["RemoteAuthDelegate"]
     },
@@ -36,22 +36,22 @@
         "classes": ["InteractionFeedbackListener", "InteractionFeedbackManager"]
     },
     {
-        "from": "../navikit/build/idl/cpp/include/yandex/maps/navikit/init_provider.h",
+        "from": "../navikit/build/idl/cpp/include/yandex/maps/navi/init_provider.h",
         "to": "include/yandex/maps/navikit/mocks/mock_app_component_init_provider.h",
         "classes": ["AppComponentInitProvider"]
     },
     {
-        "from": "../permissions/build/idl/cpp/include/yandex/maps/navikit/permissions/platform_delegate.h",
+        "from": "../permissions/build/idl/cpp/include/yandex/maps/navi/permissions/platform_delegate.h",
         "to": "include/yandex/maps/navikit/mocks/mock_permission_delegate.h",
         "classes": ["PermissionDelegate"]
     },
     {
-        "from": "../statusbar/build/idl/cpp/include/yandex/maps/navikit/statusbar/statusbar_platform_delegate.h",
+        "from": "../statusbar/build/idl/cpp/include/yandex/maps/navi/statusbar/statusbar_platform_delegate.h",
         "to": "include/yandex/maps/navikit/mocks/mock_statusbar_delegate.h",
         "classes": ["StatusBarDelegate"]
     },
     {
-        "from": "../taximeter_action_forwarder/build/idl/cpp/include/yandex/maps/navikit/taximeter_action_forwarder/taximeter_action_forwarder.h",
+        "from": "../taximeter_action_forwarder/build/idl/cpp/include/yandex/maps/navi/taximeter_action_forwarder/taximeter_action_forwarder.h",
         "to": "include/yandex/maps/navikit/mocks/mock_taximeter_action_forwarder.h",
         "classes": ["TaximeterActionForwarder"]
     },
@@ -61,27 +61,27 @@
         "classes": ["TaximeterActionForwarderManager"]
     },
     {
-        "from": "../ui/build/idl/cpp/include/yandex/maps/navikit/ui/common/platform_list_view.h",
+        "from": "../ui/build/idl/cpp/include/yandex/maps/navi/ui/common/platform_list_view.h",
         "to": "include/yandex/maps/navikit/mocks/mock_list_view.h",
         "classes": ["ListView"]
     },
     {
-        "from": "../ui/build/idl/cpp/include/yandex/maps/navikit/ui/menu/menu_item.h",
+        "from": "../ui/build/idl/cpp/include/yandex/maps/navi/ui/menu/menu_item.h",
         "to": "include/yandex/maps/navikit/mocks/mock_menu_item.h",
         "classes": ["MenuItemCursorCell"]
     },
     {
-        "from": "../ui/build/idl/cpp/include/yandex/maps/navikit/ui/menu/menu_screen.h",
+        "from": "../ui/build/idl/cpp/include/yandex/maps/navi/ui/menu/menu_screen.h",
         "to": "include/yandex/maps/navikit/mocks/mock_menu_screen.h",
         "classes": ["MenuScreen"]
     },
     {
-        "from": "../ui/build/idl/cpp/include/yandex/maps/navikit/ui/message_box.h",
+        "from": "../ui/build/idl/cpp/include/yandex/maps/navi/ui/message_box.h",
         "to": "include/yandex/maps/navikit/mocks/mock_message_box_factory.h",
         "classes": ["MessageBoxFactory"]
     },
     {
-        "from": "../ui/build/idl/cpp/include/yandex/maps/navikit/ui/ui_controllers.h",
+        "from": "../ui/build/idl/cpp/include/yandex/maps/navi/ui/ui_controllers.h",
         "to": "include/yandex/maps/navikit/mocks/mock_ui_controllers.h",
         "classes": ["UiControllers"]
     },
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/myspin/dummy/myspin_log_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/myspin/dummy/myspin_log_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,7 +2,7 @@
 
 #include <yandex/maps/navikit/myspin/myspin_log.h>
 
-namespace yandex::maps::navikit::myspin {
+namespace yandex::maps::navi::myspin {
 
 void mySpinLog(const std::string& /*log*/)
 {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/navikit/app_component_impl.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/navikit/app_component_impl.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -296,7 +296,7 @@ std::shared_ptr<navikit::ResourceAccessor> createResourceAccessor() noexcept
 #ifdef BUILDING_FOR_ANDROID
     return navikit::createAndroidAssetsAccessor();
 #else
-    return createLocalResourceAccessor();
+    return navikit::createLocalResourceAccessor();
 #endif
 }
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/passport/tests/manager_tests.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/passport/tests/manager_tests.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,4 +1,4 @@
-#include <yandex/maps/navikit/passport/passport_manager.h>
+#include <yandex/maps/navi/passport/passport_manager.h>
 
 #include <boost/test/unit_test.hpp>
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/places/tests/compile_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/places/tests/compile_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,13 +1,13 @@
 #include <yandex/maps/navikit/places/places_manager_creator.h>
-#include <yandex/maps/navikit/places/places_manager.h>
-#include <yandex/maps/navikit/places/place.h>
+#include <yandex/maps/navi/places/places_manager.h>
+#include <yandex/maps/navi/places/place.h>
 #include <yandex/maps/navikit/test_environment.h>
 #include <yandex/maps/navikit/places/places_utils.h>
 #include <yandex/maps/mapkit/geometry/tools.h>
 
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::places {
+namespace yandex::maps::navi::places {
 
 bool operator==(const Place& left, const Place& right)
 {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/points_history/tests/manager_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/points_history/tests/manager_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -14,7 +14,7 @@ using namespace std::chrono_literals;
 using namespace std::string_literals;
 using namespace testing;
 
-namespace yandex::maps::navikit::points_history::tests {
+namespace yandex::maps::navi::points_history::tests {
 
 namespace {
 
@@ -67,8 +67,8 @@ protected:
     }
 
     std::shared_ptr<runtime::auth::Account> fakeAccount_ = std::make_shared<FakeAccount>();
-    auth::MockAuthModel authModel_;
-    auth::MockPasswordRequiredHandler passwordRequiredHandler_;
+    navikit::auth::MockAuthModel authModel_;
+    navikit::auth::MockPasswordRequiredHandler passwordRequiredHandler_;
     std::shared_ptr<PointsHistoryManagerImpl> manager_;
 };
 
@@ -78,7 +78,7 @@ BOOST_FIXTURE_TEST_CASE(addRemove, Fixture)
 {
     runtime::async::ui()
         ->spawn([this] {
-            manager_->addPoint(createRoutePoint({1.0, 1.0}, "title"s, "subtitle"s));
+            manager_->addPoint(navikit::createRoutePoint({1.0, 1.0}, "title"s, "subtitle"s));
             BOOST_REQUIRE_EQUAL(manager_->points()->size(), 1);
             manager_->removePoint(manager_->points()->front());
             BOOST_CHECK_EQUAL(manager_->points()->size(), 0);
@@ -90,9 +90,9 @@ BOOST_FIXTURE_TEST_CASE(order, Fixture)
 {
     runtime::async::ui()
         ->spawn([this] {
-            manager_->addPoint(createRoutePoint({2.0, 2.0}, "title2"s, "subtitle2"s));
-            manager_->addPoint(createRoutePoint({1.0, 1.0}, "title1"s, "subtitle1"s));
-            manager_->addPoint(createRoutePoint({0.0, 0.0}, "title0"s, "subtitle0"s));
+            manager_->addPoint(navikit::createRoutePoint({2.0, 2.0}, "title2"s, "subtitle2"s));
+            manager_->addPoint(navikit::createRoutePoint({1.0, 1.0}, "title1"s, "subtitle1"s));
+            manager_->addPoint(navikit::createRoutePoint({0.0, 0.0}, "title0"s, "subtitle0"s));
             BOOST_REQUIRE_EQUAL(manager_->points()->size(), 3);
 
             auto wrapper0 = manager_->points()->at(0);
@@ -101,13 +101,13 @@ BOOST_FIXTURE_TEST_CASE(order, Fixture)
             BOOST_CHECK_EQUAL(wrapper0->point()->title, "title0");
             BOOST_CHECK_EQUAL(wrapper1->point()->title, "title1");
 
-            manager_->addPoint(createRoutePoint(
+            manager_->addPoint(navikit::createRoutePoint(
                 wrapper1->point()->location, wrapper1->point()->title,
                 wrapper1->point()->subtitle));
-            manager_->addPoint(createRoutePoint(
+            manager_->addPoint(navikit::createRoutePoint(
                 wrapper0->point()->location, wrapper0->point()->title,
                 wrapper0->point()->subtitle));
-            manager_->addPoint(createRoutePoint(
+            manager_->addPoint(navikit::createRoutePoint(
                 wrapper2->point()->location, wrapper2->point()->title,
                 wrapper2->point()->subtitle));
 
@@ -125,7 +125,7 @@ BOOST_FIXTURE_TEST_CASE(maxSize, Fixture)
         ->spawn([this] {
             for (int i = 0; i < 150; ++i) {
                 manager_->addPoint(
-                    createRoutePoint({0.5 * i, 1.0}, "title"s + std::to_string(i), "subtitle"s));
+                    navikit::createRoutePoint({0.5 * i, 1.0}, "title"s + std::to_string(i), "subtitle"s));
             }
             BOOST_REQUIRE_EQUAL(manager_->points()->size(), 100);
             BOOST_CHECK_EQUAL(manager_->points()->front()->point()->title, "title149");
@@ -138,14 +138,14 @@ BOOST_FIXTURE_TEST_CASE(closePoints, Fixture)
 {
     runtime::async::ui()
         ->spawn([this] {
-            manager_->addPoint(createRoutePoint({55.734236, 37.586656}, "title0"s, "subtitle0"s));
-            manager_->addPoint(createRoutePoint({55.733685, 37.587606}, "title1"s, "subtitle1"s));
+            manager_->addPoint(navikit::createRoutePoint({55.734236, 37.586656}, "title0"s, "subtitle0"s));
+            manager_->addPoint(navikit::createRoutePoint({55.733685, 37.587606}, "title1"s, "subtitle1"s));
             BOOST_REQUIRE_EQUAL(manager_->points()->size(), 1);
 
             auto wrapper = manager_->points()->at(0);
             BOOST_CHECK_EQUAL(wrapper->point()->title, "title1");
 
-            manager_->addPoint(createRoutePoint({55.734644, 37.586047}, "title2"s, "subtitle2"s));
+            manager_->addPoint(navikit::createRoutePoint({55.734644, 37.586047}, "title2"s, "subtitle2"s));
             BOOST_REQUIRE_EQUAL(manager_->points()->size(), 2);
 
             wrapper = manager_->points()->at(0);
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/profiling/tests/hist_recorder_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/profiling/tests/hist_recorder_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -10,7 +10,7 @@
 
 #include <unordered_map>
 
-namespace yandex::maps::navikit::profiling {
+namespace yandex::maps::navi::profiling {
 
 using namespace std::chrono_literals;
 
@@ -123,9 +123,9 @@ BOOST_FIXTURE_TEST_CASE(testSendSimpleEvent, HistRecorderSimpleFixture)
 {
     auto testDuration = 100ms;
     recorder.begin(params[0].event);
-    auto testBegin = relativeNow();
+    auto testBegin = navikit::relativeNow();
     runtime::async::sleepFor(testDuration);
-    auto testEnd = relativeNow();
+    auto testEnd = navikit::relativeNow();
     recorder.end(params[0].event);
     checkRequest(requests, params[0], testEnd - testBegin);
 }
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/profiling/tests/mocks/mock_hist_manager.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/profiling/tests/mocks/mock_hist_manager.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,10 +1,10 @@
 #pragma once
 
-#include <yandex/maps/navikit/profiling/histograms.h>
+#include <yandex/maps/navi/profiling/histograms.h>
 
 #include <yandex/maps/runtime/async/promise.h>
 
-namespace yandex::maps::navikit::profiling {
+namespace yandex::maps::navi::profiling {
 
 using namespace runtime;
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/push/dummy/push_utils_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/push/dummy/push_utils_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,6 +1,6 @@
 #include <yandex/maps/navikit/push/push_utils.h>
 
-namespace yandex::maps::navikit::push {
+namespace yandex::maps::navi::push {
 
 bool isPushServiceAvailable() {
 	return false;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/scheme_parser/tests/scheme_parser_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/scheme_parser/tests/scheme_parser_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -39,7 +39,7 @@ std::ostream& operator<<(std::ostream& out, const StringMap& map)
 
 }  // namespace std
 
-namespace yandex::maps::navikit::scheme_parser::tests {
+namespace yandex::maps::navi::scheme_parser::tests {
 
 namespace {
 
@@ -229,7 +229,7 @@ public:
     void setScreens(const std::vector<intent_parser::Screen>& screensToShow)
     {
         ASSERT(screens_.empty());
-        screens_ = "/" + boost::join(transformIntoVector(screensToShow, toString), "/");
+        screens_ = "/" + boost::join(navikit::transformIntoVector(screensToShow, toString), "/");
     }
 
     void lockVoiceMode() { voiceModeLocked_ = true; }
@@ -288,7 +288,7 @@ protected:
 
 private:
     NiceMock<settings::MockSettingsManager> settingsManager_;
-    experiments::MockExperimentsManager experimentsManager_;
+    navikit::experiments::MockExperimentsManager experimentsManager_;
     std::unique_ptr<intent_parser::IntentParser> intentParser_;
     NiceMock<taximeter_action_forwarder::MockTaximeterActionForwarderManager> taximeterActionForwarderManager_;
     std::shared_ptr<SchemeParser> schemeParser_;
@@ -312,8 +312,8 @@ public:
     {
         runtime::async::ui()
             ->spawn([&] {
-                testConfig_ = getTestEnvironment()->setConfig(
-                    std::make_unique<TestEnvironmentConfig>(EnvironmentConfig::Device::CAR_NISSAN));
+                testConfig_ = navikit::getTestEnvironment()->setConfig(
+                    std::make_unique<navikit::TestEnvironmentConfig>(navikit::EnvironmentConfig::Device::CAR_NISSAN));
             })
             .wait();
     }
@@ -354,9 +354,9 @@ public:
     }
 
     virtual void onRouteAction(
-        const boost::optional<RoutePoint>& /* to */,
-        const std::vector<RoutePoint>& /* via */,
-        const boost::optional<RoutePoint>& /* from */,
+        const boost::optional<navikit::RoutePoint>& /* to */,
+        const std::vector<navikit::RoutePoint>& /* via */,
+        const boost::optional<navikit::RoutePoint>& /* from */,
         const intent_parser::RouteActionOptions& /* options */) override
     {
         fixture_->setAction("route");
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/scheme_parser/tests/scheme_parser_utils_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/scheme_parser/tests/scheme_parser_utils_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -3,7 +3,7 @@
 #include <boost/optional.hpp>
 #include <boost/test/unit_test.hpp>
 
-using namespace yandex::maps::navikit::scheme_parser;
+using namespace yandex::maps::navi::scheme_parser;
 using namespace std::string_literals;
 
 BOOST_AUTO_TEST_SUITE(scheme_parser_utils)
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/settings/settings_manager_impl.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/settings/settings_manager_impl.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -499,10 +499,10 @@ void SettingsManagerImpl::handleAppUpdate(int fromVersion)
         FuelTypes currentFuelTypes = fuelTypes();
         if (currentFuelTypes) {
             auto it = std::find(
-                std::__ndk1::begin(*currentFuelTypes),
-                std::__ndk1::end(*currentFuelTypes),
+                std::begin(*currentFuelTypes),
+                std::end(*currentFuelTypes),
                 FuelType::Methane);
-            if (it != std::__ndk1::end(*currentFuelTypes)) {
+            if (it != std::end(*currentFuelTypes)) {
                 currentFuelTypes->erase(it);
                 setFuelTypes(currentFuelTypes);
             }
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/settings/tests/setting_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/settings/tests/setting_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -8,7 +8,7 @@
 #include <boost/optional/optional_io.hpp>
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::settings::tests {
+namespace yandex::maps::navi::settings::tests {
 
 using mapkit::road_events::EventTag;
 using RoadEvents = std::map<EventTag, RoadEventNotificationMode>;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/special_projects/tests/special_project_data_parser_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/special_projects/tests/special_project_data_parser_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -13,7 +13,7 @@
 
 #include <yandex/maps/runtime/logging/logging.h>
 
-namespace yandex::maps::navikit::special_projects {
+namespace yandex::maps::navi::special_projects {
 
 bool operator==(const ActionButtonData& lhs, const ActionButtonData& rhs)
 {
@@ -259,7 +259,7 @@ bool operator==(const SpecialProjectsConfig& lhs, const SpecialProjectsConfig& r
 
 }
 
-namespace yandex::maps::navikit::special_projects::tests {
+namespace yandex::maps::navi::special_projects::tests {
 
 BOOST_AUTO_TEST_SUITE(SpecialProjectsConfigParser)
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/speech_async/dummy/utils_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/speech_async/dummy/utils_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -7,7 +7,7 @@
 #include <yandex/maps/navikit/speech/async/async_speechkit.h>
 #include <yandex/maps/runtime/async/promise.h>
 
-namespace yandex::maps::navikit::speech::async {
+namespace yandex::maps::navi::speech::async {
 
 namespace {
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/tts/dummy/tts_factory_inl.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/tts/dummy/tts_factory_inl.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -2,7 +2,7 @@
 
 #include <yandex/maps/navikit/tts/tts_factory.h>
 
-namespace yandex::maps::navikit::tts {
+namespace yandex::maps::navi::tts {
 
 namespace {
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/tts/tests/basic_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/tts/tests/basic_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -13,7 +13,7 @@
 
 namespace yandex {
 namespace maps {
-namespace navikit {
+namespace navi {
 namespace tts {
 
 using namespace ::yandex::maps::runtime;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/dummy/special_project_manager_dummy.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/dummy/special_project_manager_dummy.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -11,7 +11,7 @@
 
 #include <memory>
 
-namespace yandex::maps::navikit::ui::special_projects {
+namespace yandex::maps::navi::ui::special_projects {
 
 class AliceSuggestManagerDummy : public AliceSuggestManager
 {
@@ -62,7 +62,7 @@ public:
     }
 
     virtual void onBrandRoutePanelClicked(
-        const std::vector<navikit::special_projects::ActionData>& /* actions */) const override
+        const std::vector<navi::special_projects::ActionData>& /* actions */) const override
     {}
 
     virtual boost::optional<std::string> projectName() const override
@@ -85,14 +85,14 @@ public:
     }
 };
 
-class StatusBrandingManagerDummy : public StatusBrandingManager
+class StatusBrandingManagerDummy : public navikit::ui::special_projects::StatusBrandingManager
 {
 public:
     virtual void addListener(
-        const std::shared_ptr<StatusBrandingListener>& /*listener*/) override
+        const std::shared_ptr<navikit::ui::special_projects::StatusBrandingListener>& /*listener*/) override
     {}
     virtual void removeListener(
-        const std::shared_ptr<StatusBrandingListener>& /*listener*/) override
+        const std::shared_ptr<navikit::ui::special_projects::StatusBrandingListener>& /*listener*/) override
     {}
 
     virtual void setStatusPanelVisibility(bool /*isVisible*/) override
@@ -232,7 +232,7 @@ public:
 class LaunchIntroManagerDummy
     : public LaunchIntroManager {
 public:
-    virtual boost::optional<navikit::special_projects::IntroData> introData() const override
+    virtual boost::optional<navi::special_projects::IntroData> introData() const override
     {
         return {};
     }
@@ -242,7 +242,7 @@ class DebugWeatherPickerDummy : public DebugWeatherPicker
 {
 public:
     virtual void setTomorrowWeather(
-        const boost::optional<weather::Condition>& /** condition */) override
+        const boost::optional<navikit::weather::Condition>& /** condition */) override
     {}
 };
 
@@ -264,7 +264,7 @@ public:
     {}
 
     virtual void processActions(
-        const std::vector<navikit::special_projects::ActionData>& /*actions*/,
+        const std::vector<navi::special_projects::ActionData>& /*actions*/,
         const boost::optional<std::string>& /** projectName */) override
     {}
 
@@ -293,7 +293,7 @@ public:
         return nullptr;
     }
 
-    virtual StatusBrandingManager* statusBrandingManager() const override
+    virtual navikit::ui::special_projects::StatusBrandingManager* statusBrandingManager() const override
     {
         return statusBrandingManager_.get();
     }
@@ -317,7 +317,7 @@ public:
     {}
 
     virtual runtime::Handle openIntroScreen(
-        const navikit::special_projects::IntroData& /*introData*/,
+        const navi::special_projects::IntroData& /*introData*/,
         const std::shared_ptr<intro::IntroDialogFactory>& /*dialogFactory*/) override
     {
         return runtime::Handle();
@@ -343,7 +343,7 @@ private:
     std::unique_ptr<BannerManager> bannerManager_;
     std::unique_ptr<BrandRouteManager> brandRouteManager_;
     std::unique_ptr<BookmarkCellManager> bookmarkCellManager_;
-    std::unique_ptr<StatusBrandingManager> statusBrandingManager_;
+    std::unique_ptr<navikit::ui::special_projects::StatusBrandingManager> statusBrandingManager_;
     std::unique_ptr<MenuCellManager> menuCellManager_;
     std::unique_ptr<LaunchIntroManager> launchIntroManager_;
     std::unique_ptr<DebugWeatherPickerDummy> dummyPicker_;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/features/features.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/features/features.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -91,8 +91,8 @@ bool isGdprLocation()
             };
 
             const bool positionInNonGdprCountry = std::any_of(
-                std::__ndk1::begin(NON_GDPR_REGIONS),
-                std::__ndk1::end(NON_GDPR_REGIONS),
+                std::begin(NON_GDPR_REGIONS),
+                std::end(NON_GDPR_REGIONS),
                 [&](BoundingBox region) {
                     return mapkit::geometry::pointInBoundingBox(*position, region);
                 });
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/ratings_process_impl.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/ratings_process_impl.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -76,13 +76,13 @@ const MessagePopupConfig& APP_STORE_MESSAGE()
     static const MessagePopupConfig popupConfig =
         MessagePopupConfigBuilder(
             "ratings.ask-vote-appstore-popup",
-            localizedString("main_ratings_popup_rate_appstore"),
+            navikit::localizedString("main_ratings_popup_rate_appstore"),
             AlignmentType::Center)
             .addIcon(ratingsIcon())
             .addPositiveButton(
-                highlightedButton(localizedString("main_ratings_popup_rate_store_button_yes")))
+                highlightedButton(navikit::localizedString("main_ratings_popup_rate_store_button_yes")))
             .addNegativeButton(
-                normalButton(localizedString("main_ratings_popup_rate_store_button_no")))
+                normalButton(navikit::localizedString("main_ratings_popup_rate_store_button_no")))
             .build();
 
     return popupConfig;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/cursor_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/cursor_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -16,10 +16,10 @@
 
 #include <vector>
 
-namespace yandex::maps::navikit::ui::menu {
+namespace yandex::maps::navi::ui::menu {
 
 using namespace testing;
-using Device = EnvironmentConfig::Device;
+using Device = navikit::EnvironmentConfig::Device;
 
 namespace {
 
@@ -76,16 +76,16 @@ BOOST_AUTO_TEST_CASE(testNoOtherVehicleCursorsInVehicles)
 {
     UI(
         for (const Device& vehicle : Device::VEHICLES()) {
-            auto handle = getTestEnvironment()->setConfig(
-                std::make_unique<TestEnvironmentConfig>(vehicle));
+            auto handle = navikit::getTestEnvironment()->setConfig(
+                std::make_unique<navikit::TestEnvironmentConfig>(vehicle));
 
             const auto titles = getMenuTitles();
 
             for (const std::string& vehicleManufacturer : vehicleManufacturers) {
-                if (deviceManufacturer() != vehicleManufacturer) {
+                if (navikit::deviceManufacturer() != vehicleManufacturer) {
                     for (const std::string& title : titles) {
                         BOOST_CHECK_MESSAGE(title.find(vehicleManufacturer) == std::string::npos,
-                            "deviceManufacturer() is " << deviceManufacturer() << " " <<
+                            "deviceManufacturer() is " << navikit::deviceManufacturer() << " " <<
                             "but MenuItem with title '" << title << "' was found");
                     }
                 }
@@ -97,8 +97,8 @@ BOOST_AUTO_TEST_CASE(testNoOtherVehicleCursorsInVehicles)
 BOOST_AUTO_TEST_CASE(testNoVehicleCursorsInYaAuto)
 {
     UI(
-        auto handle = getTestEnvironment()->setConfig(
-            std::make_unique<TestEnvironmentConfig>(Device::YA_AUTO));
+        auto handle = navikit::getTestEnvironment()->setConfig(
+            std::make_unique<navikit::TestEnvironmentConfig>(Device::YA_AUTO));
 
         const auto titles = getMenuTitles();
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/init_navikit.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/init_navikit.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -19,7 +19,7 @@
 #include <yandex/maps/recording/recording_factory.h>
 #include <yandex/maps/runtime/async/dispatcher.h>
 
-namespace yandex::maps::navikit::ui {
+namespace yandex::maps::navi::ui {
 
 using namespace testing;
 
@@ -52,9 +52,9 @@ void initAppComponentForTesting() {
             EXPECT_CALL(*initProvider, statusBarDelegate())
                 .WillRepeatedly(Return(std::make_shared<NiceMock<statusbar::MockStatusBarDelegate>>()));
             EXPECT_CALL(*initProvider, nightModeDelegate())
-                .WillRepeatedly(Return(std::make_shared<NiceMock<night_mode::MockNightModeDelegate>>()));
+                .WillRepeatedly(Return(std::make_shared<NiceMock<navikit::night_mode::MockNightModeDelegate>>()));
             EXPECT_CALL(*initProvider, platformNightModeProvider())
-                .WillRepeatedly(Return(std::make_shared<NiceMock<night_mode::MockPlatformNightModeProvider>>()));
+                .WillRepeatedly(Return(std::make_shared<NiceMock<navikit::night_mode::MockPlatformNightModeProvider>>()));
             EXPECT_CALL(*initProvider, remoteAuthDelegate())
                 .WillRepeatedly(Return(std::make_shared<NiceMock<auth::remote::MockRemoteAuthDelegate>>()));
             EXPECT_CALL(*initProvider, taximeterActionForwarder())
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/init_navikit.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/init_navikit.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -1,6 +1,6 @@
 #pragma once
 
-namespace yandex::maps::navikit::ui {
+namespace yandex::maps::navi::ui {
 
 void initAppComponentForTesting();
 
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/menu_storage_data.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/menu_storage_data.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -7,13 +7,13 @@
 
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::ui::menu::tests {
+namespace yandex::maps::navi::ui::menu::tests {
 
 namespace {
 
-runtime::Handle setEnv(const EnvironmentConfig::Device& device)
+runtime::Handle setEnv(const navikit::EnvironmentConfig::Device& device)
 {
-    return getTestEnvironment()->setConfig(std::make_unique<TestEnvironmentConfig>(device));
+    return navikit::getTestEnvironment()->setConfig(std::make_unique<navikit::TestEnvironmentConfig>(device));
 }
 
 std::vector<std::string> getItems(const std::shared_ptr<MenuSection>& menuSection)
@@ -48,14 +48,14 @@ BOOST_AUTO_TEST_CASE(TestStorageDataSection)
                                                     "Setting: menu_storage_clear_cache"};
 
     const struct {
-        const EnvironmentConfig::Device& device;
+        const navikit::EnvironmentConfig::Device& device;
         const std::vector<std::string>& expectedItems;
     } tests[] = {
-        {EnvironmentConfig::Device::ANDROID, all},
-        {EnvironmentConfig::Device::IPHONE, all},
-        {EnvironmentConfig::Device::CAR_NISSAN, withoutClearMaps},
-        {EnvironmentConfig::Device::YA_AUTO, all},
-        {EnvironmentConfig::Device::YA_CARSHARING, withoutClearMaps},
+        {navikit::EnvironmentConfig::Device::ANDROID, all},
+        {navikit::EnvironmentConfig::Device::IPHONE, all},
+        {navikit::EnvironmentConfig::Device::CAR_NISSAN, withoutClearMaps},
+        {navikit::EnvironmentConfig::Device::YA_AUTO, all},
+        {navikit::EnvironmentConfig::Device::YA_CARSHARING, withoutClearMaps},
     };
 
     for (const auto& test : tests) {
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/offline_cache_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/offline_cache_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -8,7 +8,7 @@
 
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::ui::tests {
+namespace yandex::maps::navi::ui::tests {
 
 using namespace offline_cache;
 using namespace mapkit::offline_cache;
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/support_new_offline_cache_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/support_new_offline_cache_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -5,9 +5,9 @@
 
 #include <boost/test/unit_test.hpp>
 
-namespace yandex::maps::navikit::ui::features {
+namespace yandex::maps::navi::ui::features {
 
-using Device = EnvironmentConfig::Device;
+using Device = navikit::EnvironmentConfig::Device;
 
 BOOST_AUTO_TEST_CASE(testSupportNewOfflineCache)
 {
@@ -28,9 +28,9 @@ BOOST_AUTO_TEST_CASE(testSupportNewOfflineCache)
     UI(
         for (const auto& test : tests) {
             for (const auto& device: test.devices) {
-                auto config = std::make_unique<TestEnvironmentConfig>(device);
+                auto config = std::make_unique<navikit::TestEnvironmentConfig>(device);
                 config->setDebug(test.debug);
-                auto handle = getTestEnvironment()->setConfig(std::move(config));
+                auto handle = navikit::getTestEnvironment()->setConfig(std::move(config));
 
                 BOOST_CHECK(supportNewOfflineCache() == test.supportNewOfflineCache);
             }
--- mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/ui_test.cpp	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit/ui/tests/ui_test.cpp	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -28,7 +28,7 @@
 #include <boost/test/unit_test.hpp>
 #include <gmock/gmock.h>
 
-namespace yandex::maps::navikit::ui::menu {
+namespace yandex::maps::navi::ui::menu {
 
 using namespace testing;
 
@@ -93,7 +93,7 @@ BOOST_AUTO_TEST_CASE(testMenuScreenPresenterImpl) {
             getAppComponent()->naviAutoSyncManager()->carsAvailable()
                 ? getAppComponent()->naviAutoSyncManager()->carManager()
                 : nullptr,
-            /* carCardOpener */ [] (const navikit::naviauto_sync::Car&) {},
+            /* carCardOpener */ [] (const naviauto_sync::Car&) {},
             std::make_shared<NiceMock<MockUiControllers>>(),
             nullptr,
             /* scaleFactor */ 1,
@@ -113,6 +113,7 @@ BOOST_AUTO_TEST_CASE(testDeveloperSettingsPresenter) {
         testPresenter<DeveloperSettingsPresenter>(
             std::make_shared<NiceMock<MockMessageBoxFactory>>(),
             /* provisioningUiController */ nullptr,
+            nullptr,
             /* mapkitMap */ nullptr,
             "Developer Settings"
         )
--- mobile/geo/navi/client/yandexnavi.core/src/navikit_guidance/mocks/include/yandex/maps/navikit/mocks/mock_settings_manager.h	(38dbf6dc692027c67daa721482bda0d6101e7de7)
+++ mobile/geo/navi/client/yandexnavi.core/src/navikit_guidance/mocks/include/yandex/maps/navikit/mocks/mock_settings_manager.h	(4a633ecb3c306a74c3570c5fc9e23208eba5a9a9)
@@ -8,7 +8,7 @@
 
 namespace yandex {
 namespace maps {
-namespace navikit {
+namespace navi {
 namespace settings {
 
 class MockSettingsManager : public SettingsManager {
@@ -74,9 +74,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(addCursorModelToPurchased,
       void(CursorModel));
   MOCK_METHOD1(addChangeListener,
-      void(const std::shared_ptr<::yandex::maps::navikit::settings::SettingsListener>& settingsListener));
+      void(const std::shared_ptr<::yandex::maps::navi::settings::SettingsListener>& settingsListener));
   MOCK_METHOD1(removeChangeListener,
-      void(const std::shared_ptr<::yandex::maps::navikit::settings::SettingsListener>& settingsListener));
+      void(const std::shared_ptr<::yandex::maps::navi::settings::SettingsListener>& settingsListener));
   MOCK_METHOD0(readLocalSettings,
       void());
   MOCK_METHOD1(handleAppUpdate,
@@ -90,9 +90,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setPromoVersion,
       void(int promoVersion));
   MOCK_CONST_METHOD0(cameraPosition,
-      boost::optional<::yandex::maps::navikit::settings::CameraPosition>());
+      boost::optional<::yandex::maps::navi::settings::CameraPosition>());
   MOCK_METHOD1(setCameraPosition,
-      void(const boost::optional<::yandex::maps::navikit::settings::CameraPosition>& cameraPosition));
+      void(const boost::optional<::yandex::maps::navi::settings::CameraPosition>& cameraPosition));
   MOCK_CONST_METHOD0(carparksEnabled,
       bool());
   MOCK_METHOD1(setCarparksEnabled,
@@ -310,47 +310,47 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setCursorModel,
       void(const std::string& cursorId));
   MOCK_CONST_METHOD0(legacyCursorModelV2,
-      ::yandex::maps::navikit::settings::CursorModel());
+      ::yandex::maps::navi::settings::CursorModel());
   MOCK_METHOD1(setLegacyCursorModelV2,
-      void(::yandex::maps::navikit::settings::CursorModel legacyCursorModelV2));
+      void(::yandex::maps::navi::settings::CursorModel legacyCursorModelV2));
   MOCK_CONST_METHOD0(legacyCursorModel,
-      ::yandex::maps::navikit::settings::CursorModel());
+      ::yandex::maps::navi::settings::CursorModel());
   MOCK_METHOD1(setLegacyCursorModel,
-      void(::yandex::maps::navikit::settings::CursorModel legacyCursorModel));
+      void(::yandex::maps::navi::settings::CursorModel legacyCursorModel));
   MOCK_CONST_METHOD0(nightMode,
-      ::yandex::maps::navikit::settings::NightMode());
+      ::yandex::maps::navi::settings::NightMode());
   MOCK_METHOD1(setNightMode,
-      void(::yandex::maps::navikit::settings::NightMode nightMode));
+      void(::yandex::maps::navi::settings::NightMode nightMode));
   MOCK_CONST_METHOD0(rasterMode,
-      ::yandex::maps::navikit::settings::RasterMode());
+      ::yandex::maps::navi::settings::RasterMode());
   MOCK_METHOD1(setRasterMode,
-      void(::yandex::maps::navikit::settings::RasterMode rasterMode));
+      void(::yandex::maps::navi::settings::RasterMode rasterMode));
   MOCK_CONST_METHOD0(bluetoothMode,
-      ::yandex::maps::navikit::settings::BluetoothMode());
+      ::yandex::maps::navi::settings::BluetoothMode());
   MOCK_METHOD1(setBluetoothMode,
-      void(::yandex::maps::navikit::settings::BluetoothMode bluetoothMode));
+      void(::yandex::maps::navi::settings::BluetoothMode bluetoothMode));
   MOCK_CONST_METHOD0(annotationsDuringCall,
       bool());
   MOCK_METHOD1(setAnnotationsDuringCall,
       void(bool annotationsDuringCall));
   MOCK_CONST_METHOD0(legacySoundScheme,
-      ::yandex::maps::navikit::settings::SoundScheme());
+      ::yandex::maps::navi::settings::SoundScheme());
   MOCK_METHOD1(setLegacySoundScheme,
-      void(::yandex::maps::navikit::settings::SoundScheme legacySoundScheme));
+      void(::yandex::maps::navi::settings::SoundScheme legacySoundScheme));
   MOCK_CONST_METHOD0(legacySoundSchemeV2,
-      ::yandex::maps::navikit::settings::SoundScheme());
+      ::yandex::maps::navi::settings::SoundScheme());
   MOCK_METHOD1(setLegacySoundSchemeV2,
-      void(::yandex::maps::navikit::settings::SoundScheme legacySoundSchemeV2));
+      void(::yandex::maps::navi::settings::SoundScheme legacySoundSchemeV2));
   MOCK_CONST_METHOD0(soundLang,
-      ::yandex::maps::navikit::settings::SoundLang());
+      ::yandex::maps::navi::settings::SoundLang());
   MOCK_METHOD1(setSoundLang,
-      void(::yandex::maps::navikit::settings::SoundLang soundLang));
+      void(::yandex::maps::navi::settings::SoundLang soundLang));
   MOCK_CONST_METHOD0(legacySoundLang,
-      ::yandex::maps::navikit::settings::SoundLang());
+      ::yandex::maps::navi::settings::SoundLang());
   MOCK_METHOD1(setLegacySoundLang,
-      void(::yandex::maps::navikit::settings::SoundLang legacySoundLang));
+      void(::yandex::maps::navi::settings::SoundLang legacySoundLang));
   MOCK_CONST_METHOD0(actualSoundLang,
-      ::yandex::maps::navikit::settings::SoundLang());
+      ::yandex::maps::navi::settings::SoundLang());
   MOCK_CONST_METHOD0(roadEventModes,
       std::map<mapkit::road_events::EventTag, RoadEventNotificationMode>());
   MOCK_METHOD1(setRoadEventModes,
@@ -371,25 +371,25 @@ class MockSettingsManager : public SettingsManager {
       bool());
   MOCK_METHOD1(setCamerasOnMapEnabled,
       void(bool camerasOnMapEnabled));
-  MOCK_CONST_METHOD0(screenSaverMode, ScreenSaverMode());
-  MOCK_METHOD1(setScreenSaverMode, void(const ScreenSaverMode& mode));
+  MOCK_CONST_METHOD0(screenSaverMode, navikit::ScreenSaverMode());
+  MOCK_METHOD1(setScreenSaverMode, void(const navikit::ScreenSaverMode& mode));
   MOCK_METHOD1(setRoadEventTagVisible, void(mapkit::road_events::EventTag eventTag));
   MOCK_METHOD1(setRoadEventTagAnnotated, void(mapkit::road_events::EventTag eventTag));
   MOCK_CONST_METHOD0(isAllRoadEventsDisabled, bool());
   MOCK_METHOD0(getEnabledRoadEvents,
       std::shared_ptr<::yandex::maps::runtime::bindings::Vector<mapkit::road_events::EventTag>>());
   MOCK_CONST_METHOD0(fuelTypes,
-      std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navikit::settings::FuelType>>());
+      std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navi::settings::FuelType>>());
   MOCK_METHOD1(setFuelTypes,
-      void(const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navikit::settings::FuelType>>& fuelTypes));
+      void(const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navi::settings::FuelType>>& fuelTypes));
   MOCK_CONST_METHOD0(mastercardCategories,
-      std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navikit::settings::MastercardCategory>>());
+      std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navi::settings::MastercardCategory>>());
   MOCK_METHOD1(setMastercardCategories,
-      void(const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navikit::settings::MastercardCategory>>& mastercardCategories));
+      void(const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navi::settings::MastercardCategory>>& mastercardCategories));
   MOCK_CONST_METHOD0(mastercardCardTypes,
-      std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navikit::settings::MastercardCardType>>());
+      std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navi::settings::MastercardCardType>>());
   MOCK_METHOD1(setMastercardCardTypes,
-      void(const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navikit::settings::MastercardCardType>>& mastercardCardTypes));
+      void(const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::navi::settings::MastercardCardType>>& mastercardCardTypes));
   MOCK_CONST_METHOD0(fuelFilterWasShown,
       bool());
   MOCK_METHOD1(setFuelFilterWasShown,
@@ -399,9 +399,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setBackgroundGuidanceEnabled,
       void(bool backgroundGuidanceEnabled));
   MOCK_CONST_METHOD0(additionalInfo,
-      ::yandex::maps::navikit::settings::AdditionalInfo());
+      ::yandex::maps::navi::settings::AdditionalInfo());
   MOCK_METHOD1(setAdditionalInfo,
-      void(::yandex::maps::navikit::settings::AdditionalInfo additionalInfo));
+      void(::yandex::maps::navi::settings::AdditionalInfo additionalInfo));
   MOCK_CONST_METHOD0(searchAdEnabled,
       bool());
   MOCK_METHOD1(setSearchAdEnabled,
@@ -455,9 +455,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setAvoidTolls,
       void(bool avoidTolls));
   MOCK_CONST_METHOD0(truckDriverMode,
-      ::yandex::maps::navikit::settings::TruckDriverMode());
+      ::yandex::maps::navi::settings::TruckDriverMode());
   MOCK_METHOD1(setTruckDriverMode,
-      void(::yandex::maps::navikit::settings::TruckDriverMode truckDriverMode));
+      void(::yandex::maps::navi::settings::TruckDriverMode truckDriverMode));
   MOCK_CONST_METHOD0(isTruckDriver,
       bool());
   MOCK_CONST_METHOD0(nagievVoiceOnceChosen,
@@ -465,15 +465,15 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setNagievVoiceOnceChosen,
       void(bool nagievVoiceOnceChosen));
   MOCK_CONST_METHOD0(soundInteraction,
-      ::yandex::maps::navikit::settings::SoundInteraction());
+      ::yandex::maps::navi::settings::SoundInteraction());
   MOCK_METHOD1(setSoundInteraction,
-      void(::yandex::maps::navikit::settings::SoundInteraction soundInteraction));
+      void(::yandex::maps::navi::settings::SoundInteraction soundInteraction));
   MOCK_CONST_METHOD0(soundInteractionIos,
-      ::yandex::maps::navikit::settings::SoundInteraction());
+      ::yandex::maps::navi::settings::SoundInteraction());
   MOCK_METHOD1(setSoundInteractionIos,
-      void(::yandex::maps::navikit::settings::SoundInteraction soundInteraction));
+      void(::yandex::maps::navi::settings::SoundInteraction soundInteraction));
   MOCK_CONST_METHOD0(platformSpecificSoundInteraction,
-      ::yandex::maps::navikit::settings::SoundInteraction());
+      ::yandex::maps::navi::settings::SoundInteraction());
   MOCK_CONST_METHOD0(nearbyAlternativesEnabled,
       bool());
   MOCK_METHOD1(setNearbyAlternativesEnabled,
@@ -483,9 +483,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setSoundVolume,
       void(int soundVolume));
   MOCK_CONST_METHOD0(soundNotifications,
-      ::yandex::maps::navikit::settings::SoundNotificationMode());
+      ::yandex::maps::navi::settings::SoundNotificationMode());
   MOCK_METHOD1(setSoundNotifications,
-      void(::yandex::maps::navikit::settings::SoundNotificationMode soundNotifications));
+      void(::yandex::maps::navi::settings::SoundNotificationMode soundNotifications));
   MOCK_CONST_METHOD0(legacyUsedAlice,
       bool());
   MOCK_METHOD1(setLegacyUsedAlice,
@@ -507,13 +507,13 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setGasStationsMenuVisited,
       void(bool gasStationsMenuVisited));
   MOCK_CONST_METHOD0(interactionData,
-      const std::shared_ptr<::yandex::maps::navikit::settings::InteractionFeedbackDataExtended>&());
+      const std::shared_ptr<::yandex::maps::navi::settings::InteractionFeedbackDataExtended>&());
   MOCK_CONST_METHOD0(lastCommercialUsages,
       const std::shared_ptr<::yandex::maps::runtime::bindings::Vector<::yandex::maps::runtime::AbsoluteTimestamp>>&());
   MOCK_METHOD0(saveInteractionData,
       void());
   MOCK_CONST_METHOD0(tutorialData,
-      const std::shared_ptr<::yandex::maps::navikit::settings::TutorialDataExtended>&());
+      const std::shared_ptr<::yandex::maps::navi::settings::TutorialDataExtended>&());
   MOCK_METHOD0(saveTutorialData,
       void());
   MOCK_CONST_METHOD0(routeCompleteCount,
@@ -525,9 +525,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setTruckRoutesBuiltCount,
       void(int truckRoutesBuiltCount));
   MOCK_CONST_METHOD0(androidSoundChannel,
-      ::yandex::maps::navikit::settings::AndroidSoundChannel());
+      ::yandex::maps::navi::settings::AndroidSoundChannel());
   MOCK_METHOD1(setAndroidSoundChannel,
-      void(::yandex::maps::navikit::settings::AndroidSoundChannel androidSoundChannel));
+      void(::yandex::maps::navi::settings::AndroidSoundChannel androidSoundChannel));
   MOCK_CONST_METHOD0(autoMainVolume,
       int());
   MOCK_METHOD1(setAutoMainVolume,
@@ -542,9 +542,9 @@ class MockSettingsManager : public SettingsManager {
   MOCK_METHOD1(setPretendYaAutoEnabled, void(bool enabled));
   MOCK_CONST_METHOD0(showFakeCar, bool());
   MOCK_METHOD1(setShowFakeCar, void(bool showFakeCar));
-  MOCK_CONST_METHOD0(surgeMode, ::yandex::maps::navikit::settings::SurgeMode());
+  MOCK_CONST_METHOD0(surgeMode, ::yandex::maps::navi::settings::SurgeMode());
   MOCK_METHOD1(setSurgeMode,
-      void(::yandex::maps::navikit::settings::SurgeMode surgeMode));
+      void(::yandex::maps::navi::settings::SurgeMode surgeMode));
   MOCK_CONST_METHOD0(mapScaleFactorCoef, float());
   MOCK_METHOD1(setMapScaleFactorCoef, void(float scaleFactor));
   MOCK_CONST_METHOD0(buildRouteFromCarEnabled, bool());
@@ -554,14 +554,14 @@ class MockSettingsManager : public SettingsManager {
   MOCK_CONST_METHOD0(areSpecialProjectsEnabled, bool());
   MOCK_METHOD1(setSpecialProjectsEnabled,
       void(bool value));
-  MOCK_CONST_METHOD1(canShowAd, bool(::yandex::maps::navikit::settings::AdvertType type));
+  MOCK_CONST_METHOD1(canShowAd, bool(::yandex::maps::navi::settings::AdvertType type));
   MOCK_CONST_METHOD1(isOutdatedSettingSupported, bool(const char *settingName));
   MOCK_CONST_METHOD0(shouldCleanStorage, bool());
   MOCK_METHOD1(setShouldCleanStorage, void(bool shouldCleanStorage));
   MOCK_CONST_METHOD0(activationSpotter,
-    ::yandex::maps::navikit::settings::ActivationSpotter());
+    ::yandex::maps::navi::settings::ActivationSpotter());
   MOCK_METHOD1(setActivationSpotter,
-    void(::yandex::maps::navikit::settings::ActivationSpotter activationSpotter));
+    void(::yandex::maps::navi::settings::ActivationSpotter activationSpotter));
   MOCK_CONST_METHOD0(driveTestingEnvironmentEnabled, bool());
   MOCK_METHOD1(setDriveTestingEnvironmentEnabled, void(bool enabled));
   MOCK_CONST_METHOD0(completedProvisioningStepsJson, std::string());
