# -*- coding: utf-8 -*-

import pytest
import hamcrest
import collections

from balance import balance_api as api
from balance import balance_db as db
import btestlib.utils as utils

SAVED_RESULT_DIRECT = '''REGION_ID	FIRM_ID	FIRM_REGION_ID	RESIDENT	NDS_PCT	NSP_PCT	AGENCY
84	4	84	1	0	0	0
84	4	84	1	0	0	1
93	7	126	0	0	0	0
93	7	126	0	0	0	1
94	7	126	0	0	0	0
94	7	126	0	0	0	1
95	7	126	0	0	0	0
95	7	126	0	0	0	1
96	7	126	0	0	0	0
96	7	126	0	0	0	1
102	7	126	0	0	0	0
102	7	126	0	0	0	1
113	7	126	0	0	0	0
113	7	126	0	0	0	1
114	7	126	0	0	0	0
114	7	126	0	0	0	1
115	7	126	0	0	0	0
115	7	126	0	0	0	1
116	7	126	0	0	0	0
116	7	126	0	0	0	1
117	7	126	0	0	0	0
117	7	126	0	0	0	1
118	7	126	0	0	0	0
118	7	126	0	0	0	1
119	7	126	0	0	0	0
119	7	126	0	0	0	1
120	7	126	0	0	0	0
120	7	126	0	0	0	1
121	7	126	0	0	0	0
121	7	126	0	0	0	1
122	7	126	0	0	0	0
122	7	126	0	0	0	1
123	7	126	0	0	0	0
123	7	126	0	0	0	1
124	7	126	0	0	0	0
124	7	126	0	0	0	1
125	7	126	0	0	0	0
125	7	126	0	0	0	1
126	7	126	1	7.7	0	0
126	7	126	1	7.7	0	1
127	7	126	0	0	0	0
127	7	126	0	0	0	1
134	7	126	0	0	0	0
134	7	126	0	0	0	1
135	7	126	0	0	0	0
135	7	126	0	0	0	1
137	7	126	0	0	0	0
137	7	126	0	0	0	1
139	7	126	0	0	0	0
139	7	126	0	0	0	1
149	27	149	1	20	0	0
149	27	149	1	20	0	1
159	25	159	1	12	0	0
159	25	159	1	12	0	1
167	1	225	0	0	0	0
167	1	225	0	0	0	1
168	1	225	0	0	0	0
168	1	225	0	0	0	1
169	1	225	0	0	0	0
169	1	225	0	0	0	1
170	1	225	0	0	0	0
170	1	225	0	0	0	1
171	1	225	0	0	0	0
171	1	225	0	0	0	1
179	7	126	0	0	0	0
179	7	126	0	0	0	1
180	7	126	0	0	0	0
180	7	126	0	0	0	1
181	7	126	0	0	0	0
181	7	126	0	0	0	1
187	2	187	1	20	0	0
187	2	187	1	20	0	1
203	7	126	0	0	0	0
203	7	126	0	0	0	1
204	7	126	0	0	0	0
204	7	126	0	0	0	1
205	7	126	0	0	0	0
205	7	126	0	0	0	1
206	7	126	0	0	0	0
206	7	126	0	0	0	1
207	1	225	0	0	0	0
207	1	225	0	0	0	1
208	1	225	0	0	0	0
208	1	225	0	0	0	1
209	1	225	0	0	0	0
209	1	225	0	0	0	1
210	7	126	0	0	0	0
210	7	126	0	0	0	1
211	7	126	0	0	0	0
211	7	126	0	0	0	1
225	1	225	1	20	0	0
225	1	225	1	20	0	1
246	7	126	0	0	0	0
246	7	126	0	0	0	1
983	7	126	0	0	0	0
983	7	126	0	0	0	1
994	7	126	0	0	0	0
994	7	126	0	0	0	1
995	7	126	0	0	0	0
995	7	126	0	0	0	1
1056	7	126	0	0	0	0
1056	7	126	0	0	0	1
10013	7	126	0	0	0	0
10013	7	126	0	0	0	1
10015	7	126	0	0	0	0
10015	7	126	0	0	0	1
10017	7	126	0	0	0	0
10017	7	126	0	0	0	1
10020	7	126	0	0	0	0
10020	7	126	0	0	0	1
10021	7	126	0	0	0	0
10021	7	126	0	0	0	1
10022	7	126	0	0	0	0
10022	7	126	0	0	0	1
10023	7	126	0	0	0	0
10023	7	126	0	0	0	1
10024	7	126	0	0	0	0
10024	7	126	0	0	0	1
10029	7	126	0	0	0	0
10029	7	126	0	0	0	1
10030	7	126	0	0	0	0
10030	7	126	0	0	0	1
10054	7	126	0	0	0	0
10054	7	126	0	0	0	1
10057	7	126	0	0	0	0
10057	7	126	0	0	0	1
10063	7	126	0	0	0	0
10063	7	126	0	0	0	1
10064	7	126	0	0	0	0
10064	7	126	0	0	0	1
10067	7	126	0	0	0	0
10067	7	126	0	0	0	1
10068	7	126	0	0	0	0
10068	7	126	0	0	0	1
10069	7	126	0	0	0	0
10069	7	126	0	0	0	1
10070	7	126	0	0	0	0
10070	7	126	0	0	0	1
10074	7	126	0	0	0	0
10074	7	126	0	0	0	1
10077	7	126	0	0	0	0
10077	7	126	0	0	0	1
10083	7	126	0	0	0	0
10083	7	126	0	0	0	1
10088	7	126	0	0	0	0
10088	7	126	0	0	0	1
10089	7	126	0	0	0	0
10089	7	126	0	0	0	1
10090	7	126	0	0	0	0
10090	7	126	0	0	0	1
10091	7	126	0	0	0	0
10091	7	126	0	0	0	1
10093	7	126	0	0	0	0
10093	7	126	0	0	0	1
10095	7	126	0	0	0	0
10095	7	126	0	0	0	1
10097	7	126	0	0	0	0
10097	7	126	0	0	0	1
10098	7	126	0	0	0	0
10098	7	126	0	0	0	1
10099	7	126	0	0	0	0
10099	7	126	0	0	0	1
10100	7	126	0	0	0	0
10100	7	126	0	0	0	1
10101	7	126	0	0	0	0
10101	7	126	0	0	0	1
10102	7	126	0	0	0	0
10102	7	126	0	0	0	1
10104	7	126	0	0	0	0
10104	7	126	0	0	0	1
10105	7	126	0	0	0	0
10105	7	126	0	0	0	1
10108	7	126	0	0	0	0
10108	7	126	0	0	0	1
10109	7	126	0	0	0	0
10109	7	126	0	0	0	1
10532	7	126	0	0	0	0
10532	7	126	0	0	0	1
10535	7	126	0	0	0	0
10535	7	126	0	0	0	1
10536	7	126	0	0	0	0
10536	7	126	0	0	0	1
10537	7	126	0	0	0	0
10537	7	126	0	0	0	1
10538	7	126	0	0	0	0
10538	7	126	0	0	0	1
10540	7	126	0	0	0	0
10540	7	126	0	0	0	1
10542	7	126	0	0	0	0
10542	7	126	0	0	0	1
10584	7	126	0	0	0	0
10584	7	126	0	0	0	1
10589	7	126	0	0	0	0
10589	7	126	0	0	0	1
20271	7	126	0	0	0	0
20271	7	126	0	0	0	1
20274	7	126	0	0	0	0
20274	7	126	0	0	0	1
20572	7	126	0	0	0	0
20572	7	126	0	0	0	1
20574	7	126	0	0	0	0
20574	7	126	0	0	0	1
20733	7	126	0	0	0	0
20733	7	126	0	0	0	1
20736	7	126	0	0	0	0
20736	7	126	0	0	0	1
20739	7	126	0	0	0	0
20739	7	126	0	0	0	1
20741	7	126	0	0	0	0
20741	7	126	0	0	0	1
20746	7	126	0	0	0	0
20746	7	126	0	0	0	1
20747	7	126	0	0	0	0
20747	7	126	0	0	0	1
20754	7	126	0	0	0	0
20754	7	126	0	0	0	1
20762	7	126	0	0	0	0
20762	7	126	0	0	0	1
20764	7	126	0	0	0	0
20764	7	126	0	0	0	1
20768	7	126	0	0	0	0
20768	7	126	0	0	0	1
20769	7	126	0	0	0	0
20769	7	126	0	0	0	1
20785	7	126	0	0	0	0
20785	7	126	0	0	0	1
20789	7	126	0	0	0	0
20789	7	126	0	0	0	1
20790	7	126	0	0	0	0
20790	7	126	0	0	0	1
20802	7	126	0	0	0	0
20802	7	126	0	0	0	1
20818	7	126	0	0	0	0
20818	7	126	0	0	0	1
20826	7	126	0	0	0	0
20826	7	126	0	0	0	1
20854	7	126	0	0	0	0
20854	7	126	0	0	0	1
20856	7	126	0	0	0	0
20856	7	126	0	0	0	1
20860	7	126	0	0	0	0
20860	7	126	0	0	0	1
20862	7	126	0	0	0	0
20862	7	126	0	0	0	1
20869	7	126	0	0	0	0
20869	7	126	0	0	0	1
20915	7	126	0	0	0	0
20915	7	126	0	0	0	1
20917	7	126	0	0	0	0
20917	7	126	0	0	0	1
20954	7	126	0	0	0	0
20954	7	126	0	0	0	1
20957	7	126	0	0	0	0
20957	7	126	0	0	0	1
20968	7	126	0	0	0	0
20968	7	126	0	0	0	1
20972	7	126	0	0	0	0
20972	7	126	0	0	0	1
20975	7	126	0	0	0	0
20975	7	126	0	0	0	1
20989	7	126	0	0	0	0
20989	7	126	0	0	0	1
20992	7	126	0	0	0	0
20992	7	126	0	0	0	1
21004	7	126	0	0	0	0
21004	7	126	0	0	0	1
21007	7	126	0	0	0	0
21007	7	126	0	0	0	1
21010	7	126	0	0	0	0
21010	7	126	0	0	0	1
21019	7	126	0	0	0	0
21019	7	126	0	0	0	1
21042	7	126	0	0	0	0
21042	7	126	0	0	0	1
21045	7	126	0	0	0	0
21045	7	126	0	0	0	1
21131	7	126	0	0	0	0
21131	7	126	0	0	0	1
21137	7	126	0	0	0	0
21137	7	126	0	0	0	1
21143	7	126	0	0	0	0
21143	7	126	0	0	0	1
21151	7	126	0	0	0	0
21151	7	126	0	0	0	1
21156	7	126	0	0	0	0
21156	7	126	0	0	0	1
21165	7	126	0	0	0	0
21165	7	126	0	0	0	1
21171	7	126	0	0	0	0
21171	7	126	0	0	0	1
21175	7	126	0	0	0	0
21175	7	126	0	0	0	1
21182	7	126	0	0	0	0
21182	7	126	0	0	0	1
21184	7	126	0	0	0	0
21184	7	126	0	0	0	1
21187	7	126	0	0	0	0
21187	7	126	0	0	0	1
21191	7	126	0	0	0	0
21191	7	126	0	0	0	1
21196	7	126	0	0	0	0
21196	7	126	0	0	0	1
21198	7	126	0	0	0	0
21198	7	126	0	0	0	1
21199	7	126	0	0	0	0
21199	7	126	0	0	0	1
21203	7	126	0	0	0	0
21203	7	126	0	0	0	1
21208	7	126	0	0	0	0
21208	7	126	0	0	0	1
21214	7	126	0	0	0	0
21214	7	126	0	0	0	1
21217	7	126	0	0	0	0
21217	7	126	0	0	0	1
21219	7	126	0	0	0	0
21219	7	126	0	0	0	1
21223	7	126	0	0	0	0
21223	7	126	0	0	0	1
21227	7	126	0	0	0	0
21227	7	126	0	0	0	1
21230	7	126	0	0	0	0
21230	7	126	0	0	0	1
21231	7	126	0	0	0	0
21231	7	126	0	0	0	1
21235	7	126	0	0	0	0
21235	7	126	0	0	0	1
21239	7	126	0	0	0	0
21239	7	126	0	0	0	1
21241	7	126	0	0	0	0
21241	7	126	0	0	0	1
21251	7	126	0	0	0	0
21251	7	126	0	0	0	1
21261	7	126	0	0	0	0
21261	7	126	0	0	0	1
21278	7	126	0	0	0	0
21278	7	126	0	0	0	1
21289	7	126	0	0	0	0
21289	7	126	0	0	0	1
21297	7	126	0	0	0	0
21297	7	126	0	0	0	1
21299	7	126	0	0	0	0
21299	7	126	0	0	0	1
21321	7	126	0	0	0	0
21321	7	126	0	0	0	1
21325	7	126	0	0	0	0
21325	7	126	0	0	0	1
21326	7	126	0	0	0	0
21326	7	126	0	0	0	1
21330	7	126	0	0	0	0
21330	7	126	0	0	0	1
21331	7	126	0	0	0	0
21331	7	126	0	0	0	1
21339	7	126	0	0	0	0
21339	7	126	0	0	0	1
21344	7	126	0	0	0	0
21344	7	126	0	0	0	1
21349	7	126	0	0	0	0
21349	7	126	0	0	0	1
21359	7	126	0	0	0	0
21359	7	126	0	0	0	1
21371	7	126	0	0	0	0
21371	7	126	0	0	0	1
21395	7	126	0	0	0	0
21395	7	126	0	0	0	1
21426	7	126	0	0	0	0
21426	7	126	0	0	0	1
21441	7	126	0	0	0	0
21441	7	126	0	0	0	1
21451	7	126	0	0	0	0
21451	7	126	0	0	0	1
21475	7	126	0	0	0	0
21475	7	126	0	0	0	1
21477	7	126	0	0	0	0
21477	7	126	0	0	0	1
21486	7	126	0	0	0	0
21486	7	126	0	0	0	1
21534	7	126	0	0	0	0
21534	7	126	0	0	0	1
21536	7	126	0	0	0	0
21536	7	126	0	0	0	1
21538	7	126	0	0	0	0
21538	7	126	0	0	0	1
21544	7	126	0	0	0	0
21544	7	126	0	0	0	1
21546	7	126	0	0	0	0
21546	7	126	0	0	0	1
21550	7	126	0	0	0	0
21550	7	126	0	0	0	1
21551	7	126	0	0	0	0
21551	7	126	0	0	0	1
21553	7	126	0	0	0	0
21553	7	126	0	0	0	1
21556	7	126	0	0	0	0
21556	7	126	0	0	0	1
21559	7	126	0	0	0	0
21559	7	126	0	0	0	1
21562	7	126	0	0	0	0
21562	7	126	0	0	0	1
21564	7	126	0	0	0	0
21564	7	126	0	0	0	1
21567	7	126	0	0	0	0
21567	7	126	0	0	0	1
21570	7	126	0	0	0	0
21570	7	126	0	0	0	1
21572	7	126	0	0	0	0
21572	7	126	0	0	0	1
21574	7	126	0	0	0	0
21574	7	126	0	0	0	1
21576	7	126	0	0	0	0
21576	7	126	0	0	0	1
21578	7	126	0	0	0	0
21578	7	126	0	0	0	1
21580	7	126	0	0	0	0
21580	7	126	0	0	0	1
21582	7	126	0	0	0	0
21582	7	126	0	0	0	1
21584	7	126	0	0	0	0
21584	7	126	0	0	0	1
21586	7	126	0	0	0	0
21586	7	126	0	0	0	1
21589	7	126	0	0	0	0
21589	7	126	0	0	0	1
21591	7	126	0	0	0	0
21591	7	126	0	0	0	1
21595	7	126	0	0	0	0
21595	7	126	0	0	0	1
21599	7	126	0	0	0	0
21599	7	126	0	0	0	1
21601	7	126	0	0	0	0
21601	7	126	0	0	0	1
21610	7	126	0	0	0	0
21610	7	126	0	0	0	1
29385	7	126	0	0	0	0
29385	7	126	0	0	0	1
29386	1	225	0	0	0	0
29386	1	225	0	0	0	1
29387	1	225	0	0	0	0
29387	1	225	0	0	0	1
37176	7	126	0	0	0	0
37176	7	126	0	0	0	1
98539	7	126	0	0	0	0
98539	7	126	0	0	0	1
98542	7	126	0	0	0	0
98542	7	126	0	0	0	1
98552	7	126	0	0	0	0
98552	7	126	0	0	0	1
101519	7	126	0	0	0	0
101519	7	126	0	0	0	1
101521	7	126	0	0	0	0
101521	7	126	0	0	0	1
108137	7	126	0	0	0	0
108137	7	126	0	0	0	1'''


# Метод устарел
@pytest.mark.priority('low')
@pytest.mark.parametrize('service_id', [7])
def test_get_nds_info_unique_nds(service_id):
    result = api.medium().GetNDSInfo(service_id)
    result_listed = [tuple(row.split('\t')) for row in result.splitlines()]
    result_listed.pop(0)
    utils.check_that(len(result_listed), hamcrest.equal_to(len(set(result_listed))))
    result_from_db = db.balance().execute('''    SELECT
        region_id,
        firm_id,
        firm_region_id,
        resident,
        nds_pct,
        nsp_pct,
        agency
    FROM (
        SELECT rnbs.*, DENSE_RANK() OVER (PARTITION BY rnbs.region_id, rnbs.service_id, tax_policy_id ORDER BY rnbs.dt DESC) rank
        FROM BO.v_region_nds_by_service rnbs
        WHERE service_id = :service_id AND (dt < sysdate OR dt IS NULL)
    )
    WHERE rank = 1
    ORDER BY region_id''', {'service_id': service_id})
    utils.check_that([(str(row['region_id']),
                       str(row['firm_id']),
                       str(row['firm_region_id']),
                       str(row['resident']),
                       str(row['nds_pct']),
                       str(row['nsp_pct']),
                       str(row['agency'])) for row in result_from_db], hamcrest.equal_to(result_listed))
    saved_result_listed = [tuple(row.split('\t')) for row in SAVED_RESULT_DIRECT.splitlines()]
    saved_result_listed.pop(0)
    counted_region_agency_pairs = collections.Counter([(x[0], x[6]) for x in result_listed])
    utils.check_that(set(x for x in counted_region_agency_pairs.values()), hamcrest.equal_to({1}))
    utils.check_that(set(result_listed).symmetric_difference(set(saved_result_listed)), hamcrest.equal_to(set()))

