{
	"login": "sandyk",
	"email": "test-balance-notify@yandex-team.ru",
	"title": "Проф, Директ по доменам",
	"status": "enabled",
	"pre_actions": [
		{
			"order": 1,
			"title": "Выгрузка статистики в YT из БД Баланса",
			"type": "db_to_yt",
			"query": "select agency_id, client_id,\n           service_id, service_order_id,\n           cast(amt as binary_double)      as amt\n   from bo.xxx_ar_agencies_stats",
			"path": "{agency_stats}",
			"columns": [
				{
					"name": "agency_id",
					"type": "int64"
				},
				{
					"name": "client_id",
					"type": "int64"
				},
				{
					"name": "service_id",
					"type": "int64"
				},
				{
					"name": "service_order_id",
					"type": "int64"
				},
				{
					"name": "amt",
					"type": "double"
				}
			]
		},
		{
			"order": 2,
			"title": "Расчет грейда домена",
			"type": "yql",
			"query": "$domain_stats_t = `{domain_stats}`;\n$agency_stats_t = `{agency_stats}`;\n$domain_grades_t = `{domain_grades}`;\n$domain_grades_report_t = `{domain_grades_report}`;\n\n\n$domain_stats = (\n  select billing_export_id   as service_order_id,\n         service_id,\n         -- BALANCE-31115\n         nvl(domain, \"\")     as domain,\n         is_blacklist,\n         is_gray,\n         cost\n    from $domain_stats_t\n);\n\n/*\nТ.к. оконные функции работают в YQL не по целому окну, а только до тек.строки,\nто считаем сумму по заказу отдельным запросом.\n\nhttps://yql.yandex-team.ru/docs/yt/builtins/window/\n*/\n$order_totals = (\n select service_order_id,\n        service_id,\n        sum(cost)           as cost_by_order\n   from $domain_stats\n  group by service_id, service_order_id\n     -- заказы с 0-ым оборотом нет смысла анализировать\n having sum(cost) > 0\n);\n\n/*\nСчитаем долю домена по заказу\n*/\n$order_domain_stats = (\nselect s.service_id         as service_id,\n       s.service_order_id   as service_order_id,\n       s.domain             as domain,\n       s.is_gray            as is_gray,\n       s.is_blacklist       as is_blacklist,\n       cast(s.cost as Double)/\n        ttl.cost_by_order   as order_pct\n  from $domain_stats        as s\n  join $order_totals        as ttl\n                            on ttl.service_order_id = s.service_order_id\n                           and ttl.service_id = s.service_id\n);\n\n/*\nЗная долю каждого домена в каждом заказе,\nсчитаем пропорциональную сумму денег по актам.\n\nДелим по аг-вам и субклиентам.\n*/\n$domain_grades_src = (\nselect d.domain                 as domain,\n       d.is_gray                as is_gray,\n       d.is_blacklist           as is_blacklist,\n       a.agency_id              as agency_id,\n       a.client_id              as client_id,\n       sum(a.amt*d.order_pct)   as amt\n  from $agency_stats_t         as a\n  join $order_domain_stats      as d\n                                on d.service_id = a.service_id\n                               and d.service_order_id = a.service_order_id\n  group by d.domain, a.agency_id, a.client_id, d.is_gray, d.is_blacklist\n);\n\n/*\nГрейд домена под аг-вом, а так же сумма денег по актам по домену\n*/\n$domain_grade = (\nselect agency_id, domain, is_gray, is_blacklist, sum(amt) as amt,\n       case\n           when is_blacklist = 1    then 'Z'\n           when is_gray = 1         then 'B'\n           when sum(amt) > 1000000 then 'A'\n           when sum(amt) >  150000 then 'B'\n           else                          'C'\n       end                         as grade\n  from $domain_grades_src\n  group by agency_id, domain, is_gray, is_blacklist\n);\n\n/*\nСохраняем таблицу с грейдами доменов\n*/\ninsert into $domain_grades_t with truncate\nselect *\n  from $domain_grade;\n\n/*\nСохраняем таблицу для отчета для БК\n*/\ninsert into $domain_grades_report_t with truncate\nselect d.domain                 as domain,\n       d.agency_id              as agency_id,\n       d.client_id              as client_id,\n       d.amt                    as total_by_client,\n       dg.amt                   as total_by_domain,\n       dg.grade                 as domain_grade\n  from $domain_grades_src       as d\n  inner\n  join $domain_grade            as dg on dg.agency_id = d.agency_id\n                                     and dg.domain = d.domain",
			"path": "",
			"columns": []
		},
		{
			"order": 3,
			"title": "Выгрузка актов в YT из БД Баланса (только для регресии)",
			"type": "db_to_yt",
			"query": "select contract_id, contract_eid, invoice_id,\n          invoice_type, commission_type, discount_type, brand_id,\n          service_id, service_order_id, agency_id, act_id,\n          cast(amt as binary_double)      as amt\n  from bo.xxx_opt_2015_acts where from_dt = trunc(add_months(date'2019-04-03', -1), 'MM') ",
			"path": "{acts}",
			"columns": [
				{
					"name": "contract_id",
					"type": "int64"
				},
				{
					"name": "contract_eid",
					"type": "string"
				},
				{
					"name": "invoice_id",
					"type": "int64"
				},
				{
					"name": "invoice_type",
					"type": "string"
				},
				{
					"name": "commission_type",
					"type": "int64"
				},
				{
					"name": "discount_type",
					"type": "int64"
				},
				{
					"name": "brand_id",
					"type": "int64"
				},
				{
					"name": "amt",
					"type": "double"
				},
				{
					"name": "service_id",
					"type": "int64"
				},
				{
					"name": "service_order_id",
					"type": "int64"
				},
				{
					"name": "agency_id",
					"type": "int64"
				},
				{
					"name": "act_id",
					"type": "int64"
				}
			]
		},
		{
			"order": 0,
			"title": "Выгрузка статистики по доменам (только для регресии)",
			"type": "db_to_yt",
			"query": "select billing_export_id, service_order_id, service_id, is_blacklist, is_gray, domain, cost\n  from bo.xxxx_ar_direct_domain_stats where from_dt = trunc(add_months(date'2019-04-03', -1), 'MM')",
			"path": "{domain_stats}",
			"columns": [
				{
					"name": "billing_export_id",
					"type": "int64"
				},
				{
					"name": "service_order_id",
					"type": "int64"
				},
				{
					"name": "service_id",
					"type": "int64"
				},
				{
					"name": "is_blacklist",
					"type": "int64"
				},
				{
					"name": "is_gray",
					"type": "int64"
				},
				{
					"name": "domain",
					"type": "string"
				},
				{
					"name": "cost",
					"type": "int64"
				}
			]
		}
	],
	"query": "pragma SimpleColumns;\n\n$acts_t = `{acts}`;\n$acts_div_t = `{act_div}`;\n$domain_stats_t = `{domain_stats}`;\n$domain_grades_t = `{domain_grades}`;\n$agency_rewards_t = `{agency_rewards}`;\n\n-- штрафы пред. период\n$act_folder = `{acts_folder}`;\n$act_folder_str = '{acts_folder}';\n$calc_dt = '{calc_dt}';\n$calc_prev_dt = '{calc_prev_dt}';\n$tbl_name = String::RemoveFirst(String::RemoveFirst($act_folder_str, '/'), '/')||'/'||$calc_prev_dt;\n\n\n$acts_src = (\n    select *\n      from $acts_t\n        -- Проф. шкала\n     where commission_type = 2\n);\n\n$act_div = (\n    select d.act_id, d.service_id, d.group_service_order_id, d.service_order_id,\n           d.inv_amount, d.client_id,\n           sum(order_amount) as order_amount\n      from $acts_div_t    as d\n     where d.service_id = 7\n       group by d.act_id, d.service_id, d.group_service_order_id,\n                d.service_order_id, d.inv_amount, d.client_id\n);\n\n-- Выборка актов по шкале\n$acts = (\n    select a.contract_id            as contract_id,\n           a.contract_eid           as contract_eid,\n           a.invoice_id             as invoice_id,\n           a.invoice_type           as invoice_type,\n           a.discount_type          as discount_type,\n           a.service_id             as service_id,\n           a.brand_id               as brand_id,\n           a.agency_id              as agency_id,\n           nvl(d.service_order_id, a.service_order_id) as service_order_id,\n           nvl(a.amt * d.order_amount/d.inv_amount, a.amt) as amt\n      from $acts_src                as a\n      left outer\n      join $act_div                 as d\n                                    on d.act_id = a.act_id\n                                    and d.service_id = a.service_id\n                                    and d.group_service_order_id = a.service_order_id\n                                    -- and d.client_id = a.brand_id\n     where discount_type = 7\n);\n\n-- итого по заказу\n$order_totals = (\n select service_order_id,\n        service_id,\n        sum(cost) as cost_by_order\n  from $domain_stats_t\n  group by service_id, service_order_id\n having sum(cost) > 0\n);\n\n-- доля домена в заказе\n$order_domain_stats = (\nselect s.service_id         as service_id,\n      s.service_order_id   as service_order_id,\n   -- BALANCE-31115\n     nvl(s.domain, \"\")              as domain,\n      cast(s.cost as Double)/\n        ttl.cost_by_order   as order_pct\n  from $domain_stats_t     as s\n   join $order_totals        as ttl\n                            on ttl.service_order_id = s.service_order_id\n                           and ttl.service_id = s.service_id\n);\n\n-- штрафы тек. период\n$control = (\n    select contract_id                       as contract_id,\n           contract_amt                      as amt,\n           count(distinct over1k_brand_id)   as count_over1k_brand_id,\n           Math::Round(max(client_ratio), -2)       as ratio\n      from (\n              select c.contract_id          as contract_id,\n                     case\n                        when cl.amt >= 1000 then brand_id\n                        else null\n                     end                  as over1k_brand_id,\n                     c.total_amt          as contract_amt,\n                     cl.amt/c.direct_amt  as client_ratio\n                from (-- оборот по клиенту\n                  select contract_id          as contract_id,\n                         brand_id             as brand_id,\n                         sum(amt)             as amt\n                    from $acts\n                   group by contract_id, brand_id\n                     ) as cl\n                join (-- оборот по договору\n                  select contract_id          as contract_id,\n                         sum(case when discount_type = 7 then amt\n                             else null end)   as direct_amt,\n                         sum(amt)             as total_amt\n                    from $acts_src\n                   group by contract_id\n                     ) as c on c.contract_id = cl.contract_id\n          )\n     group by contract_id, contract_amt\n);\n\n\n-- обрабатываем случай, если таблицы нет за предыдущий период\n$control_prev_src = (\n  select r.contract_id        as contract_id,\n         r.brand_id           as brand_id,\n         r.discount_type      as discount_type,\n         r.amt                as amt\n    from (\n    select TablePath() as tbl,\n           r.contract_id        as contract_id,\n           r.brand_id           as brand_id,\n           r.discount_type      as discount_type,\n           r.amt                as amt\n      from RANGE($act_folder, $calc_prev_dt, $calc_dt) as r\n         ) as r\n   where r.tbl = $tbl_name\n     and r.discount_type = 7\n);\n\n$control_prev = (\n    select contract_id                       as contract_id,\n           contract_amt                      as amt,\n           count(distinct over1k_brand_id)   as count_over1k_brand_id,\n           Math::Round(max(client_ratio), -2)       as ratio\n      from (\n              select c.contract_id          as contract_id,\n                     case\n                        when cl.amt >= 1000 then brand_id\n                        else null\n                     end                  as over1k_brand_id,\n                     c.amt                as contract_amt,\n                     cl.amt/c.amt         as client_ratio\n                from (-- оборот по клиенту\n                  select contract_id          as contract_id,\n                         brand_id             as brand_id,\n                         sum(amt)             as amt\n                    from $control_prev_src\n                   group by contract_id, brand_id\n                     ) as cl\n                join (-- оборот по договору\n                  select contract_id          as contract_id,\n                         sum(amt)             as amt\n                    from $control_prev_src\n                   group by contract_id\n                     ) as c on c.contract_id = cl.contract_id\n          )\n     group by contract_id, contract_amt\n);\n\n\n-- расчет премии\n$rewards = (\nselect a.contract_id            as contract_id,\n       a.contract_eid           as contract_eid,\n       a.invoice_id             as invoice_id,\n       a.invoice_type           as invoice_type,\n       a.discount_type          as discount_type,\n       sum(a.amt*s.order_pct)   as amt,\n       sum(a.amt*s.order_pct*\n            (\n            case g.grade\n                when 'A' then case a.invoice_type when 'prepayment' then 0.05 else 0.03 end\n                when 'B' then case a.invoice_type when 'prepayment' then 0.06 else 0.04 end\n                when 'C' then case a.invoice_type when 'prepayment' then 0.07 else 0.05 end\n                else 0\n            end\n            +\n            case\n                when g.grade in ('A', 'B', 'C')\n                 and '{calc_dt}' in ('201903', '201904', '201905')\n                then 0.01\n                else 0\n            end\n            ))                as reward\n  from $acts                    as a\n   join $order_domain_stats      as s\n                                on s.service_id = a.service_id\n                              and s.service_order_id = a.service_order_id\n   join $domain_grades_t        as g\n                                on g.domain = s.domain\n                              and g.agency_id = a.agency_id\n  group by a.contract_id, a.contract_eid,\n          a.invoice_type, a.invoice_id,\n          a.discount_type\n);\n\n-- рельзультат с учетом проверки штрафов\ninsert into `{agency_rewards}` with truncate\nselect r.contract_id        as contract_id,\n       r.contract_eid       as contract_eid,\n       r.invoice_id         as invoice_id,\n       r.invoice_type       as invoice_type,\n       r.discount_type      as discount_type,\n       r.amt                as amt,\n       c.amt                as control_amt,\n       c.count_over1k_brand_id as count_client,\n       r.reward             as reward_src,\n       c.ratio              as bok,\n       NVL(cp.ratio, 0)     as bok_prev,\n       case\n        when c.ratio >= 0.7 and NVL(cp.ratio, 0) >= 0.7 then 0\n        when c.amt < 200000 then 0\n        when c.count_over1k_brand_id < 5 then 0\n        else r.reward\n       end                  as reward\n  from $rewards         as r\n  join $control         as c\n                        on c.contract_id = r.contract_id\n  left\n  join $control_prev    as cp\n                        on cp.contract_id = r.contract_id",
	"path": "{agency_rewards}",
	"cluster": "hahn",
	"scale": "prof",
	"comm_type": [
		"direct"
	],
	"from_dt": "2019-03-01T00:00:00.000Z",
	"till_dt": "2020-02-29T00:00:00.000Z",
	"freq": "m",
	"calendar": "f",
	"env": [
		{
			"name": "agency_stats",
			"value": "//home/balance/test/yb-ar/regress/agency-stats/{calc_dt}"
		},
		{
			"name": "domain_stats",
			"value": "//home/balance/test/yb-ar/regress/domain-stats/{calc_dt}"
		},
		{
			"name": "domain_grades",
			"value": "//home/balance/test/yb-ar/regress/domain-grades/{calc_dt}"
		},
		{
			"name": "domain_grades_report",
			"value": "//home/balance/test/yb-ar/regress/domain-grades-report/{calc_dt}"
		},
		{
			"name": "acts",
			"value": "//home/balance/test/yb-ar/regress/acts/{calc_dt}"
		},
		{
			"name": "acts_prev",
			"value": "//home/balance/test/yb-ar/regress/acts/{calc_prev_dt}"
		},
		{
			"name": "agency_rewards",
			"value": "//home/balance/test/yb-ar/regress/rewards/{calc_name}/{calc_dt}"
		},
		{
			"name": "acts_folder",
			"value": "//home/balance/test/yb-ar/regress/acts"
		},
		{
			"name": "act_div",
			"value": "//home/balance/test/yb-ar/regress/group_order_act_div/{calc_dt_long}"
		}
	]
}