# -*- coding: utf-8 -*-
__author__ = 'aikawa'

import pytest

from balance import balance_db as db
from balance import balance_steps as steps

yt_person_category = {'person_type': 'yt',
                      'allowed_region': [
                        '84',
                        '93',
                        '94',
                        '95',
                        '96',
                        '102',
                        '113',
                        '114',
                        '115',
                        '116',
                        '117',
                        '118',
                        '119',
                        '120',
                        '121',
                        '122',
                        '123',
                        '124',
                        '125',
                        '126',
                        '127',
                        '134',
                        '135',
                        '137',
                        '139',
                        '149',
                        '159',
                        '167',
                        '168',
                        '169',
                        '170',
                        '171',
                        '179',
                        '180',
                        '181',
                        '203',
                        '204',
                        '205',
                        '206',
                        '207',
                        '208',
                        '209',
                        '210',
                        '211',
                        '246',
                        '983',
                        '994',
                        '995',
                        '1056',
                        '10013',
                        '10015',
                        '10017',
                        '10020',
                        '10021',
                        '10022',
                        '10023',
                        '10024',
                        '10029',
                        '10030',
                        '10054',
                        '10057',
                        '10063',
                        '10064',
                        '10067',
                        '10068',
                        '10069',
                        '10070',
                        '10074',
                        '10077',
                        '10083',
                        '10088',
                        '10089',
                        '10090',
                        '10091',
                        '10093',
                        '10095',
                        '10097',
                        '10098',
                        '10099',
                        '10100',
                        '10101',
                        '10102',
                        '10104',
                        '10105',
                        '10108',
                        '10109',
                        '10532',
                        '10535',
                        '10536',
                        '10537',
                        '10538',
                        '10540',
                        '10542',
                        '20271',
                        '20274',
                        '20572',
                        '20574',
                        '20733',
                        '20736',
                        '20739',
                        '20741',
                        '20746',
                        '20747',
                        '20754',
                        '20762',
                        '20764',
                        '20768',
                        '20769',
                        '20785',
                        '20789',
                        '20790',
                        '20802',
                        '20818',
                        '20826',
                        '20854',
                        '20856',
                        '20860',
                        '20862',
                        '20869',
                        '20915',
                        '20917',
                        '20954',
                        '20957',
                        '20968',
                        '20972',
                        '20975',
                        '20989',
                        '20992',
                        '21004',
                        '21007',
                        '21010',
                        '21019',
                        '21042',
                        '21045',
                        '21131',
                        '21137',
                        '21143',
                        '21151',
                        '21156',
                        '21165',
                        '21171',
                        '21175',
                        '21182',
                        '21184',
                        '21187',
                        '21191',
                        '21196',
                        '21198',
                        '21199',
                        '21203',
                        '21208',
                        '21214',
                        '21217',
                        '21219',
                        '21223',
                        '21227',
                        '21230',
                        '21231',
                        '21235',
                        '21239',
                        '21241',
                        '21251',
                        '21261',
                        '21278',
                        '21289',
                        '21297',
                        '21299',
                        '21321',
                        '21325',
                        '21326',
                        '21330',
                        '21331',
                        '21339',
                        '21344',
                        '21349',
                        '21359',
                        '21371',
                        '21395',
                        '21426',
                        '21441',
                        '21451',
                        '21475',
                        '21477',
                        '21486',
                        '21534',
                        '21536',
                        '21538',
                        '21544',
                        '21546',
                        '21550',
                        '21551',
                        '21553',
                        '21556',
                        '21559',
                        '21562',
                        '21564',
                        '21567',
                        '21570',
                        '21572',
                        '21574',
                        '21576',
                        '21578',
                        '21580',
                        '21582',
                        '21584',
                        '21586',
                        '21589',
                        '21591',
                        '21595',
                        '21599',
                        '21601',
                        '21610',
                        '29385',
                        '29386',
                        '29387',
                        '37176',
                        '98539',
                        '98542',
                        '98552',
                        '101519',
                        '101521',
                        '108137'
                      ]}

person_categories_list_who_may_be_created = [
{'person_type':'yt', 'resident':1},
{'person_type':'ur', 'resident':0},
{'person_type':'ph', 'resident':0},
{'person_type':'ytph', 'resident':1},
{'person_type':'yt_kzp', 'resident':1},
{'person_type':'yt_kzu', 'resident':1},
{'person_type':'pu', 'resident':0},
{'person_type':'ua', 'resident':0},
{'person_type':'kzu', 'resident':0},
{'person_type':'kzp', 'resident':0},
{'person_type':'usu', 'resident':0},
{'person_type':'usp', 'resident':0},
{'person_type':'byu', 'resident':0},
{'person_type':'byp', 'resident':0},
{'person_type':'sw_ur', 'resident':0},
{'person_type':'sw_yt', 'resident':1},
{'person_type':'sw_ytph', 'resident':1},
{'person_type':'sw_ph', 'resident':0},
{'person_type':'by_ytph', 'resident':1},
{'person_type':'tru', 'resident':0},
{'person_type':'trp', 'resident':0},
{'person_type':'ur_autoru', 'resident':0},
{'person_type':'ph_autoru', 'resident':0}
]

person_categories_list_who_may_be_created_ids = [x['person_type'] for x in person_categories_list_who_may_be_created]


def create_second_person_on_client(first_person_category, second_person_category):
    client_id = steps.ClientSteps.create()
    first_person_id = steps.PersonSteps.create(client_id, first_person_category)
    try:
        second_person_id = steps.PersonSteps.create(client_id, second_person_category)
    except Exception, exc:
        if steps.CommonSteps.get_exception_code(exc) == 'PERSON_TYPE_MISMATCH':
            second_person_id = 'PERSON_TYPE_MISMATCH'
    return client_id, first_person_id, second_person_id


@pytest.mark.parametrize('first_person_category_params', person_categories_list_who_may_be_created
    , ids=person_categories_list_who_may_be_created_ids)
@pytest.mark.parametrize('second_person_category_params', person_categories_list_who_may_be_created
    , ids=person_categories_list_who_may_be_created_ids)
def test_create_person_on_client_with_region(first_person_category_params, second_person_category_params):
    first_person_category = first_person_category_params['person_type']
    second_person_category = second_person_category_params['person_type']
    client_id, first_person_id, second_person_id = create_second_person_on_client(first_person_category,second_person_category)
    if second_person_id == 'PERSON_TYPE_MISMATCH':
      # if set(first_person_category) & set(second_person_category_params
        assert second_person_category_params['resident']<>db.get_persons_by_client(client_id)[0]['resident']
        print second_person_category_params['resident']
        print db.get_persons_by_client(client_id)[0]['resident']
        assert 1==0
    else:
        assert db.get_person_by_id(first_person_id)[0]['resident'] == db.get_person_by_id(second_person_id)[0]['resident']
        print db.get_person_by_id(first_person_id)[0]['resident']
        print db.get_person_by_id(second_person_id)[0]['resident']
        # assert 1==0

if __name__ == "__main__":
    pytest.main("person_vs_client.py -v")