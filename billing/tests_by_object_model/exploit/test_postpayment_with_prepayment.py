# coding: utf-8
from apikeys.tests_by_object_model.apikeys_object_model import User, Link, Service
from apikeys.apikeys_steps_new import get_free_login_from_autotest_login_pull
import pytest

postpayment_with_prepayment_period_noban = [
    #Тарифы карт
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_100k_threeyearprepay_2018'
    },
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_1000_yearprepay_2017'
    },
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_1000_yearprepay_noban_plus_2018'
    },
    {
        'service_cc': 'staticmaps',
        'tariff_cc': 'staticmaps_1000_yearprepay_2017'
    },
    {
        'service_cc': 'city',
        'tariff_cc': 'city_1000_yearprepay_2017'
    },
    {
        'service_cc': 'apimapsplus',
        'tariff_cc': 'apimapsplus_1000_yearprepay_2017'
    },
    {
        'service_cc': 'routingmatrix',
        'tariff_cc': 'routingmatrix_1000_yearprepay_plus_2017'
    },



    # погодные тарифы
    {
        'service_cc': 'pogoda',
        'tariff_cc': 'pogoda_prem_month_subs_prepay_201812'
    },
    {
        'service_cc': 'pogoda',
        'tariff_cc': 'pogoda_base_ext_year_subs_prepay_201812'
    }
]


@pytest.mark.parametrize(
    'test_data', postpayment_with_prepayment_period_noban
    , ids=lambda x: x['tariff_cc'])
def test_postpayment_with_prepayment_period_noban(db_connection, test_data):
    user = User(get_free_login_from_autotest_login_pull(db_connection)[0])
    user.clean_up(db_connection)
    user.create_user_project()
    service = Service(cc=test_data['service_cc'])
    user.get_balance_client()
    link = Link(user, service, db_connection)
    link.create_and_change_person()
    link.change_and_activate_tariff(test_data['tariff_cc'])
    link.without_key_stat_exploit()
    return 'OK'


postpayment_with_prepayment_period_ban = [
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_1000_yearprepay_ban_minus_2018'
    },
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_10k_yearprepay_ban_plus_2018'
    },
    {
        'service_cc': 'routingmatrix',
        'tariff_cc': 'routingmatrix_50000_yearprepay_ban_minus_2018'
    },
    {
        'service_cc': 'routingmatrix',
        'tariff_cc': 'routingmatrix_50000_yearprepay_ban_plus_2020'
    }

]


@pytest.mark.parametrize(
    'test_data', postpayment_with_prepayment_period_ban
    , ids=lambda x: x['tariff_cc'])
def test_postpayment_with_prepayment_period_ban(db_connection, test_data):
    user = User(get_free_login_from_autotest_login_pull(db_connection)[0])
    user.clean_up(db_connection)
    user.create_user_project()
    service = Service(cc=test_data['service_cc'])
    user.get_balance_client()
    link = Link(user, service, db_connection)
    link.create_and_change_person()
    link.change_and_activate_tariff(test_data['tariff_cc'])
