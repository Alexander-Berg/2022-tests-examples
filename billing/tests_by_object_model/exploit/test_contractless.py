# coding: utf-8
from apikeys.tests_by_object_model.apikeys_object_model import User, Link, Service
from apikeys.apikeys_steps import get_free_login_from_autotest_login_pull
import pytest

prepayment = [
    {
        'service_cc': 'ordersdistribution',
        'tariff_cc': 'ordersdistribution_50_vrp_and_monitoring_year_2019'
    }
    ,
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_600_monthprepay_contractless_100rpp_102019'
    },
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_50000_yearprepay_contractless_032019'
    },
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_25000_yearprepay_contractless_032019'
    },
    {
        'service_cc': 'routingmatrix',
        'tariff_cc': 'routingmatrix_1000_yearprepay_contractless_072019'
    },
    {
        'service_cc': 'mapkit',
        'tariff_cc': 'mapkit_1000_yearprepay_contractless_072019'
    },
    {
        'service_cc': 'city',
        'tariff_cc': 'city_50000_yearprepay_contractless'
    },
    {
        'service_cc': 'staticmaps',
        'tariff_cc': 'staticmaps_10000_yearprepay_contractless'
    },
    {
        'service_cc': 'staticmaps',
        'tariff_cc': 'staticmaps_1000_yearprepay_contractless'
    },
]


@pytest.mark.parametrize(
    'test_data', prepayment
    , ids=lambda x: x['tariff_cc'])
def test_prepayment(db_connection, test_data):
    user = User(get_free_login_from_autotest_login_pull(db_connection)[0])
    user.clean_up(db_connection)
    user.create_user_project()
    user.get_balance_client()
    service = Service(cc=test_data['service_cc'])
    link = Link(user, service, db_connection)
    link.create_and_change_person()
    link.change_and_activate_tariff(test_data['tariff_cc'])
    link.without_key_stat_exploit()
    return 'OK'
