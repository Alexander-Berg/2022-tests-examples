# coding: utf-8
from apikeys.tests_by_object_model.apikeys_object_model import User, Link, Service
from apikeys.apikeys_steps import get_free_login_from_autotest_login_pull
import pytest

postpayment_test_data = [
    {
        'service_cc': 'pogoda',
        'tariff_cc': 'pogoda_startup_month_subs_prepay_201812'
    },
    {
        'service_cc': 'speechkitcloud',
        'tariff_cc': 'speechkitcloud_client_201705'
    },
    {
        'service_cc': 'apimaps',
        'tariff_cc': 'apimaps_100k_yearpostpay_noban_2018'
    },
    {
        'service_cc': 'routingmatrix',
        'tariff_cc': 'routingmatrix_300000_yearpostpay_noban_2018'
    },
    {
        'service_cc': 'mapkit',
        'tariff_cc': 'mapkit_100000_yearpostpay_noban_2018'
    },
]


@pytest.mark.parametrize(
    'test_data', postpayment_test_data
    , ids=lambda x: x['tariff_cc'])
def test_postpayment(db_connection, test_data):
    user = User(get_free_login_from_autotest_login_pull(db_connection)[0])
    user.clean_up(db_connection)
    service = Service(cc=test_data['service_cc'])
    user.get_balance_client()
    user.create_user_project()
    link = Link(user, service, db_connection)
    link.create_and_change_person()
    link.change_and_activate_tariff(test_data['tariff_cc'])
    link.without_key_stat_exploit()
    return 'OK'

def test_postpayment_with_faxed_contract(db_connection):
    user = User(get_free_login_from_autotest_login_pull(db_connection)[0])
    user.clean_up(db_connection)
    service = Service(cc='pogoda')
    user.get_balance_client()
    user.create_user_project()
    link = Link(user, service, db_connection)
    link.create_and_change_person()
    link.change_and_activate_tariff('pogoda_prem_month_subs_postpay_201902',sign_flag='faxed')
    link.without_key_stat_exploit()
    return 'OK'
