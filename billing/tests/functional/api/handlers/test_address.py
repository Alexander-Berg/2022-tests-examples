import re

import pytest
from aioresponses import CallbackResult

from sendr_auth import CsrfChecker
from sendr_utils import utcnow, without_none

from hamcrest import assert_that, contains, equal_to, has_entries

from billing.yandex_pay.yandex_pay.core.entities.user import User

FAKE_USER_TICKET = 'fake_tvm_user_ticket'
ADDRESSES = [
    {
        'id': 'uid/140093773/pay/1085955',
        'subtype': 'address',
        'owner_service': 'pay',
        'type': 'HOME',
        'building': '10',
        'comment': 'test',
        'country': 'Россия',
        'entrance': '1',
        'floor': '2',
        'intercom': '3',
        'city': 'Тверь',
        'locality': 'Тверская область, городской округ Тверь',
        'location': {
            'latitude': 35.9057158052,
            'longitude': 56.8742819747,
        },
        'regionId': 14,
        'region': 'Тверская область',
        'room': '4',
        'street': 'улица Михаила Румянцева',
        'zip': '170026',
        'address_line': 'Россия, Тверская область, Тверь, улица Михаила Румянцева, 10',
    },
    {
        'id': 'uid/140093773/pay/1085956',
        'subtype': 'address',
        'owner_service': 'market',
        'type': 'address',
        'building': '24',
        'comment': None,
        'country': 'Армения',
        'district': None,
        'entrance': None,
        'floor': None,
        'intercom': None,
        'city': 'Ереван',
        'locality': 'Ереван',
        'location': {
            'latitude': 44.5067343077,
            'longitude': 40.1824654384
        },
        'regionId': 10262,
        'region': None,
        'room': None,
        'street': 'улица Амиряна',
        'zip': '',
        'address_line': 'Армения, Ереван, улица Амиряна, 24',
    },
]


def remove_unneeded_keys(address):
    result = dict(without_none(address))
    for key in ('subtype', 'city', 'regionId'):
        del result[key]
    return result


@pytest.fixture
def user():
    return User(113000)


@pytest.fixture
def params():
    return {
        'country': 'Russia',
        'locality': 'Kazan',
        'street': 'Svobody sq.',
        'building': '2',
    }


@pytest.fixture
def api_url(yandex_pay_settings):
    return f'{yandex_pay_settings.PASSPORT_ADDRESSES_URL}/address'


@pytest.fixture
def appartment_precision():
    yield 'Россия, Москва, ул. Льва Толстого, 3, кв 15', b'\n\x00\x12\xd6\x0e\n\x87\x05\xf2\x01\x83\x05\nw\nG\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd1\x83\xd0\xbb. \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 3, \xd0\xba\xd0\xb2 15\x10\x01\x18\x00*(\n\x12\t\'\x9f\x1e\xdb2\x86B@\x11\xa1\x8a\xb8\x8c\xdd\xb7K@\x12\x12\tW"P\xfd\x83\x16C@\x11w\xb6O\xe0\x00\x06L@\x18\x01*(\n\x12\t\x1b.rOW\xcbB@\x11\x99eO\x02\x9b\xddK@\x12\x12\t\xf2\xb0Pk\x9a\xcbB@\x11\xa3\x02\'\xdb\xc0\xddK@:oRm\nO\nK\xd1\x80\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\xbc\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xbb\xd1\x8c\xd0\xb2\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 3 \xd0\xba\xd0\xb2 15\x18\x01\x10\x01\xa2\x06\x17\t\x00\x00\x00\x00\x00\x00\xf0?\x10\x01\x1a\n21.08.26-0\xa2\x06\xe9\x02\x08\x01\x12\xe8\x01ZAAAAAgAEAAaKAoSCQAAAAAAkHZAEQAAAAAAoGZAEhIJAAAAAAAA8L8RAAAAAAAA8L8iAQAoADgAQP7//////////wFIAWoCcnVwAJ0BzcxMPaABAKgBAOoBAPIBAPgBAIICR9Cg0L7RgdGB0LjRjywg0JzQvtGB0LrQstCwLCDRg9C7LiDQm9GM0LLQsCDQotC+0LvRgdGC0L7Qs9C+LCAzLCDQutCyIDE1igIA\x1a<1630076871836106-757244364-vla1-5737-vla-addrs-nmeta-s1-8031"<1630076871836106-757244364-vla1-5737-vla-addrs-nmeta-s1-80312\xc9\t\n\xb7\x03Z\xb4\x03\x08\x00\x12\xd6\x02\nk\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 3, \xd0\xbf\xd0\xbe\xd0\xb4\xd1\x8a\xd0\xb5\xd0\xb7\xd0\xb4 1, \xd1\x8d\xd1\x82\xd0\xb0\xd0\xb6 2, \xd0\xba\xd0\xb2. 15\x12\x06119021\x1a\x02RU"\x10\n\x0c\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f\x10\x00"<\n8\xd0\xa6\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd1\x84\xd0\xb5\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3\x10\x02"\x10\n\x0c\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0\x10\x02"\x10\n\x0c\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0\x10\x04"(\n$\xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe\x10\x06"\x05\n\x013\x10\x07"\x14\n\x10\xd0\xbf\xd0\xbe\xd0\xb4\xd1\x8a\xd0\xb5\xd0\xb7\xd0\xb4 1\x10\x10"\x10\n\n\xd1\x8d\xd1\x82\xd0\xb0\xd0\xb6 2\x10\x11\x10 "\x0e\n\x08\xd0\xba\xd0\xb2. 15\x10\x12\x10 "\n1831955181\xa2\x06J\x08\xd5\x01\x18\x00"\x12\to\xdev\xdbx\xcbB@\x11\x8d \xbd\xee\xad\xddK@B\x02\x08\x00B\x02\x08\x04B\x02\x08\x06B\x02\x08\x07J\x1fulitsa_lva_tolstogo_3_podyezd_1\n\xd1\x02\xca\x07\xcd\x02\n\xca\x02\n\xc7\x02ymapsbm1://geo?ll=37.590%2C55.732&spn=0.001%2C0.001&text=%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B0%2C%20%D1%83%D0%BB%D0%B8%D1%86%D0%B0%20%D0%9B%D1%8C%D0%B2%D0%B0%20%D0%A2%D0%BE%D0%BB%D1%81%D1%82%D0%BE%D0%B3%D0%BE%2C%203%2C%20%D0%BF%D0%BE%D0%B4%D1%8A%D0%B5%D0%B7%D0%B4%201%20%7B1831955181%7D\n/b-\n+\n\x011\x12\x12\t\\1)\xd0x\xcbB@\x11\xb3:\xdb\xdf\xad\xddK@\x1a\x12\t\x00\x00\x00\x00\x00@l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n\xd3\x01\xfa\x01\xcf\x01\n\xcc\x01dHlwZT1nZW9jb2RlcjthZGRyZXNzPdCg0L7RgdGB0LjRjywg0JzQvtGB0LrQstCwLCDRg9C70LjRhtCwINCb0YzQstCwINCi0L7Qu9GB0YLQvtCz0L4sIDMsINC/0L7QtNGK0LXQt9C0IDEsINGN0YLQsNC2IDIsINC60LIuIDE1LzM3LjU4OTYyNiw1NS43MzE4NzEvMQ==\n\x05\x82\x02\x02\n\x00\x12O\xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 3, \xd0\xbf\xd0\xbe\xd0\xb4\xd1\x8a\xd0\xb5\xd0\xb7\xd0\xb4 1, \xd1\x8d\xd1\x82\xd0\xb0\xd0\xb6 2, \xd0\xba\xd0\xb2. 15\x1a\x1a\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f"(\n\x12\t\x1b.rOW\xcbB@\x11\x99eO\x02\x9b\xddK@\x12\x12\t\xf2\xb0Pk\x9a\xcbB@\x11\xa3\x02\'\xdb\xc0\xddK@*\x14\n\x12\t\x87oa\xddx\xcbB@\x11\x06\xf2\xec\xf2\xad\xddK@'  # noqa


@pytest.fixture
def house_precision():
    yield 'Россия, Москва, ул. Льва Толстого, 16', b'\n\x00\x12\x81\x0f\n\xf2\x04\xf2\x01\xee\x04\no\n?\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd1\x83\xd0\xbb. \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 16\x10\x01\x18\x00*(\n\x12\t\'\x9f\x1e\xdb2\x86B@\x11\xa1\x8a\xb8\x8c\xdd\xb7K@\x12\x12\tW"P\xfd\x83\x16C@\x11w\xb6O\xe0\x00\x06L@\x18\x01*(\n\x12\t \x7fiQ\x9f\xcaB@\x11\xab\xed&\xf8\xa6\xddK@\x12\x12\t\xf5\xbaE`\xac\xcbB@\x11\x98//\xc0>\xdeK@:hRf\nH\nD\xd1\x80\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\xbc\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xbb\xd1\x8c\xd0\xb2\xd0\xb0 \xd1\x82\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 16\x18\x01\x10\x01\xa2\x06\x17\t\x00\x00\x00\x00\x00\x00\xf0?\x10\x01\x1a\n21.08.26-0\xa2\x06\xe3\x02\x08\x01\x12\xe0\x01ZAAAAAgAEAAaKAoSCQAAAAAAkHZAEQAAAAAAoGZAEhIJAAAAAAAA8L8RAAAAAAAA8L8iAQAoADgAQP7//////////wFIAWoCcnVwAJ0BzcxMPaABAKgBAOoBAPIBAPgBAIICP9Cg0L7RgdGB0LjRjywg0JzQvtGB0LrQstCwLCDRg9C7LiDQm9GM0LLQsCDQotC+0LvRgdGC0L7Qs9C+LCAxNooCAA==\x1a=1630076042303221-4291276866-sas1-5065-sas-addrs-nmeta-s1-8031"=1630076042303221-4291276866-sas1-5065-sas-addrs-nmeta-s1-80312\x89\n\n\xce\x02Z\xcb\x02\x08\x00\x12\xf8\x01\nD\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 16\x12\x06119021\x1a\x02RU"\x10\n\x0c\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f\x10\x00"<\n8\xd0\xa6\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd1\x84\xd0\xb5\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3\x10\x02"\x10\n\x0c\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0\x10\x02"\x10\n\x0c\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0\x10\x04"(\n$\xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe\x10\x06"\x06\n\x0216\x10\x07"\x0856697621\xa2\x06A\x08\xd5\x01\x18\x00"\x12\t\x04\xd9\x07\xd9%\xcbB@\x11\xdf\x1b\x8d\xdc\xf2\xddK@B\x02\x08\x00B\x02\x08\x04B\x02\x08\x06B\x02\x08\x07J\x16ulitsa_lva_tolstogo_16\n\x8b\x02\xca\x07\x87\x02\n\x84\x02\n\x81\x02ymapsbm1://geo?ll=37.587%2C55.734&spn=0.001%2C0.001&text=%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D1%8F%2C%20%D0%9C%D0%BE%D1%81%D0%BA%D0%B2%D0%B0%2C%20%D1%83%D0%BB%D0%B8%D1%86%D0%B0%20%D0%9B%D1%8C%D0%B2%D0%B0%20%D0%A2%D0%BE%D0%BB%D1%81%D1%82%D0%BE%D0%B3%D0%BE%2C%2016\n\xf8\x02b\xf5\x02\n+\n\x011\x12\x12\t\xb50T\xb1Q\xcbB@\x11e\x7f\x9a\x07\xf0\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\xa0a@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n+\n\x012\x12\x12\t\x06E\xe3\x8cE\xcbB@\x11V~\x03G\xfa\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\xe0l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n+\n\x013\x12\x12\t2?g\x1b1\xcbB@\x11\x06j\xbf\xbb\xff\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\x80a@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n+\n\x014\x12\x12\t\x87\xfb\xe0\xc7-\xcbB@\x11\xaclR\x0b\xf3\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\x00I@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n+\n\x015\x12\x12\t\xf8\xa9Z]:\xcbB@\x11\xb3OY\xb7\xec\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\x00t@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n>\n\x14\xd0\x9a\xd1\x83\xd1\x80\xd1\x8c\xd0\xb5\xd1\x80\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\x12\x12\t\x9a\x88f\xee1\xcbB@\x11\x8c~>S\xe5\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\xc0l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\xea\x8fR\x02I\xcbB@\x11F\x83%\x0b\xec\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\x80a@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\x11\x85\xb4|\x1c\xcbB@\x11L\xc5\x8b\xea\xf3\xddK@\x1a\x12\t\x00\x00\x00\x00\x00\xc0l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n\x9f\x01\xfa\x01\x9b\x01\n\x98\x01dHlwZT1nZW9jb2RlcjthZGRyZXNzPdCg0L7RgdGB0LjRjywg0JzQvtGB0LrQstCwLCDRg9C70LjRhtCwINCb0YzQstCwINCi0L7Qu9GB0YLQvtCz0L4sIDE2LzM3LjU4NzA5Myw1NS43MzM5NzQvMQ==\n\x05\x82\x02\x02\n\x00\x12(\xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd0\xb0 \xd0\x9b\xd1\x8c\xd0\xb2\xd0\xb0 \xd0\xa2\xd0\xbe\xd0\xbb\xd1\x81\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe, 16\x1a\x1a\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f"(\n\x12\t \x7fiQ\x9f\xcaB@\x11\xab\xed&\xf8\xa6\xddK@\x12\x12\t\xf5\xbaE`\xac\xcbB@\x11\x98//\xc0>\xdeK@*\x14\n\x12\t\xf3Z\t\xdd%\xcbB@\x11\xa2\x0e+\xdc\xf2\xddK@'  # noqa:


@pytest.fixture
def long_district_precision():
    yield 'Россия, Москва, Западный административный округ, район Раменки, микрорайон Ленинские Горы, 1Б', b'\n\xb2\x05\n2\n\x02ok\x12,\n*\n\x1a\xd0\x9e\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xba\xd0\xbb\xd0\xb0\xd1\x81\xd1\x81\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb8\x12\x0chttp://ok.ru\n2\n\tvkontakte\x12%\n#\n\x12\xd0\x92\xd0\x9a\xd0\xbe\xd0\xbd\xd1\x82\xd0\xb0\xd0\xba\xd1\x82\xd0\xb5\x12\rhttp://vk.com\n\xb8\x01\n\rbudget_gov_ru\x12\xa6\x01\n\xa3\x01\n\x8a\x01\xd0\x95\xd0\xb4\xd0\xb8\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbf\xd0\xbe\xd1\x80\xd1\x82\xd0\xb0\xd0\xbb \xd0\xb1\xd1\x8e\xd0\xb4\xd0\xb6\xd0\xb5\xd1\x82\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb8\xd1\x81\xd1\x82\xd0\xb5\xd0\xbc\xd1\x8b \xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd0\xb9\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd0\xa4\xd0\xb5\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb0\xd1\x86\xd0\xb8\xd0\xb8\xc2\xab\xd0\xad\xd0\xbb\xd0\xb5\xd0\xba\xd1\x82\xd1\x80\xd0\xbe\xd0\xbd\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb1\xd1\x8e\xd0\xb4\xd0\xb6\xd0\xb5\xd1\x82\xc2\xbb\x12\x14http://budget.gov.ru\nE\n\x08sberbank\x129\n7\n\x1d\xd0\xa1\xd0\xb1\xd0\xb5\xd1\x80\xd0\xb1\xd0\xb0\xd0\xbd\xd0\xba \xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd0\xb8\x12\x16http://www.sberbank.ru\n=\n\x12tycoon_6089379_225\x12\'\n%\n\x0f\xd0\x91\xd0\xb0\xd0\xbd\xd0\xba \xd0\x92\xd0\xa2\xd0\x91\x12\x12https://www.vtb.ru\n1\n\x06yandex\x12\'\n%\n\x0c\xd0\xaf\xd0\xbd\xd0\xb4\xd0\xb5\xd0\xba\xd1\x81\x12\x15https://www.yandex.ru\n&\n\x08whatsapp\x12\x1a\n\x18\n\x08whatsapp\x12\x0chttp://wa.me\n+\n\x06kudago\x12!\n\x1f\n\nkudago.com\x12\x11http://kudago.com\n*\n\x07youtube\x12\x1f\n\x1d\n\x07YouTube\x12\x12http://youtube.com\n%\n\x08telegram\x12\x19\n\x17\n\x08telegram\x12\x0bhttp://t.me\n,\n\x0baqua_cbr_ru\x12\x1d\n\x1b\n\x06cbr.ru\x12\x11http://www.cbr.ru\x12\xa1\x16\n\xd3\x07\xf2\x01\xcf\x07\n\xdd\x01\n\xac\x01"\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb0\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xb2\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3, \xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\xa0\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb8, \xd0\xbc\xd0\xb8\xd0\xba\xd1\x80\xd0\xbe\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\x9b\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb5 \xd0\x93\xd0\xbe\xd1\x80\xd1\x8b, 1\xd0\x91"\x10\x01\x18\x00*(\n\x12\t\'\x9f\x1e\xdb2\x86B@\x11\xa1\x8a\xb8\x8c\xdd\xb7K@\x12\x12\tW"P\xfd\x83\x16C@\x11w\xb6O\xe0\x00\x06L@\x18\x01*(\n\x12\tk,am\x8c\xc3B@\x11(\xf2$\xe9\x9a\xd9K@\x12\x12\tp\xec\xd9s\x99\xc4B@\x11W#\xbb\xd22\xdaK@:\xd3\x01R\xd0\x01\n\xb1\x01\n\xac\x01"\xd1\x80\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\xbc\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb0\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xb2\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3, \xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd1\x80\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb8, \xd0\xbc\xd0\xb8\xd0\xba\xd1\x80\xd0\xbe\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb5 \xd0\xb3\xd0\xbe\xd1\x80\xd1\x8b, 1\xd0\xb1"\x18\x01\x10\x01\xa2\x06\x17\t\x00\x00\x00\x00\x00\x00\xf0?\x10\x01\x1a\n22.07.11-0\xa2\x06\xe9\x03\x08\x01\x12\x80\x03ZAAAAAgAEAAaKAoSCQAAAAAAkHZAEQAAAAAAoGZAEhIJAAAAAAAA8L8RAAAAAAAA8L8iAgABKAA4AED+//////////8BSAFqAnJ1nQHNzEw9oAEAqAEA6gEA8gEA+AEAggKsASLQoNC+0YHRgdC40Y8sINCc0L7RgdC60LLQsCwg0JfQsNC/0LDQtNC90YvQuSDQsNC00LzQuNC90LjRgdGC0YDQsNGC0LjQstC90YvQuSDQvtC60YDRg9CzLCDRgNCw0LnQvtC9INCg0LDQvNC10L3QutC4LCDQvNC40LrRgNC+0YDQsNC50L7QvSDQm9C10L3QuNC90YHQutC40LUg0JPQvtGA0YssIDHQkSKKAgCSAgYxMTcwMDSaAgA=\x1a01657586768473268-3686396804-addrs-upper-stable-2"01657586768473268-3686396804-addrs-upper-stable-22\xc8\x0e\n\xb4\x04Z\xb1\x04\x08\x00\x12\xcd\x03\n\xaa\x01\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb0\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xb2\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3, \xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\xa0\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb8, \xd0\xbc\xd0\xb8\xd0\xba\xd1\x80\xd0\xbe\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\x9b\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb5 \xd0\x93\xd0\xbe\xd1\x80\xd1\x8b, 1\xd0\x91\x12\x06119234\x1a\x02RU"\x10\n\x0c\xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f\x10\x00"<\n8\xd0\xa6\xd0\xb5\xd0\xbd\xd1\x82\xd1\x80\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd1\x84\xd0\xb5\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3\x10\x02"\x10\n\x0c\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0\x10\x02"\x10\n\x0c\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0\x10\x04"@\n<\xd0\x97\xd0\xb0\xd0\xbf\xd0\xb0\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xb2\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3\x10\x05"\x1d\n\x19\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\xa0\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb8\x10\x05"4\n0\xd0\xbc\xd0\xb8\xd0\xba\xd1\x80\xd0\xbe\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\x9b\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb5 \xd0\x93\xd0\xbe\xd1\x80\xd1\x8b\x10\x05"\x07\n\x031\xd0\x91\x10\x07"\t770793975\xa2\x06Q\x08\x8c\x92\x07\x18\x00"\x12\t\xd6k\x02\xf2\x12\xc4B@\x11>S\x8c\xdf\xe6\xd9K@B\x02\x08\x00B\x02\x08\x04B\x02\x08\x05B\x02\x08\x05B\x02\x08\x05B\x02\x08\x07J\x1dmikrorayon_leninskiye_gory_1b\n\xa6\x02\xca\x07\xa2\x02\n\x9f\x02\n\x9c\x02ymapsbm1://geo?data=Cgk3NzA3OTM5NzUSqgHQoNC+0YHRgdC40Y8sINCc0L7RgdC60LLQsCwg0JfQsNC/0LDQtNC90YvQuSDQsNC00LzQuNC90LjRgdGC0YDQsNGC0LjQstC90YvQuSDQvtC60YDRg9CzLCDRgNCw0LnQvtC9INCg0LDQvNC10L3QutC4LCDQvNC40LrRgNC+0YDQsNC50L7QvSDQm9C10L3QuNC90YHQutC40LUg0JPQvtGA0YssIDHQkSIKDZcgFkIVN89eQg==\n\xbf\x05b\xbc\x05\n,\n\x02\xd0\x91\x12\x12\toFL\xb0\x1c\xc4B@\x11\xfcl\xfa\xac\xdf\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00\xe0`@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n,\n\x02\xd0\x92\x12\x12\t\xc3\x18\x8b?\xc4\xc3B@\x11\xffQ\xde<\x13\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00\xb0s@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n,\n\x02\xd0\x93\x12\x12\t\xbe\xe1\\\x10\x14\xc4B@\x11d\xcb\x0c\xcb\xd2\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00\x80F@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n,\n\x02\xd0\x94\x12\x12\tMipB\xae\xc3B@\x11\x8c\x85\xe6\x8c\x0e\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00\x80F@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n,\n\x02\xd0\x95\x12\x12\t\xdf\xbfX@3\xc4B@\x11A\xe3>a\xe4\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00 l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n,\n\x02\xd0\x96\x12\x12\t!:\x7f\xae\xcc\xc3B@\x11\x9bcV\x94\x1f\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00 l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n,\n\x02\xd0\x9c\x12\x12\t\x1e\xd2$\xa7\xbb\xc3B@\x11\x8f<4T8\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00\xb0s@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\tT\x8c\x1a\xb7`\xc4B@\x11\x7f6B\xbf\xda\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00\xe0`@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\xfc\x02\rg&\xc4B@\x11\x16+\xc2\x86\xb9\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00\xe0`@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\xb1\xfc\xc1\xba\x18\xc4B@\x11z\x95\xb0\x99\xc6\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00\x80F@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\tCio\x9bH\xc4B@\x11sS\x0c\xd4\xe1\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00 l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\tW\x84\xd8\xde\xc9\xc3B@\x11\x1f\x05\x91\xa5+\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00 l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\xccM9k\x99\xc3B@\x11+\xe9%\xbd\x0f\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00\x80F@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\x88\x83~\x81\xcd\xc3B@\x11\xf1\r\xc8n\xe6\xd9K@\x1a\x12\t\x00\x00\x00\x00\x00 l@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t[\xd4,\xdb\x82\xc3B@\x11_\x9f\x1b\x02\x18\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00\xb0s@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n(\x12\x12\t\\u\xb5\x13\x12\xc4B@\x11C\x1ch\xc8\x0b\xdaK@\x1a\x12\t\x00\x00\x00\x00\x00\xb0s@\x11\x00\x00\x00\x00\x00\x00\x00\x00\n1\xfa\x01.\n,dHlwZT1nZW9jb2RlcjthZGRyZXNzPWdlb2NvZGVyMQ==\n\x05\x82\x02\x02\n\x00\x125\xd0\xbc\xd0\xb8\xd0\xba\xd1\x80\xd0\xbe\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\x9b\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xb8\xd0\xb5 \xd0\x93\xd0\xbe\xd1\x80\xd1\x8b, 1\xd0\x91\x1as\xd1\x80\xd0\xb0\xd0\xb9\xd0\xbe\xd0\xbd \xd0\xa0\xd0\xb0\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xba\xd0\xb8, \xd0\x97\xd0\xb0\xd0\xbf\xd0\xb0\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xb8\xd0\xb2\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd0\xba\xd1\x80\xd1\x83\xd0\xb3, \xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0, \xd0\xa0\xd0\xbe\xd1\x81\xd1\x81\xd0\xb8\xd1\x8f"(\n\x12\tk,am\x8c\xc3B@\x11(\xf2$\xe9\x9a\xd9K@\x12\x12\tp\xec\xd9s\x99\xc4B@\x11W#\xbb\xd22\xdaK@*\x14\n\x12\tm\x8c\x9d\xf0\x12\xc4B@\x11\xbf\n\xf0\xdd\xe6\xd9K@'  # noqa:


@pytest.fixture
def empty_query():
    yield '', b'\n\x00\x12\xcf\x02\n\xcc\x02\xf2\x01\xc8\x02\n5\n\x05empty\x10\x01\x18\x00*(\n\x12\t\'\x9f\x1e\xdb2\x86B@\x11\xa1\x8a\xb8\x8c\xdd\xb7K@\x12\x12\tW"P\xfd\x83\x16C@\x11w\xb6O\xe0\x00\x06L@\x18\x00\xa2\x06\x8b\x02\x08\x01\x12\x88\x01ZAAAAAgAEAAaKAoSCQAAAAAAkHZAEQAAAAAAoGZAEhIJAAAAAAAA8L8RAAAAAAAA8L8iAQAoADgAQP7//////////wFIAWoAcACdAc3MTD2gAQCoAQDqAQDyAQD4AQCCAgCKAgA=\x1a=1630310491515872-1028580973-vla1-0866-vla-addrs-nmeta-s1-8031"=1630310491515872-1028580973-vla1-0866-vla-addrs-nmeta-s1-8031'  # noqa:


@pytest.fixture
def strange_request():
    yield 'xxx', b'\n\x00\x12\xf8\t\n\xa7\x03\xf2\x01\xa3\x03\n3\n\x03xxx\x10\x01\x18\x00*(\n\x12\t\'\x9f\x1e\xdb2\x86B@\x11\xa1\x8a\xb8\x8c\xdd\xb7K@\x12\x12\tW"P\xfd\x83\x16C@\x11w\xb6O\xe0\x00\x06L@\x18\x01*(\n\x12\t(\r5\nIz7@\x114\xd7i\xa4\xa5\x90I@\x12\x12\t[\'.\xc7+|7@\x11\n\x832\x8d&\x91I@:\'R%\n\x07\n\x03xxx\x18\x01\x10\r\xa2\x06\x17\t\x00\x00\x00\x00\x00\x00\xf0?\x10\x01\x1a\n21.08.26-0\xa2\x06\x95\x02\x08\x01\x12\x90\x01ZAAAAAgAEAAaKAoSCQAAAAAAkHZAEQAAAAAAoGZAEhIJAAAAAAAA8L8RAAAAAAAA8L8iAQAoADgAQP7//////////wFIAWoCcnVwAJ0BzcxMPaABAKgBAOoBAPIBAPgBAIICA3h4eIoCAA==\x1a>1630076948119442-2120175606-man2-0321-man-addrs-nmeta-s1-15240">1630076948119442-2120175606-man2-0321-man-addrs-nmeta-s1-152402\xcb\x06\n\xc4\x02Z\xc1\x02\x12\x9f\x02\na\xd0\x9f\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb0, \xd0\x9b\xd1\x8e\xd0\xb1\xd0\xbb\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb2\xd0\xbe\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe, \xd0\xa5\xd0\xb5\xd0\xbb\xd0\xbc, \xd0\x9f\xd0\xb0\xd1\x80\xd0\xba-\xd0\x9a\xd0\xa1\xd0\x9a\xd0\xa1\xd0\x9a\xd0\xa1-\xd0\xbb\xd0\xb5\xd1\x86\xd1\x8f\x1a\x02PL"\x10\n\x0c\xd0\x9f\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb0\x10\x00"-\n)\xd0\x9b\xd1\x8e\xd0\xb1\xd0\xbb\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb2\xd0\xbe\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe\x10\x02"\x17\n\x13\xd0\xbf\xd0\xbe\xd0\xb2\xd1\x8f\xd1\x82 \xd0\xa5\xd0\xb5\xd0\xbb\xd0\xbc\x10\x03"*\n&\xd0\xb3\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb4\xd1\x81\xd0\xba\xd0\xb0\xd1\x8f \xd0\xb3\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb0 \xd0\xa5\xd0\xb5\xd0\xbb\xd0\xbc\x10\x03"\x0c\n\x08\xd0\xa5\xd0\xb5\xd0\xbb\xd0\xbc\x10\x05""\n\x1e\xd0\x9f\xd0\xb0\xd1\x80\xd0\xba-\xd0\x9a\xd0\xa1\xd0\x9a\xd0\xa1\xd0\x9a\xd0\xa1-\xd0\xbb\xd0\xb5\xd1\x86\xd1\x8f\x10\x0c\xa2\x06\x1c\x08x\x18\x00"\x12\t&\x7f\xf0\x18\x88{7@\x11\xb6o\xbb\x82\xe3\x90I@B\x02\x08\x0c\n\x91\x01\xca\x07\x8d\x01\n\x8a\x01\n\x87\x01ymapsbm1://geo?ll=23.483%2C51.132&spn=0.007%2C0.004&text=Polska%2C%20Wojew%C3%B3dztwo%20lubelskie%2C%20Che%C5%82m%2C%20Park%20XXX-lecia\n\xc3\x01\xfa\x01\xbf\x01\n\xbc\x01dHlwZT1nZW9jb2RlcjthZGRyZXNzPdCf0L7Qu9GM0YjQsCwg0JvRjtCx0LvQuNC90YHQutC+0LUg0LLQvtC10LLQvtC00YHRgtCy0L4sINCl0LXQu9C8LCDQn9Cw0YDQui3QmtCh0JrQodCa0KEt0LvQtdGG0Y8vMjMuNDgyNTQ1LDUxLjEzMTk0My8x\n\x05\x82\x02\x02\n\x00\x12\x1e\xd0\x9f\xd0\xb0\xd1\x80\xd0\xba-\xd0\x9a\xd0\xa1\xd0\x9a\xd0\xa1\xd0\x9a\xd0\xa1-\xd0\xbb\xd0\xb5\xd1\x86\xd1\x8f\x1aA\xd0\xa5\xd0\xb5\xd0\xbb\xd0\xbc, \xd0\x9b\xd1\x8e\xd0\xb1\xd0\xbb\xd0\xb8\xd0\xbd\xd1\x81\xd0\xba\xd0\xbe\xd0\xb5 \xd0\xb2\xd0\xbe\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe, \xd0\x9f\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xb0"(\n\x12\t(\r5\nIz7@\x114\xd7i\xa4\xa5\x90I@\x12\x12\t[\'.\xc7+|7@\x11\n\x832\x8d&\x91I@*\x14\n\x12\t+\xd9\xb1\x11\x88{7@\x11\xd3\xf7\x1a\x82\xe3\x90I@'  # noqa:


@pytest.fixture
def geocoder_mock(yandex_pay_settings, aioresponses_mocker):
    def mock(response):
        aioresponses_mocker.post(
            re.compile(f'^{yandex_pay_settings.GEOCODER_API_URL}.*$'),
            status=200,
            body=response
        )
    return mock


@pytest.fixture
def authentication(app, yandex_pay_settings, user, aioresponses_mocker):
    aioresponses_mocker.get(
        re.compile(f'^{yandex_pay_settings.BLACKBOX_API_URL}.*method=sessionid.*'),
        status=200,
        payload={
            'status': {'value': 'VALID'},
            'uid': {'value': user.uid},
            'login_id': 'login_id',
            'user_ticket': FAKE_USER_TICKET,
        }
    )

    key = app.server.app.file_storage.csrf_anti_forgery_key.get_actual_key()
    return {
        'headers': {
            yandex_pay_settings.API_CSRF_TOKEN_HEADER: CsrfChecker.generate_token(
                timestamp=int(utcnow().timestamp()),
                key=key,
                user=user,
                yandexuid='yandexuid'
            ),
        },
        'cookies': {
            'Session_id': 'sessionid',
            'yandexuid': 'yandexuid',
        },
    }


@pytest.mark.asyncio
async def test_address_collection(app, authentication, user, api_url, aioresponses_mocker):
    mock = aioresponses_mocker.get(
        f'{api_url}/list?user_id={user.uid}&user_type=uid&locale=ru',
        status=200,
        payload={
            'addresses': ADDRESSES
        }
    )
    r = await app.get('api/v1/addresses', **authentication)
    json_body = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(json_body['data']['results'], contains(*[has_entries(remove_unneeded_keys(x)) for x in ADDRESSES]))

    assert_that(
        mock.call_args_list[0][1],
        has_entries({
            'headers': has_entries({
                'x-ya-user-ticket': FAKE_USER_TICKET,
            })
        })
    )


@pytest.fixture
async def upsert_callback(params):
    def callback(url, **kwargs):
        assert_that(
            kwargs,
            has_entries({
                'json': has_entries(params),
                'headers': has_entries({
                    'x-ya-user-ticket': FAKE_USER_TICKET,
                }),
            })
        )

        return CallbackResult(payload={
            'status': 'ok',
            **kwargs['json'],
            'id': 'uid/1/pay/1',
        })
    return callback


@pytest.mark.asyncio
@pytest.mark.parametrize('without_street', [False, True])
async def test_create_address(
    app, authentication, user, params, api_url, aioresponses_mocker, upsert_callback, without_street
):
    if without_street:
        del params['street']
    aioresponses_mocker.post(
        f'{api_url}/create?user_id={user.uid}&user_type=uid',
        status=200,
        callback=upsert_callback,
    )
    r = await app.post('api/v1/addresses', json=params, **authentication)
    json_body = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(json_body['data']['address'], has_entries(params))


@pytest.mark.asyncio
async def test_update_address(app, authentication, user, params, api_url, aioresponses_mocker, upsert_callback):
    aioresponses_mocker.post(
        f'{api_url}/update?user_id={user.uid}&user_type=uid&id=uid/1/pay/1',
        status=200,
        callback=upsert_callback,
    )
    r = await app.put('api/v1/addresses/uid/1/pay/1', json=params, **authentication)
    json_body = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(json_body['data']['address'], has_entries(params))


@pytest.mark.asyncio
async def test_request_schema(app, authentication, user):
    params = {
        'country': ' ',
        'building': ' ',
    }
    r = await app.post('api/v1/addresses', json=params, **authentication)
    json_body = await r.json()

    assert_that(r.status, equal_to(400))
    assert_that(r.status, equal_to(400))
    assert_that(json_body['data']['params'], has_entries({
        'country': ['String should not be empty.'],
        'locality': ['Missing data for required field.'],
        'building': ['String should not be empty.'],
    }))


@pytest.mark.asyncio
async def test_get_address_by_id(app, authentication, user, api_url, aioresponses_mocker):
    mock = aioresponses_mocker.get(
        f'{api_url}/get?user_id={user.uid}&user_type=uid&locale=ru&id=uid/1/pay/1',
        status=200,
        payload=ADDRESSES[0]
    )
    r = await app.get('api/v1/addresses/uid/1/pay/1', **authentication)
    json_body = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(json_body['data']['address'], has_entries(remove_unneeded_keys(ADDRESSES[0])))

    assert_that(
        mock.call_args_list[0][1],
        has_entries({
            'headers': has_entries({
                'x-ya-user-ticket': FAKE_USER_TICKET,
            })
        })
    )


@pytest.mark.asyncio
async def test_address_not_found(app, authentication, user, api_url, aioresponses_mocker):
    aioresponses_mocker.get(
        f'{api_url}/get?user_id={user.uid}&user_type=uid&locale=ru&id=uid/1/pay/1',
        status=404,
        payload={
            'status': 'error'
        }
    )
    r = await app.get('api/v1/addresses/uid/1/pay/1', **authentication)

    assert_that(r.status, equal_to(404))


@pytest.mark.asyncio
async def test_address_locale(app, authentication, user, api_url, aioresponses_mocker):
    aioresponses_mocker.get(
        f'{api_url}/get?user_id={user.uid}&user_type=uid&locale=en&id=uid/1/pay/1',
        status=200,
        payload=ADDRESSES[0],
    )

    r = await app.get('api/v1/addresses/uid/1/pay/1', params={'lang': 'en'}, **authentication)

    assert_that(r.status, equal_to(200))


@pytest.mark.asyncio
async def test_delete_address(app, authentication, user, api_url, aioresponses_mocker):
    mock = aioresponses_mocker.get(
        f'{api_url}/delete?user_id={user.uid}&user_type=uid&id=uid/1/pay/1',
        status=200,
        payload={
            'status': 'ok'
        }
    )
    r = await app.delete('api/v1/addresses/uid/1/pay/1', **authentication)
    assert_that(r.status, equal_to(204))

    assert_that(
        mock.call_args_list[0][1],
        has_entries({
            'headers': has_entries({
                'x-ya-user-ticket': FAKE_USER_TICKET,
            })
        })
    )


@pytest.mark.asyncio
async def test_address_geocode_correct(geocoder_mock, app, authentication, appartment_precision):
    query, raw_data = appartment_precision
    geocoder_mock(raw_data)

    r = await app.post(
        'api/v1/addresses/geocode',
        json={'text': query},
        **authentication
    )
    data = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(data['data'], has_entries({
        'entrance': 'подъезд 1',
        'country': 'Россия',
        'longitude': 37.5896257716,
        'latitude': 55.7318705009,
        'room': 'кв. 15',
        'building': '3',
        'street': 'улица Льва Толстого',
        'zip': '119021',
        'locality': 'Москва',
        'formatted_address': 'Россия, Москва, улица Льва Толстого, 3, подъезд 1, этаж 2, кв. 15',
    }))


@pytest.mark.asyncio
async def test_address_geocode_multi_component(
    app, authentication, geocoder_mock, long_district_precision,
):
    query, raw_data = long_district_precision
    geocoder_mock(raw_data)

    r = await app.post(
        'api/v1/addresses/geocode',
        json={'text': query},
        **authentication
    )
    data = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(data['data'], has_entries({
        'entrance': None,
        'country': 'Россия',
        'longitude': 37.5318281662,
        'latitude': 55.702358192,
        'room': None,
        'building': '1Б',
        'district': 'Западный административный округ, район Раменки, микрорайон Ленинские Горы',
        'street': None,
        'zip': '119234',
        'locality': 'Москва',
        'formatted_address': query,
    }))


@pytest.mark.asyncio
async def test_address_geocode_without_apartment(geocoder_mock, app, authentication, house_precision):
    query, raw_data = house_precision
    geocoder_mock(raw_data)

    r = await app.post(
        'api/v1/addresses/geocode',
        json={'text': query},
        **authentication
    )
    data = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(data['data'], has_entries({
        'entrance': None,
        'country': 'Россия',
        'longitude': 37.5870925225,
        'latitude': 55.7339740457,
        'room': None,
        'building': '16',
        'street': 'улица Льва Толстого',
        'zip': '119021',
        'locality': 'Москва',
        'formatted_address': 'Россия, Москва, улица Льва Толстого, 16',
    }))


@pytest.mark.asyncio
async def test_address_geocode_empty_request(geocoder_mock, app, authentication, empty_query):
    query, raw_data = empty_query
    geocoder_mock(raw_data)

    r = await app.post(
        'api/v1/addresses/geocode',
        json={'text': query},
        **authentication
    )
    data = await r.json()

    assert_that(r.status, equal_to(404))
    assert_that(data['data'], equal_to({
        'message': 'ADDRESS_NOT_FOUND',
    }))


@pytest.mark.asyncio
async def test_address_geocode_strange_request(geocoder_mock, app, authentication, strange_request):
    query, raw_data = strange_request
    geocoder_mock(raw_data)

    r = await app.post(
        'api/v1/addresses/geocode',
        json={'text': query},
        **authentication
    )
    data = await r.json()

    assert_that(r.status, equal_to(200))
    assert_that(data['data'], has_entries({
        'entrance': None,
        'country': 'Польша',
        'longitude': 23.4825454318,
        'latitude': 51.1319430747,
        'room': None,
        'building': None,
        'street': None,
        'zip': '',
        'locality': None,
        'formatted_address': 'Польша, Люблинское воеводство, Хелм, Парк-КСКСКС-леця',
    }))


@pytest.mark.asyncio
async def test_address_geocode_locale(
    aioresponses_mocker,
    yandex_pay_settings,
    app,
    authentication,
    appartment_precision
):
    _, raw = appartment_precision

    aioresponses_mocker.post(
        f'{yandex_pay_settings.GEOCODER_API_URL}?lang=en&ms=pb&origin=yandexpay&results=1&type=geo',
        status=200,
        body=raw
    )

    r = await app.post(
        'api/v1/addresses/geocode',
        json={'text': '-'},
        params={'lang': 'en'},
        **authentication
    )

    assert_that(r.status, equal_to(200))
