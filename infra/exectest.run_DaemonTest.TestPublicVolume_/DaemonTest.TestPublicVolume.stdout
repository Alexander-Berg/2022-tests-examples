revision: 1
id: "TestPublicVolume"
host_timestamp: 42
resource_gang {
  layers {
    id: "Layer_MyRootFS"
    state: ELayerState_READY
    download_attempts_counter: 1
    verification_attempts_counter: 1
    fail_counter: 42
    ready {
      status: EConditionStatus_TRUE
      reason: "READY"
      last_transition_time {
        seconds: 42
        nanos: 42
      }
    }
    in_progress {
      status: EConditionStatus_FALSE
      reason: "READY"
      last_transition_time {
        seconds: 42
        nanos: 42
      }
    }
    revision: 1
    spec_timestamp: 1
    download_progress {
      percent: 100
    }
    failed {
      status: EConditionStatus_FALSE
      reason: "READY"
      last_transition_time {
        seconds: 42
        nanos: 42
      }
    }
  }
}
workloads {
  id: "MyWorkload"
  state: EWorkloadState_ACTIVE
  init {
    zero_return_code_counter: 1
    time_limit {
      consecutive_successes_counter: 1
    }
    current {
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
    }
    last {
      state: EContainerState_EXITED
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
      stdout_tail: "{\n  \"spec\":\n    {\n      \"revision\":1,\n      \"id\":\"TestPublicVolume\",\n      \"resources\":\n        {\n          \"layers\":\n            [\n              {\n                \"id\":\"Layer_MyRootFS\",\n                \"checksum\":\"MD5:0efbc360afb38c519b2e59ae9dd20b01\",\n                \"url\":\"local:search_ubuntu_precise/layer.tar\"\n              }\n            ]\n        },\n      \"workloads\":\n        [\n          {\n            \"id\":\"MyWorkload\",\n            \"box_ref\":\"test_box\",\n            \"init\":\n              [\n                {\n                  \"command_line\":\"bash -c \'cat /pod_agent_public/human_readable_current_spec.json\'\"\n                },\n                {\n                  \"command_line\":\"bash -c \'echo read_only_test > /pod_agent_public/read_only_test && echo read_only_test_failed || echo read_only_test_ok\'\"\n                }\n              ],\n            \"start\":\n              {\n                \"command_line\":\"bash -c \'echo start; sleep 1000\'\"\n              },\n            \"readiness_check\":\n              {\n                \"container\":\n                  {\n                    \"command_line\":\"echo readiness\"\n                  }\n              }\n          }\n        ],\n      \"boxes\":\n        [\n          {\n            \"id\":\"test_box\",\n            \"rootfs\":\n              {\n                \"layer_refs\":\n                  [\n                    \"Layer_MyRootFS\"\n                  ]\n              }\n          }\n        ],\n      \"mutable_workloads\":\n        [\n          {\n            \"workload_ref\":\"MyWorkload\"\n          }\n        ]\n    },\n  \"pod_dynamic_attributes\":\n    {\n      \"labels\":\n        {\n        },\n      \"annotations\":\n        {\n        }\n    },\n  \"spec_timestamp\":1\n}"
    }
    container_name: "TestPublicVolume_box_test_box/workload_MyWorkload_init0"
    last_failed {
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
    }
  }
  init {
    zero_return_code_counter: 1
    time_limit {
      consecutive_successes_counter: 1
    }
    current {
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
    }
    last {
      state: EContainerState_EXITED
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
      stderr_tail: "bash: /pod_agent_public/read_only_test: Read-only file system\n"
      stdout_tail: "read_only_test_ok\n"
    }
    container_name: "TestPublicVolume_box_test_box/workload_MyWorkload_init1"
    last_failed {
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
    }
  }
  start {
    current {
      state: EContainerState_RUNNING
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
      stdout_tail: "start\n"
    }
    last {
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
    }
    container_name: "TestPublicVolume_box_test_box/workload_MyWorkload_start"
    last_failed {
      start_time {
        seconds: 42
        nanos: 42
      }
      death_time {
        seconds: 42
        nanos: 42
      }
    }
  }
  readiness_status {
    container_status {
      zero_return_code_counter: 1
      time_limit {
        consecutive_successes_counter: 1
      }
      current {
        state: EContainerState_WAITING_RESTART
        start_time {
          seconds: 42
          nanos: 42
        }
        death_time {
          seconds: 42
          nanos: 42
        }
      }
      last {
        state: EContainerState_EXITED
        start_time {
          seconds: 42
          nanos: 42
        }
        death_time {
          seconds: 42
          nanos: 42
        }
        stdout_tail: "readiness\n"
      }
      container_name: "TestPublicVolume_box_test_box/workload_MyWorkload_readiness"
      last_failed {
        start_time {
          seconds: 42
          nanos: 42
        }
        death_time {
          seconds: 42
          nanos: 42
        }
      }
    }
    has_readiness: true
  }
  ready {
    status: EConditionStatus_TRUE
    reason: "ACTIVE"
    last_transition_time {
      seconds: 42
      nanos: 42
    }
  }
  in_progress {
    status: EConditionStatus_FALSE
    reason: "ACTIVE"
    last_transition_time {
      seconds: 42
      nanos: 42
    }
  }
  liveness_status {
  }
  revision: 1
  stop_status {
    has_stop: true
  }
  destroy_status {
  }
  spec_timestamp: 1
  box_ref: "test_box"
  failed {
    status: EConditionStatus_FALSE
    reason: "ACTIVE"
    last_transition_time {
      seconds: 42
      nanos: 42
    }
  }
}
boxes {
  id: "test_box"
  state: EBoxState_READY
  ready {
    status: EConditionStatus_TRUE
    reason: "READY"
    last_transition_time {
      seconds: 42
      nanos: 42
    }
  }
  in_progress {
    status: EConditionStatus_FALSE
    reason: "READY"
    last_transition_time {
      seconds: 42
      nanos: 42
    }
  }
  revision: 1
  fail_counter: 42
  container_name: "TestPublicVolume_box_test_box"
  spec_timestamp: 1
  rootfs_layer_refs: "Layer_MyRootFS"
  failed {
    status: EConditionStatus_FALSE
    reason: "READY"
    last_transition_time {
      seconds: 42
      nanos: 42
    }
  }
}
ready {
  status: EConditionStatus_TRUE
  reason: "WORKLOADS_READY"
  last_transition_time {
    seconds: 42
    nanos: 42
  }
}
in_progress {
  status: EConditionStatus_FALSE
  reason: "ALL_READY"
  last_transition_time {
    seconds: 42
    nanos: 42
  }
}
resource_cache {
}
spec_timestamp: 1
failed {
  status: EConditionStatus_FALSE
  reason: "ALL_OK"
  last_transition_time {
    seconds: 42
    nanos: 42
  }
}

{
  "spec":
    {
      "revision":1,
      "id":"TestPublicVolume",
      "resources":
        {
          "layers":
            [
              {
                "id":"Layer_MyRootFS",
                "checksum":"MD5:0efbc360afb38c519b2e59ae9dd20b01",
                "url":"local:search_ubuntu_precise/layer.tar"
              }
            ]
        },
      "workloads":
        [
          {
            "id":"MyWorkload",
            "box_ref":"test_box",
            "init":
              [
                {
                  "command_line":"bash -c 'cat /pod_agent_public/human_readable_current_spec.json'"
                },
                {
                  "command_line":"bash -c 'echo read_only_test > /pod_agent_public/read_only_test && echo read_only_test_failed || echo read_only_test_ok'"
                }
              ],
            "start":
              {
                "command_line":"bash -c 'echo start; sleep 1000'"
              },
            "readiness_check":
              {
                "container":
                  {
                    "command_line":"echo readiness"
                  }
              }
          }
        ],
      "boxes":
        [
          {
            "id":"test_box",
            "rootfs":
              {
                "layer_refs":
                  [
                    "Layer_MyRootFS"
                  ]
              }
          }
        ],
      "mutable_workloads":
        [
          {
            "workload_ref":"MyWorkload"
          }
        ]
    },
  "pod_dynamic_attributes":
    {
      "labels":
        {
        },
      "annotations":
        {
        }
    },
  "spec_timestamp":1
}
