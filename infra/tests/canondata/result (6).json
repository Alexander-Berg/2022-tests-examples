{
    "test_walle_bmc.test_returns_warn_on_exceptions[exc0]": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: i am not ok, please call mighty wall-e developers\"]}}",
                "service": "walle_bmc",
                "status": "WARN"
            }
        ]
    },
    "test_walle_bmc.test_returns_warn_on_exceptions[exc1]": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: hwwatcher module 'bmc' is disabled\"]}}",
                "service": "walle_bmc",
                "status": "WARN"
            }
        ]
    },
    "test_walle_bmc.test_returns_warn_on_exceptions[exc2]": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: hw-watcher does not work under root account\"]}}",
                "service": "walle_bmc",
                "status": "WARN"
            }
        ]
    },
    "test_walle_bmc.test_statuses_correnspondence[FAILED-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_bmc",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_bmc.test_statuses_correnspondence[OK-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"OK\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_bmc",
                "status": "OK"
            }
        ]
    },
    "test_walle_bmc.test_statuses_correnspondence[UNKNOWN-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"UNKNOWN\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_bmc",
                "status": "OK"
            }
        ]
    },
    "test_walle_bmc.test_statuses_correnspondence[WARNING-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"WARNING\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_bmc",
                "status": "OK"
            }
        ]
    },
    "test_walle_bmc.test_statuses_correnspondence[WTF-Status.WARN]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"WTF\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_bmc",
                "status": "WARN"
            }
        ]
    },
    "test_walle_clocksource.test_crit_when_hw_watcher_status_is_failed": {
        "events": [
            {
                "description": "{\"status\": \"FAILED\", \"timestamp\": 1, \"reason\": \"bios: unstable hpet clocksource\"}",
                "service": "walle_clocksource",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_clocksource.test_ok_when_hw_watcher_status_is_ok": {
        "events": [
            {
                "description": "{\"status\": \"OK\", \"timestamp\": 1, \"reason\": \"Last check: Fri Jul 04 17:06:11 2018\"}",
                "service": "walle_clocksource",
                "status": "OK"
            }
        ]
    },
    "test_walle_clocksource.test_warn_when_hw_watcher_crashes": {
        "events": [
            {
                "description": "{\"timestamp\": 1, \"reason\": \"Can't get status from hw-watcher: hw-watcher mock-failed\"}",
                "service": "walle_clocksource",
                "status": "WARN"
            }
        ]
    },
    "test_walle_clocksource.test_warn_when_hw_watcher_status_is_not_supported": {
        "events": [
            {
                "description": "{\"status\": \"NOT-AT-ALL\", \"timestamp\": 1, \"reason\": \"idk\"}",
                "service": "walle_clocksource",
                "status": "WARN"
            }
        ]
    },
    "test_walle_clocksource.test_warn_when_hw_watcher_status_is_warn": {
        "events": [
            {
                "description": "{\"status\": \"WARNING\", \"timestamp\": 1, \"reason\": \"bios: unstable hpet clocksource\"}",
                "service": "walle_clocksource",
                "status": "WARN"
            }
        ]
    },
    "test_walle_cpu.test_crit_when_some_cores_are_offline": {
        "events": [
            {
                "description": "{\"result\": {\"reason\": [\"offline cores: 0\"], \"board\": \"FakeBrD\", \"cpu_vendor\": \"FakeCpuVndr\"}}",
                "service": "walle_cpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_cpu.test_does_not_change_status_when_cant_read_board_name": {
        "events": [
            {
                "description": "{\"result\": {\"reason\": [\"Ok\"], \"board\": \"can not read board name: no such file or et all\", \"cpu_vendor\": \"FakeCpuVndr\"}}",
                "service": "walle_cpu",
                "status": "OK"
            }
        ]
    },
    "test_walle_cpu.test_does_not_change_status_when_cant_read_processor_name": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu.test_does_not_change_status_when_cant_read_processor_name/extracted"
                },
                "service": "walle_cpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_cpu.test_ok_when_online_cores_equals_present_cores": {
        "events": [
            {
                "description": "{\"result\": {\"reason\": [\"Ok\"], \"board\": \"FakeBrD\", \"cpu_vendor\": \"FakeCpuVndr\"}}",
                "service": "walle_cpu",
                "status": "OK"
            }
        ]
    },
    "test_walle_cpu.test_returns_warn_when_cant_read_file[offline]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu.test_returns_warn_when_cant_read_file_offline_/extracted"
                },
                "service": "walle_cpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_cpu.test_returns_warn_when_cant_read_file[online]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu.test_returns_warn_when_cant_read_file_online_/extracted"
                },
                "service": "walle_cpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_cpu.test_returns_warn_when_cant_read_file[present]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu.test_returns_warn_when_cant_read_file_present_/extracted"
                },
                "service": "walle_cpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_cpu.test_warn_when_online_cores_equals_present_cores_but_no_cores_offline": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu.test_warn_when_online_cores_equals_present_cores_but_no_cores_offline/extracted"
                },
                "service": "walle_cpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_cpu_caches.test_crit_when_hw_watcher_status_is_failed": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu_caches.test_crit_when_hw_watcher_status_is_failed/extracted"
                },
                "service": "walle_cpu_caches",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_cpu_caches.test_ok_when_hw_watcher_status_is_ok": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu_caches.test_ok_when_hw_watcher_status_is_ok/extracted"
                },
                "service": "walle_cpu_caches",
                "status": "OK"
            }
        ]
    },
    "test_walle_cpu_caches.test_warn_when_hw_watcher_crashes": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: hw-watcher mock-failed\"]}}",
                "service": "walle_cpu_caches",
                "status": "WARN"
            }
        ]
    },
    "test_walle_cpu_caches.test_warn_when_hw_watcher_status_is_not_supported": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_cpu_caches.test_warn_when_hw_watcher_status_is_not_supported/extracted"
                },
                "service": "walle_cpu_caches",
                "status": "WARN"
            }
        ]
    },
    "test_walle_disk.test_crit_when_hw_watcher_status_is_failed_or_unknown_[FAILED]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jun 22 19:31:11 2018\"], \"padding\": \"\"}}",
                "service": "walle_disk",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_disk.test_crit_when_hw_watcher_status_is_failed_or_unknown_[UNKNOWN]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"UNKNOWN\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jun 22 19:31:11 2018\"], \"padding\": \"\"}}",
                "service": "walle_disk",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_disk.test_ok_when_hw_watcher_status_is_one_of_ok_recovery_warning[OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"OK\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jun 22 19:31:11 2018\"], \"padding\": \"\"}}",
                "service": "walle_disk",
                "status": "OK"
            }
        ]
    },
    "test_walle_disk.test_ok_when_hw_watcher_status_is_one_of_ok_recovery_warning[RECOVERY]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"RECOVERY\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jun 22 19:31:11 2018\"], \"padding\": \"\"}}",
                "service": "walle_disk",
                "status": "OK"
            }
        ]
    },
    "test_walle_disk.test_ok_when_hw_watcher_status_is_one_of_ok_recovery_warning[WARNING]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"WARNING\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jun 22 19:31:11 2018\"], \"padding\": \"\"}}",
                "service": "walle_disk",
                "status": "OK"
            }
        ]
    },
    "test_walle_disk.test_warn_when_hw_watcher_failed": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: hw-watcher mock-failed\"]}}",
                "service": "walle_disk",
                "status": "WARN"
            }
        ]
    },
    "test_walle_disk.test_warn_when_hw_watcher_status_is_not_known_or_supported": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_disk.test_warn_when_hw_watcher_status_is_not_known_or_supported/extracted"
                },
                "service": "walle_disk",
                "status": "WARN"
            }
        ]
    },
    "test_walle_gpu.test_returns_ok_for_non_actionable_errors[reasons0-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1501254463, \"reason\": [\"availability: less local GPUs 8 than in bot 9\"]}}",
                "service": "walle_gpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_gpu.test_returns_ok_for_non_actionable_errors[reasons1-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1501254463, \"reason\": [\"ecc: ecc errors (device memory) exceeded threshold 10\"]}}",
                "service": "walle_gpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_gpu.test_returns_ok_for_non_actionable_errors[reasons2-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1501254463, \"reason\": [\"memory: retired memory detected (single bit ecc: 16)\"]}}",
                "service": "walle_gpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_gpu.test_returns_ok_for_non_actionable_errors[reasons3-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1501254463, \"reason\": [\"driver: driver gone crazy and crashed into the wall\"]}}",
                "service": "walle_gpu",
                "status": "OK"
            }
        ]
    },
    "test_walle_gpu.test_returns_ok_for_non_actionable_errors[reasons4-Status.CRIT]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_gpu.test_returns_ok_for_non_actionable_errors_reasons4-Status.CRIT_/extracted"
                },
                "service": "walle_gpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_gpu.test_returns_warn_on_exceptions[exc0-random error]": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: random error\"]}}",
                "service": "walle_gpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_gpu.test_returns_warn_on_exceptions[exc1-hwwatcher module 'gpu' is disabled]": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: hwwatcher module 'gpu' is disabled\"]}}",
                "service": "walle_gpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_gpu.test_returns_warn_on_exceptions[exc2-won't run under root]": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: won't run under root\"]}}",
                "service": "walle_gpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_gpu.test_status_matching[FAILED-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_gpu",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_gpu.test_status_matching[OK-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"OK\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_gpu",
                "status": "OK"
            }
        ]
    },
    "test_walle_gpu.test_status_matching[UNKNOWN-Status.WARN]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"UNKNOWN\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_gpu",
                "status": "WARN"
            }
        ]
    },
    "test_walle_gpu.test_status_matching[WARNING-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"WARNING\", \"timestamp\": 1501254463, \"reason\": [\"Last check: Fri Jul 28 18:07:43 2017\"]}}",
                "service": "walle_gpu",
                "status": "OK"
            }
        ]
    },
    "test_walle_link.test_crit_when_hw_watcher_status_is_failed": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"FAILED\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jul 04 17:06:11 2018\"]}}",
                "service": "walle_link",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_link.test_ok_when_hw_watcher_status_is_ok": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"OK\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jul 04 17:06:11 2018\"]}}",
                "service": "walle_link",
                "status": "OK"
            }
        ]
    },
    "test_walle_link.test_warn_when_hw_watcher_crashes": {
        "events": [
            {
                "description": "{\"result\": {\"timestamp\": 1, \"reason\": [\"Can't get status from hw-watcher: hw-watcher mock-failed\"]}}",
                "service": "walle_link",
                "status": "WARN"
            }
        ]
    },
    "test_walle_link.test_warn_when_hw_watcher_status_is_not_supported": {
        "events": [
            {
                "description": "{\"result\": {\"status\": \"NOT-AT-ALL\", \"timestamp\": 1, \"reason\": [\"Last check: Fri Jul 04 17:06:11 2018\"]}}",
                "service": "walle_link",
                "status": "WARN"
            }
        ]
    },
    "test_walle_memory.test_crit_when_ecc_has_status_unknown": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_crit_when_ecc_has_status_unknown/extracted"
                },
                "service": "walle_memory",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_memory.test_crit_when_either_ecc_or_mem_is_failed[module_statuses0]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_crit_when_either_ecc_or_mem_is_failed_module_statuses0_/extracted"
                },
                "service": "walle_memory",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_memory.test_crit_when_either_ecc_or_mem_is_failed[module_statuses1]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_crit_when_either_ecc_or_mem_is_failed_module_statuses1_/extracted"
                },
                "service": "walle_memory",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_memory.test_ok_when_both_ecc_and_mem_are_ok": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_ok_when_both_ecc_and_mem_are_ok/extracted"
                },
                "service": "walle_memory",
                "status": "OK"
            }
        ]
    },
    "test_walle_memory.test_strips_error_message[module_statuses0]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_strips_error_message_module_statuses0_/extracted"
                },
                "service": "walle_memory",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_memory.test_strips_error_message[module_statuses1]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_strips_error_message_module_statuses1_/extracted"
                },
                "service": "walle_memory",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_memory.test_warn_when_either_ecc_or_mem_crashes_hw_watcher[ecc]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_warn_when_either_ecc_or_mem_crashes_hw_watcher_ecc_/extracted"
                },
                "service": "walle_memory",
                "status": "WARN"
            }
        ]
    },
    "test_walle_memory.test_warn_when_either_ecc_or_mem_crashes_hw_watcher[mem]": {
        "events": [
            {
                "description": {
                    "uri": "file://test_walle_memory.test_warn_when_either_ecc_or_mem_crashes_hw_watcher_mem_/extracted"
                },
                "service": "walle_memory",
                "status": "WARN"
            }
        ]
    },
    "test_walle_meta.test_detects_broken_hw_watcher": {
        "events": [
            {
                "description": "{\"hw_watcher\": \"Much mysterious exception\", \"timestamp\": 1, \"bundle\": 3919006}",
                "service": "walle_meta",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_meta.test_detects_missing_hw_watcher": {
        "events": [
            {
                "description": "{\"hw_watcher\": \"File \\\"/usr/sbin/hw_watcher\\\" does not exist\", \"timestamp\": 1, \"bundle\": 3919006}",
                "service": "walle_meta",
                "status": "WARN"
            }
        ]
    },
    "test_walle_meta.test_parses_hw_watcher_version": {
        "events": [
            {
                "description": "{\"hw_watcher\": \"0.6.0.1\", \"timestamp\": 1, \"bundle\": 3919006}",
                "service": "walle_meta",
                "status": "OK"
            }
        ]
    },
    "test_walle_reboots.test_check_expected_status_reboot[1-2-2-Status.OK]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 2, \"reason\": \"Reboot counts: 1 per two days, 2 per week.\"}}",
                "service": "walle_reboots",
                "status": "OK"
            }
        ]
    },
    "test_walle_reboots.test_check_expected_status_reboot[2-5-5-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 5, \"reason\": \"Reboot counts: 2 per two days, 5 per week.\"}}",
                "service": "walle_reboots",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_reboots.test_check_expected_status_reboot[3-3-3-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 3, \"reason\": \"Reboot counts: 3 per two days, 3 per week.\"}}",
                "service": "walle_reboots",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_reboots.test_check_expected_status_reboot[3-4-3-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 3, \"reason\": \"Reboot counts: 3 per two days, 4 per week.\"}}",
                "service": "walle_reboots",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_reboots.test_check_expected_status_reboot[3-5-5-Status.CRIT]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 5, \"reason\": \"Reboot counts: 3 per two days, 5 per week.\"}}",
                "service": "walle_reboots",
                "status": "CRIT"
            }
        ]
    },
    "test_walle_reboots.test_check_negative_reboot_count[-1--1-0]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 0, \"reason\": \"Reboot counts: 0 per two days, 0 per week.\"}}",
                "service": "walle_reboots",
                "status": "OK"
            }
        ]
    },
    "test_walle_reboots.test_check_negative_reboot_count[-1-0-0]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 0, \"reason\": \"Reboot counts: 0 per two days, 0 per week.\"}}",
                "service": "walle_reboots",
                "status": "OK"
            }
        ]
    },
    "test_walle_reboots.test_check_negative_reboot_count[0--1-0]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 0, \"reason\": \"Reboot counts: 0 per two days, 0 per week.\"}}",
                "service": "walle_reboots",
                "status": "OK"
            }
        ]
    },
    "test_walle_reboots.test_check_negative_reboot_count[1--1-1]": {
        "events": [
            {
                "description": "{\"result\": {\"count\": 1, \"reason\": \"Reboot counts: 1 per two days, 0 per week.\"}}",
                "service": "walle_reboots",
                "status": "OK"
            }
        ]
    }
}
