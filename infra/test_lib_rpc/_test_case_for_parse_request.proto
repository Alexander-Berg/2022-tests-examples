syntax = "proto2";

package test_case_for_parse_request;

import "test_awacs_field_schema.proto";


message EmbeddedTest {
    optional int32 int_field = 1;
    optional float float_field = 2;
    optional string string_field = 3;
    optional bool bool_field = 4;
    repeated int32 repeated_field = 5;
}


message Test1 {
    optional int32 int_field = 1;
    optional float float_field = 2;
    optional string string_field = 3;
    optional bool bool_field = 4;
    repeated int32 repeated_field = 5;
    optional EmbeddedTest message_field = 6;
}


message ValidationEmbeddedTest {
    optional int32 int_field = 1 [(test_awacs_field_schema.minimum) = 0, (test_awacs_field_schema.maximum) = 100];
    optional float float_field = 2 [(test_awacs_field_schema.minimum) = 0, (test_awacs_field_schema.maximum) = 100];
    optional string string_field = 3 [
                            default="0",
                            (test_awacs_field_schema.minLength) = 2,
                            (test_awacs_field_schema.maxLength) = 10,
                            (test_awacs_field_schema.pattern) = "[0-9]{1,10}$"];
}

message ValidationTest {
    optional ValidationEmbeddedTest message = 1;
    repeated int32 repeated_int = 2 [(test_awacs_field_schema.minimum) = 0, (test_awacs_field_schema.maximum) = 100];
    repeated float repeated_float = 3 [(test_awacs_field_schema.minimum) = 0, (test_awacs_field_schema.maximum) = 100];
    repeated string repeated_string = 4 [
                            (test_awacs_field_schema.minLength) = 2,
                            (test_awacs_field_schema.maxLength) = 10,
                            (test_awacs_field_schema.pattern) = "[0-9]{1,10}$"];
    repeated ValidationEmbeddedTest repeated_message = 5;
}